<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170816 05:07:47.534" generator="Robot 3.0.2 (Python 2.7.12 on linux2)">
<suite source="/tmp/fspcibld/30956/obmc-robot/tests" name="Tests" id="s1">
<kw name="System Driver Data" type="setup">
<doc>System driver information.</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170816 05:07:47.996" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status endtime="20170816 05:07:47.996" status="FAIL" starttime="20170816 05:07:47.995"></status>
</kw>
<msg timestamp="20170816 05:07:47.996" level="INFO">${has_host} = False</msg>
<status endtime="20170816 05:07:47.996" status="PASS" starttime="20170816 05:07:47.995"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170816 05:07:47.997" status="PASS" starttime="20170816 05:07:47.997"></status>
</kw>
<status endtime="20170816 05:07:47.997" status="PASS" starttime="20170816 05:07:47.996"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170816 05:07:47.998" level="INFO">${port_num} = 22</msg>
<status endtime="20170816 05:07:47.998" status="PASS" starttime="20170816 05:07:47.998"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170816 05:07:47.999" level="INFO">${SSH_PORT} = 22</msg>
<status endtime="20170816 05:07:47.999" status="PASS" starttime="20170816 05:07:47.999"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170816 05:07:47.999" level="INFO">${https_num} = 443</msg>
<status endtime="20170816 05:07:48.000" status="PASS" starttime="20170816 05:07:47.999"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170816 05:07:48.001" level="INFO">${AUTH_URI} = https://9.41.166.169:443</msg>
<status endtime="20170816 05:07:48.001" status="PASS" starttime="20170816 05:07:48.000"></status>
</kw>
<status endtime="20170816 05:07:48.002" status="PASS" starttime="20170816 05:07:47.998"></status>
</kw>
<status endtime="20170816 05:07:48.002" status="PASS" starttime="20170816 05:07:47.997"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170816 05:07:48.003" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status endtime="20170816 05:07:48.003" status="FAIL" starttime="20170816 05:07:48.002"></status>
</kw>
<msg timestamp="20170816 05:07:48.003" level="INFO">${has_port} = False</msg>
<status endtime="20170816 05:07:48.003" status="PASS" starttime="20170816 05:07:48.002"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170816 05:07:48.004" status="PASS" starttime="20170816 05:07:48.004"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170816 05:07:48.005" status="PASS" starttime="20170816 05:07:48.005"></status>
</kw>
<status endtime="20170816 05:07:48.005" status="PASS" starttime="20170816 05:07:48.004"></status>
</kw>
<status endtime="20170816 05:07:48.005" status="PASS" starttime="20170816 05:07:48.003"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170816 05:07:48.006" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170816 05:07:49.706" level="INFO">Read output: root@witherspoon:~#</msg>
<status endtime="20170816 05:07:49.707" status="PASS" starttime="20170816 05:07:48.005"></status>
</kw>
<status endtime="20170816 05:07:49.707" status="PASS" starttime="20170816 05:07:47.994"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Driver Details</arg>
</arguments>
<kw name="Log BMC Driver Details">
<doc>Get BMC driver details and log.</doc>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DRIVER_CMD}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170816 05:07:49.708" level="INFO">Executing command 'cat /etc/os-release | grep ^VERSION_ID='.</msg>
<msg timestamp="20170816 05:07:49.785" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170816 05:07:49.785" level="INFO">${output} = VERSION_ID="v1.99.8-260-g520e8be"</msg>
<msg timestamp="20170816 05:07:49.785" level="INFO">${stderr} = </msg>
<status endtime="20170816 05:07:49.785" status="PASS" starttime="20170816 05:07:49.708"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170816 05:07:49.786" level="INFO">Length is 0</msg>
<status endtime="20170816 05:07:49.786" status="PASS" starttime="20170816 05:07:49.786"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20170816 05:07:49.786" level="INFO">VERSION_ID="v1.99.8-260-g520e8be"</msg>
<status endtime="20170816 05:07:49.786" status="PASS" starttime="20170816 05:07:49.786"></status>
</kw>
<status endtime="20170816 05:07:49.787" status="PASS" starttime="20170816 05:07:49.708"></status>
</kw>
<status endtime="20170816 05:07:49.787" status="PASS" starttime="20170816 05:07:49.707"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log PNOR Driver Details</arg>
</arguments>
<kw name="Log PNOR Driver Details">
<doc>Get PNOR driver details and log.</doc>
<kw library="utils" name="Execute Command On BMC">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>${PNOR_CMD}</arg>
</arguments>
<assign>
<var>${pnor_details}</var>
</assign>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170816 05:07:49.788" level="INFO">Executing command '/usr/sbin/pflash -r /tmp/out.txt -P VERSION; cat /tmp/out.txt'.</msg>
<msg timestamp="20170816 05:07:49.877" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170816 05:07:49.877" level="INFO">${stdout} = </msg>
<msg timestamp="20170816 05:07:49.877" level="INFO">${stderr} = sh: /usr/sbin/pflash: No such file or directory
cat: can't open '/tmp/out.txt': No such file or directory</msg>
<status endtime="20170816 05:07:49.877" status="PASS" starttime="20170816 05:07:49.788"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170816 05:07:49.877" level="INFO">Length is 105</msg>
<msg timestamp="20170816 05:07:49.877" level="FAIL">'sh: /usr/sbin/pflash: No such file or directory
cat: can't open '/tmp/out.txt': No such file or directory' should be empty.</msg>
<status endtime="20170816 05:07:49.878" status="FAIL" starttime="20170816 05:07:49.877"></status>
</kw>
<status endtime="20170816 05:07:49.878" status="FAIL" starttime="20170816 05:07:49.787"></status>
</kw>
<status endtime="20170816 05:07:49.878" status="FAIL" starttime="20170816 05:07:49.787"></status>
</kw>
<status endtime="20170816 05:07:49.878" status="PASS" starttime="20170816 05:07:49.787"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Model</arg>
</arguments>
<kw name="Log BMC Model">
<doc>Fetch BMC Model name from system and log.</doc>
<kw library="utils" name="Get BMC System Model">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${bmc_model}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170816 05:07:50.062" level="INFO">host=9.41.166.169
width=80
timeout=25 seconds
path_separator=/
alias=bmc_connection
port=22
term_type=vt100
index=1
prompt=# 
newline=

encoding=UTF-8
height=24</msg>
<msg timestamp="20170816 05:07:50.063" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170816 05:07:50.855" level="INFO">Read output: root@witherspoon:~#</msg>
<msg timestamp="20170816 05:07:50.855" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170816 05:07:50.952" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170816 05:07:50.960" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170816 05:07:50.960" level="INFO">${stderr} = </msg>
<msg timestamp="20170816 05:07:50.960" level="INFO">${rc} = 0</msg>
<status endtime="20170816 05:07:50.960" status="PASS" starttime="20170816 05:07:49.879"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170816 05:07:50.960" level="INFO">Length is 0</msg>
<status endtime="20170816 05:07:50.961" status="PASS" starttime="20170816 05:07:50.960"></status>
</kw>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170816 05:07:50.961" level="INFO">Length is 11</msg>
<status endtime="20170816 05:07:50.961" status="PASS" starttime="20170816 05:07:50.961"></status>
</kw>
<msg timestamp="20170816 05:07:50.961" level="INFO">${bmc_model} = Witherspoon</msg>
<status endtime="20170816 05:07:50.961" status="PASS" starttime="20170816 05:07:49.879"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>BMC Model=${bmc_model}</arg>
</arguments>
<msg timestamp="20170816 05:07:50.962" level="INFO">BMC Model=Witherspoon</msg>
<status endtime="20170816 05:07:50.962" status="PASS" starttime="20170816 05:07:50.961"></status>
</kw>
<status endtime="20170816 05:07:50.962" status="PASS" starttime="20170816 05:07:49.878"></status>
</kw>
<status endtime="20170816 05:07:50.962" status="PASS" starttime="20170816 05:07:49.878"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Enable Core Dump On BMC</arg>
</arguments>
<kw library="utils" name="Enable Core Dump On BMC">
<doc>Enable core dump collection.</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170816 05:07:50.964" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status endtime="20170816 05:07:50.964" status="FAIL" starttime="20170816 05:07:50.964"></status>
</kw>
<msg timestamp="20170816 05:07:50.964" level="INFO">${has_host} = False</msg>
<status endtime="20170816 05:07:50.964" status="PASS" starttime="20170816 05:07:50.963"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170816 05:07:50.965" status="PASS" starttime="20170816 05:07:50.965"></status>
</kw>
<status endtime="20170816 05:07:50.966" status="PASS" starttime="20170816 05:07:50.965"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170816 05:07:50.967" level="INFO">${port_num} = 22</msg>
<status endtime="20170816 05:07:50.967" status="PASS" starttime="20170816 05:07:50.967"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170816 05:07:50.967" level="INFO">${SSH_PORT} = 22</msg>
<status endtime="20170816 05:07:50.967" status="PASS" starttime="20170816 05:07:50.967"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170816 05:07:50.968" level="INFO">${https_num} = 443</msg>
<status endtime="20170816 05:07:50.968" status="PASS" starttime="20170816 05:07:50.968"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170816 05:07:50.969" level="INFO">${AUTH_URI} = https://9.41.166.169:443</msg>
<status endtime="20170816 05:07:50.969" status="PASS" starttime="20170816 05:07:50.968"></status>
</kw>
<status endtime="20170816 05:07:50.969" status="PASS" starttime="20170816 05:07:50.966"></status>
</kw>
<status endtime="20170816 05:07:50.969" status="PASS" starttime="20170816 05:07:50.966"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170816 05:07:50.970" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status endtime="20170816 05:07:50.970" status="FAIL" starttime="20170816 05:07:50.969"></status>
</kw>
<msg timestamp="20170816 05:07:50.970" level="INFO">${has_port} = False</msg>
<status endtime="20170816 05:07:50.970" status="PASS" starttime="20170816 05:07:50.969"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170816 05:07:50.972" status="PASS" starttime="20170816 05:07:50.971"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170816 05:07:50.972" status="PASS" starttime="20170816 05:07:50.972"></status>
</kw>
<status endtime="20170816 05:07:50.972" status="PASS" starttime="20170816 05:07:50.971"></status>
</kw>
<status endtime="20170816 05:07:50.973" status="PASS" starttime="20170816 05:07:50.970"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170816 05:07:50.973" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170816 05:07:52.653" level="INFO">Read output: root@witherspoon:~#</msg>
<status endtime="20170816 05:07:52.653" status="PASS" starttime="20170816 05:07:50.973"></status>
</kw>
<status endtime="20170816 05:07:52.653" status="PASS" starttime="20170816 05:07:50.963"></status>
</kw>
<kw library="utils" name="Execute Command On BMC">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern</arg>
</arguments>
<assign>
<var>${core_pattern}</var>
</assign>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170816 05:07:52.654" level="INFO">Executing command 'echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern'.</msg>
<msg timestamp="20170816 05:07:52.731" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170816 05:07:52.731" level="INFO">${stdout} = /tmp/core_%e.%p</msg>
<msg timestamp="20170816 05:07:52.731" level="INFO">${stderr} = </msg>
<status endtime="20170816 05:07:52.731" status="PASS" starttime="20170816 05:07:52.654"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170816 05:07:52.732" level="INFO">Length is 0</msg>
<status endtime="20170816 05:07:52.732" status="PASS" starttime="20170816 05:07:52.732"></status>
</kw>
<msg timestamp="20170816 05:07:52.732" level="INFO">${core_pattern} = /tmp/core_%e.%p</msg>
<status endtime="20170816 05:07:52.732" status="PASS" starttime="20170816 05:07:52.654"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${core_pattern}</arg>
<arg>/tmp/core_%e.%p</arg>
</arguments>
<status endtime="20170816 05:07:52.733" status="PASS" starttime="20170816 05:07:52.732"></status>
</kw>
<status endtime="20170816 05:07:52.733" status="PASS" starttime="20170816 05:07:50.962"></status>
</kw>
<status endtime="20170816 05:07:52.733" status="PASS" starttime="20170816 05:07:50.962"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${DEBUG_TARBALL_PATH}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Install Debug Tarball On BMC</arg>
<arg>${DEBUG_TARBALL_PATH}</arg>
</arguments>
<status endtime="20170816 05:07:52.734" status="PASS" starttime="20170816 05:07:52.733"></status>
</kw>
<status endtime="20170816 05:07:52.734" status="PASS" starttime="20170816 05:07:47.994"></status>
</kw>
<suite source="/tmp/fspcibld/30956/obmc-robot/tests/security" name="Security" id="s1-s1">
<suite source="/tmp/fspcibld/30956/obmc-robot/tests/security/test_ssl.robot" name="Test Ssl" id="s1-s1-s1">
<test name="Test SSL Connection" id="s1-s1-s1-t1">
<kw library="rest_client" name="Initialize OpenBMC">
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:07:52.821" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:07:52.821" status="PASS" starttime="20170816 05:07:52.820"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:07:52.822" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:07:52.822" status="PASS" starttime="20170816 05:07:52.821"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:07:52.822" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:07:52.822" status="PASS" starttime="20170816 05:07:52.822"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:07:52.823" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:07:52.823" status="PASS" starttime="20170816 05:07:52.823"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:07:53.027" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:07:53.027" status="PASS" starttime="20170816 05:07:52.824"></status>
</kw>
<msg timestamp="20170816 05:07:53.027" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:07:53.027" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:07:53.027" status="PASS" starttime="20170816 05:07:52.823"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:07:53.028" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:07:53.028" status="PASS" starttime="20170816 05:07:53.027"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:07:53.028" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:07:53.028" status="PASS" starttime="20170816 05:07:53.028"></status>
</kw>
<status endtime="20170816 05:07:53.028" status="PASS" starttime="20170816 05:07:52.820"></status>
</kw>
<status endtime="20170816 05:07:53.029" status="PASS" starttime="20170816 05:07:52.819"></status>
</kw>
<status endtime="20170816 05:07:53.029" status="PASS" starttime="20170816 05:07:52.819"></status>
</kw>
<kw library="openbmc_ffdc" name="FFDC On Test Case Fail" type="teardown">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="state_manager" name="Is Host Quiesced">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:07:53.034" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:07:53.035" status="PASS" starttime="20170816 05:07:53.034"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:07:53.035" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:07:53.035" status="PASS" starttime="20170816 05:07:53.035"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:07:53.036" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:07:53.036" status="PASS" starttime="20170816 05:07:53.036"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:07:53.037" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:07:53.037" status="PASS" starttime="20170816 05:07:53.036"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:07:53.259" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:07:53.260" status="PASS" starttime="20170816 05:07:53.038"></status>
</kw>
<msg timestamp="20170816 05:07:53.260" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:07:53.260" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:07:53.260" status="PASS" starttime="20170816 05:07:53.037"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:07:53.261" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:07:53.261" status="PASS" starttime="20170816 05:07:53.260"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:07:53.261" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:07:53.261" status="PASS" starttime="20170816 05:07:53.261"></status>
</kw>
<status endtime="20170816 05:07:53.261" status="PASS" starttime="20170816 05:07:53.033"></status>
</kw>
<status endtime="20170816 05:07:53.262" status="PASS" starttime="20170816 05:07:53.033"></status>
</kw>
<status endtime="20170816 05:07:53.262" status="PASS" starttime="20170816 05:07:53.032"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:07:53.262" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170816 05:07:53.262" status="PASS" starttime="20170816 05:07:53.262"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:07:53.264" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170816 05:07:53.264" status="PASS" starttime="20170816 05:07:53.264"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:07:53.265" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170816 05:07:53.265" status="PASS" starttime="20170816 05:07:53.265"></status>
</kw>
<status endtime="20170816 05:07:53.265" status="PASS" starttime="20170816 05:07:53.264"></status>
</kw>
<status endtime="20170816 05:07:53.266" status="PASS" starttime="20170816 05:07:53.263"></status>
</kw>
<status endtime="20170816 05:07:53.266" status="PASS" starttime="20170816 05:07:53.263"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:07:53.360" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 05:07:53.360" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:07:53.360" status="PASS" starttime="20170816 05:07:53.266"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:07:53.362" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:07:53.362" status="PASS" starttime="20170816 05:07:53.361"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:07:53.363" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:07:53.363" status="PASS" starttime="20170816 05:07:53.362"></status>
</kw>
<status endtime="20170816 05:07:53.363" status="PASS" starttime="20170816 05:07:53.362"></status>
</kw>
<status endtime="20170816 05:07:53.363" status="PASS" starttime="20170816 05:07:53.361"></status>
</kw>
<status endtime="20170816 05:07:53.363" status="PASS" starttime="20170816 05:07:53.360"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:07:53.363" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:07:53.363" status="PASS" starttime="20170816 05:07:53.363"></status>
</kw>
<msg timestamp="20170816 05:07:53.364" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:07:53.364" status="PASS" starttime="20170816 05:07:53.032"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:07:53.364" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:07:53.364" status="PASS" starttime="20170816 05:07:53.364"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:07:53.365" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:07:53.365" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:07:53.365" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status endtime="20170816 05:07:53.365" status="PASS" starttime="20170816 05:07:53.365"></status>
</kw>
<msg timestamp="20170816 05:07:53.365" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status endtime="20170816 05:07:53.366" status="PASS" starttime="20170816 05:07:53.031"></status>
</kw>
<msg timestamp="20170816 05:07:53.366" level="INFO">${host_state} = Off</msg>
<status endtime="20170816 05:07:53.366" status="PASS" starttime="20170816 05:07:53.030"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg timestamp="20170816 05:07:53.367" level="FAIL">Off != Quiesced</msg>
<status endtime="20170816 05:07:53.367" status="FAIL" starttime="20170816 05:07:53.366"></status>
</kw>
<msg timestamp="20170816 05:07:53.367" level="INFO">${status} = False</msg>
<status endtime="20170816 05:07:53.367" status="PASS" starttime="20170816 05:07:53.366"></status>
</kw>
<msg timestamp="20170816 05:07:53.367" level="INFO">${status} = False</msg>
<status endtime="20170816 05:07:53.367" status="PASS" starttime="20170816 05:07:53.030"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<status endtime="20170816 05:07:53.368" status="PASS" starttime="20170816 05:07:53.368"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status endtime="20170816 05:07:53.368" status="PASS" starttime="20170816 05:07:53.368"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170816 05:07:53.385" level="INFO">${FFDC_DIR_PATH_STYLE} = </msg>
<status endtime="20170816 05:07:53.385" status="PASS" starttime="20170816 05:07:53.370"></status>
</kw>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170816 05:07:53.399" level="INFO">${FFDC_DIR_PATH} = </msg>
<status endtime="20170816 05:07:53.399" status="PASS" starttime="20170816 05:07:53.385"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<kw library="openbmc_ffdc" name="Set Ffdc Defaults">
<doc>Set a default value for ffdc_dir_path and ffdc_prefix if they don't</doc>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170816 05:07:53.402" level="INFO">${cur_time} = 2017-08-16 05:07:53:402081</msg>
<status endtime="20170816 05:07:53.402" status="PASS" starttime="20170816 05:07:53.402"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170816 05:07:53.403" level="INFO">${cur_time} = 20170816050753402081</msg>
<status endtime="20170816 05:07:53.403" status="PASS" starttime="20170816 05:07:53.403"></status>
</kw>
<status endtime="20170816 05:07:53.404" status="PASS" starttime="20170816 05:07:53.401"></status>
</kw>
<msg timestamp="20170816 05:07:53.410" level="INFO">${FFDC_TIME} = 20170816050753402081</msg>
<kw library="openbmc_ffdc_utils" name="Get Test Dir and Name">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170816 05:07:53.412" level="INFO">${suite_name} = TestsSecurityTestSsl</msg>
<status endtime="20170816 05:07:53.412" status="PASS" starttime="20170816 05:07:53.411"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170816 05:07:53.412" level="INFO">${suite_name} = 20170816050753402081_TestsSecurityTestSsl</msg>
<status endtime="20170816 05:07:53.412" status="PASS" starttime="20170816 05:07:53.412"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170816 05:07:53.413" level="INFO">${test_name} = TestSSLConnection</msg>
<status endtime="20170816 05:07:53.413" status="PASS" starttime="20170816 05:07:53.413"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170816 05:07:53.414" level="INFO">${test_name} = 20170816050753402081_TestSSLConnection</msg>
<status endtime="20170816 05:07:53.414" status="PASS" starttime="20170816 05:07:53.413"></status>
</kw>
<status endtime="20170816 05:07:53.414" status="PASS" starttime="20170816 05:07:53.411"></status>
</kw>
<msg timestamp="20170816 05:07:53.414" level="INFO">${FFDC_DIR_PATH} = /tmp/fspcibld/30956/obmc-robot/logs/20170816050753402081_TestsSecurityTestSsl/20170816050753402081_TestSSLConnection/</msg>
<msg timestamp="20170816 05:07:53.418" level="INFO">${FFDC_PREFIX} = 20170816050753402081_</msg>
<status endtime="20170816 05:07:53.419" status="PASS" starttime="20170816 05:07:53.401"></status>
</kw>
<status endtime="20170816 05:07:53.419" status="PASS" starttime="20170816 05:07:53.400"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status endtime="20170816 05:07:53.419" status="PASS" starttime="20170816 05:07:53.419"></status>
</kw>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg html="yes" timestamp="20170816 05:07:53.420" level="INFO">Created directory '&lt;a href="file:///tmp/fspcibld/30956/obmc-robot/logs"&gt;/tmp/fspcibld/30956/obmc-robot/logs&lt;/a&gt;'.</msg>
<status endtime="20170816 05:07:53.420" status="PASS" starttime="20170816 05:07:53.420"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170816 05:07:53.421" level="FAIL">File '/tmp/fspcibld/30956/obmc-robot/logs/test_history.txt' does not exist.</msg>
<status endtime="20170816 05:07:53.421" status="FAIL" starttime="20170816 05:07:53.421"></status>
</kw>
<msg timestamp="20170816 05:07:53.421" level="INFO">${exist} = False</msg>
<status endtime="20170816 05:07:53.421" status="PASS" starttime="20170816 05:07:53.420"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg html="yes" timestamp="20170816 05:07:53.422" level="INFO">Created file '&lt;a href="file:///tmp/fspcibld/30956/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/30956/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20170816 05:07:53.423" status="PASS" starttime="20170816 05:07:53.422"></status>
</kw>
<status endtime="20170816 05:07:53.423" status="PASS" starttime="20170816 05:07:53.422"></status>
</kw>
<kw library="gen_robot_print" name="Rpvars">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status endtime="20170816 05:07:53.423" status="PASS" starttime="20170816 05:07:53.423"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170816 05:07:53.424" level="INFO">${cur_time} = 2017-08-16 05:07:53:423917</msg>
<status endtime="20170816 05:07:53.424" status="PASS" starttime="20170816 05:07:53.424"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170816 05:07:53.425" level="INFO">${cur_time} = 20170816050753423917</msg>
<status endtime="20170816 05:07:53.425" status="PASS" starttime="20170816 05:07:53.424"></status>
</kw>
<msg timestamp="20170816 05:07:53.425" level="INFO">${cur_time} = 20170816050753423917</msg>
<status endtime="20170816 05:07:53.425" status="PASS" starttime="20170816 05:07:53.423"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg html="yes" timestamp="20170816 05:07:53.426" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/30956/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/30956/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20170816 05:07:53.426" status="PASS" starttime="20170816 05:07:53.425"></status>
</kw>
<status endtime="20170816 05:07:53.426" status="PASS" starttime="20170816 05:07:53.369"></status>
</kw>
<status endtime="20170816 05:07:53.426" status="PASS" starttime="20170816 05:07:53.029"></status>
</kw>
<doc>This testcase is for testing the SSL connection to the
OpenBMC machine.</doc>
<tags>
<tag>Test_SSL_Connection</tag>
</tags>
<status endtime="20170816 05:07:53.426" critical="yes" status="PASS" starttime="20170816 05:07:52.818"></status>
</test>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions" type="teardown">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:07:53.427" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:07:53.427" status="PASS" starttime="20170816 05:07:53.427"></status>
</kw>
<doc>This testsuite is for testing SSL connection to OpenBMC</doc>
<status endtime="20170816 05:07:53.427" status="PASS" starttime="20170816 05:07:52.736"></status>
</suite>
<status endtime="20170816 05:07:53.429" status="PASS" starttime="20170816 05:07:52.734"></status>
</suite>
<suite source="/tmp/fspcibld/30956/obmc-robot/tests/test_basic_poweron.robot" name="Test Basic Poweron" id="s1-s2">
<test name="Power On Test" id="s1-s2-t1">
<kw library="utils" name="Start SOL Console Logging" type="setup">
<doc>Start system console log to file.</doc>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20170816 05:07:53.467" level="INFO">${default_file_path} = /tmp/9.41.166.169_os_console</msg>
<status endtime="20170816 05:07:53.468" status="PASS" starttime="20170816 05:07:53.467"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20170816 05:07:53.468" level="INFO">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status endtime="20170816 05:07:53.468" status="PASS" starttime="20170816 05:07:53.468"></status>
</kw>
<msg timestamp="20170816 05:07:53.469" level="INFO">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status endtime="20170816 05:07:53.469" status="PASS" starttime="20170816 05:07:53.467"></status>
</kw>
<kw library="utils" name="Stop SOL Console Logging">
<doc>Stop system console logging and return log output.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>return_data=${return_data}</arg>
</arguments>
<assign>
<var>${log_output}</var>
</assign>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20170816 05:07:53.470" level="INFO">${default_file_path} = /tmp/9.41.166.169_os_console</msg>
<status endtime="20170816 05:07:53.470" status="PASS" starttime="20170816 05:07:53.470"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20170816 05:07:53.471" level="INFO">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status endtime="20170816 05:07:53.471" status="PASS" starttime="20170816 05:07:53.471"></status>
</kw>
<msg timestamp="20170816 05:07:53.471" level="INFO">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status endtime="20170816 05:07:53.471" status="PASS" starttime="20170816 05:07:53.470"></status>
</kw>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170816 05:07:53.472" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status endtime="20170816 05:07:53.472" status="PASS" starttime="20170816 05:07:53.472"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170816 05:07:53.473" status="PASS" starttime="20170816 05:07:53.473"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170816 05:07:53.477" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20170816 05:07:53.481" level="INFO">${rc} = 0</msg>
<msg timestamp="20170816 05:07:53.481" level="INFO">${output} = /tmp/fspcibld/30956/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20170816 05:07:53.481" status="PASS" starttime="20170816 05:07:53.473"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170816 05:07:53.484" status="PASS" starttime="20170816 05:07:53.483"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status endtime="20170816 05:07:53.485" status="PASS" starttime="20170816 05:07:53.484"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170816 05:07:53.486" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169</msg>
<status endtime="20170816 05:07:53.486" status="PASS" starttime="20170816 05:07:53.485"></status>
</kw>
<msg timestamp="20170816 05:07:53.486" level="INFO">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169</msg>
<status endtime="20170816 05:07:53.486" status="PASS" starttime="20170816 05:07:53.472"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170816 05:07:53.487" level="INFO">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169' | egrep -v grep | cut -c10-14)</msg>
<status endtime="20170816 05:07:53.487" status="PASS" starttime="20170816 05:07:53.486"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170816 05:07:53.487" status="PASS" starttime="20170816 05:07:53.487"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg timestamp="20170816 05:07:53.496" level="INFO">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg timestamp="20170816 05:07:53.500" level="INFO">${rc} = 0</msg>
<msg timestamp="20170816 05:07:53.500" level="INFO">${os_con_pid} = </msg>
<status endtime="20170816 05:07:53.500" status="PASS" starttime="20170816 05:07:53.487"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status endtime="20170816 05:07:53.503" status="PASS" starttime="20170816 05:07:53.502"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170816 05:07:53.503" level="INFO">${cmd_buf} = kill -9 </msg>
<status endtime="20170816 05:07:53.503" status="PASS" starttime="20170816 05:07:53.503"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170816 05:07:53.504" status="PASS" starttime="20170816 05:07:53.504"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170816 05:07:53.505" level="INFO">${rc} = None</msg>
<msg timestamp="20170816 05:07:53.505" level="INFO">${output} = None</msg>
<status endtime="20170816 05:07:53.505" status="PASS" starttime="20170816 05:07:53.505"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170816 05:07:53.506" status="PASS" starttime="20170816 05:07:53.506"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="OperatingSystem" name="Copy File">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg timestamp="20170816 05:07:53.509" level="FAIL">Source file '/tmp/9.41.166.169_os_console' does not exist.</msg>
<status endtime="20170816 05:07:53.509" status="FAIL" starttime="20170816 05:07:53.507"></status>
</kw>
<status endtime="20170816 05:07:53.509" status="PASS" starttime="20170816 05:07:53.507"></status>
</kw>
<status endtime="20170816 05:07:53.509" status="PASS" starttime="20170816 05:07:53.506"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20170816 05:07:53.510" level="INFO">${output} = </msg>
<status endtime="20170816 05:07:53.510" status="PASS" starttime="20170816 05:07:53.510"></status>
</kw>
<kw library="BuiltIn" name="Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg timestamp="20170816 05:07:53.511" level="INFO">${loc_quiet} = 1</msg>
<status endtime="20170816 05:07:53.511" status="PASS" starttime="20170816 05:07:53.510"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw library="gen_cmd" name="Cmd Fnc">
<doc>Run the given command in a shell and return the shell return code.</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status endtime="20170816 05:07:53.555" status="PASS" starttime="20170816 05:07:53.513"></status>
</kw>
<msg timestamp="20170816 05:07:53.556" level="INFO">${rc} = 1</msg>
<msg timestamp="20170816 05:07:53.556" level="INFO">${output} = cat: /tmp/9.41.166.169_os_console: No such file or directory
</msg>
<status endtime="20170816 05:07:53.556" status="PASS" starttime="20170816 05:07:53.512"></status>
</kw>
<msg timestamp="20170816 05:07:53.557" level="INFO">${log_output} = cat: /tmp/9.41.166.169_os_console: No such file or directory
</msg>
<status endtime="20170816 05:07:53.557" status="PASS" starttime="20170816 05:07:53.469"></status>
</kw>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<msg html="yes" timestamp="20170816 05:07:53.559" level="INFO">Created file '&lt;a href="file:///tmp/9.41.166.169_os_console"&gt;/tmp/9.41.166.169_os_console&lt;/a&gt;'.</msg>
<status endtime="20170816 05:07:53.559" status="PASS" starttime="20170816 05:07:53.558"></status>
</kw>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${sub_cmd_buf}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170816 05:07:53.560" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status endtime="20170816 05:07:53.560" status="PASS" starttime="20170816 05:07:53.560"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170816 05:07:53.561" status="PASS" starttime="20170816 05:07:53.560"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170816 05:07:53.564" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20170816 05:07:53.567" level="INFO">${rc} = 0</msg>
<msg timestamp="20170816 05:07:53.567" level="INFO">${output} = /tmp/fspcibld/30956/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20170816 05:07:53.568" status="PASS" starttime="20170816 05:07:53.561"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170816 05:07:53.570" status="PASS" starttime="20170816 05:07:53.570"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status endtime="20170816 05:07:53.571" status="PASS" starttime="20170816 05:07:53.571"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170816 05:07:53.572" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169</msg>
<status endtime="20170816 05:07:53.572" status="PASS" starttime="20170816 05:07:53.572"></status>
</kw>
<msg timestamp="20170816 05:07:53.573" level="INFO">${sub_cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169</msg>
<status endtime="20170816 05:07:53.573" status="PASS" starttime="20170816 05:07:53.559"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${sub_cmd_buf} &gt; ${log_file_path} 2&gt;&amp;1 &amp;</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170816 05:07:53.573" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169 &gt; /tmp/9.41.166.169_os_console 2&gt;&amp;1 &amp;</msg>
<status endtime="20170816 05:07:53.573" status="PASS" starttime="20170816 05:07:53.573"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170816 05:07:53.574" status="PASS" starttime="20170816 05:07:53.573"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170816 05:07:53.577" level="INFO">Running command 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169 &gt; /tmp/9.41.166.169_os_console 2&gt;&amp;1 &amp;'.</msg>
<msg timestamp="20170816 05:07:53.580" level="INFO">${rc} = 0</msg>
<msg timestamp="20170816 05:07:53.580" level="INFO">${output} = </msg>
<status endtime="20170816 05:07:53.581" status="PASS" starttime="20170816 05:07:53.574"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
</arguments>
<status endtime="20170816 05:07:53.583" status="PASS" starttime="20170816 05:07:53.583"></status>
</kw>
<status endtime="20170816 05:07:53.584" status="PASS" starttime="20170816 05:07:53.466"></status>
</kw>
<kw library="BuiltIn" name="Repeat Keyword">
<doc>Executes the specified keyword multiple times.</doc>
<arguments>
<arg>${LOOP_COUNT} times</arg>
<arg>Host Off And On</arg>
</arguments>
<msg timestamp="20170816 05:07:53.585" level="INFO">Repeating keyword, round 1/2.</msg>
<kw name="Host Off And On">
<doc>Verify power off and on.</doc>
<kw library="state_manager" name="Initiate Host PowerOff">
<doc>Initiate host power off.</doc>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170816 05:07:53.587" level="INFO">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status endtime="20170816 05:07:53.587" status="PASS" starttime="20170816 05:07:53.586"></status>
</kw>
<kw library="rest_client" name="Write Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:07:53.588" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status endtime="20170816 05:07:53.588" status="PASS" starttime="20170816 05:07:53.587"></status>
</kw>
<kw library="rest_client" name="OpenBMC Put Request">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:07:53.592" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:07:53.593" status="PASS" starttime="20170816 05:07:53.592"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:07:53.594" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:07:53.594" status="PASS" starttime="20170816 05:07:53.594"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:07:53.595" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:07:53.595" status="PASS" starttime="20170816 05:07:53.594"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:07:53.595" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:07:53.595" status="PASS" starttime="20170816 05:07:53.595"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:07:54.147" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:07:54.147" status="PASS" starttime="20170816 05:07:53.596"></status>
</kw>
<msg timestamp="20170816 05:07:54.148" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:07:54.148" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:07:54.148" status="PASS" starttime="20170816 05:07:53.595"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:07:54.148" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:07:54.148" status="PASS" starttime="20170816 05:07:54.148"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:07:54.149" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:07:54.149" status="PASS" starttime="20170816 05:07:54.149"></status>
</kw>
<status endtime="20170816 05:07:54.149" status="PASS" starttime="20170816 05:07:53.591"></status>
</kw>
<status endtime="20170816 05:07:54.149" status="PASS" starttime="20170816 05:07:53.590"></status>
</kw>
<status endtime="20170816 05:07:54.149" status="PASS" starttime="20170816 05:07:53.589"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:07:54.150" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status endtime="20170816 05:07:54.150" status="PASS" starttime="20170816 05:07:54.150"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:07:54.151" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:07:54.151" status="PASS" starttime="20170816 05:07:54.150"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20170816 05:07:54.151" status="PASS" starttime="20170816 05:07:54.151"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:07:54.153" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Conten...</msg>
<status endtime="20170816 05:07:54.153" status="PASS" starttime="20170816 05:07:54.152"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:07:54.154" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20170816 05:07:54.154" status="PASS" starttime="20170816 05:07:54.153"></status>
</kw>
<status endtime="20170816 05:07:54.154" status="PASS" starttime="20170816 05:07:54.153"></status>
</kw>
<status endtime="20170816 05:07:54.154" status="PASS" starttime="20170816 05:07:54.151"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Put Request">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:07:54.802" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170816 05:07:54.802" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:07:54.802" status="PASS" starttime="20170816 05:07:54.154"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:07:54.804" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:07:54.804" status="PASS" starttime="20170816 05:07:54.803"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:07:54.804" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:07:54.805" status="PASS" starttime="20170816 05:07:54.804"></status>
</kw>
<status endtime="20170816 05:07:54.805" status="PASS" starttime="20170816 05:07:54.804"></status>
</kw>
<status endtime="20170816 05:07:54.805" status="PASS" starttime="20170816 05:07:54.802"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:07:54.805" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:07:54.805" status="PASS" starttime="20170816 05:07:54.805"></status>
</kw>
<msg timestamp="20170816 05:07:54.805" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:07:54.805" status="PASS" starttime="20170816 05:07:53.588"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:07:54.806" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:07:54.806" status="PASS" starttime="20170816 05:07:54.806"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170816 05:07:54.807" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:07:54.807" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:07:54.807" level="INFO">${json} = {u'message': u'200 OK', u'status': u'ok', u'data': None}</msg>
<status endtime="20170816 05:07:54.807" status="PASS" starttime="20170816 05:07:54.806"></status>
</kw>
<status endtime="20170816 05:07:54.807" status="PASS" starttime="20170816 05:07:53.587"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status endtime="20170816 05:07:54.807" status="PASS" starttime="20170816 05:07:54.807"></status>
</kw>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>6 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Is Chassis Off">
<doc>Check if chassis state is "Off".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:07:54.812" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:07:54.813" status="PASS" starttime="20170816 05:07:54.812"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:07:54.813" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:07:54.813" status="PASS" starttime="20170816 05:07:54.813"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:07:54.814" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:07:54.814" status="PASS" starttime="20170816 05:07:54.813"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:07:54.815" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:07:54.815" status="PASS" starttime="20170816 05:07:54.814"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:07:56.346" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:07:56.347" status="PASS" starttime="20170816 05:07:54.817"></status>
</kw>
<msg timestamp="20170816 05:07:56.347" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:07:56.347" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:07:56.347" status="PASS" starttime="20170816 05:07:54.816"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:07:56.347" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:07:56.348" status="PASS" starttime="20170816 05:07:56.347"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:07:56.348" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:07:56.348" status="PASS" starttime="20170816 05:07:56.348"></status>
</kw>
<status endtime="20170816 05:07:56.349" status="PASS" starttime="20170816 05:07:54.811"></status>
</kw>
<status endtime="20170816 05:07:56.349" status="PASS" starttime="20170816 05:07:54.811"></status>
</kw>
<status endtime="20170816 05:07:56.349" status="PASS" starttime="20170816 05:07:54.810"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:07:56.349" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170816 05:07:56.349" status="PASS" starttime="20170816 05:07:56.349"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:07:56.352" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170816 05:07:56.352" status="PASS" starttime="20170816 05:07:56.351"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:07:56.353" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170816 05:07:56.353" status="PASS" starttime="20170816 05:07:56.352"></status>
</kw>
<status endtime="20170816 05:07:56.353" status="PASS" starttime="20170816 05:07:56.352"></status>
</kw>
<status endtime="20170816 05:07:56.353" status="PASS" starttime="20170816 05:07:56.350"></status>
</kw>
<status endtime="20170816 05:07:56.353" status="PASS" starttime="20170816 05:07:56.350"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:08:01.051" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 05:08:01.051" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:08:01.051" status="PASS" starttime="20170816 05:07:56.353"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:08:01.053" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:08:01.053" status="PASS" starttime="20170816 05:08:01.053"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:08:01.054" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:08:01.054" status="PASS" starttime="20170816 05:08:01.054"></status>
</kw>
<status endtime="20170816 05:08:01.054" status="PASS" starttime="20170816 05:08:01.053"></status>
</kw>
<status endtime="20170816 05:08:01.054" status="PASS" starttime="20170816 05:08:01.052"></status>
</kw>
<status endtime="20170816 05:08:01.054" status="PASS" starttime="20170816 05:08:01.051"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:08:01.055" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:08:01.055" status="PASS" starttime="20170816 05:08:01.055"></status>
</kw>
<msg timestamp="20170816 05:08:01.055" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:08:01.055" status="PASS" starttime="20170816 05:07:54.810"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:08:01.056" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:08:01.056" status="PASS" starttime="20170816 05:08:01.055"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:08:01.056" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:08:01.056" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:08:01.056" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170816 05:08:01.057" status="PASS" starttime="20170816 05:08:01.056"></status>
</kw>
<msg timestamp="20170816 05:08:01.057" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170816 05:08:01.057" status="PASS" starttime="20170816 05:07:54.809"></status>
</kw>
<msg timestamp="20170816 05:08:01.057" level="INFO">${power_state} = Off</msg>
<status endtime="20170816 05:08:01.057" status="PASS" starttime="20170816 05:07:54.809"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170816 05:08:01.058" status="PASS" starttime="20170816 05:08:01.057"></status>
</kw>
<status endtime="20170816 05:08:01.058" status="PASS" starttime="20170816 05:07:54.808"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:08:01.062" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:08:01.062" status="PASS" starttime="20170816 05:08:01.062"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:08:01.063" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:08:01.063" status="PASS" starttime="20170816 05:08:01.063"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:08:01.063" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:08:01.064" status="PASS" starttime="20170816 05:08:01.063"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:08:01.064" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:08:01.064" status="PASS" starttime="20170816 05:08:01.064"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:08:01.449" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:08:01.450" status="PASS" starttime="20170816 05:08:01.065"></status>
</kw>
<msg timestamp="20170816 05:08:01.450" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:08:01.450" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:08:01.450" status="PASS" starttime="20170816 05:08:01.064"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:08:01.451" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:08:01.451" status="PASS" starttime="20170816 05:08:01.451"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:08:01.452" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:08:01.452" status="PASS" starttime="20170816 05:08:01.451"></status>
</kw>
<status endtime="20170816 05:08:01.452" status="PASS" starttime="20170816 05:08:01.061"></status>
</kw>
<status endtime="20170816 05:08:01.452" status="PASS" starttime="20170816 05:08:01.060"></status>
</kw>
<status endtime="20170816 05:08:01.452" status="PASS" starttime="20170816 05:08:01.060"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:08:01.453" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170816 05:08:01.453" status="PASS" starttime="20170816 05:08:01.452"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:08:01.455" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170816 05:08:01.455" status="PASS" starttime="20170816 05:08:01.454"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:08:01.456" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170816 05:08:01.456" status="PASS" starttime="20170816 05:08:01.455"></status>
</kw>
<status endtime="20170816 05:08:01.456" status="PASS" starttime="20170816 05:08:01.455"></status>
</kw>
<status endtime="20170816 05:08:01.456" status="PASS" starttime="20170816 05:08:01.453"></status>
</kw>
<status endtime="20170816 05:08:01.456" status="PASS" starttime="20170816 05:08:01.453"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:08:01.648" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 05:08:01.648" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:08:01.648" status="PASS" starttime="20170816 05:08:01.456"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:08:01.650" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:08:01.650" status="PASS" starttime="20170816 05:08:01.650"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:08:01.651" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:08:01.651" status="PASS" starttime="20170816 05:08:01.651"></status>
</kw>
<status endtime="20170816 05:08:01.652" status="PASS" starttime="20170816 05:08:01.650"></status>
</kw>
<status endtime="20170816 05:08:01.652" status="PASS" starttime="20170816 05:08:01.649"></status>
</kw>
<status endtime="20170816 05:08:01.652" status="PASS" starttime="20170816 05:08:01.649"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:08:01.652" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:08:01.652" status="PASS" starttime="20170816 05:08:01.652"></status>
</kw>
<msg timestamp="20170816 05:08:01.652" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:08:01.653" status="PASS" starttime="20170816 05:08:01.059"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:08:01.653" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:08:01.653" status="PASS" starttime="20170816 05:08:01.653"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:08:01.654" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:08:01.654" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:08:01.654" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status endtime="20170816 05:08:01.654" status="PASS" starttime="20170816 05:08:01.653"></status>
</kw>
<msg timestamp="20170816 05:08:01.654" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status endtime="20170816 05:08:01.654" status="PASS" starttime="20170816 05:08:01.058"></status>
</kw>
<msg timestamp="20170816 05:08:01.654" level="INFO">${host_state} = Off</msg>
<status endtime="20170816 05:08:01.654" status="PASS" starttime="20170816 05:08:01.058"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170816 05:08:01.655" status="PASS" starttime="20170816 05:08:01.655"></status>
</kw>
<status endtime="20170816 05:08:01.655" status="PASS" starttime="20170816 05:07:54.808"></status>
</kw>
<status endtime="20170816 05:08:01.655" status="PASS" starttime="20170816 05:07:54.808"></status>
</kw>
<status endtime="20170816 05:08:01.655" status="PASS" starttime="20170816 05:07:53.586"></status>
</kw>
<kw library="state_manager" name="Initiate Host Boot">
<doc>Initiate host power on.</doc>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWERON_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170816 05:08:01.656" level="INFO">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}</msg>
<status endtime="20170816 05:08:01.656" status="PASS" starttime="20170816 05:08:01.656"></status>
</kw>
<kw library="rest_client" name="Write Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:08:01.657" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status endtime="20170816 05:08:01.658" status="PASS" starttime="20170816 05:08:01.657"></status>
</kw>
<kw library="rest_client" name="OpenBMC Put Request">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:08:01.660" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:08:01.661" status="PASS" starttime="20170816 05:08:01.660"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:08:01.661" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:08:01.661" status="PASS" starttime="20170816 05:08:01.661"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:08:01.662" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:08:01.662" status="PASS" starttime="20170816 05:08:01.661"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:08:01.662" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:08:01.663" status="PASS" starttime="20170816 05:08:01.662"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:08:01.901" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:08:01.901" status="PASS" starttime="20170816 05:08:01.663"></status>
</kw>
<msg timestamp="20170816 05:08:01.901" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:08:01.901" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:08:01.901" status="PASS" starttime="20170816 05:08:01.663"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:08:01.902" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:08:01.902" status="PASS" starttime="20170816 05:08:01.901"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:08:01.902" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:08:01.902" status="PASS" starttime="20170816 05:08:01.902"></status>
</kw>
<status endtime="20170816 05:08:01.903" status="PASS" starttime="20170816 05:08:01.659"></status>
</kw>
<status endtime="20170816 05:08:01.903" status="PASS" starttime="20170816 05:08:01.659"></status>
</kw>
<status endtime="20170816 05:08:01.903" status="PASS" starttime="20170816 05:08:01.658"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:08:01.903" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status endtime="20170816 05:08:01.903" status="PASS" starttime="20170816 05:08:01.903"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:08:01.904" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:08:01.904" status="PASS" starttime="20170816 05:08:01.904"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20170816 05:08:01.905" status="PASS" starttime="20170816 05:08:01.904"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:08:01.906" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content...</msg>
<status endtime="20170816 05:08:01.906" status="PASS" starttime="20170816 05:08:01.906"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:08:01.907" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20170816 05:08:01.907" status="PASS" starttime="20170816 05:08:01.907"></status>
</kw>
<status endtime="20170816 05:08:01.907" status="PASS" starttime="20170816 05:08:01.906"></status>
</kw>
<status endtime="20170816 05:08:01.908" status="PASS" starttime="20170816 05:08:01.905"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Put Request">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:08:02.251" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.On"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170816 05:08:02.251" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:08:02.251" status="PASS" starttime="20170816 05:08:01.908"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:08:02.252" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:08:02.252" status="PASS" starttime="20170816 05:08:02.251"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:08:02.253" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:08:02.253" status="PASS" starttime="20170816 05:08:02.253"></status>
</kw>
<status endtime="20170816 05:08:02.253" status="PASS" starttime="20170816 05:08:02.252"></status>
</kw>
<status endtime="20170816 05:08:02.253" status="PASS" starttime="20170816 05:08:02.251"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:08:02.254" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:08:02.254" status="PASS" starttime="20170816 05:08:02.254"></status>
</kw>
<msg timestamp="20170816 05:08:02.254" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:08:02.254" status="PASS" starttime="20170816 05:08:01.658"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:08:02.255" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:08:02.255" status="PASS" starttime="20170816 05:08:02.254"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170816 05:08:02.255" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:08:02.255" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:08:02.255" level="INFO">${json} = {u'message': u'200 OK', u'status': u'ok', u'data': None}</msg>
<status endtime="20170816 05:08:02.255" status="PASS" starttime="20170816 05:08:02.255"></status>
</kw>
<status endtime="20170816 05:08:02.256" status="PASS" starttime="20170816 05:08:01.657"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status endtime="20170816 05:08:02.256" status="PASS" starttime="20170816 05:08:02.256"></status>
</kw>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is Host Running</arg>
</arguments>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:08:02.261" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:08:02.262" status="PASS" starttime="20170816 05:08:02.261"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:08:02.262" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:08:02.262" status="PASS" starttime="20170816 05:08:02.262"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:08:02.263" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:08:02.263" status="PASS" starttime="20170816 05:08:02.262"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:08:02.263" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:08:02.263" status="PASS" starttime="20170816 05:08:02.263"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:08:03.672" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:08:03.672" status="PASS" starttime="20170816 05:08:02.264"></status>
</kw>
<msg timestamp="20170816 05:08:03.672" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:08:03.672" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:08:03.672" status="PASS" starttime="20170816 05:08:02.264"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:08:03.673" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:08:03.673" status="PASS" starttime="20170816 05:08:03.673"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:08:03.674" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:08:03.674" status="PASS" starttime="20170816 05:08:03.673"></status>
</kw>
<status endtime="20170816 05:08:03.674" status="PASS" starttime="20170816 05:08:02.260"></status>
</kw>
<status endtime="20170816 05:08:03.674" status="PASS" starttime="20170816 05:08:02.260"></status>
</kw>
<status endtime="20170816 05:08:03.674" status="PASS" starttime="20170816 05:08:02.259"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:08:03.675" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170816 05:08:03.675" status="PASS" starttime="20170816 05:08:03.674"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:08:03.677" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170816 05:08:03.677" status="PASS" starttime="20170816 05:08:03.676"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:08:03.678" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170816 05:08:03.678" status="PASS" starttime="20170816 05:08:03.678"></status>
</kw>
<status endtime="20170816 05:08:03.678" status="PASS" starttime="20170816 05:08:03.677"></status>
</kw>
<status endtime="20170816 05:08:03.678" status="PASS" starttime="20170816 05:08:03.675"></status>
</kw>
<status endtime="20170816 05:08:03.678" status="PASS" starttime="20170816 05:08:03.675"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:08:03.835" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 05:08:03.835" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:08:03.835" status="PASS" starttime="20170816 05:08:03.678"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:08:03.837" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:08:03.837" status="PASS" starttime="20170816 05:08:03.837"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:08:03.838" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:08:03.838" status="PASS" starttime="20170816 05:08:03.838"></status>
</kw>
<status endtime="20170816 05:08:03.838" status="PASS" starttime="20170816 05:08:03.837"></status>
</kw>
<status endtime="20170816 05:08:03.839" status="PASS" starttime="20170816 05:08:03.836"></status>
</kw>
<status endtime="20170816 05:08:03.839" status="PASS" starttime="20170816 05:08:03.836"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:08:03.839" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:08:03.839" status="PASS" starttime="20170816 05:08:03.839"></status>
</kw>
<msg timestamp="20170816 05:08:03.839" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:08:03.839" status="PASS" starttime="20170816 05:08:02.258"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:08:03.840" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:08:03.840" status="PASS" starttime="20170816 05:08:03.840"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:08:03.841" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:08:03.841" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:08:03.841" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170816 05:08:03.841" status="PASS" starttime="20170816 05:08:03.840"></status>
</kw>
<msg timestamp="20170816 05:08:03.841" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170816 05:08:03.841" status="PASS" starttime="20170816 05:08:02.258"></status>
</kw>
<msg timestamp="20170816 05:08:03.841" level="INFO">${power_state} = Off</msg>
<status endtime="20170816 05:08:03.841" status="PASS" starttime="20170816 05:08:02.257"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170816 05:08:03.842" level="FAIL">On != Off</msg>
<status endtime="20170816 05:08:03.842" status="FAIL" starttime="20170816 05:08:03.842"></status>
</kw>
<status endtime="20170816 05:08:03.842" status="FAIL" starttime="20170816 05:08:02.257"></status>
</kw>
<status endtime="20170816 05:08:03.842" status="FAIL" starttime="20170816 05:08:02.257"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:08:13.850" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:08:13.850" status="PASS" starttime="20170816 05:08:13.849"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:08:13.851" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:08:13.851" status="PASS" starttime="20170816 05:08:13.851"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:08:13.852" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:08:13.852" status="PASS" starttime="20170816 05:08:13.851"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:08:13.852" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:08:13.852" status="PASS" starttime="20170816 05:08:13.852"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:08:14.517" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:08:14.517" status="PASS" starttime="20170816 05:08:13.853"></status>
</kw>
<msg timestamp="20170816 05:08:14.517" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:08:14.517" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:08:14.517" status="PASS" starttime="20170816 05:08:13.853"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:08:14.518" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:08:14.518" status="PASS" starttime="20170816 05:08:14.518"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:08:14.519" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:08:14.519" status="PASS" starttime="20170816 05:08:14.518"></status>
</kw>
<status endtime="20170816 05:08:14.519" status="PASS" starttime="20170816 05:08:13.848"></status>
</kw>
<status endtime="20170816 05:08:14.519" status="PASS" starttime="20170816 05:08:13.848"></status>
</kw>
<status endtime="20170816 05:08:14.519" status="PASS" starttime="20170816 05:08:13.847"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:08:14.520" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170816 05:08:14.520" status="PASS" starttime="20170816 05:08:14.519"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:08:14.522" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170816 05:08:14.522" status="PASS" starttime="20170816 05:08:14.521"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:08:14.523" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170816 05:08:14.523" status="PASS" starttime="20170816 05:08:14.523"></status>
</kw>
<status endtime="20170816 05:08:14.523" status="PASS" starttime="20170816 05:08:14.522"></status>
</kw>
<status endtime="20170816 05:08:14.523" status="PASS" starttime="20170816 05:08:14.521"></status>
</kw>
<status endtime="20170816 05:08:14.524" status="PASS" starttime="20170816 05:08:14.520"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:08:14.844" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 05:08:14.844" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:08:14.844" status="PASS" starttime="20170816 05:08:14.524"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:08:14.846" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:08:14.846" status="PASS" starttime="20170816 05:08:14.846"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:08:14.847" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:08:14.847" status="PASS" starttime="20170816 05:08:14.847"></status>
</kw>
<status endtime="20170816 05:08:14.847" status="PASS" starttime="20170816 05:08:14.846"></status>
</kw>
<status endtime="20170816 05:08:14.847" status="PASS" starttime="20170816 05:08:14.845"></status>
</kw>
<status endtime="20170816 05:08:14.848" status="PASS" starttime="20170816 05:08:14.845"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:08:14.848" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:08:14.848" status="PASS" starttime="20170816 05:08:14.848"></status>
</kw>
<msg timestamp="20170816 05:08:14.848" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:08:14.848" status="PASS" starttime="20170816 05:08:13.846"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:08:14.849" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:08:14.849" status="PASS" starttime="20170816 05:08:14.848"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:08:14.850" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:08:14.850" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:08:14.850" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170816 05:08:14.850" status="PASS" starttime="20170816 05:08:14.849"></status>
</kw>
<msg timestamp="20170816 05:08:14.851" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170816 05:08:14.851" status="PASS" starttime="20170816 05:08:13.845"></status>
</kw>
<msg timestamp="20170816 05:08:14.851" level="INFO">${power_state} = Off</msg>
<status endtime="20170816 05:08:14.851" status="PASS" starttime="20170816 05:08:13.845"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170816 05:08:14.852" level="FAIL">On != Off</msg>
<status endtime="20170816 05:08:14.852" status="FAIL" starttime="20170816 05:08:14.851"></status>
</kw>
<status endtime="20170816 05:08:14.852" status="FAIL" starttime="20170816 05:08:13.844"></status>
</kw>
<status endtime="20170816 05:08:14.852" status="FAIL" starttime="20170816 05:08:13.843"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:08:24.859" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:08:24.860" status="PASS" starttime="20170816 05:08:24.859"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:08:24.861" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:08:24.861" status="PASS" starttime="20170816 05:08:24.861"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:08:24.862" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:08:24.862" status="PASS" starttime="20170816 05:08:24.862"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:08:24.863" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:08:24.863" status="PASS" starttime="20170816 05:08:24.862"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:08:25.063" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:08:25.063" status="PASS" starttime="20170816 05:08:24.864"></status>
</kw>
<msg timestamp="20170816 05:08:25.063" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:08:25.063" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:08:25.063" status="PASS" starttime="20170816 05:08:24.863"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:08:25.064" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:08:25.064" status="PASS" starttime="20170816 05:08:25.064"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:08:25.065" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:08:25.065" status="PASS" starttime="20170816 05:08:25.064"></status>
</kw>
<status endtime="20170816 05:08:25.065" status="PASS" starttime="20170816 05:08:24.858"></status>
</kw>
<status endtime="20170816 05:08:25.065" status="PASS" starttime="20170816 05:08:24.857"></status>
</kw>
<status endtime="20170816 05:08:25.065" status="PASS" starttime="20170816 05:08:24.856"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:08:25.066" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170816 05:08:25.066" status="PASS" starttime="20170816 05:08:25.066"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:08:25.069" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170816 05:08:25.069" status="PASS" starttime="20170816 05:08:25.068"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:08:25.071" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170816 05:08:25.071" status="PASS" starttime="20170816 05:08:25.070"></status>
</kw>
<status endtime="20170816 05:08:25.071" status="PASS" starttime="20170816 05:08:25.070"></status>
</kw>
<status endtime="20170816 05:08:25.071" status="PASS" starttime="20170816 05:08:25.067"></status>
</kw>
<status endtime="20170816 05:08:25.071" status="PASS" starttime="20170816 05:08:25.067"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:08:25.134" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 05:08:25.134" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:08:25.134" status="PASS" starttime="20170816 05:08:25.072"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:08:25.136" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:08:25.136" status="PASS" starttime="20170816 05:08:25.135"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:08:25.136" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:08:25.137" status="PASS" starttime="20170816 05:08:25.136"></status>
</kw>
<status endtime="20170816 05:08:25.137" status="PASS" starttime="20170816 05:08:25.136"></status>
</kw>
<status endtime="20170816 05:08:25.137" status="PASS" starttime="20170816 05:08:25.135"></status>
</kw>
<status endtime="20170816 05:08:25.137" status="PASS" starttime="20170816 05:08:25.134"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:08:25.137" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:08:25.137" status="PASS" starttime="20170816 05:08:25.137"></status>
</kw>
<msg timestamp="20170816 05:08:25.138" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:08:25.138" status="PASS" starttime="20170816 05:08:24.855"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:08:25.138" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:08:25.138" status="PASS" starttime="20170816 05:08:25.138"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:08:25.139" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:08:25.139" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:08:25.139" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170816 05:08:25.139" status="PASS" starttime="20170816 05:08:25.138"></status>
</kw>
<msg timestamp="20170816 05:08:25.139" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170816 05:08:25.139" status="PASS" starttime="20170816 05:08:24.854"></status>
</kw>
<msg timestamp="20170816 05:08:25.140" level="INFO">${power_state} = On</msg>
<status endtime="20170816 05:08:25.140" status="PASS" starttime="20170816 05:08:24.854"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170816 05:08:25.140" status="PASS" starttime="20170816 05:08:25.140"></status>
</kw>
<status endtime="20170816 05:08:25.140" status="PASS" starttime="20170816 05:08:24.853"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:08:25.147" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:08:25.147" status="PASS" starttime="20170816 05:08:25.146"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:08:25.148" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:08:25.148" status="PASS" starttime="20170816 05:08:25.147"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:08:25.148" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:08:25.148" status="PASS" starttime="20170816 05:08:25.148"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:08:25.149" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:08:25.149" status="PASS" starttime="20170816 05:08:25.149"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:08:25.392" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:08:25.392" status="PASS" starttime="20170816 05:08:25.150"></status>
</kw>
<msg timestamp="20170816 05:08:25.393" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:08:25.393" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:08:25.393" status="PASS" starttime="20170816 05:08:25.149"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:08:25.393" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:08:25.393" status="PASS" starttime="20170816 05:08:25.393"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:08:25.394" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:08:25.394" status="PASS" starttime="20170816 05:08:25.394"></status>
</kw>
<status endtime="20170816 05:08:25.394" status="PASS" starttime="20170816 05:08:25.146"></status>
</kw>
<status endtime="20170816 05:08:25.394" status="PASS" starttime="20170816 05:08:25.145"></status>
</kw>
<status endtime="20170816 05:08:25.394" status="PASS" starttime="20170816 05:08:25.142"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:08:25.395" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170816 05:08:25.395" status="PASS" starttime="20170816 05:08:25.395"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:08:25.397" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170816 05:08:25.397" status="PASS" starttime="20170816 05:08:25.396"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:08:25.398" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170816 05:08:25.398" status="PASS" starttime="20170816 05:08:25.398"></status>
</kw>
<status endtime="20170816 05:08:25.398" status="PASS" starttime="20170816 05:08:25.397"></status>
</kw>
<status endtime="20170816 05:08:25.398" status="PASS" starttime="20170816 05:08:25.396"></status>
</kw>
<status endtime="20170816 05:08:25.398" status="PASS" starttime="20170816 05:08:25.395"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:08:25.545" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 05:08:25.545" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:08:25.545" status="PASS" starttime="20170816 05:08:25.399"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:08:25.547" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:08:25.548" status="PASS" starttime="20170816 05:08:25.547"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:08:25.548" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:08:25.549" status="PASS" starttime="20170816 05:08:25.548"></status>
</kw>
<status endtime="20170816 05:08:25.549" status="PASS" starttime="20170816 05:08:25.548"></status>
</kw>
<status endtime="20170816 05:08:25.549" status="PASS" starttime="20170816 05:08:25.546"></status>
</kw>
<status endtime="20170816 05:08:25.549" status="PASS" starttime="20170816 05:08:25.546"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:08:25.549" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:08:25.549" status="PASS" starttime="20170816 05:08:25.549"></status>
</kw>
<msg timestamp="20170816 05:08:25.549" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:08:25.549" status="PASS" starttime="20170816 05:08:25.141"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:08:25.550" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:08:25.550" status="PASS" starttime="20170816 05:08:25.550"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:08:25.551" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:08:25.551" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:08:25.551" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170816 05:08:25.551" status="PASS" starttime="20170816 05:08:25.551"></status>
</kw>
<msg timestamp="20170816 05:08:25.551" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170816 05:08:25.552" status="PASS" starttime="20170816 05:08:25.141"></status>
</kw>
<msg timestamp="20170816 05:08:25.552" level="INFO">${host_state} = Running</msg>
<status endtime="20170816 05:08:25.552" status="PASS" starttime="20170816 05:08:25.140"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170816 05:08:25.552" status="PASS" starttime="20170816 05:08:25.552"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:08:25.557" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:08:25.557" status="PASS" starttime="20170816 05:08:25.557"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:08:25.558" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:08:25.558" status="PASS" starttime="20170816 05:08:25.558"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:08:25.558" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:08:25.559" status="PASS" starttime="20170816 05:08:25.558"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:08:25.559" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:08:25.559" status="PASS" starttime="20170816 05:08:25.559"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:08:25.741" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:08:25.741" status="PASS" starttime="20170816 05:08:25.560"></status>
</kw>
<msg timestamp="20170816 05:08:25.741" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:08:25.741" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:08:25.741" status="PASS" starttime="20170816 05:08:25.559"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:08:25.742" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:08:25.742" status="PASS" starttime="20170816 05:08:25.741"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:08:25.742" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:08:25.742" status="PASS" starttime="20170816 05:08:25.742"></status>
</kw>
<status endtime="20170816 05:08:25.743" status="PASS" starttime="20170816 05:08:25.556"></status>
</kw>
<status endtime="20170816 05:08:25.743" status="PASS" starttime="20170816 05:08:25.556"></status>
</kw>
<status endtime="20170816 05:08:25.743" status="PASS" starttime="20170816 05:08:25.555"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:08:25.743" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170816 05:08:25.743" status="PASS" starttime="20170816 05:08:25.743"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:08:25.745" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170816 05:08:25.745" status="PASS" starttime="20170816 05:08:25.745"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:08:25.746" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170816 05:08:25.746" status="PASS" starttime="20170816 05:08:25.746"></status>
</kw>
<status endtime="20170816 05:08:25.747" status="PASS" starttime="20170816 05:08:25.746"></status>
</kw>
<status endtime="20170816 05:08:25.747" status="PASS" starttime="20170816 05:08:25.744"></status>
</kw>
<status endtime="20170816 05:08:25.747" status="PASS" starttime="20170816 05:08:25.744"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:08:25.813" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170816 05:08:25.813" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:08:25.813" status="PASS" starttime="20170816 05:08:25.747"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:08:25.815" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:08:25.815" status="PASS" starttime="20170816 05:08:25.814"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:08:25.816" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:08:25.816" status="PASS" starttime="20170816 05:08:25.815"></status>
</kw>
<status endtime="20170816 05:08:25.816" status="PASS" starttime="20170816 05:08:25.815"></status>
</kw>
<status endtime="20170816 05:08:25.816" status="PASS" starttime="20170816 05:08:25.814"></status>
</kw>
<status endtime="20170816 05:08:25.816" status="PASS" starttime="20170816 05:08:25.813"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:08:25.816" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:08:25.816" status="PASS" starttime="20170816 05:08:25.816"></status>
</kw>
<msg timestamp="20170816 05:08:25.817" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:08:25.817" status="PASS" starttime="20170816 05:08:25.554"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:08:25.817" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:08:25.817" status="PASS" starttime="20170816 05:08:25.817"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:08:25.818" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:08:25.818" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:08:25.818" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170816 05:08:25.818" status="PASS" starttime="20170816 05:08:25.818"></status>
</kw>
<msg timestamp="20170816 05:08:25.818" level="INFO">${state} = Off</msg>
<status endtime="20170816 05:08:25.818" status="PASS" starttime="20170816 05:08:25.554"></status>
</kw>
<msg timestamp="20170816 05:08:25.819" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170816 05:08:25.819" status="PASS" starttime="20170816 05:08:25.554"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170816 05:08:25.819" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170816 05:08:25.819" status="FAIL" starttime="20170816 05:08:25.819"></status>
</kw>
<status endtime="20170816 05:08:25.820" status="FAIL" starttime="20170816 05:08:25.553"></status>
</kw>
<msg timestamp="20170816 05:08:25.820" level="INFO">${status} = False</msg>
<status endtime="20170816 05:08:25.820" status="PASS" starttime="20170816 05:08:25.553"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status endtime="20170816 05:08:25.820" status="PASS" starttime="20170816 05:08:25.820"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:08:25.824" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:08:25.825" status="PASS" starttime="20170816 05:08:25.824"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:08:25.825" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:08:25.825" status="PASS" starttime="20170816 05:08:25.825"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:08:25.826" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:08:25.826" status="PASS" starttime="20170816 05:08:25.825"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:08:25.826" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:08:25.827" status="PASS" starttime="20170816 05:08:25.826"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:08:26.015" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:08:26.015" status="PASS" starttime="20170816 05:08:25.827"></status>
</kw>
<msg timestamp="20170816 05:08:26.015" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:08:26.015" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:08:26.015" status="PASS" starttime="20170816 05:08:25.827"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:08:26.016" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:08:26.016" status="PASS" starttime="20170816 05:08:26.015"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:08:26.016" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:08:26.017" status="PASS" starttime="20170816 05:08:26.016"></status>
</kw>
<status endtime="20170816 05:08:26.017" status="PASS" starttime="20170816 05:08:25.823"></status>
</kw>
<status endtime="20170816 05:08:26.017" status="PASS" starttime="20170816 05:08:25.823"></status>
</kw>
<status endtime="20170816 05:08:26.017" status="PASS" starttime="20170816 05:08:25.822"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:08:26.017" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170816 05:08:26.017" status="PASS" starttime="20170816 05:08:26.017"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:08:26.019" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170816 05:08:26.020" status="PASS" starttime="20170816 05:08:26.019"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:08:26.020" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170816 05:08:26.021" status="PASS" starttime="20170816 05:08:26.020"></status>
</kw>
<status endtime="20170816 05:08:26.021" status="PASS" starttime="20170816 05:08:26.020"></status>
</kw>
<status endtime="20170816 05:08:26.021" status="PASS" starttime="20170816 05:08:26.018"></status>
</kw>
<status endtime="20170816 05:08:26.021" status="PASS" starttime="20170816 05:08:26.018"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:08:26.126" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170816 05:08:26.126" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:08:26.126" status="PASS" starttime="20170816 05:08:26.021"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:08:26.128" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:08:26.128" status="PASS" starttime="20170816 05:08:26.127"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:08:26.129" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:08:26.129" status="PASS" starttime="20170816 05:08:26.129"></status>
</kw>
<status endtime="20170816 05:08:26.129" status="PASS" starttime="20170816 05:08:26.128"></status>
</kw>
<status endtime="20170816 05:08:26.129" status="PASS" starttime="20170816 05:08:26.127"></status>
</kw>
<status endtime="20170816 05:08:26.129" status="PASS" starttime="20170816 05:08:26.127"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:08:26.130" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:08:26.130" status="PASS" starttime="20170816 05:08:26.129"></status>
</kw>
<msg timestamp="20170816 05:08:26.130" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:08:26.130" status="PASS" starttime="20170816 05:08:25.821"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:08:26.131" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:08:26.131" status="PASS" starttime="20170816 05:08:26.130"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:08:26.131" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:08:26.131" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:08:26.131" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified'}</msg>
<status endtime="20170816 05:08:26.131" status="PASS" starttime="20170816 05:08:26.131"></status>
</kw>
<msg timestamp="20170816 05:08:26.132" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170816 05:08:26.132" status="PASS" starttime="20170816 05:08:25.821"></status>
</kw>
<msg timestamp="20170816 05:08:26.132" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170816 05:08:26.132" status="PASS" starttime="20170816 05:08:25.821"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170816 05:08:26.132" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170816 05:08:26.133" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170816 05:08:26.133" status="FAIL" starttime="20170816 05:08:26.132"></status>
</kw>
<status endtime="20170816 05:08:26.133" status="FAIL" starttime="20170816 05:08:25.553"></status>
</kw>
<status endtime="20170816 05:08:26.133" status="FAIL" starttime="20170816 05:08:24.853"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:08:36.139" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:08:36.139" status="PASS" starttime="20170816 05:08:36.138"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:08:36.140" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:08:36.140" status="PASS" starttime="20170816 05:08:36.139"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:08:36.140" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:08:36.140" status="PASS" starttime="20170816 05:08:36.140"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:08:36.141" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:08:36.141" status="PASS" starttime="20170816 05:08:36.141"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:08:36.459" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:08:36.459" status="PASS" starttime="20170816 05:08:36.142"></status>
</kw>
<msg timestamp="20170816 05:08:36.459" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:08:36.459" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:08:36.459" status="PASS" starttime="20170816 05:08:36.141"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:08:36.460" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:08:36.460" status="PASS" starttime="20170816 05:08:36.460"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:08:36.461" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:08:36.461" status="PASS" starttime="20170816 05:08:36.460"></status>
</kw>
<status endtime="20170816 05:08:36.461" status="PASS" starttime="20170816 05:08:36.138"></status>
</kw>
<status endtime="20170816 05:08:36.461" status="PASS" starttime="20170816 05:08:36.137"></status>
</kw>
<status endtime="20170816 05:08:36.461" status="PASS" starttime="20170816 05:08:36.137"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:08:36.462" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170816 05:08:36.462" status="PASS" starttime="20170816 05:08:36.461"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:08:36.464" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170816 05:08:36.464" status="PASS" starttime="20170816 05:08:36.463"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:08:36.465" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170816 05:08:36.465" status="PASS" starttime="20170816 05:08:36.465"></status>
</kw>
<status endtime="20170816 05:08:36.465" status="PASS" starttime="20170816 05:08:36.464"></status>
</kw>
<status endtime="20170816 05:08:36.465" status="PASS" starttime="20170816 05:08:36.463"></status>
</kw>
<status endtime="20170816 05:08:36.465" status="PASS" starttime="20170816 05:08:36.462"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:08:36.534" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 05:08:36.534" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:08:36.534" status="PASS" starttime="20170816 05:08:36.465"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:08:36.536" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:08:36.536" status="PASS" starttime="20170816 05:08:36.535"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:08:36.537" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:08:36.537" status="PASS" starttime="20170816 05:08:36.537"></status>
</kw>
<status endtime="20170816 05:08:36.537" status="PASS" starttime="20170816 05:08:36.536"></status>
</kw>
<status endtime="20170816 05:08:36.537" status="PASS" starttime="20170816 05:08:36.535"></status>
</kw>
<status endtime="20170816 05:08:36.537" status="PASS" starttime="20170816 05:08:36.535"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:08:36.538" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:08:36.538" status="PASS" starttime="20170816 05:08:36.538"></status>
</kw>
<msg timestamp="20170816 05:08:36.538" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:08:36.538" status="PASS" starttime="20170816 05:08:36.136"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:08:36.539" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:08:36.539" status="PASS" starttime="20170816 05:08:36.538"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:08:36.539" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:08:36.539" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:08:36.539" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170816 05:08:36.539" status="PASS" starttime="20170816 05:08:36.539"></status>
</kw>
<msg timestamp="20170816 05:08:36.540" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170816 05:08:36.540" status="PASS" starttime="20170816 05:08:36.135"></status>
</kw>
<msg timestamp="20170816 05:08:36.540" level="INFO">${power_state} = On</msg>
<status endtime="20170816 05:08:36.540" status="PASS" starttime="20170816 05:08:36.135"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170816 05:08:36.541" status="PASS" starttime="20170816 05:08:36.540"></status>
</kw>
<status endtime="20170816 05:08:36.541" status="PASS" starttime="20170816 05:08:36.134"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:08:36.544" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:08:36.545" status="PASS" starttime="20170816 05:08:36.544"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:08:36.545" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:08:36.545" status="PASS" starttime="20170816 05:08:36.545"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:08:36.546" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:08:36.546" status="PASS" starttime="20170816 05:08:36.545"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:08:36.546" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:08:36.546" status="PASS" starttime="20170816 05:08:36.546"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:08:36.797" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:08:36.797" status="PASS" starttime="20170816 05:08:36.547"></status>
</kw>
<msg timestamp="20170816 05:08:36.798" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:08:36.798" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:08:36.798" status="PASS" starttime="20170816 05:08:36.547"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:08:36.798" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:08:36.798" status="PASS" starttime="20170816 05:08:36.798"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:08:36.799" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:08:36.799" status="PASS" starttime="20170816 05:08:36.799"></status>
</kw>
<status endtime="20170816 05:08:36.800" status="PASS" starttime="20170816 05:08:36.543"></status>
</kw>
<status endtime="20170816 05:08:36.800" status="PASS" starttime="20170816 05:08:36.543"></status>
</kw>
<status endtime="20170816 05:08:36.800" status="PASS" starttime="20170816 05:08:36.542"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:08:36.800" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170816 05:08:36.800" status="PASS" starttime="20170816 05:08:36.800"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:08:36.803" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170816 05:08:36.803" status="PASS" starttime="20170816 05:08:36.802"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:08:36.804" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170816 05:08:36.804" status="PASS" starttime="20170816 05:08:36.803"></status>
</kw>
<status endtime="20170816 05:08:36.804" status="PASS" starttime="20170816 05:08:36.803"></status>
</kw>
<status endtime="20170816 05:08:36.804" status="PASS" starttime="20170816 05:08:36.801"></status>
</kw>
<status endtime="20170816 05:08:36.804" status="PASS" starttime="20170816 05:08:36.801"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:08:36.994" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 05:08:36.994" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:08:36.994" status="PASS" starttime="20170816 05:08:36.804"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:08:36.996" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:08:36.996" status="PASS" starttime="20170816 05:08:36.996"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:08:36.997" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:08:36.997" status="PASS" starttime="20170816 05:08:36.997"></status>
</kw>
<status endtime="20170816 05:08:36.997" status="PASS" starttime="20170816 05:08:36.996"></status>
</kw>
<status endtime="20170816 05:08:36.997" status="PASS" starttime="20170816 05:08:36.995"></status>
</kw>
<status endtime="20170816 05:08:36.997" status="PASS" starttime="20170816 05:08:36.995"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:08:36.998" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:08:36.998" status="PASS" starttime="20170816 05:08:36.998"></status>
</kw>
<msg timestamp="20170816 05:08:36.998" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:08:36.998" status="PASS" starttime="20170816 05:08:36.542"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:08:36.999" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:08:36.999" status="PASS" starttime="20170816 05:08:36.998"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:08:36.999" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:08:36.999" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:08:37.000" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170816 05:08:37.000" status="PASS" starttime="20170816 05:08:36.999"></status>
</kw>
<msg timestamp="20170816 05:08:37.000" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170816 05:08:37.000" status="PASS" starttime="20170816 05:08:36.541"></status>
</kw>
<msg timestamp="20170816 05:08:37.000" level="INFO">${host_state} = Running</msg>
<status endtime="20170816 05:08:37.000" status="PASS" starttime="20170816 05:08:36.541"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170816 05:08:37.001" status="PASS" starttime="20170816 05:08:37.001"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:08:37.006" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:08:37.006" status="PASS" starttime="20170816 05:08:37.005"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:08:37.007" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:08:37.007" status="PASS" starttime="20170816 05:08:37.006"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:08:37.007" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:08:37.007" status="PASS" starttime="20170816 05:08:37.007"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:08:37.008" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:08:37.008" status="PASS" starttime="20170816 05:08:37.008"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:08:37.373" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:08:37.373" status="PASS" starttime="20170816 05:08:37.009"></status>
</kw>
<msg timestamp="20170816 05:08:37.373" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:08:37.373" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:08:37.373" status="PASS" starttime="20170816 05:08:37.008"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:08:37.374" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:08:37.374" status="PASS" starttime="20170816 05:08:37.374"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:08:37.375" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:08:37.375" status="PASS" starttime="20170816 05:08:37.374"></status>
</kw>
<status endtime="20170816 05:08:37.375" status="PASS" starttime="20170816 05:08:37.005"></status>
</kw>
<status endtime="20170816 05:08:37.375" status="PASS" starttime="20170816 05:08:37.004"></status>
</kw>
<status endtime="20170816 05:08:37.375" status="PASS" starttime="20170816 05:08:37.004"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:08:37.376" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170816 05:08:37.376" status="PASS" starttime="20170816 05:08:37.375"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:08:37.378" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170816 05:08:37.378" status="PASS" starttime="20170816 05:08:37.377"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:08:37.379" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170816 05:08:37.379" status="PASS" starttime="20170816 05:08:37.379"></status>
</kw>
<status endtime="20170816 05:08:37.379" status="PASS" starttime="20170816 05:08:37.378"></status>
</kw>
<status endtime="20170816 05:08:37.379" status="PASS" starttime="20170816 05:08:37.377"></status>
</kw>
<status endtime="20170816 05:08:37.379" status="PASS" starttime="20170816 05:08:37.376"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:08:37.531" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170816 05:08:37.531" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:08:37.531" status="PASS" starttime="20170816 05:08:37.379"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:08:37.533" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:08:37.533" status="PASS" starttime="20170816 05:08:37.532"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:08:37.534" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:08:37.534" status="PASS" starttime="20170816 05:08:37.534"></status>
</kw>
<status endtime="20170816 05:08:37.535" status="PASS" starttime="20170816 05:08:37.533"></status>
</kw>
<status endtime="20170816 05:08:37.535" status="PASS" starttime="20170816 05:08:37.532"></status>
</kw>
<status endtime="20170816 05:08:37.535" status="PASS" starttime="20170816 05:08:37.531"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:08:37.535" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:08:37.535" status="PASS" starttime="20170816 05:08:37.535"></status>
</kw>
<msg timestamp="20170816 05:08:37.535" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:08:37.535" status="PASS" starttime="20170816 05:08:37.003"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:08:37.536" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:08:37.536" status="PASS" starttime="20170816 05:08:37.536"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:08:37.537" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:08:37.537" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:08:37.537" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170816 05:08:37.537" status="PASS" starttime="20170816 05:08:37.536"></status>
</kw>
<msg timestamp="20170816 05:08:37.537" level="INFO">${state} = Off</msg>
<status endtime="20170816 05:08:37.537" status="PASS" starttime="20170816 05:08:37.002"></status>
</kw>
<msg timestamp="20170816 05:08:37.537" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170816 05:08:37.537" status="PASS" starttime="20170816 05:08:37.002"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170816 05:08:37.538" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170816 05:08:37.538" status="FAIL" starttime="20170816 05:08:37.538"></status>
</kw>
<status endtime="20170816 05:08:37.538" status="FAIL" starttime="20170816 05:08:37.002"></status>
</kw>
<msg timestamp="20170816 05:08:37.538" level="INFO">${status} = False</msg>
<status endtime="20170816 05:08:37.538" status="PASS" starttime="20170816 05:08:37.001"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status endtime="20170816 05:08:37.539" status="PASS" starttime="20170816 05:08:37.539"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:08:37.542" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:08:37.543" status="PASS" starttime="20170816 05:08:37.542"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:08:37.543" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:08:37.543" status="PASS" starttime="20170816 05:08:37.543"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:08:37.544" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:08:37.544" status="PASS" starttime="20170816 05:08:37.544"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:08:37.545" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:08:37.545" status="PASS" starttime="20170816 05:08:37.544"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:08:37.899" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:08:37.899" status="PASS" starttime="20170816 05:08:37.545"></status>
</kw>
<msg timestamp="20170816 05:08:37.899" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:08:37.900" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:08:37.900" status="PASS" starttime="20170816 05:08:37.545"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:08:37.900" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:08:37.900" status="PASS" starttime="20170816 05:08:37.900"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:08:37.901" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:08:37.901" status="PASS" starttime="20170816 05:08:37.901"></status>
</kw>
<status endtime="20170816 05:08:37.901" status="PASS" starttime="20170816 05:08:37.542"></status>
</kw>
<status endtime="20170816 05:08:37.901" status="PASS" starttime="20170816 05:08:37.541"></status>
</kw>
<status endtime="20170816 05:08:37.901" status="PASS" starttime="20170816 05:08:37.541"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:08:37.902" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170816 05:08:37.902" status="PASS" starttime="20170816 05:08:37.902"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:08:37.905" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170816 05:08:37.905" status="PASS" starttime="20170816 05:08:37.903"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:08:37.905" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170816 05:08:37.906" status="PASS" starttime="20170816 05:08:37.905"></status>
</kw>
<status endtime="20170816 05:08:37.906" status="PASS" starttime="20170816 05:08:37.905"></status>
</kw>
<status endtime="20170816 05:08:37.906" status="PASS" starttime="20170816 05:08:37.903"></status>
</kw>
<status endtime="20170816 05:08:37.906" status="PASS" starttime="20170816 05:08:37.902"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:08:38.442" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170816 05:08:38.442" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:08:38.442" status="PASS" starttime="20170816 05:08:37.906"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:08:38.444" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:08:38.444" status="PASS" starttime="20170816 05:08:38.444"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:08:38.445" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:08:38.445" status="PASS" starttime="20170816 05:08:38.445"></status>
</kw>
<status endtime="20170816 05:08:38.445" status="PASS" starttime="20170816 05:08:38.444"></status>
</kw>
<status endtime="20170816 05:08:38.445" status="PASS" starttime="20170816 05:08:38.443"></status>
</kw>
<status endtime="20170816 05:08:38.445" status="PASS" starttime="20170816 05:08:38.443"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:08:38.446" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:08:38.446" status="PASS" starttime="20170816 05:08:38.446"></status>
</kw>
<msg timestamp="20170816 05:08:38.446" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:08:38.446" status="PASS" starttime="20170816 05:08:37.540"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:08:38.447" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:08:38.447" status="PASS" starttime="20170816 05:08:38.446"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:08:38.447" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:08:38.447" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:08:38.447" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit'}</msg>
<status endtime="20170816 05:08:38.448" status="PASS" starttime="20170816 05:08:38.447"></status>
</kw>
<msg timestamp="20170816 05:08:38.448" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170816 05:08:38.448" status="PASS" starttime="20170816 05:08:37.539"></status>
</kw>
<msg timestamp="20170816 05:08:38.448" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170816 05:08:38.448" status="PASS" starttime="20170816 05:08:37.539"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170816 05:08:38.449" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170816 05:08:38.449" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170816 05:08:38.449" status="FAIL" starttime="20170816 05:08:38.448"></status>
</kw>
<status endtime="20170816 05:08:38.449" status="FAIL" starttime="20170816 05:08:37.001"></status>
</kw>
<status endtime="20170816 05:08:38.449" status="FAIL" starttime="20170816 05:08:36.134"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:08:48.455" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:08:48.455" status="PASS" starttime="20170816 05:08:48.454"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:08:48.456" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:08:48.456" status="PASS" starttime="20170816 05:08:48.455"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:08:48.456" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:08:48.456" status="PASS" starttime="20170816 05:08:48.456"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:08:48.457" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:08:48.457" status="PASS" starttime="20170816 05:08:48.457"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:08:48.855" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:08:48.855" status="PASS" starttime="20170816 05:08:48.458"></status>
</kw>
<msg timestamp="20170816 05:08:48.855" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:08:48.855" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:08:48.855" status="PASS" starttime="20170816 05:08:48.457"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:08:48.856" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:08:48.856" status="PASS" starttime="20170816 05:08:48.856"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:08:48.857" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:08:48.857" status="PASS" starttime="20170816 05:08:48.856"></status>
</kw>
<status endtime="20170816 05:08:48.857" status="PASS" starttime="20170816 05:08:48.454"></status>
</kw>
<status endtime="20170816 05:08:48.857" status="PASS" starttime="20170816 05:08:48.453"></status>
</kw>
<status endtime="20170816 05:08:48.857" status="PASS" starttime="20170816 05:08:48.453"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:08:48.858" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170816 05:08:48.858" status="PASS" starttime="20170816 05:08:48.857"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:08:48.860" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170816 05:08:48.860" status="PASS" starttime="20170816 05:08:48.859"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:08:48.861" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170816 05:08:48.861" status="PASS" starttime="20170816 05:08:48.860"></status>
</kw>
<status endtime="20170816 05:08:48.861" status="PASS" starttime="20170816 05:08:48.860"></status>
</kw>
<status endtime="20170816 05:08:48.861" status="PASS" starttime="20170816 05:08:48.858"></status>
</kw>
<status endtime="20170816 05:08:48.861" status="PASS" starttime="20170816 05:08:48.858"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:08:49.233" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 05:08:49.233" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:08:49.233" status="PASS" starttime="20170816 05:08:48.861"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:08:49.235" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:08:49.235" status="PASS" starttime="20170816 05:08:49.235"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:08:49.236" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:08:49.236" status="PASS" starttime="20170816 05:08:49.236"></status>
</kw>
<status endtime="20170816 05:08:49.237" status="PASS" starttime="20170816 05:08:49.236"></status>
</kw>
<status endtime="20170816 05:08:49.237" status="PASS" starttime="20170816 05:08:49.234"></status>
</kw>
<status endtime="20170816 05:08:49.237" status="PASS" starttime="20170816 05:08:49.234"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:08:49.237" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:08:49.237" status="PASS" starttime="20170816 05:08:49.237"></status>
</kw>
<msg timestamp="20170816 05:08:49.237" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:08:49.237" status="PASS" starttime="20170816 05:08:48.452"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:08:49.238" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:08:49.238" status="PASS" starttime="20170816 05:08:49.238"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:08:49.239" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:08:49.239" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:08:49.239" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170816 05:08:49.239" status="PASS" starttime="20170816 05:08:49.238"></status>
</kw>
<msg timestamp="20170816 05:08:49.239" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170816 05:08:49.239" status="PASS" starttime="20170816 05:08:48.451"></status>
</kw>
<msg timestamp="20170816 05:08:49.240" level="INFO">${power_state} = On</msg>
<status endtime="20170816 05:08:49.240" status="PASS" starttime="20170816 05:08:48.451"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170816 05:08:49.240" status="PASS" starttime="20170816 05:08:49.240"></status>
</kw>
<status endtime="20170816 05:08:49.240" status="PASS" starttime="20170816 05:08:48.451"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:08:49.244" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:08:49.245" status="PASS" starttime="20170816 05:08:49.244"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:08:49.245" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:08:49.245" status="PASS" starttime="20170816 05:08:49.245"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:08:49.246" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:08:49.246" status="PASS" starttime="20170816 05:08:49.245"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:08:49.246" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:08:49.246" status="PASS" starttime="20170816 05:08:49.246"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:08:49.673" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:08:49.673" status="PASS" starttime="20170816 05:08:49.247"></status>
</kw>
<msg timestamp="20170816 05:08:49.673" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:08:49.673" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:08:49.673" status="PASS" starttime="20170816 05:08:49.247"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:08:49.674" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:08:49.674" status="PASS" starttime="20170816 05:08:49.674"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:08:49.675" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:08:49.675" status="PASS" starttime="20170816 05:08:49.674"></status>
</kw>
<status endtime="20170816 05:08:49.675" status="PASS" starttime="20170816 05:08:49.243"></status>
</kw>
<status endtime="20170816 05:08:49.675" status="PASS" starttime="20170816 05:08:49.243"></status>
</kw>
<status endtime="20170816 05:08:49.675" status="PASS" starttime="20170816 05:08:49.242"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:08:49.676" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170816 05:08:49.676" status="PASS" starttime="20170816 05:08:49.675"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:08:49.678" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170816 05:08:49.678" status="PASS" starttime="20170816 05:08:49.677"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:08:49.679" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170816 05:08:49.679" status="PASS" starttime="20170816 05:08:49.679"></status>
</kw>
<status endtime="20170816 05:08:49.679" status="PASS" starttime="20170816 05:08:49.678"></status>
</kw>
<status endtime="20170816 05:08:49.679" status="PASS" starttime="20170816 05:08:49.677"></status>
</kw>
<status endtime="20170816 05:08:49.679" status="PASS" starttime="20170816 05:08:49.676"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:08:50.274" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 05:08:50.274" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:08:50.274" status="PASS" starttime="20170816 05:08:49.679"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:08:50.276" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:08:50.276" status="PASS" starttime="20170816 05:08:50.276"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:08:50.280" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:08:50.280" status="PASS" starttime="20170816 05:08:50.280"></status>
</kw>
<status endtime="20170816 05:08:50.280" status="PASS" starttime="20170816 05:08:50.276"></status>
</kw>
<status endtime="20170816 05:08:50.280" status="PASS" starttime="20170816 05:08:50.275"></status>
</kw>
<status endtime="20170816 05:08:50.280" status="PASS" starttime="20170816 05:08:50.274"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:08:50.281" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:08:50.281" status="PASS" starttime="20170816 05:08:50.281"></status>
</kw>
<msg timestamp="20170816 05:08:50.281" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:08:50.281" status="PASS" starttime="20170816 05:08:49.241"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:08:50.282" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:08:50.282" status="PASS" starttime="20170816 05:08:50.281"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:08:50.282" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:08:50.283" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:08:50.283" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170816 05:08:50.283" status="PASS" starttime="20170816 05:08:50.282"></status>
</kw>
<msg timestamp="20170816 05:08:50.283" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170816 05:08:50.283" status="PASS" starttime="20170816 05:08:49.241"></status>
</kw>
<msg timestamp="20170816 05:08:50.283" level="INFO">${host_state} = Running</msg>
<status endtime="20170816 05:08:50.283" status="PASS" starttime="20170816 05:08:49.240"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170816 05:08:50.284" status="PASS" starttime="20170816 05:08:50.284"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:08:50.288" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:08:50.289" status="PASS" starttime="20170816 05:08:50.288"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:08:50.289" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:08:50.289" status="PASS" starttime="20170816 05:08:50.289"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:08:50.290" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:08:50.290" status="PASS" starttime="20170816 05:08:50.290"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:08:50.291" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:08:50.291" status="PASS" starttime="20170816 05:08:50.290"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:08:51.015" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:08:51.015" status="PASS" starttime="20170816 05:08:50.291"></status>
</kw>
<msg timestamp="20170816 05:08:51.016" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:08:51.016" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:08:51.016" status="PASS" starttime="20170816 05:08:50.291"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:08:51.016" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:08:51.016" status="PASS" starttime="20170816 05:08:51.016"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:08:51.017" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:08:51.017" status="PASS" starttime="20170816 05:08:51.017"></status>
</kw>
<status endtime="20170816 05:08:51.017" status="PASS" starttime="20170816 05:08:50.287"></status>
</kw>
<status endtime="20170816 05:08:51.017" status="PASS" starttime="20170816 05:08:50.287"></status>
</kw>
<status endtime="20170816 05:08:51.017" status="PASS" starttime="20170816 05:08:50.287"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:08:51.018" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170816 05:08:51.018" status="PASS" starttime="20170816 05:08:51.018"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:08:51.020" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170816 05:08:51.020" status="PASS" starttime="20170816 05:08:51.019"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:08:51.021" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170816 05:08:51.021" status="PASS" starttime="20170816 05:08:51.021"></status>
</kw>
<status endtime="20170816 05:08:51.021" status="PASS" starttime="20170816 05:08:51.020"></status>
</kw>
<status endtime="20170816 05:08:51.022" status="PASS" starttime="20170816 05:08:51.019"></status>
</kw>
<status endtime="20170816 05:08:51.022" status="PASS" starttime="20170816 05:08:51.018"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:08:51.593" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170816 05:08:51.594" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:08:51.594" status="PASS" starttime="20170816 05:08:51.022"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:08:51.596" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:08:51.596" status="PASS" starttime="20170816 05:08:51.595"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:08:51.597" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:08:51.597" status="PASS" starttime="20170816 05:08:51.596"></status>
</kw>
<status endtime="20170816 05:08:51.597" status="PASS" starttime="20170816 05:08:51.596"></status>
</kw>
<status endtime="20170816 05:08:51.597" status="PASS" starttime="20170816 05:08:51.595"></status>
</kw>
<status endtime="20170816 05:08:51.597" status="PASS" starttime="20170816 05:08:51.594"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:08:51.597" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:08:51.598" status="PASS" starttime="20170816 05:08:51.597"></status>
</kw>
<msg timestamp="20170816 05:08:51.598" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:08:51.598" status="PASS" starttime="20170816 05:08:50.286"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:08:51.598" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:08:51.598" status="PASS" starttime="20170816 05:08:51.598"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:08:51.599" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:08:51.599" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:08:51.599" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170816 05:08:51.599" status="PASS" starttime="20170816 05:08:51.599"></status>
</kw>
<msg timestamp="20170816 05:08:51.599" level="INFO">${state} = Off</msg>
<status endtime="20170816 05:08:51.599" status="PASS" starttime="20170816 05:08:50.285"></status>
</kw>
<msg timestamp="20170816 05:08:51.600" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170816 05:08:51.600" status="PASS" starttime="20170816 05:08:50.285"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170816 05:08:51.600" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170816 05:08:51.600" status="FAIL" starttime="20170816 05:08:51.600"></status>
</kw>
<status endtime="20170816 05:08:51.601" status="FAIL" starttime="20170816 05:08:50.285"></status>
</kw>
<msg timestamp="20170816 05:08:51.601" level="INFO">${status} = False</msg>
<status endtime="20170816 05:08:51.601" status="PASS" starttime="20170816 05:08:50.284"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status endtime="20170816 05:08:51.601" status="PASS" starttime="20170816 05:08:51.601"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:08:51.605" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:08:51.606" status="PASS" starttime="20170816 05:08:51.605"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:08:51.606" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:08:51.606" status="PASS" starttime="20170816 05:08:51.606"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:08:51.607" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:08:51.607" status="PASS" starttime="20170816 05:08:51.607"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:08:51.608" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:08:51.608" status="PASS" starttime="20170816 05:08:51.607"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:08:51.990" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:08:51.990" status="PASS" starttime="20170816 05:08:51.608"></status>
</kw>
<msg timestamp="20170816 05:08:51.990" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:08:51.991" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:08:51.991" status="PASS" starttime="20170816 05:08:51.608"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:08:51.991" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:08:51.991" status="PASS" starttime="20170816 05:08:51.991"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:08:51.992" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:08:51.992" status="PASS" starttime="20170816 05:08:51.992"></status>
</kw>
<status endtime="20170816 05:08:51.992" status="PASS" starttime="20170816 05:08:51.604"></status>
</kw>
<status endtime="20170816 05:08:51.992" status="PASS" starttime="20170816 05:08:51.604"></status>
</kw>
<status endtime="20170816 05:08:51.992" status="PASS" starttime="20170816 05:08:51.603"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:08:51.993" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170816 05:08:51.993" status="PASS" starttime="20170816 05:08:51.993"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:08:51.995" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170816 05:08:51.995" status="PASS" starttime="20170816 05:08:51.994"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:08:51.996" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170816 05:08:51.996" status="PASS" starttime="20170816 05:08:51.996"></status>
</kw>
<status endtime="20170816 05:08:51.996" status="PASS" starttime="20170816 05:08:51.995"></status>
</kw>
<status endtime="20170816 05:08:51.996" status="PASS" starttime="20170816 05:08:51.994"></status>
</kw>
<status endtime="20170816 05:08:51.996" status="PASS" starttime="20170816 05:08:51.993"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:08:52.400" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170816 05:08:52.400" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:08:52.400" status="PASS" starttime="20170816 05:08:51.997"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:08:52.403" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:08:52.403" status="PASS" starttime="20170816 05:08:52.402"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:08:52.404" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:08:52.404" status="PASS" starttime="20170816 05:08:52.404"></status>
</kw>
<status endtime="20170816 05:08:52.404" status="PASS" starttime="20170816 05:08:52.403"></status>
</kw>
<status endtime="20170816 05:08:52.404" status="PASS" starttime="20170816 05:08:52.401"></status>
</kw>
<status endtime="20170816 05:08:52.404" status="PASS" starttime="20170816 05:08:52.401"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:08:52.405" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:08:52.405" status="PASS" starttime="20170816 05:08:52.405"></status>
</kw>
<msg timestamp="20170816 05:08:52.405" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:08:52.405" status="PASS" starttime="20170816 05:08:51.602"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:08:52.406" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:08:52.406" status="PASS" starttime="20170816 05:08:52.405"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:08:52.406" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:08:52.406" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:08:52.406" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit'}</msg>
<status endtime="20170816 05:08:52.407" status="PASS" starttime="20170816 05:08:52.406"></status>
</kw>
<msg timestamp="20170816 05:08:52.407" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170816 05:08:52.407" status="PASS" starttime="20170816 05:08:51.602"></status>
</kw>
<msg timestamp="20170816 05:08:52.407" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170816 05:08:52.407" status="PASS" starttime="20170816 05:08:51.602"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170816 05:08:52.408" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170816 05:08:52.408" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170816 05:08:52.408" status="FAIL" starttime="20170816 05:08:52.407"></status>
</kw>
<status endtime="20170816 05:08:52.408" status="FAIL" starttime="20170816 05:08:50.284"></status>
</kw>
<status endtime="20170816 05:08:52.408" status="FAIL" starttime="20170816 05:08:48.450"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:09:02.414" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:09:02.414" status="PASS" starttime="20170816 05:09:02.413"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:09:02.415" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:09:02.415" status="PASS" starttime="20170816 05:09:02.414"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:09:02.415" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:09:02.415" status="PASS" starttime="20170816 05:09:02.415"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:09:02.416" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:09:02.416" status="PASS" starttime="20170816 05:09:02.416"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:09:03.020" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:09:03.020" status="PASS" starttime="20170816 05:09:02.417"></status>
</kw>
<msg timestamp="20170816 05:09:03.020" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:09:03.020" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:09:03.020" status="PASS" starttime="20170816 05:09:02.416"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:09:03.021" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:09:03.021" status="PASS" starttime="20170816 05:09:03.020"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:09:03.022" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:09:03.022" status="PASS" starttime="20170816 05:09:03.021"></status>
</kw>
<status endtime="20170816 05:09:03.022" status="PASS" starttime="20170816 05:09:02.413"></status>
</kw>
<status endtime="20170816 05:09:03.022" status="PASS" starttime="20170816 05:09:02.412"></status>
</kw>
<status endtime="20170816 05:09:03.022" status="PASS" starttime="20170816 05:09:02.412"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:09:03.023" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170816 05:09:03.023" status="PASS" starttime="20170816 05:09:03.022"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:09:03.025" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170816 05:09:03.025" status="PASS" starttime="20170816 05:09:03.024"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:09:03.026" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170816 05:09:03.026" status="PASS" starttime="20170816 05:09:03.025"></status>
</kw>
<status endtime="20170816 05:09:03.026" status="PASS" starttime="20170816 05:09:03.025"></status>
</kw>
<status endtime="20170816 05:09:03.026" status="PASS" starttime="20170816 05:09:03.023"></status>
</kw>
<status endtime="20170816 05:09:03.026" status="PASS" starttime="20170816 05:09:03.023"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:09:03.564" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 05:09:03.565" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:09:03.565" status="PASS" starttime="20170816 05:09:03.026"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:09:03.567" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:09:03.567" status="PASS" starttime="20170816 05:09:03.566"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:09:03.568" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:09:03.568" status="PASS" starttime="20170816 05:09:03.568"></status>
</kw>
<status endtime="20170816 05:09:03.568" status="PASS" starttime="20170816 05:09:03.567"></status>
</kw>
<status endtime="20170816 05:09:03.568" status="PASS" starttime="20170816 05:09:03.566"></status>
</kw>
<status endtime="20170816 05:09:03.568" status="PASS" starttime="20170816 05:09:03.565"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:09:03.569" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:09:03.569" status="PASS" starttime="20170816 05:09:03.568"></status>
</kw>
<msg timestamp="20170816 05:09:03.569" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:09:03.569" status="PASS" starttime="20170816 05:09:02.411"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:09:03.570" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:09:03.570" status="PASS" starttime="20170816 05:09:03.569"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:09:03.570" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:09:03.570" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:09:03.570" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170816 05:09:03.570" status="PASS" starttime="20170816 05:09:03.570"></status>
</kw>
<msg timestamp="20170816 05:09:03.571" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170816 05:09:03.571" status="PASS" starttime="20170816 05:09:02.410"></status>
</kw>
<msg timestamp="20170816 05:09:03.571" level="INFO">${power_state} = On</msg>
<status endtime="20170816 05:09:03.571" status="PASS" starttime="20170816 05:09:02.410"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170816 05:09:03.572" status="PASS" starttime="20170816 05:09:03.571"></status>
</kw>
<status endtime="20170816 05:09:03.572" status="PASS" starttime="20170816 05:09:02.409"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:09:03.575" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:09:03.576" status="PASS" starttime="20170816 05:09:03.575"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:09:03.577" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:09:03.577" status="PASS" starttime="20170816 05:09:03.576"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:09:03.577" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:09:03.577" status="PASS" starttime="20170816 05:09:03.577"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:09:03.578" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:09:03.578" status="PASS" starttime="20170816 05:09:03.578"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:09:04.190" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:09:04.190" status="PASS" starttime="20170816 05:09:03.579"></status>
</kw>
<msg timestamp="20170816 05:09:04.190" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:09:04.190" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:09:04.190" status="PASS" starttime="20170816 05:09:03.578"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:09:04.191" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:09:04.191" status="PASS" starttime="20170816 05:09:04.191"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:09:04.192" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:09:04.192" status="PASS" starttime="20170816 05:09:04.191"></status>
</kw>
<status endtime="20170816 05:09:04.192" status="PASS" starttime="20170816 05:09:03.574"></status>
</kw>
<status endtime="20170816 05:09:04.192" status="PASS" starttime="20170816 05:09:03.574"></status>
</kw>
<status endtime="20170816 05:09:04.192" status="PASS" starttime="20170816 05:09:03.573"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:09:04.193" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170816 05:09:04.193" status="PASS" starttime="20170816 05:09:04.192"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:09:04.195" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170816 05:09:04.195" status="PASS" starttime="20170816 05:09:04.194"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:09:04.196" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170816 05:09:04.196" status="PASS" starttime="20170816 05:09:04.195"></status>
</kw>
<status endtime="20170816 05:09:04.196" status="PASS" starttime="20170816 05:09:04.195"></status>
</kw>
<status endtime="20170816 05:09:04.196" status="PASS" starttime="20170816 05:09:04.193"></status>
</kw>
<status endtime="20170816 05:09:04.196" status="PASS" starttime="20170816 05:09:04.193"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:09:04.739" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 05:09:04.739" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:09:04.739" status="PASS" starttime="20170816 05:09:04.196"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:09:04.741" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:09:04.741" status="PASS" starttime="20170816 05:09:04.741"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:09:04.742" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:09:04.742" status="PASS" starttime="20170816 05:09:04.742"></status>
</kw>
<status endtime="20170816 05:09:04.743" status="PASS" starttime="20170816 05:09:04.742"></status>
</kw>
<status endtime="20170816 05:09:04.743" status="PASS" starttime="20170816 05:09:04.740"></status>
</kw>
<status endtime="20170816 05:09:04.743" status="PASS" starttime="20170816 05:09:04.740"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:09:04.743" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:09:04.743" status="PASS" starttime="20170816 05:09:04.743"></status>
</kw>
<msg timestamp="20170816 05:09:04.743" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:09:04.743" status="PASS" starttime="20170816 05:09:03.573"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:09:04.744" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:09:04.745" status="PASS" starttime="20170816 05:09:04.744"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:09:04.745" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:09:04.745" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:09:04.746" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170816 05:09:04.746" status="PASS" starttime="20170816 05:09:04.745"></status>
</kw>
<msg timestamp="20170816 05:09:04.746" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170816 05:09:04.746" status="PASS" starttime="20170816 05:09:03.572"></status>
</kw>
<msg timestamp="20170816 05:09:04.746" level="INFO">${host_state} = Running</msg>
<status endtime="20170816 05:09:04.747" status="PASS" starttime="20170816 05:09:03.572"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170816 05:09:04.747" status="PASS" starttime="20170816 05:09:04.747"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:09:04.754" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:09:04.755" status="PASS" starttime="20170816 05:09:04.754"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:09:04.756" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:09:04.756" status="PASS" starttime="20170816 05:09:04.755"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:09:04.757" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:09:04.757" status="PASS" starttime="20170816 05:09:04.756"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:09:04.758" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:09:04.758" status="PASS" starttime="20170816 05:09:04.757"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:09:05.283" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:09:05.284" status="PASS" starttime="20170816 05:09:04.759"></status>
</kw>
<msg timestamp="20170816 05:09:05.284" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:09:05.284" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:09:05.284" status="PASS" starttime="20170816 05:09:04.758"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:09:05.285" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:09:05.285" status="PASS" starttime="20170816 05:09:05.284"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:09:05.286" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:09:05.286" status="PASS" starttime="20170816 05:09:05.285"></status>
</kw>
<status endtime="20170816 05:09:05.286" status="PASS" starttime="20170816 05:09:04.753"></status>
</kw>
<status endtime="20170816 05:09:05.286" status="PASS" starttime="20170816 05:09:04.753"></status>
</kw>
<status endtime="20170816 05:09:05.286" status="PASS" starttime="20170816 05:09:04.752"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:09:05.287" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170816 05:09:05.287" status="PASS" starttime="20170816 05:09:05.286"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:09:05.289" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170816 05:09:05.289" status="PASS" starttime="20170816 05:09:05.288"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:09:05.289" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170816 05:09:05.290" status="PASS" starttime="20170816 05:09:05.289"></status>
</kw>
<status endtime="20170816 05:09:05.290" status="PASS" starttime="20170816 05:09:05.289"></status>
</kw>
<status endtime="20170816 05:09:05.290" status="PASS" starttime="20170816 05:09:05.287"></status>
</kw>
<status endtime="20170816 05:09:05.290" status="PASS" starttime="20170816 05:09:05.287"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:09:05.644" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170816 05:09:05.645" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:09:05.645" status="PASS" starttime="20170816 05:09:05.290"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:09:05.646" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:09:05.646" status="PASS" starttime="20170816 05:09:05.646"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:09:05.647" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:09:05.647" status="PASS" starttime="20170816 05:09:05.647"></status>
</kw>
<status endtime="20170816 05:09:05.648" status="PASS" starttime="20170816 05:09:05.647"></status>
</kw>
<status endtime="20170816 05:09:05.648" status="PASS" starttime="20170816 05:09:05.645"></status>
</kw>
<status endtime="20170816 05:09:05.648" status="PASS" starttime="20170816 05:09:05.645"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:09:05.648" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:09:05.648" status="PASS" starttime="20170816 05:09:05.648"></status>
</kw>
<msg timestamp="20170816 05:09:05.648" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:09:05.648" status="PASS" starttime="20170816 05:09:04.751"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:09:05.649" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:09:05.649" status="PASS" starttime="20170816 05:09:05.649"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:09:05.650" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:09:05.650" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:09:05.650" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170816 05:09:05.650" status="PASS" starttime="20170816 05:09:05.649"></status>
</kw>
<msg timestamp="20170816 05:09:05.650" level="INFO">${state} = Off</msg>
<status endtime="20170816 05:09:05.650" status="PASS" starttime="20170816 05:09:04.750"></status>
</kw>
<msg timestamp="20170816 05:09:05.650" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170816 05:09:05.650" status="PASS" starttime="20170816 05:09:04.749"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170816 05:09:05.651" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170816 05:09:05.651" status="FAIL" starttime="20170816 05:09:05.651"></status>
</kw>
<status endtime="20170816 05:09:05.651" status="FAIL" starttime="20170816 05:09:04.749"></status>
</kw>
<msg timestamp="20170816 05:09:05.651" level="INFO">${status} = False</msg>
<status endtime="20170816 05:09:05.652" status="PASS" starttime="20170816 05:09:04.748"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status endtime="20170816 05:09:05.652" status="PASS" starttime="20170816 05:09:05.652"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:09:05.656" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:09:05.657" status="PASS" starttime="20170816 05:09:05.655"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:09:05.657" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:09:05.657" status="PASS" starttime="20170816 05:09:05.657"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:09:05.658" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:09:05.658" status="PASS" starttime="20170816 05:09:05.657"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:09:05.658" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:09:05.658" status="PASS" starttime="20170816 05:09:05.658"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:09:06.092" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:09:06.093" status="PASS" starttime="20170816 05:09:05.659"></status>
</kw>
<msg timestamp="20170816 05:09:06.093" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:09:06.093" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:09:06.093" status="PASS" starttime="20170816 05:09:05.659"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:09:06.093" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:09:06.094" status="PASS" starttime="20170816 05:09:06.093"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:09:06.094" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:09:06.094" status="PASS" starttime="20170816 05:09:06.094"></status>
</kw>
<status endtime="20170816 05:09:06.094" status="PASS" starttime="20170816 05:09:05.655"></status>
</kw>
<status endtime="20170816 05:09:06.094" status="PASS" starttime="20170816 05:09:05.654"></status>
</kw>
<status endtime="20170816 05:09:06.095" status="PASS" starttime="20170816 05:09:05.654"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:09:06.095" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170816 05:09:06.095" status="PASS" starttime="20170816 05:09:06.095"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:09:06.097" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170816 05:09:06.097" status="PASS" starttime="20170816 05:09:06.097"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:09:06.098" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170816 05:09:06.098" status="PASS" starttime="20170816 05:09:06.098"></status>
</kw>
<status endtime="20170816 05:09:06.098" status="PASS" starttime="20170816 05:09:06.097"></status>
</kw>
<status endtime="20170816 05:09:06.099" status="PASS" starttime="20170816 05:09:06.096"></status>
</kw>
<status endtime="20170816 05:09:06.099" status="PASS" starttime="20170816 05:09:06.095"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:09:06.587" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170816 05:09:06.588" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:09:06.588" status="PASS" starttime="20170816 05:09:06.099"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:09:06.589" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:09:06.589" status="PASS" starttime="20170816 05:09:06.589"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:09:06.590" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:09:06.590" status="PASS" starttime="20170816 05:09:06.590"></status>
</kw>
<status endtime="20170816 05:09:06.591" status="PASS" starttime="20170816 05:09:06.590"></status>
</kw>
<status endtime="20170816 05:09:06.591" status="PASS" starttime="20170816 05:09:06.588"></status>
</kw>
<status endtime="20170816 05:09:06.591" status="PASS" starttime="20170816 05:09:06.588"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:09:06.591" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:09:06.591" status="PASS" starttime="20170816 05:09:06.591"></status>
</kw>
<msg timestamp="20170816 05:09:06.592" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:09:06.592" status="PASS" starttime="20170816 05:09:05.653"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:09:06.592" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:09:06.592" status="PASS" starttime="20170816 05:09:06.592"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:09:06.593" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:09:06.593" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:09:06.593" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit'}</msg>
<status endtime="20170816 05:09:06.593" status="PASS" starttime="20170816 05:09:06.592"></status>
</kw>
<msg timestamp="20170816 05:09:06.593" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170816 05:09:06.593" status="PASS" starttime="20170816 05:09:05.653"></status>
</kw>
<msg timestamp="20170816 05:09:06.593" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170816 05:09:06.593" status="PASS" starttime="20170816 05:09:05.652"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170816 05:09:06.594" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170816 05:09:06.594" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170816 05:09:06.594" status="FAIL" starttime="20170816 05:09:06.594"></status>
</kw>
<status endtime="20170816 05:09:06.594" status="FAIL" starttime="20170816 05:09:04.748"></status>
</kw>
<status endtime="20170816 05:09:06.595" status="FAIL" starttime="20170816 05:09:02.409"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:09:16.600" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:09:16.601" status="PASS" starttime="20170816 05:09:16.600"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:09:16.601" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:09:16.601" status="PASS" starttime="20170816 05:09:16.601"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:09:16.602" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:09:16.602" status="PASS" starttime="20170816 05:09:16.602"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:09:16.603" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:09:16.603" status="PASS" starttime="20170816 05:09:16.602"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:09:16.951" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:09:16.951" status="PASS" starttime="20170816 05:09:16.603"></status>
</kw>
<msg timestamp="20170816 05:09:16.951" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:09:16.951" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:09:16.952" status="PASS" starttime="20170816 05:09:16.603"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:09:16.952" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:09:16.953" status="PASS" starttime="20170816 05:09:16.952"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:09:16.953" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:09:16.953" status="PASS" starttime="20170816 05:09:16.953"></status>
</kw>
<status endtime="20170816 05:09:16.953" status="PASS" starttime="20170816 05:09:16.599"></status>
</kw>
<status endtime="20170816 05:09:16.953" status="PASS" starttime="20170816 05:09:16.599"></status>
</kw>
<status endtime="20170816 05:09:16.954" status="PASS" starttime="20170816 05:09:16.598"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:09:16.954" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170816 05:09:16.954" status="PASS" starttime="20170816 05:09:16.954"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:09:16.956" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170816 05:09:16.956" status="PASS" starttime="20170816 05:09:16.956"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:09:16.957" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170816 05:09:16.958" status="PASS" starttime="20170816 05:09:16.957"></status>
</kw>
<status endtime="20170816 05:09:16.958" status="PASS" starttime="20170816 05:09:16.956"></status>
</kw>
<status endtime="20170816 05:09:16.958" status="PASS" starttime="20170816 05:09:16.955"></status>
</kw>
<status endtime="20170816 05:09:16.958" status="PASS" starttime="20170816 05:09:16.954"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:09:17.138" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 05:09:17.139" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:09:17.139" status="PASS" starttime="20170816 05:09:16.958"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:09:17.141" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:09:17.141" status="PASS" starttime="20170816 05:09:17.140"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:09:17.141" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:09:17.142" status="PASS" starttime="20170816 05:09:17.141"></status>
</kw>
<status endtime="20170816 05:09:17.142" status="PASS" starttime="20170816 05:09:17.141"></status>
</kw>
<status endtime="20170816 05:09:17.142" status="PASS" starttime="20170816 05:09:17.140"></status>
</kw>
<status endtime="20170816 05:09:17.142" status="PASS" starttime="20170816 05:09:17.139"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:09:17.142" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:09:17.142" status="PASS" starttime="20170816 05:09:17.142"></status>
</kw>
<msg timestamp="20170816 05:09:17.143" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:09:17.143" status="PASS" starttime="20170816 05:09:16.598"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:09:17.143" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:09:17.143" status="PASS" starttime="20170816 05:09:17.143"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:09:17.144" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:09:17.144" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:09:17.144" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170816 05:09:17.144" status="PASS" starttime="20170816 05:09:17.144"></status>
</kw>
<msg timestamp="20170816 05:09:17.144" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170816 05:09:17.144" status="PASS" starttime="20170816 05:09:16.597"></status>
</kw>
<msg timestamp="20170816 05:09:17.145" level="INFO">${power_state} = On</msg>
<status endtime="20170816 05:09:17.145" status="PASS" starttime="20170816 05:09:16.596"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170816 05:09:17.145" status="PASS" starttime="20170816 05:09:17.145"></status>
</kw>
<status endtime="20170816 05:09:17.145" status="PASS" starttime="20170816 05:09:16.596"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:09:17.149" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:09:17.149" status="PASS" starttime="20170816 05:09:17.148"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:09:17.150" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:09:17.150" status="PASS" starttime="20170816 05:09:17.149"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:09:17.150" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:09:17.150" status="PASS" starttime="20170816 05:09:17.150"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:09:17.151" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:09:17.151" status="PASS" starttime="20170816 05:09:17.151"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:09:17.521" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:09:17.522" status="PASS" starttime="20170816 05:09:17.152"></status>
</kw>
<msg timestamp="20170816 05:09:17.522" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:09:17.522" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:09:17.522" status="PASS" starttime="20170816 05:09:17.151"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:09:17.522" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:09:17.523" status="PASS" starttime="20170816 05:09:17.522"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:09:17.523" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:09:17.523" status="PASS" starttime="20170816 05:09:17.523"></status>
</kw>
<status endtime="20170816 05:09:17.523" status="PASS" starttime="20170816 05:09:17.148"></status>
</kw>
<status endtime="20170816 05:09:17.523" status="PASS" starttime="20170816 05:09:17.148"></status>
</kw>
<status endtime="20170816 05:09:17.524" status="PASS" starttime="20170816 05:09:17.147"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:09:17.524" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170816 05:09:17.524" status="PASS" starttime="20170816 05:09:17.524"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:09:17.526" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170816 05:09:17.526" status="PASS" starttime="20170816 05:09:17.526"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:09:17.527" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170816 05:09:17.527" status="PASS" starttime="20170816 05:09:17.527"></status>
</kw>
<status endtime="20170816 05:09:17.527" status="PASS" starttime="20170816 05:09:17.527"></status>
</kw>
<status endtime="20170816 05:09:17.528" status="PASS" starttime="20170816 05:09:17.525"></status>
</kw>
<status endtime="20170816 05:09:17.528" status="PASS" starttime="20170816 05:09:17.525"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:09:18.160" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 05:09:18.160" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:09:18.160" status="PASS" starttime="20170816 05:09:17.528"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:09:18.162" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:09:18.162" status="PASS" starttime="20170816 05:09:18.162"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:09:18.163" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:09:18.163" status="PASS" starttime="20170816 05:09:18.163"></status>
</kw>
<status endtime="20170816 05:09:18.163" status="PASS" starttime="20170816 05:09:18.162"></status>
</kw>
<status endtime="20170816 05:09:18.164" status="PASS" starttime="20170816 05:09:18.161"></status>
</kw>
<status endtime="20170816 05:09:18.164" status="PASS" starttime="20170816 05:09:18.161"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:09:18.164" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:09:18.164" status="PASS" starttime="20170816 05:09:18.164"></status>
</kw>
<msg timestamp="20170816 05:09:18.164" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:09:18.164" status="PASS" starttime="20170816 05:09:17.146"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:09:18.165" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:09:18.165" status="PASS" starttime="20170816 05:09:18.165"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:09:18.166" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:09:18.166" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:09:18.166" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170816 05:09:18.166" status="PASS" starttime="20170816 05:09:18.166"></status>
</kw>
<msg timestamp="20170816 05:09:18.167" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170816 05:09:18.167" status="PASS" starttime="20170816 05:09:17.146"></status>
</kw>
<msg timestamp="20170816 05:09:18.167" level="INFO">${host_state} = Running</msg>
<status endtime="20170816 05:09:18.167" status="PASS" starttime="20170816 05:09:17.145"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170816 05:09:18.167" status="PASS" starttime="20170816 05:09:18.167"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:09:18.173" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:09:18.173" status="PASS" starttime="20170816 05:09:18.172"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:09:18.173" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:09:18.174" status="PASS" starttime="20170816 05:09:18.173"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:09:18.174" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:09:18.174" status="PASS" starttime="20170816 05:09:18.174"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:09:18.175" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:09:18.175" status="PASS" starttime="20170816 05:09:18.174"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:09:18.516" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:09:18.516" status="PASS" starttime="20170816 05:09:18.175"></status>
</kw>
<msg timestamp="20170816 05:09:18.516" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:09:18.516" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:09:18.516" status="PASS" starttime="20170816 05:09:18.175"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:09:18.517" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:09:18.517" status="PASS" starttime="20170816 05:09:18.517"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:09:18.518" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:09:18.518" status="PASS" starttime="20170816 05:09:18.517"></status>
</kw>
<status endtime="20170816 05:09:18.518" status="PASS" starttime="20170816 05:09:18.172"></status>
</kw>
<status endtime="20170816 05:09:18.518" status="PASS" starttime="20170816 05:09:18.171"></status>
</kw>
<status endtime="20170816 05:09:18.518" status="PASS" starttime="20170816 05:09:18.170"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:09:18.519" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170816 05:09:18.519" status="PASS" starttime="20170816 05:09:18.518"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:09:18.521" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170816 05:09:18.521" status="PASS" starttime="20170816 05:09:18.520"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:09:18.522" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170816 05:09:18.522" status="PASS" starttime="20170816 05:09:18.522"></status>
</kw>
<status endtime="20170816 05:09:18.522" status="PASS" starttime="20170816 05:09:18.521"></status>
</kw>
<status endtime="20170816 05:09:18.522" status="PASS" starttime="20170816 05:09:18.520"></status>
</kw>
<status endtime="20170816 05:09:18.522" status="PASS" starttime="20170816 05:09:18.519"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:09:19.198" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170816 05:09:19.198" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:09:19.198" status="PASS" starttime="20170816 05:09:18.523"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:09:19.203" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:09:19.203" status="PASS" starttime="20170816 05:09:19.202"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:09:19.204" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:09:19.204" status="PASS" starttime="20170816 05:09:19.204"></status>
</kw>
<status endtime="20170816 05:09:19.204" status="PASS" starttime="20170816 05:09:19.203"></status>
</kw>
<status endtime="20170816 05:09:19.205" status="PASS" starttime="20170816 05:09:19.199"></status>
</kw>
<status endtime="20170816 05:09:19.205" status="PASS" starttime="20170816 05:09:19.198"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:09:19.205" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:09:19.205" status="PASS" starttime="20170816 05:09:19.205"></status>
</kw>
<msg timestamp="20170816 05:09:19.205" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:09:19.205" status="PASS" starttime="20170816 05:09:18.169"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:09:19.206" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:09:19.206" status="PASS" starttime="20170816 05:09:19.206"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:09:19.207" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:09:19.207" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:09:19.207" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170816 05:09:19.207" status="PASS" starttime="20170816 05:09:19.206"></status>
</kw>
<msg timestamp="20170816 05:09:19.207" level="INFO">${state} = Off</msg>
<status endtime="20170816 05:09:19.207" status="PASS" starttime="20170816 05:09:18.169"></status>
</kw>
<msg timestamp="20170816 05:09:19.207" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170816 05:09:19.207" status="PASS" starttime="20170816 05:09:18.169"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170816 05:09:19.208" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170816 05:09:19.208" status="FAIL" starttime="20170816 05:09:19.208"></status>
</kw>
<status endtime="20170816 05:09:19.208" status="FAIL" starttime="20170816 05:09:18.168"></status>
</kw>
<msg timestamp="20170816 05:09:19.208" level="INFO">${status} = False</msg>
<status endtime="20170816 05:09:19.208" status="PASS" starttime="20170816 05:09:18.168"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status endtime="20170816 05:09:19.209" status="PASS" starttime="20170816 05:09:19.209"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:09:19.213" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:09:19.213" status="PASS" starttime="20170816 05:09:19.213"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:09:19.214" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:09:19.214" status="PASS" starttime="20170816 05:09:19.214"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:09:19.215" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:09:19.215" status="PASS" starttime="20170816 05:09:19.214"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:09:19.215" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:09:19.215" status="PASS" starttime="20170816 05:09:19.215"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:09:19.696" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:09:19.696" status="PASS" starttime="20170816 05:09:19.216"></status>
</kw>
<msg timestamp="20170816 05:09:19.697" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:09:19.697" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:09:19.697" status="PASS" starttime="20170816 05:09:19.216"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:09:19.697" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:09:19.698" status="PASS" starttime="20170816 05:09:19.697"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:09:19.698" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:09:19.698" status="PASS" starttime="20170816 05:09:19.698"></status>
</kw>
<status endtime="20170816 05:09:19.698" status="PASS" starttime="20170816 05:09:19.212"></status>
</kw>
<status endtime="20170816 05:09:19.699" status="PASS" starttime="20170816 05:09:19.212"></status>
</kw>
<status endtime="20170816 05:09:19.699" status="PASS" starttime="20170816 05:09:19.211"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:09:19.699" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170816 05:09:19.699" status="PASS" starttime="20170816 05:09:19.699"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:09:19.702" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170816 05:09:19.702" status="PASS" starttime="20170816 05:09:19.701"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:09:19.703" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170816 05:09:19.703" status="PASS" starttime="20170816 05:09:19.703"></status>
</kw>
<status endtime="20170816 05:09:19.703" status="PASS" starttime="20170816 05:09:19.702"></status>
</kw>
<status endtime="20170816 05:09:19.703" status="PASS" starttime="20170816 05:09:19.700"></status>
</kw>
<status endtime="20170816 05:09:19.703" status="PASS" starttime="20170816 05:09:19.700"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:09:20.292" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170816 05:09:20.293" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:09:20.293" status="PASS" starttime="20170816 05:09:19.703"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:09:20.295" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:09:20.295" status="PASS" starttime="20170816 05:09:20.294"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:09:20.295" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:09:20.296" status="PASS" starttime="20170816 05:09:20.295"></status>
</kw>
<status endtime="20170816 05:09:20.296" status="PASS" starttime="20170816 05:09:20.295"></status>
</kw>
<status endtime="20170816 05:09:20.296" status="PASS" starttime="20170816 05:09:20.294"></status>
</kw>
<status endtime="20170816 05:09:20.296" status="PASS" starttime="20170816 05:09:20.293"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:09:20.296" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:09:20.296" status="PASS" starttime="20170816 05:09:20.296"></status>
</kw>
<msg timestamp="20170816 05:09:20.297" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:09:20.297" status="PASS" starttime="20170816 05:09:19.210"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:09:20.297" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:09:20.297" status="PASS" starttime="20170816 05:09:20.297"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:09:20.298" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:09:20.298" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:09:20.298" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit'}</msg>
<status endtime="20170816 05:09:20.298" status="PASS" starttime="20170816 05:09:20.298"></status>
</kw>
<msg timestamp="20170816 05:09:20.298" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170816 05:09:20.298" status="PASS" starttime="20170816 05:09:19.210"></status>
</kw>
<msg timestamp="20170816 05:09:20.298" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170816 05:09:20.299" status="PASS" starttime="20170816 05:09:19.209"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170816 05:09:20.299" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170816 05:09:20.299" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170816 05:09:20.299" status="FAIL" starttime="20170816 05:09:20.299"></status>
</kw>
<status endtime="20170816 05:09:20.300" status="FAIL" starttime="20170816 05:09:18.168"></status>
</kw>
<status endtime="20170816 05:09:20.300" status="FAIL" starttime="20170816 05:09:16.595"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:09:30.305" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:09:30.305" status="PASS" starttime="20170816 05:09:30.305"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:09:30.306" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:09:30.306" status="PASS" starttime="20170816 05:09:30.306"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:09:30.307" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:09:30.307" status="PASS" starttime="20170816 05:09:30.306"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:09:30.307" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:09:30.307" status="PASS" starttime="20170816 05:09:30.307"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:09:30.601" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:09:30.601" status="PASS" starttime="20170816 05:09:30.308"></status>
</kw>
<msg timestamp="20170816 05:09:30.601" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:09:30.601" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:09:30.601" status="PASS" starttime="20170816 05:09:30.308"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:09:30.602" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:09:30.602" status="PASS" starttime="20170816 05:09:30.602"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:09:30.603" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:09:30.603" status="PASS" starttime="20170816 05:09:30.602"></status>
</kw>
<status endtime="20170816 05:09:30.603" status="PASS" starttime="20170816 05:09:30.304"></status>
</kw>
<status endtime="20170816 05:09:30.603" status="PASS" starttime="20170816 05:09:30.304"></status>
</kw>
<status endtime="20170816 05:09:30.603" status="PASS" starttime="20170816 05:09:30.303"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:09:30.604" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170816 05:09:30.604" status="PASS" starttime="20170816 05:09:30.603"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:09:30.606" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170816 05:09:30.606" status="PASS" starttime="20170816 05:09:30.605"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:09:30.607" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170816 05:09:30.607" status="PASS" starttime="20170816 05:09:30.607"></status>
</kw>
<status endtime="20170816 05:09:30.607" status="PASS" starttime="20170816 05:09:30.606"></status>
</kw>
<status endtime="20170816 05:09:30.607" status="PASS" starttime="20170816 05:09:30.605"></status>
</kw>
<status endtime="20170816 05:09:30.607" status="PASS" starttime="20170816 05:09:30.604"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:09:35.287" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 05:09:35.288" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:09:35.288" status="PASS" starttime="20170816 05:09:30.608"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:09:35.290" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:09:35.290" status="PASS" starttime="20170816 05:09:35.289"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:09:35.291" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:09:35.291" status="PASS" starttime="20170816 05:09:35.291"></status>
</kw>
<status endtime="20170816 05:09:35.291" status="PASS" starttime="20170816 05:09:35.290"></status>
</kw>
<status endtime="20170816 05:09:35.291" status="PASS" starttime="20170816 05:09:35.289"></status>
</kw>
<status endtime="20170816 05:09:35.291" status="PASS" starttime="20170816 05:09:35.288"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:09:35.292" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:09:35.292" status="PASS" starttime="20170816 05:09:35.291"></status>
</kw>
<msg timestamp="20170816 05:09:35.292" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:09:35.292" status="PASS" starttime="20170816 05:09:30.302"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:09:35.293" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:09:35.293" status="PASS" starttime="20170816 05:09:35.292"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:09:35.293" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:09:35.293" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:09:35.293" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170816 05:09:35.293" status="PASS" starttime="20170816 05:09:35.293"></status>
</kw>
<msg timestamp="20170816 05:09:35.294" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170816 05:09:35.294" status="PASS" starttime="20170816 05:09:30.302"></status>
</kw>
<msg timestamp="20170816 05:09:35.294" level="INFO">${power_state} = On</msg>
<status endtime="20170816 05:09:35.294" status="PASS" starttime="20170816 05:09:30.301"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170816 05:09:35.295" status="PASS" starttime="20170816 05:09:35.294"></status>
</kw>
<status endtime="20170816 05:09:35.295" status="PASS" starttime="20170816 05:09:30.301"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:09:35.299" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:09:35.299" status="PASS" starttime="20170816 05:09:35.298"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:09:35.300" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:09:35.300" status="PASS" starttime="20170816 05:09:35.299"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:09:35.300" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:09:35.300" status="PASS" starttime="20170816 05:09:35.300"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:09:35.301" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:09:35.301" status="PASS" starttime="20170816 05:09:35.300"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:09:36.154" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:09:36.154" status="PASS" starttime="20170816 05:09:35.302"></status>
</kw>
<msg timestamp="20170816 05:09:36.154" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:09:36.154" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:09:36.154" status="PASS" starttime="20170816 05:09:35.301"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:09:36.155" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:09:36.155" status="PASS" starttime="20170816 05:09:36.154"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:09:36.155" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:09:36.155" status="PASS" starttime="20170816 05:09:36.155"></status>
</kw>
<status endtime="20170816 05:09:36.156" status="PASS" starttime="20170816 05:09:35.297"></status>
</kw>
<status endtime="20170816 05:09:36.156" status="PASS" starttime="20170816 05:09:35.297"></status>
</kw>
<status endtime="20170816 05:09:36.156" status="PASS" starttime="20170816 05:09:35.296"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:09:36.156" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170816 05:09:36.156" status="PASS" starttime="20170816 05:09:36.156"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:09:36.158" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170816 05:09:36.158" status="PASS" starttime="20170816 05:09:36.158"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:09:36.159" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170816 05:09:36.159" status="PASS" starttime="20170816 05:09:36.159"></status>
</kw>
<status endtime="20170816 05:09:36.160" status="PASS" starttime="20170816 05:09:36.159"></status>
</kw>
<status endtime="20170816 05:09:36.160" status="PASS" starttime="20170816 05:09:36.157"></status>
</kw>
<status endtime="20170816 05:09:36.160" status="PASS" starttime="20170816 05:09:36.157"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:09:36.380" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 05:09:36.380" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:09:36.380" status="PASS" starttime="20170816 05:09:36.160"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:09:36.382" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:09:36.382" status="PASS" starttime="20170816 05:09:36.381"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:09:36.383" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:09:36.383" status="PASS" starttime="20170816 05:09:36.383"></status>
</kw>
<status endtime="20170816 05:09:36.384" status="PASS" starttime="20170816 05:09:36.382"></status>
</kw>
<status endtime="20170816 05:09:36.384" status="PASS" starttime="20170816 05:09:36.381"></status>
</kw>
<status endtime="20170816 05:09:36.384" status="PASS" starttime="20170816 05:09:36.380"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:09:36.384" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:09:36.384" status="PASS" starttime="20170816 05:09:36.384"></status>
</kw>
<msg timestamp="20170816 05:09:36.384" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:09:36.384" status="PASS" starttime="20170816 05:09:35.296"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:09:36.385" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:09:36.385" status="PASS" starttime="20170816 05:09:36.385"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:09:36.386" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:09:36.386" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:09:36.386" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170816 05:09:36.386" status="PASS" starttime="20170816 05:09:36.385"></status>
</kw>
<msg timestamp="20170816 05:09:36.386" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170816 05:09:36.386" status="PASS" starttime="20170816 05:09:35.295"></status>
</kw>
<msg timestamp="20170816 05:09:36.386" level="INFO">${host_state} = Running</msg>
<status endtime="20170816 05:09:36.387" status="PASS" starttime="20170816 05:09:35.295"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170816 05:09:36.387" status="PASS" starttime="20170816 05:09:36.387"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:09:36.392" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:09:36.392" status="PASS" starttime="20170816 05:09:36.391"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:09:36.392" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:09:36.393" status="PASS" starttime="20170816 05:09:36.392"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:09:36.393" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:09:36.393" status="PASS" starttime="20170816 05:09:36.393"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:09:36.394" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:09:36.394" status="PASS" starttime="20170816 05:09:36.393"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:09:36.618" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:09:36.618" status="PASS" starttime="20170816 05:09:36.394"></status>
</kw>
<msg timestamp="20170816 05:09:36.618" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:09:36.618" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:09:36.618" status="PASS" starttime="20170816 05:09:36.394"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:09:36.619" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:09:36.619" status="PASS" starttime="20170816 05:09:36.618"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:09:36.619" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:09:36.619" status="PASS" starttime="20170816 05:09:36.619"></status>
</kw>
<status endtime="20170816 05:09:36.620" status="PASS" starttime="20170816 05:09:36.391"></status>
</kw>
<status endtime="20170816 05:09:36.620" status="PASS" starttime="20170816 05:09:36.390"></status>
</kw>
<status endtime="20170816 05:09:36.620" status="PASS" starttime="20170816 05:09:36.390"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:09:36.620" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170816 05:09:36.620" status="PASS" starttime="20170816 05:09:36.620"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:09:36.623" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170816 05:09:36.623" status="PASS" starttime="20170816 05:09:36.622"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:09:36.624" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170816 05:09:36.624" status="PASS" starttime="20170816 05:09:36.623"></status>
</kw>
<status endtime="20170816 05:09:36.624" status="PASS" starttime="20170816 05:09:36.623"></status>
</kw>
<status endtime="20170816 05:09:36.624" status="PASS" starttime="20170816 05:09:36.621"></status>
</kw>
<status endtime="20170816 05:09:36.624" status="PASS" starttime="20170816 05:09:36.621"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:09:36.688" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170816 05:09:36.688" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:09:36.689" status="PASS" starttime="20170816 05:09:36.624"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:09:36.690" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:09:36.690" status="PASS" starttime="20170816 05:09:36.690"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:09:36.691" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:09:36.691" status="PASS" starttime="20170816 05:09:36.691"></status>
</kw>
<status endtime="20170816 05:09:36.691" status="PASS" starttime="20170816 05:09:36.690"></status>
</kw>
<status endtime="20170816 05:09:36.691" status="PASS" starttime="20170816 05:09:36.689"></status>
</kw>
<status endtime="20170816 05:09:36.692" status="PASS" starttime="20170816 05:09:36.689"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:09:36.692" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:09:36.692" status="PASS" starttime="20170816 05:09:36.692"></status>
</kw>
<msg timestamp="20170816 05:09:36.692" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:09:36.692" status="PASS" starttime="20170816 05:09:36.389"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:09:36.693" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:09:36.693" status="PASS" starttime="20170816 05:09:36.693"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:09:36.693" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:09:36.694" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:09:36.694" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170816 05:09:36.694" status="PASS" starttime="20170816 05:09:36.693"></status>
</kw>
<msg timestamp="20170816 05:09:36.694" level="INFO">${state} = Off</msg>
<status endtime="20170816 05:09:36.694" status="PASS" starttime="20170816 05:09:36.389"></status>
</kw>
<msg timestamp="20170816 05:09:36.694" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170816 05:09:36.694" status="PASS" starttime="20170816 05:09:36.388"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170816 05:09:36.695" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170816 05:09:36.695" status="FAIL" starttime="20170816 05:09:36.694"></status>
</kw>
<status endtime="20170816 05:09:36.695" status="FAIL" starttime="20170816 05:09:36.388"></status>
</kw>
<msg timestamp="20170816 05:09:36.695" level="INFO">${status} = False</msg>
<status endtime="20170816 05:09:36.695" status="PASS" starttime="20170816 05:09:36.388"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status endtime="20170816 05:09:36.696" status="PASS" starttime="20170816 05:09:36.695"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:09:36.699" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:09:36.700" status="PASS" starttime="20170816 05:09:36.699"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:09:36.701" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:09:36.701" status="PASS" starttime="20170816 05:09:36.700"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:09:36.701" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:09:36.701" status="PASS" starttime="20170816 05:09:36.701"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:09:36.702" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:09:36.702" status="PASS" starttime="20170816 05:09:36.702"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:09:36.878" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:09:36.878" status="PASS" starttime="20170816 05:09:36.703"></status>
</kw>
<msg timestamp="20170816 05:09:36.878" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:09:36.878" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:09:36.879" status="PASS" starttime="20170816 05:09:36.702"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:09:36.879" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:09:36.879" status="PASS" starttime="20170816 05:09:36.879"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:09:36.880" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:09:36.880" status="PASS" starttime="20170816 05:09:36.879"></status>
</kw>
<status endtime="20170816 05:09:36.880" status="PASS" starttime="20170816 05:09:36.699"></status>
</kw>
<status endtime="20170816 05:09:36.880" status="PASS" starttime="20170816 05:09:36.698"></status>
</kw>
<status endtime="20170816 05:09:36.880" status="PASS" starttime="20170816 05:09:36.698"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:09:36.881" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170816 05:09:36.881" status="PASS" starttime="20170816 05:09:36.880"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:09:36.883" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170816 05:09:36.883" status="PASS" starttime="20170816 05:09:36.882"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:09:36.884" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170816 05:09:36.884" status="PASS" starttime="20170816 05:09:36.884"></status>
</kw>
<status endtime="20170816 05:09:36.884" status="PASS" starttime="20170816 05:09:36.883"></status>
</kw>
<status endtime="20170816 05:09:36.884" status="PASS" starttime="20170816 05:09:36.882"></status>
</kw>
<status endtime="20170816 05:09:36.885" status="PASS" starttime="20170816 05:09:36.881"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:09:36.975" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170816 05:09:36.975" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:09:36.975" status="PASS" starttime="20170816 05:09:36.885"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:09:36.977" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:09:36.977" status="PASS" starttime="20170816 05:09:36.976"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:09:36.977" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:09:36.978" status="PASS" starttime="20170816 05:09:36.977"></status>
</kw>
<status endtime="20170816 05:09:36.978" status="PASS" starttime="20170816 05:09:36.977"></status>
</kw>
<status endtime="20170816 05:09:36.978" status="PASS" starttime="20170816 05:09:36.976"></status>
</kw>
<status endtime="20170816 05:09:36.978" status="PASS" starttime="20170816 05:09:36.975"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:09:36.978" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:09:36.978" status="PASS" starttime="20170816 05:09:36.978"></status>
</kw>
<msg timestamp="20170816 05:09:36.979" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:09:36.979" status="PASS" starttime="20170816 05:09:36.697"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:09:36.979" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:09:36.979" status="PASS" starttime="20170816 05:09:36.979"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:09:36.980" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:09:36.980" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:09:36.980" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit'}</msg>
<status endtime="20170816 05:09:36.980" status="PASS" starttime="20170816 05:09:36.980"></status>
</kw>
<msg timestamp="20170816 05:09:36.980" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170816 05:09:36.980" status="PASS" starttime="20170816 05:09:36.696"></status>
</kw>
<msg timestamp="20170816 05:09:36.981" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170816 05:09:36.981" status="PASS" starttime="20170816 05:09:36.696"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170816 05:09:36.981" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170816 05:09:36.981" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170816 05:09:36.981" status="FAIL" starttime="20170816 05:09:36.981"></status>
</kw>
<status endtime="20170816 05:09:36.982" status="FAIL" starttime="20170816 05:09:36.387"></status>
</kw>
<status endtime="20170816 05:09:36.982" status="FAIL" starttime="20170816 05:09:30.300"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:09:46.988" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:09:46.988" status="PASS" starttime="20170816 05:09:46.987"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:09:46.989" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:09:46.989" status="PASS" starttime="20170816 05:09:46.988"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:09:46.989" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:09:46.989" status="PASS" starttime="20170816 05:09:46.989"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:09:46.990" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:09:46.990" status="PASS" starttime="20170816 05:09:46.990"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:09:47.772" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:09:47.772" status="PASS" starttime="20170816 05:09:46.991"></status>
</kw>
<msg timestamp="20170816 05:09:47.772" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:09:47.772" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:09:47.772" status="PASS" starttime="20170816 05:09:46.990"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:09:47.773" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:09:47.773" status="PASS" starttime="20170816 05:09:47.773"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:09:47.774" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:09:47.774" status="PASS" starttime="20170816 05:09:47.773"></status>
</kw>
<status endtime="20170816 05:09:47.774" status="PASS" starttime="20170816 05:09:46.987"></status>
</kw>
<status endtime="20170816 05:09:47.774" status="PASS" starttime="20170816 05:09:46.986"></status>
</kw>
<status endtime="20170816 05:09:47.774" status="PASS" starttime="20170816 05:09:46.986"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:09:47.775" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170816 05:09:47.775" status="PASS" starttime="20170816 05:09:47.774"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:09:47.777" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170816 05:09:47.777" status="PASS" starttime="20170816 05:09:47.777"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:09:47.778" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170816 05:09:47.778" status="PASS" starttime="20170816 05:09:47.778"></status>
</kw>
<status endtime="20170816 05:09:47.779" status="PASS" starttime="20170816 05:09:47.778"></status>
</kw>
<status endtime="20170816 05:09:47.779" status="PASS" starttime="20170816 05:09:47.776"></status>
</kw>
<status endtime="20170816 05:09:47.779" status="PASS" starttime="20170816 05:09:47.775"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:09:54.272" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 05:09:54.272" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:09:54.272" status="PASS" starttime="20170816 05:09:47.779"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:09:54.274" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:09:54.274" status="PASS" starttime="20170816 05:09:54.274"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:09:54.275" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:09:54.275" status="PASS" starttime="20170816 05:09:54.275"></status>
</kw>
<status endtime="20170816 05:09:54.276" status="PASS" starttime="20170816 05:09:54.275"></status>
</kw>
<status endtime="20170816 05:09:54.276" status="PASS" starttime="20170816 05:09:54.273"></status>
</kw>
<status endtime="20170816 05:09:54.276" status="PASS" starttime="20170816 05:09:54.273"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:09:54.276" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:09:54.276" status="PASS" starttime="20170816 05:09:54.276"></status>
</kw>
<msg timestamp="20170816 05:09:54.276" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:09:54.277" status="PASS" starttime="20170816 05:09:46.985"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:09:54.277" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:09:54.277" status="PASS" starttime="20170816 05:09:54.277"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:09:54.278" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:09:54.278" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:09:54.278" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170816 05:09:54.278" status="PASS" starttime="20170816 05:09:54.277"></status>
</kw>
<msg timestamp="20170816 05:09:54.278" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170816 05:09:54.278" status="PASS" starttime="20170816 05:09:46.984"></status>
</kw>
<msg timestamp="20170816 05:09:54.278" level="INFO">${power_state} = Off</msg>
<status endtime="20170816 05:09:54.279" status="PASS" starttime="20170816 05:09:46.984"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170816 05:09:54.279" level="FAIL">On != Off</msg>
<status endtime="20170816 05:09:54.279" status="FAIL" starttime="20170816 05:09:54.279"></status>
</kw>
<status endtime="20170816 05:09:54.279" status="FAIL" starttime="20170816 05:09:46.983"></status>
</kw>
<status endtime="20170816 05:09:54.280" status="FAIL" starttime="20170816 05:09:46.982"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:10:04.287" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:10:04.288" status="PASS" starttime="20170816 05:10:04.287"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:10:04.288" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:10:04.288" status="PASS" starttime="20170816 05:10:04.288"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:10:04.289" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:10:04.289" status="PASS" starttime="20170816 05:10:04.289"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:10:04.290" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:10:04.290" status="PASS" starttime="20170816 05:10:04.289"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:10:04.721" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:10:04.721" status="PASS" starttime="20170816 05:10:04.290"></status>
</kw>
<msg timestamp="20170816 05:10:04.721" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:10:04.721" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:10:04.721" status="PASS" starttime="20170816 05:10:04.290"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:10:04.722" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:10:04.722" status="PASS" starttime="20170816 05:10:04.722"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:10:04.723" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:10:04.723" status="PASS" starttime="20170816 05:10:04.722"></status>
</kw>
<status endtime="20170816 05:10:04.723" status="PASS" starttime="20170816 05:10:04.286"></status>
</kw>
<status endtime="20170816 05:10:04.723" status="PASS" starttime="20170816 05:10:04.286"></status>
</kw>
<status endtime="20170816 05:10:04.723" status="PASS" starttime="20170816 05:10:04.285"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:10:04.724" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170816 05:10:04.724" status="PASS" starttime="20170816 05:10:04.723"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:10:04.726" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170816 05:10:04.726" status="PASS" starttime="20170816 05:10:04.725"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:10:04.727" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170816 05:10:04.727" status="PASS" starttime="20170816 05:10:04.727"></status>
</kw>
<status endtime="20170816 05:10:04.727" status="PASS" starttime="20170816 05:10:04.726"></status>
</kw>
<status endtime="20170816 05:10:04.727" status="PASS" starttime="20170816 05:10:04.725"></status>
</kw>
<status endtime="20170816 05:10:04.727" status="PASS" starttime="20170816 05:10:04.724"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:10:04.790" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 05:10:04.790" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:10:04.790" status="PASS" starttime="20170816 05:10:04.727"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:10:04.792" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:10:04.792" status="PASS" starttime="20170816 05:10:04.792"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:10:04.793" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:10:04.793" status="PASS" starttime="20170816 05:10:04.793"></status>
</kw>
<status endtime="20170816 05:10:04.793" status="PASS" starttime="20170816 05:10:04.793"></status>
</kw>
<status endtime="20170816 05:10:04.794" status="PASS" starttime="20170816 05:10:04.791"></status>
</kw>
<status endtime="20170816 05:10:04.794" status="PASS" starttime="20170816 05:10:04.791"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:10:04.794" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:10:04.794" status="PASS" starttime="20170816 05:10:04.794"></status>
</kw>
<msg timestamp="20170816 05:10:04.794" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:10:04.794" status="PASS" starttime="20170816 05:10:04.285"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:10:04.795" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:10:04.795" status="PASS" starttime="20170816 05:10:04.795"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:10:04.796" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:10:04.796" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:10:04.796" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170816 05:10:04.796" status="PASS" starttime="20170816 05:10:04.795"></status>
</kw>
<msg timestamp="20170816 05:10:04.796" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170816 05:10:04.796" status="PASS" starttime="20170816 05:10:04.282"></status>
</kw>
<msg timestamp="20170816 05:10:04.796" level="INFO">${power_state} = On</msg>
<status endtime="20170816 05:10:04.796" status="PASS" starttime="20170816 05:10:04.281"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170816 05:10:04.797" status="PASS" starttime="20170816 05:10:04.797"></status>
</kw>
<status endtime="20170816 05:10:04.797" status="PASS" starttime="20170816 05:10:04.281"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:10:04.801" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:10:04.801" status="PASS" starttime="20170816 05:10:04.800"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:10:04.802" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:10:04.802" status="PASS" starttime="20170816 05:10:04.802"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:10:04.803" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:10:04.803" status="PASS" starttime="20170816 05:10:04.802"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:10:04.803" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:10:04.803" status="PASS" starttime="20170816 05:10:04.803"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:10:04.980" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:10:04.980" status="PASS" starttime="20170816 05:10:04.804"></status>
</kw>
<msg timestamp="20170816 05:10:04.980" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:10:04.980" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:10:04.980" status="PASS" starttime="20170816 05:10:04.804"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:10:04.981" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:10:04.981" status="PASS" starttime="20170816 05:10:04.981"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:10:04.982" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:10:04.982" status="PASS" starttime="20170816 05:10:04.981"></status>
</kw>
<status endtime="20170816 05:10:04.982" status="PASS" starttime="20170816 05:10:04.800"></status>
</kw>
<status endtime="20170816 05:10:04.982" status="PASS" starttime="20170816 05:10:04.799"></status>
</kw>
<status endtime="20170816 05:10:04.983" status="PASS" starttime="20170816 05:10:04.799"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:10:04.983" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170816 05:10:04.984" status="PASS" starttime="20170816 05:10:04.983"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:10:04.986" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170816 05:10:04.986" status="PASS" starttime="20170816 05:10:04.985"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:10:04.986" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170816 05:10:04.987" status="PASS" starttime="20170816 05:10:04.986"></status>
</kw>
<status endtime="20170816 05:10:04.987" status="PASS" starttime="20170816 05:10:04.986"></status>
</kw>
<status endtime="20170816 05:10:04.987" status="PASS" starttime="20170816 05:10:04.984"></status>
</kw>
<status endtime="20170816 05:10:04.987" status="PASS" starttime="20170816 05:10:04.984"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:10:05.086" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 05:10:05.086" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:10:05.087" status="PASS" starttime="20170816 05:10:04.987"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:10:05.088" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:10:05.088" status="PASS" starttime="20170816 05:10:05.088"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:10:05.089" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:10:05.089" status="PASS" starttime="20170816 05:10:05.089"></status>
</kw>
<status endtime="20170816 05:10:05.089" status="PASS" starttime="20170816 05:10:05.089"></status>
</kw>
<status endtime="20170816 05:10:05.090" status="PASS" starttime="20170816 05:10:05.087"></status>
</kw>
<status endtime="20170816 05:10:05.090" status="PASS" starttime="20170816 05:10:05.087"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:10:05.090" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:10:05.090" status="PASS" starttime="20170816 05:10:05.090"></status>
</kw>
<msg timestamp="20170816 05:10:05.090" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:10:05.090" status="PASS" starttime="20170816 05:10:04.798"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:10:05.091" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:10:05.091" status="PASS" starttime="20170816 05:10:05.091"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:10:05.092" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:10:05.092" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:10:05.092" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170816 05:10:05.092" status="PASS" starttime="20170816 05:10:05.091"></status>
</kw>
<msg timestamp="20170816 05:10:05.092" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170816 05:10:05.092" status="PASS" starttime="20170816 05:10:04.798"></status>
</kw>
<msg timestamp="20170816 05:10:05.092" level="INFO">${host_state} = Running</msg>
<status endtime="20170816 05:10:05.092" status="PASS" starttime="20170816 05:10:04.797"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170816 05:10:05.093" status="PASS" starttime="20170816 05:10:05.093"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:10:05.098" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:10:05.098" status="PASS" starttime="20170816 05:10:05.098"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:10:05.099" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:10:05.099" status="PASS" starttime="20170816 05:10:05.099"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:10:05.100" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:10:05.100" status="PASS" starttime="20170816 05:10:05.099"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:10:05.100" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:10:05.100" status="PASS" starttime="20170816 05:10:05.100"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:10:05.295" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:10:05.295" status="PASS" starttime="20170816 05:10:05.101"></status>
</kw>
<msg timestamp="20170816 05:10:05.296" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:10:05.296" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:10:05.296" status="PASS" starttime="20170816 05:10:05.101"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:10:05.296" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:10:05.296" status="PASS" starttime="20170816 05:10:05.296"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:10:05.297" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:10:05.297" status="PASS" starttime="20170816 05:10:05.297"></status>
</kw>
<status endtime="20170816 05:10:05.297" status="PASS" starttime="20170816 05:10:05.097"></status>
</kw>
<status endtime="20170816 05:10:05.297" status="PASS" starttime="20170816 05:10:05.097"></status>
</kw>
<status endtime="20170816 05:10:05.297" status="PASS" starttime="20170816 05:10:05.096"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:10:05.298" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170816 05:10:05.298" status="PASS" starttime="20170816 05:10:05.298"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:10:05.303" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170816 05:10:05.303" status="PASS" starttime="20170816 05:10:05.303"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:10:05.304" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170816 05:10:05.305" status="PASS" starttime="20170816 05:10:05.304"></status>
</kw>
<status endtime="20170816 05:10:05.305" status="PASS" starttime="20170816 05:10:05.304"></status>
</kw>
<status endtime="20170816 05:10:05.305" status="PASS" starttime="20170816 05:10:05.299"></status>
</kw>
<status endtime="20170816 05:10:05.305" status="PASS" starttime="20170816 05:10:05.298"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:10:05.410" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170816 05:10:05.410" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:10:05.411" status="PASS" starttime="20170816 05:10:05.305"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:10:05.412" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:10:05.412" status="PASS" starttime="20170816 05:10:05.412"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:10:05.413" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:10:05.413" status="PASS" starttime="20170816 05:10:05.413"></status>
</kw>
<status endtime="20170816 05:10:05.414" status="PASS" starttime="20170816 05:10:05.413"></status>
</kw>
<status endtime="20170816 05:10:05.414" status="PASS" starttime="20170816 05:10:05.411"></status>
</kw>
<status endtime="20170816 05:10:05.414" status="PASS" starttime="20170816 05:10:05.411"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:10:05.414" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:10:05.414" status="PASS" starttime="20170816 05:10:05.414"></status>
</kw>
<msg timestamp="20170816 05:10:05.414" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:10:05.414" status="PASS" starttime="20170816 05:10:05.095"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:10:05.415" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:10:05.415" status="PASS" starttime="20170816 05:10:05.415"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:10:05.416" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:10:05.416" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:10:05.416" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170816 05:10:05.416" status="PASS" starttime="20170816 05:10:05.415"></status>
</kw>
<msg timestamp="20170816 05:10:05.416" level="INFO">${state} = Off</msg>
<status endtime="20170816 05:10:05.416" status="PASS" starttime="20170816 05:10:05.095"></status>
</kw>
<msg timestamp="20170816 05:10:05.416" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170816 05:10:05.416" status="PASS" starttime="20170816 05:10:05.095"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170816 05:10:05.417" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170816 05:10:05.417" status="FAIL" starttime="20170816 05:10:05.417"></status>
</kw>
<status endtime="20170816 05:10:05.417" status="FAIL" starttime="20170816 05:10:05.094"></status>
</kw>
<msg timestamp="20170816 05:10:05.417" level="INFO">${status} = False</msg>
<status endtime="20170816 05:10:05.417" status="PASS" starttime="20170816 05:10:05.094"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status endtime="20170816 05:10:05.418" status="PASS" starttime="20170816 05:10:05.418"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:10:05.421" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:10:05.422" status="PASS" starttime="20170816 05:10:05.421"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:10:05.422" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:10:05.422" status="PASS" starttime="20170816 05:10:05.422"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:10:05.423" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:10:05.423" status="PASS" starttime="20170816 05:10:05.423"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:10:05.424" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:10:05.424" status="PASS" starttime="20170816 05:10:05.423"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:10:05.603" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:10:05.603" status="PASS" starttime="20170816 05:10:05.425"></status>
</kw>
<msg timestamp="20170816 05:10:05.604" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:10:05.604" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:10:05.604" status="PASS" starttime="20170816 05:10:05.424"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:10:05.604" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:10:05.604" status="PASS" starttime="20170816 05:10:05.604"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:10:05.605" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:10:05.605" status="PASS" starttime="20170816 05:10:05.605"></status>
</kw>
<status endtime="20170816 05:10:05.605" status="PASS" starttime="20170816 05:10:05.421"></status>
</kw>
<status endtime="20170816 05:10:05.605" status="PASS" starttime="20170816 05:10:05.420"></status>
</kw>
<status endtime="20170816 05:10:05.605" status="PASS" starttime="20170816 05:10:05.420"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:10:05.606" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170816 05:10:05.606" status="PASS" starttime="20170816 05:10:05.606"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:10:05.608" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170816 05:10:05.608" status="PASS" starttime="20170816 05:10:05.607"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:10:05.609" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170816 05:10:05.609" status="PASS" starttime="20170816 05:10:05.609"></status>
</kw>
<status endtime="20170816 05:10:05.609" status="PASS" starttime="20170816 05:10:05.608"></status>
</kw>
<status endtime="20170816 05:10:05.609" status="PASS" starttime="20170816 05:10:05.607"></status>
</kw>
<status endtime="20170816 05:10:05.609" status="PASS" starttime="20170816 05:10:05.606"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:10:05.723" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170816 05:10:05.723" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:10:05.723" status="PASS" starttime="20170816 05:10:05.610"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:10:05.725" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:10:05.725" status="PASS" starttime="20170816 05:10:05.725"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:10:05.726" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:10:05.726" status="PASS" starttime="20170816 05:10:05.726"></status>
</kw>
<status endtime="20170816 05:10:05.726" status="PASS" starttime="20170816 05:10:05.725"></status>
</kw>
<status endtime="20170816 05:10:05.726" status="PASS" starttime="20170816 05:10:05.724"></status>
</kw>
<status endtime="20170816 05:10:05.726" status="PASS" starttime="20170816 05:10:05.724"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:10:05.727" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:10:05.727" status="PASS" starttime="20170816 05:10:05.727"></status>
</kw>
<msg timestamp="20170816 05:10:05.727" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:10:05.727" status="PASS" starttime="20170816 05:10:05.419"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:10:05.728" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:10:05.728" status="PASS" starttime="20170816 05:10:05.728"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:10:05.728" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:10:05.729" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:10:05.729" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit'}</msg>
<status endtime="20170816 05:10:05.729" status="PASS" starttime="20170816 05:10:05.728"></status>
</kw>
<msg timestamp="20170816 05:10:05.729" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170816 05:10:05.729" status="PASS" starttime="20170816 05:10:05.418"></status>
</kw>
<msg timestamp="20170816 05:10:05.729" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170816 05:10:05.729" status="PASS" starttime="20170816 05:10:05.418"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170816 05:10:05.730" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170816 05:10:05.730" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170816 05:10:05.730" status="FAIL" starttime="20170816 05:10:05.729"></status>
</kw>
<status endtime="20170816 05:10:05.730" status="FAIL" starttime="20170816 05:10:05.093"></status>
</kw>
<status endtime="20170816 05:10:05.730" status="FAIL" starttime="20170816 05:10:04.280"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:10:15.736" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:10:15.737" status="PASS" starttime="20170816 05:10:15.736"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:10:15.737" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:10:15.737" status="PASS" starttime="20170816 05:10:15.737"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:10:15.738" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:10:15.738" status="PASS" starttime="20170816 05:10:15.738"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:10:15.739" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:10:15.739" status="PASS" starttime="20170816 05:10:15.738"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:10:15.923" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:10:15.923" status="PASS" starttime="20170816 05:10:15.739"></status>
</kw>
<msg timestamp="20170816 05:10:15.923" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:10:15.923" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:10:15.923" status="PASS" starttime="20170816 05:10:15.739"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:10:15.924" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:10:15.924" status="PASS" starttime="20170816 05:10:15.923"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:10:15.924" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:10:15.925" status="PASS" starttime="20170816 05:10:15.924"></status>
</kw>
<status endtime="20170816 05:10:15.925" status="PASS" starttime="20170816 05:10:15.735"></status>
</kw>
<status endtime="20170816 05:10:15.925" status="PASS" starttime="20170816 05:10:15.734"></status>
</kw>
<status endtime="20170816 05:10:15.925" status="PASS" starttime="20170816 05:10:15.734"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:10:15.926" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170816 05:10:15.926" status="PASS" starttime="20170816 05:10:15.925"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:10:15.928" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170816 05:10:15.928" status="PASS" starttime="20170816 05:10:15.927"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:10:15.929" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170816 05:10:15.929" status="PASS" starttime="20170816 05:10:15.928"></status>
</kw>
<status endtime="20170816 05:10:15.929" status="PASS" starttime="20170816 05:10:15.928"></status>
</kw>
<status endtime="20170816 05:10:15.929" status="PASS" starttime="20170816 05:10:15.926"></status>
</kw>
<status endtime="20170816 05:10:15.929" status="PASS" starttime="20170816 05:10:15.926"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:10:15.992" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 05:10:15.992" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:10:15.992" status="PASS" starttime="20170816 05:10:15.929"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:10:15.994" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:10:15.994" status="PASS" starttime="20170816 05:10:15.993"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:10:15.995" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:10:15.995" status="PASS" starttime="20170816 05:10:15.995"></status>
</kw>
<status endtime="20170816 05:10:15.995" status="PASS" starttime="20170816 05:10:15.994"></status>
</kw>
<status endtime="20170816 05:10:15.996" status="PASS" starttime="20170816 05:10:15.993"></status>
</kw>
<status endtime="20170816 05:10:15.996" status="PASS" starttime="20170816 05:10:15.992"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:10:15.996" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:10:15.996" status="PASS" starttime="20170816 05:10:15.996"></status>
</kw>
<msg timestamp="20170816 05:10:15.996" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:10:15.996" status="PASS" starttime="20170816 05:10:15.733"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:10:15.997" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:10:15.997" status="PASS" starttime="20170816 05:10:15.997"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:10:15.998" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:10:15.998" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:10:15.998" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170816 05:10:15.998" status="PASS" starttime="20170816 05:10:15.997"></status>
</kw>
<msg timestamp="20170816 05:10:15.998" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170816 05:10:15.998" status="PASS" starttime="20170816 05:10:15.732"></status>
</kw>
<msg timestamp="20170816 05:10:15.998" level="INFO">${power_state} = On</msg>
<status endtime="20170816 05:10:15.998" status="PASS" starttime="20170816 05:10:15.732"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170816 05:10:15.999" status="PASS" starttime="20170816 05:10:15.999"></status>
</kw>
<status endtime="20170816 05:10:15.999" status="PASS" starttime="20170816 05:10:15.732"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:10:16.003" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:10:16.003" status="PASS" starttime="20170816 05:10:16.002"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:10:16.004" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:10:16.004" status="PASS" starttime="20170816 05:10:16.004"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:10:16.005" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:10:16.005" status="PASS" starttime="20170816 05:10:16.004"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:10:16.005" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:10:16.005" status="PASS" starttime="20170816 05:10:16.005"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:10:16.180" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:10:16.180" status="PASS" starttime="20170816 05:10:16.006"></status>
</kw>
<msg timestamp="20170816 05:10:16.181" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:10:16.181" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:10:16.181" status="PASS" starttime="20170816 05:10:16.006"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:10:16.182" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:10:16.182" status="PASS" starttime="20170816 05:10:16.181"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:10:16.183" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:10:16.183" status="PASS" starttime="20170816 05:10:16.182"></status>
</kw>
<status endtime="20170816 05:10:16.183" status="PASS" starttime="20170816 05:10:16.002"></status>
</kw>
<status endtime="20170816 05:10:16.183" status="PASS" starttime="20170816 05:10:16.002"></status>
</kw>
<status endtime="20170816 05:10:16.183" status="PASS" starttime="20170816 05:10:16.001"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:10:16.184" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170816 05:10:16.184" status="PASS" starttime="20170816 05:10:16.183"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:10:16.186" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170816 05:10:16.186" status="PASS" starttime="20170816 05:10:16.185"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:10:16.187" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170816 05:10:16.187" status="PASS" starttime="20170816 05:10:16.187"></status>
</kw>
<status endtime="20170816 05:10:16.187" status="PASS" starttime="20170816 05:10:16.186"></status>
</kw>
<status endtime="20170816 05:10:16.188" status="PASS" starttime="20170816 05:10:16.185"></status>
</kw>
<status endtime="20170816 05:10:16.188" status="PASS" starttime="20170816 05:10:16.184"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:10:16.275" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 05:10:16.275" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:10:16.275" status="PASS" starttime="20170816 05:10:16.188"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:10:16.277" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:10:16.277" status="PASS" starttime="20170816 05:10:16.276"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:10:16.278" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:10:16.278" status="PASS" starttime="20170816 05:10:16.277"></status>
</kw>
<status endtime="20170816 05:10:16.278" status="PASS" starttime="20170816 05:10:16.277"></status>
</kw>
<status endtime="20170816 05:10:16.278" status="PASS" starttime="20170816 05:10:16.276"></status>
</kw>
<status endtime="20170816 05:10:16.278" status="PASS" starttime="20170816 05:10:16.275"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:10:16.278" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:10:16.279" status="PASS" starttime="20170816 05:10:16.278"></status>
</kw>
<msg timestamp="20170816 05:10:16.279" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:10:16.279" status="PASS" starttime="20170816 05:10:16.000"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:10:16.279" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:10:16.279" status="PASS" starttime="20170816 05:10:16.279"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:10:16.280" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:10:16.280" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:10:16.280" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170816 05:10:16.281" status="PASS" starttime="20170816 05:10:16.280"></status>
</kw>
<msg timestamp="20170816 05:10:16.281" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170816 05:10:16.281" status="PASS" starttime="20170816 05:10:16.000"></status>
</kw>
<msg timestamp="20170816 05:10:16.281" level="INFO">${host_state} = Running</msg>
<status endtime="20170816 05:10:16.281" status="PASS" starttime="20170816 05:10:15.999"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170816 05:10:16.282" status="PASS" starttime="20170816 05:10:16.282"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:10:16.287" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:10:16.287" status="PASS" starttime="20170816 05:10:16.286"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:10:16.288" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:10:16.288" status="PASS" starttime="20170816 05:10:16.288"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:10:16.288" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:10:16.289" status="PASS" starttime="20170816 05:10:16.288"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:10:16.289" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:10:16.289" status="PASS" starttime="20170816 05:10:16.289"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:10:16.541" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:10:16.541" status="PASS" starttime="20170816 05:10:16.290"></status>
</kw>
<msg timestamp="20170816 05:10:16.541" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:10:16.541" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:10:16.541" status="PASS" starttime="20170816 05:10:16.289"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:10:16.542" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:10:16.542" status="PASS" starttime="20170816 05:10:16.542"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:10:16.543" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:10:16.543" status="PASS" starttime="20170816 05:10:16.542"></status>
</kw>
<status endtime="20170816 05:10:16.543" status="PASS" starttime="20170816 05:10:16.286"></status>
</kw>
<status endtime="20170816 05:10:16.543" status="PASS" starttime="20170816 05:10:16.285"></status>
</kw>
<status endtime="20170816 05:10:16.543" status="PASS" starttime="20170816 05:10:16.285"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:10:16.544" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170816 05:10:16.544" status="PASS" starttime="20170816 05:10:16.543"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:10:16.546" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170816 05:10:16.546" status="PASS" starttime="20170816 05:10:16.545"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:10:16.547" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170816 05:10:16.547" status="PASS" starttime="20170816 05:10:16.546"></status>
</kw>
<status endtime="20170816 05:10:16.547" status="PASS" starttime="20170816 05:10:16.546"></status>
</kw>
<status endtime="20170816 05:10:16.547" status="PASS" starttime="20170816 05:10:16.544"></status>
</kw>
<status endtime="20170816 05:10:16.547" status="PASS" starttime="20170816 05:10:16.544"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:10:16.615" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170816 05:10:16.615" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:10:16.615" status="PASS" starttime="20170816 05:10:16.547"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:10:16.617" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:10:16.617" status="PASS" starttime="20170816 05:10:16.617"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:10:16.618" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:10:16.618" status="PASS" starttime="20170816 05:10:16.618"></status>
</kw>
<status endtime="20170816 05:10:16.618" status="PASS" starttime="20170816 05:10:16.617"></status>
</kw>
<status endtime="20170816 05:10:16.618" status="PASS" starttime="20170816 05:10:16.616"></status>
</kw>
<status endtime="20170816 05:10:16.618" status="PASS" starttime="20170816 05:10:16.616"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:10:16.619" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:10:16.619" status="PASS" starttime="20170816 05:10:16.619"></status>
</kw>
<msg timestamp="20170816 05:10:16.619" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:10:16.619" status="PASS" starttime="20170816 05:10:16.284"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:10:16.620" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:10:16.620" status="PASS" starttime="20170816 05:10:16.619"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:10:16.620" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:10:16.620" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:10:16.620" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170816 05:10:16.620" status="PASS" starttime="20170816 05:10:16.620"></status>
</kw>
<msg timestamp="20170816 05:10:16.621" level="INFO">${state} = Off</msg>
<status endtime="20170816 05:10:16.621" status="PASS" starttime="20170816 05:10:16.283"></status>
</kw>
<msg timestamp="20170816 05:10:16.621" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170816 05:10:16.621" status="PASS" starttime="20170816 05:10:16.283"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170816 05:10:16.622" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170816 05:10:16.622" status="FAIL" starttime="20170816 05:10:16.621"></status>
</kw>
<status endtime="20170816 05:10:16.622" status="FAIL" starttime="20170816 05:10:16.283"></status>
</kw>
<msg timestamp="20170816 05:10:16.622" level="INFO">${status} = False</msg>
<status endtime="20170816 05:10:16.622" status="PASS" starttime="20170816 05:10:16.282"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status endtime="20170816 05:10:16.623" status="PASS" starttime="20170816 05:10:16.622"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:10:16.627" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:10:16.627" status="PASS" starttime="20170816 05:10:16.626"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:10:16.628" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:10:16.628" status="PASS" starttime="20170816 05:10:16.627"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:10:16.628" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:10:16.628" status="PASS" starttime="20170816 05:10:16.628"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:10:16.629" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:10:16.629" status="PASS" starttime="20170816 05:10:16.629"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:10:16.876" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:10:16.877" status="PASS" starttime="20170816 05:10:16.630"></status>
</kw>
<msg timestamp="20170816 05:10:16.877" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:10:16.877" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:10:16.877" status="PASS" starttime="20170816 05:10:16.629"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:10:16.878" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:10:16.878" status="PASS" starttime="20170816 05:10:16.877"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:10:16.878" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:10:16.878" status="PASS" starttime="20170816 05:10:16.878"></status>
</kw>
<status endtime="20170816 05:10:16.878" status="PASS" starttime="20170816 05:10:16.626"></status>
</kw>
<status endtime="20170816 05:10:16.879" status="PASS" starttime="20170816 05:10:16.626"></status>
</kw>
<status endtime="20170816 05:10:16.879" status="PASS" starttime="20170816 05:10:16.624"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:10:16.879" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170816 05:10:16.879" status="PASS" starttime="20170816 05:10:16.879"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:10:16.882" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170816 05:10:16.882" status="PASS" starttime="20170816 05:10:16.881"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:10:16.883" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170816 05:10:16.883" status="PASS" starttime="20170816 05:10:16.882"></status>
</kw>
<status endtime="20170816 05:10:16.883" status="PASS" starttime="20170816 05:10:16.882"></status>
</kw>
<status endtime="20170816 05:10:16.883" status="PASS" starttime="20170816 05:10:16.880"></status>
</kw>
<status endtime="20170816 05:10:16.883" status="PASS" starttime="20170816 05:10:16.880"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:10:16.973" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170816 05:10:16.973" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:10:16.973" status="PASS" starttime="20170816 05:10:16.883"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:10:16.976" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:10:16.976" status="PASS" starttime="20170816 05:10:16.975"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:10:16.976" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:10:16.977" status="PASS" starttime="20170816 05:10:16.976"></status>
</kw>
<status endtime="20170816 05:10:16.977" status="PASS" starttime="20170816 05:10:16.976"></status>
</kw>
<status endtime="20170816 05:10:16.977" status="PASS" starttime="20170816 05:10:16.974"></status>
</kw>
<status endtime="20170816 05:10:16.977" status="PASS" starttime="20170816 05:10:16.974"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:10:16.977" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:10:16.977" status="PASS" starttime="20170816 05:10:16.977"></status>
</kw>
<msg timestamp="20170816 05:10:16.978" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:10:16.978" status="PASS" starttime="20170816 05:10:16.624"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:10:16.978" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:10:16.978" status="PASS" starttime="20170816 05:10:16.978"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:10:16.979" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:10:16.979" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:10:16.979" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit'}</msg>
<status endtime="20170816 05:10:16.979" status="PASS" starttime="20170816 05:10:16.978"></status>
</kw>
<msg timestamp="20170816 05:10:16.979" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170816 05:10:16.979" status="PASS" starttime="20170816 05:10:16.623"></status>
</kw>
<msg timestamp="20170816 05:10:16.979" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170816 05:10:16.979" status="PASS" starttime="20170816 05:10:16.623"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170816 05:10:16.980" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170816 05:10:16.980" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170816 05:10:16.980" status="FAIL" starttime="20170816 05:10:16.980"></status>
</kw>
<status endtime="20170816 05:10:16.981" status="FAIL" starttime="20170816 05:10:16.282"></status>
</kw>
<status endtime="20170816 05:10:16.981" status="FAIL" starttime="20170816 05:10:15.731"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:10:26.987" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:10:26.987" status="PASS" starttime="20170816 05:10:26.986"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:10:26.988" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:10:26.988" status="PASS" starttime="20170816 05:10:26.987"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:10:26.988" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:10:26.988" status="PASS" starttime="20170816 05:10:26.988"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:10:26.989" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:10:26.989" status="PASS" starttime="20170816 05:10:26.989"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:10:27.171" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:10:27.171" status="PASS" starttime="20170816 05:10:26.990"></status>
</kw>
<msg timestamp="20170816 05:10:27.172" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:10:27.172" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:10:27.172" status="PASS" starttime="20170816 05:10:26.989"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:10:27.172" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:10:27.172" status="PASS" starttime="20170816 05:10:27.172"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:10:27.173" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:10:27.173" status="PASS" starttime="20170816 05:10:27.173"></status>
</kw>
<status endtime="20170816 05:10:27.173" status="PASS" starttime="20170816 05:10:26.986"></status>
</kw>
<status endtime="20170816 05:10:27.173" status="PASS" starttime="20170816 05:10:26.985"></status>
</kw>
<status endtime="20170816 05:10:27.173" status="PASS" starttime="20170816 05:10:26.985"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:10:27.174" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170816 05:10:27.174" status="PASS" starttime="20170816 05:10:27.174"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:10:27.176" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170816 05:10:27.176" status="PASS" starttime="20170816 05:10:27.175"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:10:27.177" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170816 05:10:27.177" status="PASS" starttime="20170816 05:10:27.177"></status>
</kw>
<status endtime="20170816 05:10:27.177" status="PASS" starttime="20170816 05:10:27.176"></status>
</kw>
<status endtime="20170816 05:10:27.177" status="PASS" starttime="20170816 05:10:27.175"></status>
</kw>
<status endtime="20170816 05:10:27.177" status="PASS" starttime="20170816 05:10:27.174"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:10:27.501" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 05:10:27.501" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:10:27.501" status="PASS" starttime="20170816 05:10:27.178"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:10:27.503" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:10:27.503" status="PASS" starttime="20170816 05:10:27.502"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:10:27.504" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:10:27.504" status="PASS" starttime="20170816 05:10:27.504"></status>
</kw>
<status endtime="20170816 05:10:27.504" status="PASS" starttime="20170816 05:10:27.503"></status>
</kw>
<status endtime="20170816 05:10:27.504" status="PASS" starttime="20170816 05:10:27.502"></status>
</kw>
<status endtime="20170816 05:10:27.504" status="PASS" starttime="20170816 05:10:27.501"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:10:27.505" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:10:27.505" status="PASS" starttime="20170816 05:10:27.505"></status>
</kw>
<msg timestamp="20170816 05:10:27.505" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:10:27.505" status="PASS" starttime="20170816 05:10:26.984"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:10:27.506" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:10:27.506" status="PASS" starttime="20170816 05:10:27.506"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:10:27.506" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:10:27.507" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:10:27.507" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170816 05:10:27.507" status="PASS" starttime="20170816 05:10:27.506"></status>
</kw>
<msg timestamp="20170816 05:10:27.507" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170816 05:10:27.507" status="PASS" starttime="20170816 05:10:26.983"></status>
</kw>
<msg timestamp="20170816 05:10:27.507" level="INFO">${power_state} = On</msg>
<status endtime="20170816 05:10:27.507" status="PASS" starttime="20170816 05:10:26.982"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170816 05:10:27.508" status="PASS" starttime="20170816 05:10:27.508"></status>
</kw>
<status endtime="20170816 05:10:27.508" status="PASS" starttime="20170816 05:10:26.982"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:10:27.511" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:10:27.512" status="PASS" starttime="20170816 05:10:27.511"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:10:27.513" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:10:27.513" status="PASS" starttime="20170816 05:10:27.512"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:10:27.513" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:10:27.514" status="PASS" starttime="20170816 05:10:27.513"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:10:27.514" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:10:27.514" status="PASS" starttime="20170816 05:10:27.514"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:10:27.903" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:10:27.903" status="PASS" starttime="20170816 05:10:27.515"></status>
</kw>
<msg timestamp="20170816 05:10:27.903" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:10:27.903" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:10:27.903" status="PASS" starttime="20170816 05:10:27.514"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:10:27.904" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:10:27.904" status="PASS" starttime="20170816 05:10:27.903"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:10:27.905" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:10:27.905" status="PASS" starttime="20170816 05:10:27.904"></status>
</kw>
<status endtime="20170816 05:10:27.905" status="PASS" starttime="20170816 05:10:27.511"></status>
</kw>
<status endtime="20170816 05:10:27.905" status="PASS" starttime="20170816 05:10:27.510"></status>
</kw>
<status endtime="20170816 05:10:27.905" status="PASS" starttime="20170816 05:10:27.510"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:10:27.905" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170816 05:10:27.906" status="PASS" starttime="20170816 05:10:27.905"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:10:27.908" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170816 05:10:27.908" status="PASS" starttime="20170816 05:10:27.907"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:10:27.909" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170816 05:10:27.909" status="PASS" starttime="20170816 05:10:27.908"></status>
</kw>
<status endtime="20170816 05:10:27.909" status="PASS" starttime="20170816 05:10:27.908"></status>
</kw>
<status endtime="20170816 05:10:27.909" status="PASS" starttime="20170816 05:10:27.906"></status>
</kw>
<status endtime="20170816 05:10:27.909" status="PASS" starttime="20170816 05:10:27.906"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:10:28.586" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 05:10:28.587" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:10:28.587" status="PASS" starttime="20170816 05:10:27.909"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:10:28.589" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:10:28.589" status="PASS" starttime="20170816 05:10:28.588"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:10:28.590" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:10:28.590" status="PASS" starttime="20170816 05:10:28.589"></status>
</kw>
<status endtime="20170816 05:10:28.590" status="PASS" starttime="20170816 05:10:28.589"></status>
</kw>
<status endtime="20170816 05:10:28.590" status="PASS" starttime="20170816 05:10:28.588"></status>
</kw>
<status endtime="20170816 05:10:28.590" status="PASS" starttime="20170816 05:10:28.587"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:10:28.590" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:10:28.591" status="PASS" starttime="20170816 05:10:28.590"></status>
</kw>
<msg timestamp="20170816 05:10:28.591" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:10:28.591" status="PASS" starttime="20170816 05:10:27.509"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:10:28.591" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:10:28.592" status="PASS" starttime="20170816 05:10:28.591"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:10:28.592" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:10:28.592" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:10:28.592" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170816 05:10:28.592" status="PASS" starttime="20170816 05:10:28.592"></status>
</kw>
<msg timestamp="20170816 05:10:28.593" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170816 05:10:28.593" status="PASS" starttime="20170816 05:10:27.509"></status>
</kw>
<msg timestamp="20170816 05:10:28.593" level="INFO">${host_state} = Running</msg>
<status endtime="20170816 05:10:28.593" status="PASS" starttime="20170816 05:10:27.508"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170816 05:10:28.593" status="PASS" starttime="20170816 05:10:28.593"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:10:28.598" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:10:28.599" status="PASS" starttime="20170816 05:10:28.598"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:10:28.599" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:10:28.599" status="PASS" starttime="20170816 05:10:28.599"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:10:28.600" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:10:28.600" status="PASS" starttime="20170816 05:10:28.600"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:10:28.601" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:10:28.601" status="PASS" starttime="20170816 05:10:28.600"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:10:28.917" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:10:28.917" status="PASS" starttime="20170816 05:10:28.601"></status>
</kw>
<msg timestamp="20170816 05:10:28.918" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:10:28.918" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:10:28.918" status="PASS" starttime="20170816 05:10:28.601"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:10:28.918" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:10:28.918" status="PASS" starttime="20170816 05:10:28.918"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:10:28.919" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:10:28.919" status="PASS" starttime="20170816 05:10:28.919"></status>
</kw>
<status endtime="20170816 05:10:28.919" status="PASS" starttime="20170816 05:10:28.598"></status>
</kw>
<status endtime="20170816 05:10:28.919" status="PASS" starttime="20170816 05:10:28.597"></status>
</kw>
<status endtime="20170816 05:10:28.920" status="PASS" starttime="20170816 05:10:28.597"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:10:28.920" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170816 05:10:28.920" status="PASS" starttime="20170816 05:10:28.920"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:10:28.923" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170816 05:10:28.923" status="PASS" starttime="20170816 05:10:28.922"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:10:28.924" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170816 05:10:28.924" status="PASS" starttime="20170816 05:10:28.923"></status>
</kw>
<status endtime="20170816 05:10:28.924" status="PASS" starttime="20170816 05:10:28.923"></status>
</kw>
<status endtime="20170816 05:10:28.924" status="PASS" starttime="20170816 05:10:28.921"></status>
</kw>
<status endtime="20170816 05:10:28.924" status="PASS" starttime="20170816 05:10:28.920"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:10:29.480" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170816 05:10:29.480" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:10:29.480" status="PASS" starttime="20170816 05:10:28.924"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:10:29.482" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:10:29.482" status="PASS" starttime="20170816 05:10:29.482"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:10:29.484" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:10:29.484" status="PASS" starttime="20170816 05:10:29.484"></status>
</kw>
<status endtime="20170816 05:10:29.484" status="PASS" starttime="20170816 05:10:29.483"></status>
</kw>
<status endtime="20170816 05:10:29.485" status="PASS" starttime="20170816 05:10:29.481"></status>
</kw>
<status endtime="20170816 05:10:29.485" status="PASS" starttime="20170816 05:10:29.481"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:10:29.485" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:10:29.485" status="PASS" starttime="20170816 05:10:29.485"></status>
</kw>
<msg timestamp="20170816 05:10:29.486" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:10:29.486" status="PASS" starttime="20170816 05:10:28.596"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:10:29.486" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:10:29.486" status="PASS" starttime="20170816 05:10:29.486"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:10:29.487" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:10:29.487" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:10:29.487" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170816 05:10:29.487" status="PASS" starttime="20170816 05:10:29.487"></status>
</kw>
<msg timestamp="20170816 05:10:29.487" level="INFO">${state} = Off</msg>
<status endtime="20170816 05:10:29.487" status="PASS" starttime="20170816 05:10:28.595"></status>
</kw>
<msg timestamp="20170816 05:10:29.488" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170816 05:10:29.488" status="PASS" starttime="20170816 05:10:28.595"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170816 05:10:29.488" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170816 05:10:29.488" status="FAIL" starttime="20170816 05:10:29.488"></status>
</kw>
<status endtime="20170816 05:10:29.489" status="FAIL" starttime="20170816 05:10:28.594"></status>
</kw>
<msg timestamp="20170816 05:10:29.489" level="INFO">${status} = False</msg>
<status endtime="20170816 05:10:29.489" status="PASS" starttime="20170816 05:10:28.594"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status endtime="20170816 05:10:29.489" status="PASS" starttime="20170816 05:10:29.489"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:10:29.493" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:10:29.493" status="PASS" starttime="20170816 05:10:29.492"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:10:29.494" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:10:29.494" status="PASS" starttime="20170816 05:10:29.493"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:10:29.494" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:10:29.494" status="PASS" starttime="20170816 05:10:29.494"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:10:29.495" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:10:29.495" status="PASS" starttime="20170816 05:10:29.495"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:10:29.892" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:10:29.892" status="PASS" starttime="20170816 05:10:29.496"></status>
</kw>
<msg timestamp="20170816 05:10:29.892" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:10:29.892" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:10:29.892" status="PASS" starttime="20170816 05:10:29.495"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:10:29.893" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:10:29.893" status="PASS" starttime="20170816 05:10:29.893"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:10:29.894" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:10:29.894" status="PASS" starttime="20170816 05:10:29.893"></status>
</kw>
<status endtime="20170816 05:10:29.894" status="PASS" starttime="20170816 05:10:29.492"></status>
</kw>
<status endtime="20170816 05:10:29.894" status="PASS" starttime="20170816 05:10:29.492"></status>
</kw>
<status endtime="20170816 05:10:29.894" status="PASS" starttime="20170816 05:10:29.491"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:10:29.895" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170816 05:10:29.895" status="PASS" starttime="20170816 05:10:29.894"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:10:29.897" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170816 05:10:29.897" status="PASS" starttime="20170816 05:10:29.896"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:10:29.898" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170816 05:10:29.898" status="PASS" starttime="20170816 05:10:29.898"></status>
</kw>
<status endtime="20170816 05:10:29.898" status="PASS" starttime="20170816 05:10:29.897"></status>
</kw>
<status endtime="20170816 05:10:29.898" status="PASS" starttime="20170816 05:10:29.896"></status>
</kw>
<status endtime="20170816 05:10:29.898" status="PASS" starttime="20170816 05:10:29.895"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:10:30.582" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170816 05:10:30.583" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:10:30.583" status="PASS" starttime="20170816 05:10:29.899"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:10:30.585" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:10:30.585" status="PASS" starttime="20170816 05:10:30.585"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:10:30.586" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:10:30.587" status="PASS" starttime="20170816 05:10:30.586"></status>
</kw>
<status endtime="20170816 05:10:30.587" status="PASS" starttime="20170816 05:10:30.585"></status>
</kw>
<status endtime="20170816 05:10:30.587" status="PASS" starttime="20170816 05:10:30.584"></status>
</kw>
<status endtime="20170816 05:10:30.587" status="PASS" starttime="20170816 05:10:30.583"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:10:30.587" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:10:30.587" status="PASS" starttime="20170816 05:10:30.587"></status>
</kw>
<msg timestamp="20170816 05:10:30.588" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:10:30.588" status="PASS" starttime="20170816 05:10:29.490"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:10:30.588" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:10:30.588" status="PASS" starttime="20170816 05:10:30.588"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:10:30.589" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:10:30.589" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:10:30.589" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit'}</msg>
<status endtime="20170816 05:10:30.589" status="PASS" starttime="20170816 05:10:30.588"></status>
</kw>
<msg timestamp="20170816 05:10:30.589" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170816 05:10:30.589" status="PASS" starttime="20170816 05:10:29.490"></status>
</kw>
<msg timestamp="20170816 05:10:30.589" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170816 05:10:30.590" status="PASS" starttime="20170816 05:10:29.489"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170816 05:10:30.590" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170816 05:10:30.590" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170816 05:10:30.590" status="FAIL" starttime="20170816 05:10:30.590"></status>
</kw>
<status endtime="20170816 05:10:30.591" status="FAIL" starttime="20170816 05:10:28.594"></status>
</kw>
<status endtime="20170816 05:10:30.591" status="FAIL" starttime="20170816 05:10:26.981"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:10:40.597" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:10:40.597" status="PASS" starttime="20170816 05:10:40.596"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:10:40.598" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:10:40.598" status="PASS" starttime="20170816 05:10:40.597"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:10:40.598" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:10:40.598" status="PASS" starttime="20170816 05:10:40.598"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:10:40.599" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:10:40.599" status="PASS" starttime="20170816 05:10:40.599"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:10:41.007" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:10:41.007" status="PASS" starttime="20170816 05:10:40.600"></status>
</kw>
<msg timestamp="20170816 05:10:41.007" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:10:41.007" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:10:41.007" status="PASS" starttime="20170816 05:10:40.599"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:10:41.008" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:10:41.008" status="PASS" starttime="20170816 05:10:41.008"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:10:41.009" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:10:41.009" status="PASS" starttime="20170816 05:10:41.008"></status>
</kw>
<status endtime="20170816 05:10:41.009" status="PASS" starttime="20170816 05:10:40.595"></status>
</kw>
<status endtime="20170816 05:10:41.009" status="PASS" starttime="20170816 05:10:40.595"></status>
</kw>
<status endtime="20170816 05:10:41.009" status="PASS" starttime="20170816 05:10:40.594"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:10:41.010" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170816 05:10:41.010" status="PASS" starttime="20170816 05:10:41.009"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:10:41.012" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170816 05:10:41.012" status="PASS" starttime="20170816 05:10:41.011"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:10:41.013" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170816 05:10:41.013" status="PASS" starttime="20170816 05:10:41.012"></status>
</kw>
<status endtime="20170816 05:10:41.013" status="PASS" starttime="20170816 05:10:41.012"></status>
</kw>
<status endtime="20170816 05:10:41.013" status="PASS" starttime="20170816 05:10:41.010"></status>
</kw>
<status endtime="20170816 05:10:41.013" status="PASS" starttime="20170816 05:10:41.010"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:10:41.155" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 05:10:41.155" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:10:41.155" status="PASS" starttime="20170816 05:10:41.014"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:10:41.157" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:10:41.157" status="PASS" starttime="20170816 05:10:41.156"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:10:41.158" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:10:41.158" status="PASS" starttime="20170816 05:10:41.158"></status>
</kw>
<status endtime="20170816 05:10:41.158" status="PASS" starttime="20170816 05:10:41.157"></status>
</kw>
<status endtime="20170816 05:10:41.159" status="PASS" starttime="20170816 05:10:41.156"></status>
</kw>
<status endtime="20170816 05:10:41.159" status="PASS" starttime="20170816 05:10:41.155"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:10:41.159" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:10:41.159" status="PASS" starttime="20170816 05:10:41.159"></status>
</kw>
<msg timestamp="20170816 05:10:41.159" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:10:41.159" status="PASS" starttime="20170816 05:10:40.593"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:10:41.160" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:10:41.160" status="PASS" starttime="20170816 05:10:41.160"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:10:41.161" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:10:41.161" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:10:41.161" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170816 05:10:41.161" status="PASS" starttime="20170816 05:10:41.160"></status>
</kw>
<msg timestamp="20170816 05:10:41.161" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170816 05:10:41.161" status="PASS" starttime="20170816 05:10:40.593"></status>
</kw>
<msg timestamp="20170816 05:10:41.161" level="INFO">${power_state} = On</msg>
<status endtime="20170816 05:10:41.161" status="PASS" starttime="20170816 05:10:40.592"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170816 05:10:41.162" status="PASS" starttime="20170816 05:10:41.162"></status>
</kw>
<status endtime="20170816 05:10:41.162" status="PASS" starttime="20170816 05:10:40.592"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:10:41.166" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:10:41.166" status="PASS" starttime="20170816 05:10:41.165"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:10:41.167" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:10:41.167" status="PASS" starttime="20170816 05:10:41.166"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:10:41.167" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:10:41.167" status="PASS" starttime="20170816 05:10:41.167"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:10:41.168" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:10:41.168" status="PASS" starttime="20170816 05:10:41.167"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:10:41.547" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:10:41.547" status="PASS" starttime="20170816 05:10:41.169"></status>
</kw>
<msg timestamp="20170816 05:10:41.547" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:10:41.547" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:10:41.547" status="PASS" starttime="20170816 05:10:41.168"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:10:41.548" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:10:41.548" status="PASS" starttime="20170816 05:10:41.548"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:10:41.549" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:10:41.549" status="PASS" starttime="20170816 05:10:41.548"></status>
</kw>
<status endtime="20170816 05:10:41.549" status="PASS" starttime="20170816 05:10:41.165"></status>
</kw>
<status endtime="20170816 05:10:41.549" status="PASS" starttime="20170816 05:10:41.164"></status>
</kw>
<status endtime="20170816 05:10:41.549" status="PASS" starttime="20170816 05:10:41.164"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:10:41.550" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170816 05:10:41.550" status="PASS" starttime="20170816 05:10:41.549"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:10:41.552" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170816 05:10:41.552" status="PASS" starttime="20170816 05:10:41.551"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:10:41.553" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170816 05:10:41.553" status="PASS" starttime="20170816 05:10:41.553"></status>
</kw>
<status endtime="20170816 05:10:41.554" status="PASS" starttime="20170816 05:10:41.553"></status>
</kw>
<status endtime="20170816 05:10:41.554" status="PASS" starttime="20170816 05:10:41.551"></status>
</kw>
<status endtime="20170816 05:10:41.554" status="PASS" starttime="20170816 05:10:41.550"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:10:42.150" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 05:10:42.150" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:10:42.150" status="PASS" starttime="20170816 05:10:41.554"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:10:42.152" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:10:42.152" status="PASS" starttime="20170816 05:10:42.151"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:10:42.153" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:10:42.153" status="PASS" starttime="20170816 05:10:42.152"></status>
</kw>
<status endtime="20170816 05:10:42.153" status="PASS" starttime="20170816 05:10:42.152"></status>
</kw>
<status endtime="20170816 05:10:42.153" status="PASS" starttime="20170816 05:10:42.151"></status>
</kw>
<status endtime="20170816 05:10:42.153" status="PASS" starttime="20170816 05:10:42.150"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:10:42.153" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:10:42.154" status="PASS" starttime="20170816 05:10:42.153"></status>
</kw>
<msg timestamp="20170816 05:10:42.154" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:10:42.154" status="PASS" starttime="20170816 05:10:41.163"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:10:42.154" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:10:42.154" status="PASS" starttime="20170816 05:10:42.154"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:10:42.155" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:10:42.155" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:10:42.155" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170816 05:10:42.155" status="PASS" starttime="20170816 05:10:42.155"></status>
</kw>
<msg timestamp="20170816 05:10:42.156" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170816 05:10:42.156" status="PASS" starttime="20170816 05:10:41.163"></status>
</kw>
<msg timestamp="20170816 05:10:42.156" level="INFO">${host_state} = Running</msg>
<status endtime="20170816 05:10:42.156" status="PASS" starttime="20170816 05:10:41.162"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170816 05:10:42.156" status="PASS" starttime="20170816 05:10:42.156"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:10:42.161" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:10:42.162" status="PASS" starttime="20170816 05:10:42.161"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:10:42.162" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:10:42.162" status="PASS" starttime="20170816 05:10:42.162"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:10:42.163" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:10:42.163" status="PASS" starttime="20170816 05:10:42.163"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:10:42.164" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:10:42.164" status="PASS" starttime="20170816 05:10:42.163"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:10:42.446" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:10:42.446" status="PASS" starttime="20170816 05:10:42.164"></status>
</kw>
<msg timestamp="20170816 05:10:42.446" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:10:42.447" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:10:42.447" status="PASS" starttime="20170816 05:10:42.164"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:10:42.447" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:10:42.447" status="PASS" starttime="20170816 05:10:42.447"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:10:42.448" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:10:42.448" status="PASS" starttime="20170816 05:10:42.448"></status>
</kw>
<status endtime="20170816 05:10:42.448" status="PASS" starttime="20170816 05:10:42.160"></status>
</kw>
<status endtime="20170816 05:10:42.448" status="PASS" starttime="20170816 05:10:42.160"></status>
</kw>
<status endtime="20170816 05:10:42.448" status="PASS" starttime="20170816 05:10:42.159"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:10:42.449" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170816 05:10:42.449" status="PASS" starttime="20170816 05:10:42.449"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:10:42.451" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170816 05:10:42.451" status="PASS" starttime="20170816 05:10:42.450"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:10:42.452" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170816 05:10:42.452" status="PASS" starttime="20170816 05:10:42.452"></status>
</kw>
<status endtime="20170816 05:10:42.452" status="PASS" starttime="20170816 05:10:42.451"></status>
</kw>
<status endtime="20170816 05:10:42.452" status="PASS" starttime="20170816 05:10:42.450"></status>
</kw>
<status endtime="20170816 05:10:42.452" status="PASS" starttime="20170816 05:10:42.449"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:10:43.029" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170816 05:10:43.030" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:10:43.030" status="PASS" starttime="20170816 05:10:42.453"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:10:43.032" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:10:43.032" status="PASS" starttime="20170816 05:10:43.031"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:10:43.033" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:10:43.033" status="PASS" starttime="20170816 05:10:43.032"></status>
</kw>
<status endtime="20170816 05:10:43.033" status="PASS" starttime="20170816 05:10:43.032"></status>
</kw>
<status endtime="20170816 05:10:43.033" status="PASS" starttime="20170816 05:10:43.031"></status>
</kw>
<status endtime="20170816 05:10:43.033" status="PASS" starttime="20170816 05:10:43.030"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:10:43.033" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:10:43.033" status="PASS" starttime="20170816 05:10:43.033"></status>
</kw>
<msg timestamp="20170816 05:10:43.034" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:10:43.034" status="PASS" starttime="20170816 05:10:42.159"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:10:43.034" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:10:43.034" status="PASS" starttime="20170816 05:10:43.034"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:10:43.035" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:10:43.035" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:10:43.035" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170816 05:10:43.035" status="PASS" starttime="20170816 05:10:43.035"></status>
</kw>
<msg timestamp="20170816 05:10:43.035" level="INFO">${state} = Off</msg>
<status endtime="20170816 05:10:43.035" status="PASS" starttime="20170816 05:10:42.158"></status>
</kw>
<msg timestamp="20170816 05:10:43.036" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170816 05:10:43.036" status="PASS" starttime="20170816 05:10:42.158"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170816 05:10:43.036" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170816 05:10:43.036" status="FAIL" starttime="20170816 05:10:43.036"></status>
</kw>
<status endtime="20170816 05:10:43.037" status="FAIL" starttime="20170816 05:10:42.157"></status>
</kw>
<msg timestamp="20170816 05:10:43.037" level="INFO">${status} = False</msg>
<status endtime="20170816 05:10:43.037" status="PASS" starttime="20170816 05:10:42.157"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status endtime="20170816 05:10:43.037" status="PASS" starttime="20170816 05:10:43.037"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:10:43.041" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:10:43.042" status="PASS" starttime="20170816 05:10:43.041"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:10:43.042" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:10:43.042" status="PASS" starttime="20170816 05:10:43.042"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:10:43.043" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:10:43.043" status="PASS" starttime="20170816 05:10:43.042"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:10:43.044" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:10:43.044" status="PASS" starttime="20170816 05:10:43.043"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:10:43.538" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:10:43.538" status="PASS" starttime="20170816 05:10:43.044"></status>
</kw>
<msg timestamp="20170816 05:10:43.538" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:10:43.538" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:10:43.538" status="PASS" starttime="20170816 05:10:43.044"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:10:43.539" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:10:43.539" status="PASS" starttime="20170816 05:10:43.538"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:10:43.539" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:10:43.539" status="PASS" starttime="20170816 05:10:43.539"></status>
</kw>
<status endtime="20170816 05:10:43.540" status="PASS" starttime="20170816 05:10:43.040"></status>
</kw>
<status endtime="20170816 05:10:43.540" status="PASS" starttime="20170816 05:10:43.040"></status>
</kw>
<status endtime="20170816 05:10:43.540" status="PASS" starttime="20170816 05:10:43.039"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:10:43.540" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170816 05:10:43.540" status="PASS" starttime="20170816 05:10:43.540"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:10:43.542" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170816 05:10:43.542" status="PASS" starttime="20170816 05:10:43.542"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:10:43.543" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170816 05:10:43.544" status="PASS" starttime="20170816 05:10:43.543"></status>
</kw>
<status endtime="20170816 05:10:43.544" status="PASS" starttime="20170816 05:10:43.543"></status>
</kw>
<status endtime="20170816 05:10:43.544" status="PASS" starttime="20170816 05:10:43.541"></status>
</kw>
<status endtime="20170816 05:10:43.544" status="PASS" starttime="20170816 05:10:43.541"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:10:44.265" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170816 05:10:44.266" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:10:44.266" status="PASS" starttime="20170816 05:10:43.544"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:10:44.268" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:10:44.268" status="PASS" starttime="20170816 05:10:44.267"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:10:44.269" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:10:44.269" status="PASS" starttime="20170816 05:10:44.268"></status>
</kw>
<status endtime="20170816 05:10:44.269" status="PASS" starttime="20170816 05:10:44.268"></status>
</kw>
<status endtime="20170816 05:10:44.269" status="PASS" starttime="20170816 05:10:44.266"></status>
</kw>
<status endtime="20170816 05:10:44.269" status="PASS" starttime="20170816 05:10:44.266"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:10:44.270" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:10:44.270" status="PASS" starttime="20170816 05:10:44.269"></status>
</kw>
<msg timestamp="20170816 05:10:44.270" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:10:44.270" status="PASS" starttime="20170816 05:10:43.038"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:10:44.270" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:10:44.271" status="PASS" starttime="20170816 05:10:44.270"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:10:44.271" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:10:44.271" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:10:44.271" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit'}</msg>
<status endtime="20170816 05:10:44.271" status="PASS" starttime="20170816 05:10:44.271"></status>
</kw>
<msg timestamp="20170816 05:10:44.272" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170816 05:10:44.272" status="PASS" starttime="20170816 05:10:43.038"></status>
</kw>
<msg timestamp="20170816 05:10:44.272" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170816 05:10:44.272" status="PASS" starttime="20170816 05:10:43.037"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170816 05:10:44.272" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170816 05:10:44.273" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170816 05:10:44.273" status="FAIL" starttime="20170816 05:10:44.272"></status>
</kw>
<status endtime="20170816 05:10:44.273" status="FAIL" starttime="20170816 05:10:42.157"></status>
</kw>
<status endtime="20170816 05:10:44.273" status="FAIL" starttime="20170816 05:10:40.591"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:10:54.278" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:10:54.279" status="PASS" starttime="20170816 05:10:54.278"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:10:54.279" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:10:54.279" status="PASS" starttime="20170816 05:10:54.279"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:10:54.280" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:10:54.280" status="PASS" starttime="20170816 05:10:54.279"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:10:54.280" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:10:54.281" status="PASS" starttime="20170816 05:10:54.280"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:10:54.616" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:10:54.616" status="PASS" starttime="20170816 05:10:54.281"></status>
</kw>
<msg timestamp="20170816 05:10:54.617" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:10:54.617" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:10:54.617" status="PASS" starttime="20170816 05:10:54.281"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:10:54.617" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:10:54.617" status="PASS" starttime="20170816 05:10:54.617"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:10:54.618" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:10:54.618" status="PASS" starttime="20170816 05:10:54.618"></status>
</kw>
<status endtime="20170816 05:10:54.618" status="PASS" starttime="20170816 05:10:54.277"></status>
</kw>
<status endtime="20170816 05:10:54.618" status="PASS" starttime="20170816 05:10:54.277"></status>
</kw>
<status endtime="20170816 05:10:54.619" status="PASS" starttime="20170816 05:10:54.276"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:10:54.619" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170816 05:10:54.619" status="PASS" starttime="20170816 05:10:54.619"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:10:54.622" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170816 05:10:54.622" status="PASS" starttime="20170816 05:10:54.621"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:10:54.623" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170816 05:10:54.623" status="PASS" starttime="20170816 05:10:54.623"></status>
</kw>
<status endtime="20170816 05:10:54.623" status="PASS" starttime="20170816 05:10:54.622"></status>
</kw>
<status endtime="20170816 05:10:54.624" status="PASS" starttime="20170816 05:10:54.620"></status>
</kw>
<status endtime="20170816 05:10:54.624" status="PASS" starttime="20170816 05:10:54.619"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:10:55.031" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 05:10:55.031" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:10:55.031" status="PASS" starttime="20170816 05:10:54.624"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:10:55.033" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:10:55.033" status="PASS" starttime="20170816 05:10:55.032"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:10:55.034" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:10:55.034" status="PASS" starttime="20170816 05:10:55.033"></status>
</kw>
<status endtime="20170816 05:10:55.034" status="PASS" starttime="20170816 05:10:55.033"></status>
</kw>
<status endtime="20170816 05:10:55.034" status="PASS" starttime="20170816 05:10:55.032"></status>
</kw>
<status endtime="20170816 05:10:55.034" status="PASS" starttime="20170816 05:10:55.031"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:10:55.034" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:10:55.035" status="PASS" starttime="20170816 05:10:55.034"></status>
</kw>
<msg timestamp="20170816 05:10:55.035" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:10:55.035" status="PASS" starttime="20170816 05:10:54.276"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:10:55.035" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:10:55.035" status="PASS" starttime="20170816 05:10:55.035"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:10:55.036" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:10:55.036" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:10:55.036" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170816 05:10:55.036" status="PASS" starttime="20170816 05:10:55.036"></status>
</kw>
<msg timestamp="20170816 05:10:55.037" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170816 05:10:55.037" status="PASS" starttime="20170816 05:10:54.275"></status>
</kw>
<msg timestamp="20170816 05:10:55.037" level="INFO">${power_state} = On</msg>
<status endtime="20170816 05:10:55.037" status="PASS" starttime="20170816 05:10:54.275"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170816 05:10:55.037" status="PASS" starttime="20170816 05:10:55.037"></status>
</kw>
<status endtime="20170816 05:10:55.037" status="PASS" starttime="20170816 05:10:54.274"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:10:55.041" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:10:55.042" status="PASS" starttime="20170816 05:10:55.041"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:10:55.043" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:10:55.043" status="PASS" starttime="20170816 05:10:55.042"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:10:55.043" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:10:55.043" status="PASS" starttime="20170816 05:10:55.043"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:10:55.044" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:10:55.044" status="PASS" starttime="20170816 05:10:55.044"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:10:55.377" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:10:55.377" status="PASS" starttime="20170816 05:10:55.045"></status>
</kw>
<msg timestamp="20170816 05:10:55.377" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:10:55.377" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:10:55.377" status="PASS" starttime="20170816 05:10:55.044"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:10:55.378" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:10:55.378" status="PASS" starttime="20170816 05:10:55.378"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:10:55.379" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:10:55.379" status="PASS" starttime="20170816 05:10:55.378"></status>
</kw>
<status endtime="20170816 05:10:55.379" status="PASS" starttime="20170816 05:10:55.040"></status>
</kw>
<status endtime="20170816 05:10:55.379" status="PASS" starttime="20170816 05:10:55.040"></status>
</kw>
<status endtime="20170816 05:10:55.379" status="PASS" starttime="20170816 05:10:55.039"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:10:55.380" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170816 05:10:55.380" status="PASS" starttime="20170816 05:10:55.379"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:10:55.382" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170816 05:10:55.382" status="PASS" starttime="20170816 05:10:55.381"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:10:55.383" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170816 05:10:55.383" status="PASS" starttime="20170816 05:10:55.383"></status>
</kw>
<status endtime="20170816 05:10:55.383" status="PASS" starttime="20170816 05:10:55.382"></status>
</kw>
<status endtime="20170816 05:10:55.383" status="PASS" starttime="20170816 05:10:55.381"></status>
</kw>
<status endtime="20170816 05:10:55.383" status="PASS" starttime="20170816 05:10:55.380"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:10:56.073" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 05:10:56.073" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:10:56.073" status="PASS" starttime="20170816 05:10:55.384"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:10:56.075" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:10:56.075" status="PASS" starttime="20170816 05:10:56.074"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:10:56.076" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:10:56.076" status="PASS" starttime="20170816 05:10:56.076"></status>
</kw>
<status endtime="20170816 05:10:56.076" status="PASS" starttime="20170816 05:10:56.075"></status>
</kw>
<status endtime="20170816 05:10:56.076" status="PASS" starttime="20170816 05:10:56.074"></status>
</kw>
<status endtime="20170816 05:10:56.076" status="PASS" starttime="20170816 05:10:56.073"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:10:56.077" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:10:56.077" status="PASS" starttime="20170816 05:10:56.077"></status>
</kw>
<msg timestamp="20170816 05:10:56.077" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:10:56.077" status="PASS" starttime="20170816 05:10:55.039"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:10:56.078" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:10:56.078" status="PASS" starttime="20170816 05:10:56.077"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:10:56.078" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:10:56.078" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:10:56.079" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170816 05:10:56.079" status="PASS" starttime="20170816 05:10:56.078"></status>
</kw>
<msg timestamp="20170816 05:10:56.079" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170816 05:10:56.079" status="PASS" starttime="20170816 05:10:55.038"></status>
</kw>
<msg timestamp="20170816 05:10:56.079" level="INFO">${host_state} = Running</msg>
<status endtime="20170816 05:10:56.079" status="PASS" starttime="20170816 05:10:55.038"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170816 05:10:56.080" status="PASS" starttime="20170816 05:10:56.079"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:10:56.085" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:10:56.085" status="PASS" starttime="20170816 05:10:56.084"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:10:56.086" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:10:56.086" status="PASS" starttime="20170816 05:10:56.086"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:10:56.087" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:10:56.087" status="PASS" starttime="20170816 05:10:56.086"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:10:56.087" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:10:56.087" status="PASS" starttime="20170816 05:10:56.087"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:10:56.416" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:10:56.416" status="PASS" starttime="20170816 05:10:56.088"></status>
</kw>
<msg timestamp="20170816 05:10:56.416" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:10:56.416" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:10:56.416" status="PASS" starttime="20170816 05:10:56.087"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:10:56.417" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:10:56.417" status="PASS" starttime="20170816 05:10:56.417"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:10:56.418" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:10:56.418" status="PASS" starttime="20170816 05:10:56.417"></status>
</kw>
<status endtime="20170816 05:10:56.418" status="PASS" starttime="20170816 05:10:56.084"></status>
</kw>
<status endtime="20170816 05:10:56.418" status="PASS" starttime="20170816 05:10:56.083"></status>
</kw>
<status endtime="20170816 05:10:56.418" status="PASS" starttime="20170816 05:10:56.083"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:10:56.419" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170816 05:10:56.419" status="PASS" starttime="20170816 05:10:56.418"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:10:56.421" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170816 05:10:56.421" status="PASS" starttime="20170816 05:10:56.420"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:10:56.422" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170816 05:10:56.422" status="PASS" starttime="20170816 05:10:56.422"></status>
</kw>
<status endtime="20170816 05:10:56.422" status="PASS" starttime="20170816 05:10:56.421"></status>
</kw>
<status endtime="20170816 05:10:56.422" status="PASS" starttime="20170816 05:10:56.420"></status>
</kw>
<status endtime="20170816 05:10:56.422" status="PASS" starttime="20170816 05:10:56.419"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:10:56.873" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170816 05:10:56.873" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:10:56.873" status="PASS" starttime="20170816 05:10:56.423"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:10:56.875" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:10:56.875" status="PASS" starttime="20170816 05:10:56.875"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:10:56.876" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:10:56.876" status="PASS" starttime="20170816 05:10:56.876"></status>
</kw>
<status endtime="20170816 05:10:56.876" status="PASS" starttime="20170816 05:10:56.875"></status>
</kw>
<status endtime="20170816 05:10:56.877" status="PASS" starttime="20170816 05:10:56.874"></status>
</kw>
<status endtime="20170816 05:10:56.877" status="PASS" starttime="20170816 05:10:56.874"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:10:56.877" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:10:56.877" status="PASS" starttime="20170816 05:10:56.877"></status>
</kw>
<msg timestamp="20170816 05:10:56.877" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:10:56.877" status="PASS" starttime="20170816 05:10:56.082"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:10:56.878" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:10:56.878" status="PASS" starttime="20170816 05:10:56.878"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:10:56.878" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:10:56.879" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:10:56.879" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170816 05:10:56.879" status="PASS" starttime="20170816 05:10:56.878"></status>
</kw>
<msg timestamp="20170816 05:10:56.879" level="INFO">${state} = Off</msg>
<status endtime="20170816 05:10:56.879" status="PASS" starttime="20170816 05:10:56.082"></status>
</kw>
<msg timestamp="20170816 05:10:56.879" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170816 05:10:56.879" status="PASS" starttime="20170816 05:10:56.081"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170816 05:10:56.880" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170816 05:10:56.880" status="FAIL" starttime="20170816 05:10:56.880"></status>
</kw>
<status endtime="20170816 05:10:56.880" status="FAIL" starttime="20170816 05:10:56.081"></status>
</kw>
<msg timestamp="20170816 05:10:56.880" level="INFO">${status} = False</msg>
<status endtime="20170816 05:10:56.880" status="PASS" starttime="20170816 05:10:56.080"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status endtime="20170816 05:10:56.881" status="PASS" starttime="20170816 05:10:56.881"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:10:56.885" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:10:56.885" status="PASS" starttime="20170816 05:10:56.884"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:10:56.886" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:10:56.886" status="PASS" starttime="20170816 05:10:56.886"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:10:56.886" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:10:56.887" status="PASS" starttime="20170816 05:10:56.886"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:10:56.887" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:10:56.887" status="PASS" starttime="20170816 05:10:56.887"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:10:57.357" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:10:57.357" status="PASS" starttime="20170816 05:10:56.888"></status>
</kw>
<msg timestamp="20170816 05:10:57.358" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:10:57.358" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:10:57.358" status="PASS" starttime="20170816 05:10:56.887"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:10:57.358" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:10:57.358" status="PASS" starttime="20170816 05:10:57.358"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:10:57.359" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:10:57.359" status="PASS" starttime="20170816 05:10:57.359"></status>
</kw>
<status endtime="20170816 05:10:57.359" status="PASS" starttime="20170816 05:10:56.884"></status>
</kw>
<status endtime="20170816 05:10:57.359" status="PASS" starttime="20170816 05:10:56.883"></status>
</kw>
<status endtime="20170816 05:10:57.359" status="PASS" starttime="20170816 05:10:56.883"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:10:57.360" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170816 05:10:57.360" status="PASS" starttime="20170816 05:10:57.360"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:10:57.362" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170816 05:10:57.362" status="PASS" starttime="20170816 05:10:57.361"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:10:57.363" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170816 05:10:57.363" status="PASS" starttime="20170816 05:10:57.363"></status>
</kw>
<status endtime="20170816 05:10:57.363" status="PASS" starttime="20170816 05:10:57.362"></status>
</kw>
<status endtime="20170816 05:10:57.363" status="PASS" starttime="20170816 05:10:57.361"></status>
</kw>
<status endtime="20170816 05:10:57.364" status="PASS" starttime="20170816 05:10:57.360"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:10:57.489" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170816 05:10:57.489" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:10:57.489" status="PASS" starttime="20170816 05:10:57.364"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:10:57.491" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:10:57.491" status="PASS" starttime="20170816 05:10:57.491"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:10:57.492" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:10:57.492" status="PASS" starttime="20170816 05:10:57.492"></status>
</kw>
<status endtime="20170816 05:10:57.492" status="PASS" starttime="20170816 05:10:57.491"></status>
</kw>
<status endtime="20170816 05:10:57.492" status="PASS" starttime="20170816 05:10:57.490"></status>
</kw>
<status endtime="20170816 05:10:57.492" status="PASS" starttime="20170816 05:10:57.490"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:10:57.493" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:10:57.493" status="PASS" starttime="20170816 05:10:57.493"></status>
</kw>
<msg timestamp="20170816 05:10:57.493" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:10:57.493" status="PASS" starttime="20170816 05:10:56.882"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:10:57.494" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:10:57.494" status="PASS" starttime="20170816 05:10:57.494"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:10:57.494" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:10:57.495" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:10:57.495" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit'}</msg>
<status endtime="20170816 05:10:57.495" status="PASS" starttime="20170816 05:10:57.494"></status>
</kw>
<msg timestamp="20170816 05:10:57.495" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170816 05:10:57.495" status="PASS" starttime="20170816 05:10:56.881"></status>
</kw>
<msg timestamp="20170816 05:10:57.495" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170816 05:10:57.495" status="PASS" starttime="20170816 05:10:56.881"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170816 05:10:57.496" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170816 05:10:57.496" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170816 05:10:57.496" status="FAIL" starttime="20170816 05:10:57.495"></status>
</kw>
<status endtime="20170816 05:10:57.496" status="FAIL" starttime="20170816 05:10:56.080"></status>
</kw>
<status endtime="20170816 05:10:57.496" status="FAIL" starttime="20170816 05:10:54.274"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:11:07.505" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:11:07.506" status="PASS" starttime="20170816 05:11:07.505"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:11:07.506" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:11:07.506" status="PASS" starttime="20170816 05:11:07.506"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:11:07.507" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:11:07.507" status="PASS" starttime="20170816 05:11:07.506"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:11:07.507" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:11:07.508" status="PASS" starttime="20170816 05:11:07.507"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:11:08.088" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:11:08.088" status="PASS" starttime="20170816 05:11:07.508"></status>
</kw>
<msg timestamp="20170816 05:11:08.088" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:11:08.088" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:11:08.089" status="PASS" starttime="20170816 05:11:07.508"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:11:08.089" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:11:08.089" status="PASS" starttime="20170816 05:11:08.089"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:11:08.090" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:11:08.090" status="PASS" starttime="20170816 05:11:08.090"></status>
</kw>
<status endtime="20170816 05:11:08.090" status="PASS" starttime="20170816 05:11:07.501"></status>
</kw>
<status endtime="20170816 05:11:08.090" status="PASS" starttime="20170816 05:11:07.500"></status>
</kw>
<status endtime="20170816 05:11:08.090" status="PASS" starttime="20170816 05:11:07.500"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:11:08.091" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170816 05:11:08.091" status="PASS" starttime="20170816 05:11:08.091"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:11:08.093" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170816 05:11:08.093" status="PASS" starttime="20170816 05:11:08.092"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:11:08.094" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170816 05:11:08.094" status="PASS" starttime="20170816 05:11:08.094"></status>
</kw>
<status endtime="20170816 05:11:08.094" status="PASS" starttime="20170816 05:11:08.093"></status>
</kw>
<status endtime="20170816 05:11:08.094" status="PASS" starttime="20170816 05:11:08.092"></status>
</kw>
<status endtime="20170816 05:11:08.094" status="PASS" starttime="20170816 05:11:08.091"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:11:12.058" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 05:11:12.058" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:11:12.058" status="PASS" starttime="20170816 05:11:08.095"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:11:12.060" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:11:12.061" status="PASS" starttime="20170816 05:11:12.060"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:11:12.062" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:11:12.062" status="PASS" starttime="20170816 05:11:12.061"></status>
</kw>
<status endtime="20170816 05:11:12.062" status="PASS" starttime="20170816 05:11:12.061"></status>
</kw>
<status endtime="20170816 05:11:12.062" status="PASS" starttime="20170816 05:11:12.059"></status>
</kw>
<status endtime="20170816 05:11:12.062" status="PASS" starttime="20170816 05:11:12.059"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:11:12.063" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:11:12.063" status="PASS" starttime="20170816 05:11:12.063"></status>
</kw>
<msg timestamp="20170816 05:11:12.063" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:11:12.063" status="PASS" starttime="20170816 05:11:07.499"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:11:12.064" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:11:12.064" status="PASS" starttime="20170816 05:11:12.063"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:11:12.064" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:11:12.064" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:11:12.064" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170816 05:11:12.065" status="PASS" starttime="20170816 05:11:12.064"></status>
</kw>
<msg timestamp="20170816 05:11:12.065" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170816 05:11:12.065" status="PASS" starttime="20170816 05:11:07.498"></status>
</kw>
<msg timestamp="20170816 05:11:12.065" level="INFO">${power_state} = On</msg>
<status endtime="20170816 05:11:12.065" status="PASS" starttime="20170816 05:11:07.498"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170816 05:11:12.066" status="PASS" starttime="20170816 05:11:12.065"></status>
</kw>
<status endtime="20170816 05:11:12.066" status="PASS" starttime="20170816 05:11:07.497"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:11:12.069" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:11:12.070" status="PASS" starttime="20170816 05:11:12.069"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:11:12.070" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:11:12.070" status="PASS" starttime="20170816 05:11:12.070"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:11:12.071" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:11:12.071" status="PASS" starttime="20170816 05:11:12.071"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:11:12.071" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:11:12.072" status="PASS" starttime="20170816 05:11:12.071"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:11:12.804" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:11:12.804" status="PASS" starttime="20170816 05:11:12.072"></status>
</kw>
<msg timestamp="20170816 05:11:12.804" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:11:12.804" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:11:12.804" status="PASS" starttime="20170816 05:11:12.072"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:11:12.805" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:11:12.805" status="PASS" starttime="20170816 05:11:12.804"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:11:12.806" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:11:12.806" status="PASS" starttime="20170816 05:11:12.805"></status>
</kw>
<status endtime="20170816 05:11:12.806" status="PASS" starttime="20170816 05:11:12.068"></status>
</kw>
<status endtime="20170816 05:11:12.806" status="PASS" starttime="20170816 05:11:12.068"></status>
</kw>
<status endtime="20170816 05:11:12.806" status="PASS" starttime="20170816 05:11:12.067"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:11:12.807" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170816 05:11:12.807" status="PASS" starttime="20170816 05:11:12.806"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:11:12.809" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170816 05:11:12.809" status="PASS" starttime="20170816 05:11:12.808"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:11:12.810" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170816 05:11:12.810" status="PASS" starttime="20170816 05:11:12.810"></status>
</kw>
<status endtime="20170816 05:11:12.810" status="PASS" starttime="20170816 05:11:12.809"></status>
</kw>
<status endtime="20170816 05:11:12.810" status="PASS" starttime="20170816 05:11:12.807"></status>
</kw>
<status endtime="20170816 05:11:12.810" status="PASS" starttime="20170816 05:11:12.807"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:11:13.176" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 05:11:13.176" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:11:13.176" status="PASS" starttime="20170816 05:11:12.811"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:11:13.178" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:11:13.178" status="PASS" starttime="20170816 05:11:13.177"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:11:13.179" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:11:13.179" status="PASS" starttime="20170816 05:11:13.178"></status>
</kw>
<status endtime="20170816 05:11:13.179" status="PASS" starttime="20170816 05:11:13.178"></status>
</kw>
<status endtime="20170816 05:11:13.179" status="PASS" starttime="20170816 05:11:13.177"></status>
</kw>
<status endtime="20170816 05:11:13.179" status="PASS" starttime="20170816 05:11:13.176"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:11:13.179" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:11:13.179" status="PASS" starttime="20170816 05:11:13.179"></status>
</kw>
<msg timestamp="20170816 05:11:13.180" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:11:13.180" status="PASS" starttime="20170816 05:11:12.067"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:11:13.180" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:11:13.180" status="PASS" starttime="20170816 05:11:13.180"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:11:13.181" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:11:13.181" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:11:13.181" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170816 05:11:13.181" status="PASS" starttime="20170816 05:11:13.181"></status>
</kw>
<msg timestamp="20170816 05:11:13.181" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170816 05:11:13.181" status="PASS" starttime="20170816 05:11:12.066"></status>
</kw>
<msg timestamp="20170816 05:11:13.182" level="INFO">${host_state} = Running</msg>
<status endtime="20170816 05:11:13.182" status="PASS" starttime="20170816 05:11:12.066"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170816 05:11:13.182" status="PASS" starttime="20170816 05:11:13.182"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:11:13.187" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:11:13.188" status="PASS" starttime="20170816 05:11:13.187"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:11:13.189" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:11:13.189" status="PASS" starttime="20170816 05:11:13.188"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:11:13.189" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:11:13.189" status="PASS" starttime="20170816 05:11:13.189"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:11:13.190" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:11:13.190" status="PASS" starttime="20170816 05:11:13.190"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:11:13.445" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:11:13.445" status="PASS" starttime="20170816 05:11:13.191"></status>
</kw>
<msg timestamp="20170816 05:11:13.445" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:11:13.445" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:11:13.445" status="PASS" starttime="20170816 05:11:13.190"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:11:13.446" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:11:13.446" status="PASS" starttime="20170816 05:11:13.445"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:11:13.446" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:11:13.446" status="PASS" starttime="20170816 05:11:13.446"></status>
</kw>
<status endtime="20170816 05:11:13.447" status="PASS" starttime="20170816 05:11:13.186"></status>
</kw>
<status endtime="20170816 05:11:13.447" status="PASS" starttime="20170816 05:11:13.186"></status>
</kw>
<status endtime="20170816 05:11:13.447" status="PASS" starttime="20170816 05:11:13.185"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:11:13.447" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170816 05:11:13.447" status="PASS" starttime="20170816 05:11:13.447"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:11:13.450" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170816 05:11:13.450" status="PASS" starttime="20170816 05:11:13.449"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:11:13.452" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170816 05:11:13.452" status="PASS" starttime="20170816 05:11:13.451"></status>
</kw>
<status endtime="20170816 05:11:13.452" status="PASS" starttime="20170816 05:11:13.451"></status>
</kw>
<status endtime="20170816 05:11:13.452" status="PASS" starttime="20170816 05:11:13.448"></status>
</kw>
<status endtime="20170816 05:11:13.452" status="PASS" starttime="20170816 05:11:13.448"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:11:13.521" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170816 05:11:13.521" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:11:13.521" status="PASS" starttime="20170816 05:11:13.453"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:11:13.523" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:11:13.523" status="PASS" starttime="20170816 05:11:13.522"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:11:13.524" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:11:13.524" status="PASS" starttime="20170816 05:11:13.523"></status>
</kw>
<status endtime="20170816 05:11:13.524" status="PASS" starttime="20170816 05:11:13.523"></status>
</kw>
<status endtime="20170816 05:11:13.524" status="PASS" starttime="20170816 05:11:13.522"></status>
</kw>
<status endtime="20170816 05:11:13.524" status="PASS" starttime="20170816 05:11:13.521"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:11:13.524" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:11:13.525" status="PASS" starttime="20170816 05:11:13.524"></status>
</kw>
<msg timestamp="20170816 05:11:13.525" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:11:13.525" status="PASS" starttime="20170816 05:11:13.185"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:11:13.525" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:11:13.525" status="PASS" starttime="20170816 05:11:13.525"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:11:13.526" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:11:13.526" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:11:13.526" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170816 05:11:13.526" status="PASS" starttime="20170816 05:11:13.526"></status>
</kw>
<msg timestamp="20170816 05:11:13.527" level="INFO">${state} = Off</msg>
<status endtime="20170816 05:11:13.527" status="PASS" starttime="20170816 05:11:13.184"></status>
</kw>
<msg timestamp="20170816 05:11:13.527" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170816 05:11:13.527" status="PASS" starttime="20170816 05:11:13.183"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170816 05:11:13.528" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170816 05:11:13.528" status="FAIL" starttime="20170816 05:11:13.527"></status>
</kw>
<status endtime="20170816 05:11:13.528" status="FAIL" starttime="20170816 05:11:13.183"></status>
</kw>
<msg timestamp="20170816 05:11:13.528" level="INFO">${status} = False</msg>
<status endtime="20170816 05:11:13.528" status="PASS" starttime="20170816 05:11:13.183"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status endtime="20170816 05:11:13.528" status="PASS" starttime="20170816 05:11:13.528"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:11:13.532" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:11:13.533" status="PASS" starttime="20170816 05:11:13.532"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:11:13.533" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:11:13.533" status="PASS" starttime="20170816 05:11:13.533"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:11:13.534" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:11:13.534" status="PASS" starttime="20170816 05:11:13.534"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:11:13.535" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:11:13.535" status="PASS" starttime="20170816 05:11:13.534"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:11:13.723" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:11:13.723" status="PASS" starttime="20170816 05:11:13.535"></status>
</kw>
<msg timestamp="20170816 05:11:13.723" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:11:13.723" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:11:13.723" status="PASS" starttime="20170816 05:11:13.535"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:11:13.724" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:11:13.724" status="PASS" starttime="20170816 05:11:13.724"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:11:13.725" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:11:13.725" status="PASS" starttime="20170816 05:11:13.724"></status>
</kw>
<status endtime="20170816 05:11:13.725" status="PASS" starttime="20170816 05:11:13.532"></status>
</kw>
<status endtime="20170816 05:11:13.725" status="PASS" starttime="20170816 05:11:13.531"></status>
</kw>
<status endtime="20170816 05:11:13.725" status="PASS" starttime="20170816 05:11:13.530"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:11:13.726" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170816 05:11:13.726" status="PASS" starttime="20170816 05:11:13.725"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:11:13.728" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170816 05:11:13.728" status="PASS" starttime="20170816 05:11:13.727"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:11:13.729" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170816 05:11:13.729" status="PASS" starttime="20170816 05:11:13.729"></status>
</kw>
<status endtime="20170816 05:11:13.729" status="PASS" starttime="20170816 05:11:13.728"></status>
</kw>
<status endtime="20170816 05:11:13.729" status="PASS" starttime="20170816 05:11:13.727"></status>
</kw>
<status endtime="20170816 05:11:13.729" status="PASS" starttime="20170816 05:11:13.726"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:11:13.819" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170816 05:11:13.820" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:11:13.820" status="PASS" starttime="20170816 05:11:13.729"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:11:13.822" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:11:13.822" status="PASS" starttime="20170816 05:11:13.821"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:11:13.823" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:11:13.823" status="PASS" starttime="20170816 05:11:13.822"></status>
</kw>
<status endtime="20170816 05:11:13.823" status="PASS" starttime="20170816 05:11:13.822"></status>
</kw>
<status endtime="20170816 05:11:13.823" status="PASS" starttime="20170816 05:11:13.820"></status>
</kw>
<status endtime="20170816 05:11:13.823" status="PASS" starttime="20170816 05:11:13.820"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:11:13.824" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:11:13.824" status="PASS" starttime="20170816 05:11:13.823"></status>
</kw>
<msg timestamp="20170816 05:11:13.824" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:11:13.824" status="PASS" starttime="20170816 05:11:13.530"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:11:13.824" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:11:13.825" status="PASS" starttime="20170816 05:11:13.824"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:11:13.825" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:11:13.825" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:11:13.825" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit'}</msg>
<status endtime="20170816 05:11:13.825" status="PASS" starttime="20170816 05:11:13.825"></status>
</kw>
<msg timestamp="20170816 05:11:13.826" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170816 05:11:13.826" status="PASS" starttime="20170816 05:11:13.529"></status>
</kw>
<msg timestamp="20170816 05:11:13.826" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170816 05:11:13.826" status="PASS" starttime="20170816 05:11:13.529"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170816 05:11:13.826" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170816 05:11:13.827" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170816 05:11:13.827" status="FAIL" starttime="20170816 05:11:13.826"></status>
</kw>
<status endtime="20170816 05:11:13.827" status="FAIL" starttime="20170816 05:11:13.182"></status>
</kw>
<status endtime="20170816 05:11:13.827" status="FAIL" starttime="20170816 05:11:07.497"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:11:23.832" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:11:23.833" status="PASS" starttime="20170816 05:11:23.832"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:11:23.833" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:11:23.833" status="PASS" starttime="20170816 05:11:23.833"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:11:23.834" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:11:23.834" status="PASS" starttime="20170816 05:11:23.834"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:11:23.835" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:11:23.835" status="PASS" starttime="20170816 05:11:23.834"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:11:24.691" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:11:24.691" status="PASS" starttime="20170816 05:11:23.835"></status>
</kw>
<msg timestamp="20170816 05:11:24.692" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:11:24.692" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:11:24.692" status="PASS" starttime="20170816 05:11:23.835"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:11:24.692" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:11:24.693" status="PASS" starttime="20170816 05:11:24.692"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:11:24.693" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:11:24.693" status="PASS" starttime="20170816 05:11:24.693"></status>
</kw>
<status endtime="20170816 05:11:24.693" status="PASS" starttime="20170816 05:11:23.831"></status>
</kw>
<status endtime="20170816 05:11:24.693" status="PASS" starttime="20170816 05:11:23.831"></status>
</kw>
<status endtime="20170816 05:11:24.694" status="PASS" starttime="20170816 05:11:23.830"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:11:24.694" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170816 05:11:24.694" status="PASS" starttime="20170816 05:11:24.694"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:11:24.696" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170816 05:11:24.696" status="PASS" starttime="20170816 05:11:24.696"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:11:24.697" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170816 05:11:24.697" status="PASS" starttime="20170816 05:11:24.697"></status>
</kw>
<status endtime="20170816 05:11:24.697" status="PASS" starttime="20170816 05:11:24.696"></status>
</kw>
<status endtime="20170816 05:11:24.698" status="PASS" starttime="20170816 05:11:24.695"></status>
</kw>
<status endtime="20170816 05:11:24.698" status="PASS" starttime="20170816 05:11:24.694"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:11:29.161" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 05:11:29.161" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:11:29.161" status="PASS" starttime="20170816 05:11:24.698"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:11:29.163" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:11:29.163" status="PASS" starttime="20170816 05:11:29.163"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:11:29.164" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:11:29.164" status="PASS" starttime="20170816 05:11:29.164"></status>
</kw>
<status endtime="20170816 05:11:29.165" status="PASS" starttime="20170816 05:11:29.163"></status>
</kw>
<status endtime="20170816 05:11:29.165" status="PASS" starttime="20170816 05:11:29.162"></status>
</kw>
<status endtime="20170816 05:11:29.165" status="PASS" starttime="20170816 05:11:29.162"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:11:29.165" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:11:29.165" status="PASS" starttime="20170816 05:11:29.165"></status>
</kw>
<msg timestamp="20170816 05:11:29.165" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:11:29.165" status="PASS" starttime="20170816 05:11:23.830"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:11:29.166" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:11:29.166" status="PASS" starttime="20170816 05:11:29.166"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:11:29.167" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:11:29.167" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:11:29.167" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170816 05:11:29.167" status="PASS" starttime="20170816 05:11:29.166"></status>
</kw>
<msg timestamp="20170816 05:11:29.167" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170816 05:11:29.167" status="PASS" starttime="20170816 05:11:23.829"></status>
</kw>
<msg timestamp="20170816 05:11:29.168" level="INFO">${power_state} = Off</msg>
<status endtime="20170816 05:11:29.168" status="PASS" starttime="20170816 05:11:23.829"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170816 05:11:29.168" level="FAIL">On != Off</msg>
<status endtime="20170816 05:11:29.168" status="FAIL" starttime="20170816 05:11:29.168"></status>
</kw>
<status endtime="20170816 05:11:29.168" status="FAIL" starttime="20170816 05:11:23.828"></status>
</kw>
<status endtime="20170816 05:11:29.169" status="FAIL" starttime="20170816 05:11:23.828"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:11:39.174" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:11:39.175" status="PASS" starttime="20170816 05:11:39.174"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:11:39.175" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:11:39.175" status="PASS" starttime="20170816 05:11:39.175"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:11:39.176" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:11:39.176" status="PASS" starttime="20170816 05:11:39.175"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:11:39.176" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:11:39.177" status="PASS" starttime="20170816 05:11:39.176"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:11:39.458" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:11:39.458" status="PASS" starttime="20170816 05:11:39.177"></status>
</kw>
<msg timestamp="20170816 05:11:39.459" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:11:39.459" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:11:39.459" status="PASS" starttime="20170816 05:11:39.177"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:11:39.459" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:11:39.459" status="PASS" starttime="20170816 05:11:39.459"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:11:39.460" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:11:39.460" status="PASS" starttime="20170816 05:11:39.460"></status>
</kw>
<status endtime="20170816 05:11:39.460" status="PASS" starttime="20170816 05:11:39.173"></status>
</kw>
<status endtime="20170816 05:11:39.460" status="PASS" starttime="20170816 05:11:39.172"></status>
</kw>
<status endtime="20170816 05:11:39.460" status="PASS" starttime="20170816 05:11:39.172"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:11:39.461" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170816 05:11:39.461" status="PASS" starttime="20170816 05:11:39.461"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:11:39.463" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170816 05:11:39.463" status="PASS" starttime="20170816 05:11:39.462"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:11:39.464" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170816 05:11:39.464" status="PASS" starttime="20170816 05:11:39.464"></status>
</kw>
<status endtime="20170816 05:11:39.464" status="PASS" starttime="20170816 05:11:39.463"></status>
</kw>
<status endtime="20170816 05:11:39.464" status="PASS" starttime="20170816 05:11:39.462"></status>
</kw>
<status endtime="20170816 05:11:39.465" status="PASS" starttime="20170816 05:11:39.461"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:11:39.774" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 05:11:39.775" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:11:39.775" status="PASS" starttime="20170816 05:11:39.465"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:11:39.776" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:11:39.777" status="PASS" starttime="20170816 05:11:39.776"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:11:39.778" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:11:39.778" status="PASS" starttime="20170816 05:11:39.777"></status>
</kw>
<status endtime="20170816 05:11:39.778" status="PASS" starttime="20170816 05:11:39.777"></status>
</kw>
<status endtime="20170816 05:11:39.778" status="PASS" starttime="20170816 05:11:39.775"></status>
</kw>
<status endtime="20170816 05:11:39.778" status="PASS" starttime="20170816 05:11:39.775"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:11:39.779" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:11:39.779" status="PASS" starttime="20170816 05:11:39.778"></status>
</kw>
<msg timestamp="20170816 05:11:39.779" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:11:39.779" status="PASS" starttime="20170816 05:11:39.171"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:11:39.780" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:11:39.780" status="PASS" starttime="20170816 05:11:39.779"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:11:39.780" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:11:39.780" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:11:39.780" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170816 05:11:39.780" status="PASS" starttime="20170816 05:11:39.780"></status>
</kw>
<msg timestamp="20170816 05:11:39.781" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170816 05:11:39.781" status="PASS" starttime="20170816 05:11:39.170"></status>
</kw>
<msg timestamp="20170816 05:11:39.781" level="INFO">${power_state} = On</msg>
<status endtime="20170816 05:11:39.781" status="PASS" starttime="20170816 05:11:39.170"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170816 05:11:39.782" status="PASS" starttime="20170816 05:11:39.781"></status>
</kw>
<status endtime="20170816 05:11:39.782" status="PASS" starttime="20170816 05:11:39.170"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:11:39.785" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:11:39.786" status="PASS" starttime="20170816 05:11:39.785"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:11:39.787" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:11:39.787" status="PASS" starttime="20170816 05:11:39.786"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:11:39.788" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:11:39.788" status="PASS" starttime="20170816 05:11:39.787"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:11:39.788" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:11:39.788" status="PASS" starttime="20170816 05:11:39.788"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:11:39.981" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:11:39.981" status="PASS" starttime="20170816 05:11:39.789"></status>
</kw>
<msg timestamp="20170816 05:11:39.981" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:11:39.981" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:11:39.981" status="PASS" starttime="20170816 05:11:39.789"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:11:39.982" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:11:39.982" status="PASS" starttime="20170816 05:11:39.981"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:11:39.982" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:11:39.982" status="PASS" starttime="20170816 05:11:39.982"></status>
</kw>
<status endtime="20170816 05:11:39.982" status="PASS" starttime="20170816 05:11:39.784"></status>
</kw>
<status endtime="20170816 05:11:39.983" status="PASS" starttime="20170816 05:11:39.784"></status>
</kw>
<status endtime="20170816 05:11:39.983" status="PASS" starttime="20170816 05:11:39.783"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:11:39.983" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170816 05:11:39.983" status="PASS" starttime="20170816 05:11:39.983"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:11:39.986" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170816 05:11:39.986" status="PASS" starttime="20170816 05:11:39.985"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:11:39.987" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170816 05:11:39.987" status="PASS" starttime="20170816 05:11:39.987"></status>
</kw>
<status endtime="20170816 05:11:39.987" status="PASS" starttime="20170816 05:11:39.986"></status>
</kw>
<status endtime="20170816 05:11:39.987" status="PASS" starttime="20170816 05:11:39.984"></status>
</kw>
<status endtime="20170816 05:11:39.988" status="PASS" starttime="20170816 05:11:39.984"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:11:40.076" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 05:11:40.077" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:11:40.077" status="PASS" starttime="20170816 05:11:39.988"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:11:40.078" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:11:40.078" status="PASS" starttime="20170816 05:11:40.078"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:11:40.079" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:11:40.079" status="PASS" starttime="20170816 05:11:40.079"></status>
</kw>
<status endtime="20170816 05:11:40.080" status="PASS" starttime="20170816 05:11:40.079"></status>
</kw>
<status endtime="20170816 05:11:40.080" status="PASS" starttime="20170816 05:11:40.077"></status>
</kw>
<status endtime="20170816 05:11:40.080" status="PASS" starttime="20170816 05:11:40.077"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:11:40.080" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:11:40.080" status="PASS" starttime="20170816 05:11:40.080"></status>
</kw>
<msg timestamp="20170816 05:11:40.080" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:11:40.080" status="PASS" starttime="20170816 05:11:39.783"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:11:40.081" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:11:40.081" status="PASS" starttime="20170816 05:11:40.081"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:11:40.082" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:11:40.082" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:11:40.082" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170816 05:11:40.082" status="PASS" starttime="20170816 05:11:40.081"></status>
</kw>
<msg timestamp="20170816 05:11:40.082" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170816 05:11:40.082" status="PASS" starttime="20170816 05:11:39.782"></status>
</kw>
<msg timestamp="20170816 05:11:40.082" level="INFO">${host_state} = Running</msg>
<status endtime="20170816 05:11:40.082" status="PASS" starttime="20170816 05:11:39.782"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170816 05:11:40.083" status="PASS" starttime="20170816 05:11:40.083"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:11:40.088" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:11:40.089" status="PASS" starttime="20170816 05:11:40.088"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:11:40.090" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:11:40.090" status="PASS" starttime="20170816 05:11:40.089"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:11:40.091" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:11:40.091" status="PASS" starttime="20170816 05:11:40.090"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:11:40.092" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:11:40.092" status="PASS" starttime="20170816 05:11:40.091"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:11:40.278" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:11:40.278" status="PASS" starttime="20170816 05:11:40.093"></status>
</kw>
<msg timestamp="20170816 05:11:40.279" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:11:40.279" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:11:40.279" status="PASS" starttime="20170816 05:11:40.092"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:11:40.279" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:11:40.279" status="PASS" starttime="20170816 05:11:40.279"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:11:40.280" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:11:40.280" status="PASS" starttime="20170816 05:11:40.280"></status>
</kw>
<status endtime="20170816 05:11:40.280" status="PASS" starttime="20170816 05:11:40.087"></status>
</kw>
<status endtime="20170816 05:11:40.280" status="PASS" starttime="20170816 05:11:40.087"></status>
</kw>
<status endtime="20170816 05:11:40.280" status="PASS" starttime="20170816 05:11:40.086"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:11:40.281" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170816 05:11:40.281" status="PASS" starttime="20170816 05:11:40.281"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:11:40.283" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170816 05:11:40.283" status="PASS" starttime="20170816 05:11:40.283"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:11:40.284" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170816 05:11:40.284" status="PASS" starttime="20170816 05:11:40.284"></status>
</kw>
<status endtime="20170816 05:11:40.285" status="PASS" starttime="20170816 05:11:40.284"></status>
</kw>
<status endtime="20170816 05:11:40.285" status="PASS" starttime="20170816 05:11:40.282"></status>
</kw>
<status endtime="20170816 05:11:40.285" status="PASS" starttime="20170816 05:11:40.281"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:11:40.351" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170816 05:11:40.352" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:11:40.352" status="PASS" starttime="20170816 05:11:40.285"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:11:40.353" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:11:40.354" status="PASS" starttime="20170816 05:11:40.353"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:11:40.354" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:11:40.354" status="PASS" starttime="20170816 05:11:40.354"></status>
</kw>
<status endtime="20170816 05:11:40.355" status="PASS" starttime="20170816 05:11:40.354"></status>
</kw>
<status endtime="20170816 05:11:40.355" status="PASS" starttime="20170816 05:11:40.352"></status>
</kw>
<status endtime="20170816 05:11:40.355" status="PASS" starttime="20170816 05:11:40.352"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:11:40.355" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:11:40.355" status="PASS" starttime="20170816 05:11:40.355"></status>
</kw>
<msg timestamp="20170816 05:11:40.356" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:11:40.356" status="PASS" starttime="20170816 05:11:40.085"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:11:40.356" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:11:40.356" status="PASS" starttime="20170816 05:11:40.356"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:11:40.357" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:11:40.357" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:11:40.357" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170816 05:11:40.357" status="PASS" starttime="20170816 05:11:40.356"></status>
</kw>
<msg timestamp="20170816 05:11:40.357" level="INFO">${state} = Off</msg>
<status endtime="20170816 05:11:40.357" status="PASS" starttime="20170816 05:11:40.085"></status>
</kw>
<msg timestamp="20170816 05:11:40.357" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170816 05:11:40.358" status="PASS" starttime="20170816 05:11:40.084"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170816 05:11:40.358" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170816 05:11:40.358" status="FAIL" starttime="20170816 05:11:40.358"></status>
</kw>
<status endtime="20170816 05:11:40.358" status="FAIL" starttime="20170816 05:11:40.084"></status>
</kw>
<msg timestamp="20170816 05:11:40.358" level="INFO">${status} = False</msg>
<status endtime="20170816 05:11:40.359" status="PASS" starttime="20170816 05:11:40.084"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status endtime="20170816 05:11:40.359" status="PASS" starttime="20170816 05:11:40.359"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:11:40.363" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:11:40.363" status="PASS" starttime="20170816 05:11:40.363"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:11:40.364" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:11:40.364" status="PASS" starttime="20170816 05:11:40.364"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:11:40.365" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:11:40.365" status="PASS" starttime="20170816 05:11:40.364"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:11:40.365" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:11:40.365" status="PASS" starttime="20170816 05:11:40.365"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:11:40.655" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:11:40.655" status="PASS" starttime="20170816 05:11:40.366"></status>
</kw>
<msg timestamp="20170816 05:11:40.655" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:11:40.655" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:11:40.655" status="PASS" starttime="20170816 05:11:40.366"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:11:40.656" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:11:40.656" status="PASS" starttime="20170816 05:11:40.656"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:11:40.657" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:11:40.657" status="PASS" starttime="20170816 05:11:40.656"></status>
</kw>
<status endtime="20170816 05:11:40.657" status="PASS" starttime="20170816 05:11:40.362"></status>
</kw>
<status endtime="20170816 05:11:40.657" status="PASS" starttime="20170816 05:11:40.362"></status>
</kw>
<status endtime="20170816 05:11:40.657" status="PASS" starttime="20170816 05:11:40.361"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:11:40.658" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170816 05:11:40.658" status="PASS" starttime="20170816 05:11:40.657"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:11:40.660" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170816 05:11:40.660" status="PASS" starttime="20170816 05:11:40.659"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:11:40.661" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170816 05:11:40.661" status="PASS" starttime="20170816 05:11:40.661"></status>
</kw>
<status endtime="20170816 05:11:40.661" status="PASS" starttime="20170816 05:11:40.660"></status>
</kw>
<status endtime="20170816 05:11:40.661" status="PASS" starttime="20170816 05:11:40.659"></status>
</kw>
<status endtime="20170816 05:11:40.661" status="PASS" starttime="20170816 05:11:40.658"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:11:40.771" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170816 05:11:40.771" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:11:40.771" status="PASS" starttime="20170816 05:11:40.662"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:11:40.776" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:11:40.776" status="PASS" starttime="20170816 05:11:40.775"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:11:40.777" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:11:40.777" status="PASS" starttime="20170816 05:11:40.776"></status>
</kw>
<status endtime="20170816 05:11:40.777" status="PASS" starttime="20170816 05:11:40.776"></status>
</kw>
<status endtime="20170816 05:11:40.777" status="PASS" starttime="20170816 05:11:40.772"></status>
</kw>
<status endtime="20170816 05:11:40.777" status="PASS" starttime="20170816 05:11:40.771"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:11:40.778" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:11:40.778" status="PASS" starttime="20170816 05:11:40.777"></status>
</kw>
<msg timestamp="20170816 05:11:40.778" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:11:40.778" status="PASS" starttime="20170816 05:11:40.360"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:11:40.778" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:11:40.779" status="PASS" starttime="20170816 05:11:40.778"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:11:40.779" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:11:40.779" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:11:40.779" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit'}</msg>
<status endtime="20170816 05:11:40.779" status="PASS" starttime="20170816 05:11:40.779"></status>
</kw>
<msg timestamp="20170816 05:11:40.779" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170816 05:11:40.780" status="PASS" starttime="20170816 05:11:40.360"></status>
</kw>
<msg timestamp="20170816 05:11:40.780" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170816 05:11:40.780" status="PASS" starttime="20170816 05:11:40.359"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170816 05:11:40.780" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170816 05:11:40.781" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170816 05:11:40.781" status="FAIL" starttime="20170816 05:11:40.780"></status>
</kw>
<status endtime="20170816 05:11:40.781" status="FAIL" starttime="20170816 05:11:40.083"></status>
</kw>
<status endtime="20170816 05:11:40.781" status="FAIL" starttime="20170816 05:11:39.169"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:11:50.786" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:11:50.787" status="PASS" starttime="20170816 05:11:50.786"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:11:50.788" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:11:50.788" status="PASS" starttime="20170816 05:11:50.787"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:11:50.788" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:11:50.788" status="PASS" starttime="20170816 05:11:50.788"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:11:50.789" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:11:50.789" status="PASS" starttime="20170816 05:11:50.789"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:11:51.008" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:11:51.009" status="PASS" starttime="20170816 05:11:50.790"></status>
</kw>
<msg timestamp="20170816 05:11:51.009" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:11:51.009" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:11:51.009" status="PASS" starttime="20170816 05:11:50.789"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:11:51.010" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:11:51.010" status="PASS" starttime="20170816 05:11:51.009"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:11:51.011" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:11:51.011" status="PASS" starttime="20170816 05:11:51.010"></status>
</kw>
<status endtime="20170816 05:11:51.011" status="PASS" starttime="20170816 05:11:50.785"></status>
</kw>
<status endtime="20170816 05:11:51.011" status="PASS" starttime="20170816 05:11:50.785"></status>
</kw>
<status endtime="20170816 05:11:51.011" status="PASS" starttime="20170816 05:11:50.784"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:11:51.012" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170816 05:11:51.012" status="PASS" starttime="20170816 05:11:51.012"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:11:51.014" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170816 05:11:51.014" status="PASS" starttime="20170816 05:11:51.014"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:11:51.015" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170816 05:11:51.015" status="PASS" starttime="20170816 05:11:51.015"></status>
</kw>
<status endtime="20170816 05:11:51.016" status="PASS" starttime="20170816 05:11:51.015"></status>
</kw>
<status endtime="20170816 05:11:51.016" status="PASS" starttime="20170816 05:11:51.013"></status>
</kw>
<status endtime="20170816 05:11:51.016" status="PASS" starttime="20170816 05:11:51.013"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:11:51.105" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 05:11:51.105" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:11:51.105" status="PASS" starttime="20170816 05:11:51.016"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:11:51.107" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:11:51.107" status="PASS" starttime="20170816 05:11:51.106"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:11:51.108" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:11:51.108" status="PASS" starttime="20170816 05:11:51.107"></status>
</kw>
<status endtime="20170816 05:11:51.108" status="PASS" starttime="20170816 05:11:51.107"></status>
</kw>
<status endtime="20170816 05:11:51.108" status="PASS" starttime="20170816 05:11:51.106"></status>
</kw>
<status endtime="20170816 05:11:51.108" status="PASS" starttime="20170816 05:11:51.105"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:11:51.109" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:11:51.109" status="PASS" starttime="20170816 05:11:51.108"></status>
</kw>
<msg timestamp="20170816 05:11:51.109" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:11:51.109" status="PASS" starttime="20170816 05:11:50.784"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:11:51.110" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:11:51.110" status="PASS" starttime="20170816 05:11:51.109"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:11:51.110" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:11:51.110" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:11:51.110" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170816 05:11:51.110" status="PASS" starttime="20170816 05:11:51.110"></status>
</kw>
<msg timestamp="20170816 05:11:51.111" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170816 05:11:51.111" status="PASS" starttime="20170816 05:11:50.783"></status>
</kw>
<msg timestamp="20170816 05:11:51.111" level="INFO">${power_state} = On</msg>
<status endtime="20170816 05:11:51.111" status="PASS" starttime="20170816 05:11:50.783"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170816 05:11:51.111" status="PASS" starttime="20170816 05:11:51.111"></status>
</kw>
<status endtime="20170816 05:11:51.112" status="PASS" starttime="20170816 05:11:50.782"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:11:51.117" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:11:51.118" status="PASS" starttime="20170816 05:11:51.116"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:11:51.118" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:11:51.119" status="PASS" starttime="20170816 05:11:51.118"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:11:51.119" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:11:51.120" status="PASS" starttime="20170816 05:11:51.119"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:11:51.120" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:11:51.120" status="PASS" starttime="20170816 05:11:51.120"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:11:51.356" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:11:51.357" status="PASS" starttime="20170816 05:11:51.122"></status>
</kw>
<msg timestamp="20170816 05:11:51.357" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:11:51.357" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:11:51.357" status="PASS" starttime="20170816 05:11:51.121"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:11:51.357" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:11:51.358" status="PASS" starttime="20170816 05:11:51.357"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:11:51.358" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:11:51.358" status="PASS" starttime="20170816 05:11:51.358"></status>
</kw>
<status endtime="20170816 05:11:51.358" status="PASS" starttime="20170816 05:11:51.115"></status>
</kw>
<status endtime="20170816 05:11:51.358" status="PASS" starttime="20170816 05:11:51.115"></status>
</kw>
<status endtime="20170816 05:11:51.359" status="PASS" starttime="20170816 05:11:51.114"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:11:51.359" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170816 05:11:51.359" status="PASS" starttime="20170816 05:11:51.359"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:11:51.361" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170816 05:11:51.361" status="PASS" starttime="20170816 05:11:51.361"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:11:51.362" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170816 05:11:51.362" status="PASS" starttime="20170816 05:11:51.362"></status>
</kw>
<status endtime="20170816 05:11:51.362" status="PASS" starttime="20170816 05:11:51.361"></status>
</kw>
<status endtime="20170816 05:11:51.362" status="PASS" starttime="20170816 05:11:51.360"></status>
</kw>
<status endtime="20170816 05:11:51.363" status="PASS" starttime="20170816 05:11:51.359"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:11:51.463" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 05:11:51.463" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:11:51.463" status="PASS" starttime="20170816 05:11:51.363"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:11:51.465" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:11:51.465" status="PASS" starttime="20170816 05:11:51.465"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:11:51.466" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:11:51.466" status="PASS" starttime="20170816 05:11:51.466"></status>
</kw>
<status endtime="20170816 05:11:51.466" status="PASS" starttime="20170816 05:11:51.465"></status>
</kw>
<status endtime="20170816 05:11:51.467" status="PASS" starttime="20170816 05:11:51.464"></status>
</kw>
<status endtime="20170816 05:11:51.467" status="PASS" starttime="20170816 05:11:51.464"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:11:51.467" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:11:51.467" status="PASS" starttime="20170816 05:11:51.467"></status>
</kw>
<msg timestamp="20170816 05:11:51.467" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:11:51.467" status="PASS" starttime="20170816 05:11:51.113"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:11:51.468" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:11:51.468" status="PASS" starttime="20170816 05:11:51.468"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:11:51.468" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:11:51.469" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:11:51.469" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170816 05:11:51.469" status="PASS" starttime="20170816 05:11:51.468"></status>
</kw>
<msg timestamp="20170816 05:11:51.469" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170816 05:11:51.469" status="PASS" starttime="20170816 05:11:51.112"></status>
</kw>
<msg timestamp="20170816 05:11:51.469" level="INFO">${host_state} = Running</msg>
<status endtime="20170816 05:11:51.469" status="PASS" starttime="20170816 05:11:51.112"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170816 05:11:51.470" status="PASS" starttime="20170816 05:11:51.470"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:11:51.475" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:11:51.475" status="PASS" starttime="20170816 05:11:51.475"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:11:51.476" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:11:51.476" status="PASS" starttime="20170816 05:11:51.476"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:11:51.476" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:11:51.477" status="PASS" starttime="20170816 05:11:51.476"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:11:51.477" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:11:51.477" status="PASS" starttime="20170816 05:11:51.477"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:11:51.655" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:11:51.655" status="PASS" starttime="20170816 05:11:51.478"></status>
</kw>
<msg timestamp="20170816 05:11:51.655" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:11:51.655" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:11:51.656" status="PASS" starttime="20170816 05:11:51.477"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:11:51.656" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:11:51.656" status="PASS" starttime="20170816 05:11:51.656"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:11:51.657" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:11:51.657" status="PASS" starttime="20170816 05:11:51.657"></status>
</kw>
<status endtime="20170816 05:11:51.657" status="PASS" starttime="20170816 05:11:51.474"></status>
</kw>
<status endtime="20170816 05:11:51.657" status="PASS" starttime="20170816 05:11:51.474"></status>
</kw>
<status endtime="20170816 05:11:51.657" status="PASS" starttime="20170816 05:11:51.473"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:11:51.658" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170816 05:11:51.658" status="PASS" starttime="20170816 05:11:51.658"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:11:51.660" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170816 05:11:51.660" status="PASS" starttime="20170816 05:11:51.659"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:11:51.661" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170816 05:11:51.661" status="PASS" starttime="20170816 05:11:51.661"></status>
</kw>
<status endtime="20170816 05:11:51.662" status="PASS" starttime="20170816 05:11:51.661"></status>
</kw>
<status endtime="20170816 05:11:51.662" status="PASS" starttime="20170816 05:11:51.659"></status>
</kw>
<status endtime="20170816 05:11:51.662" status="PASS" starttime="20170816 05:11:51.658"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:11:51.728" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170816 05:11:51.728" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:11:51.728" status="PASS" starttime="20170816 05:11:51.662"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:11:51.730" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:11:51.730" status="PASS" starttime="20170816 05:11:51.729"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:11:51.731" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:11:51.731" status="PASS" starttime="20170816 05:11:51.730"></status>
</kw>
<status endtime="20170816 05:11:51.731" status="PASS" starttime="20170816 05:11:51.730"></status>
</kw>
<status endtime="20170816 05:11:51.731" status="PASS" starttime="20170816 05:11:51.729"></status>
</kw>
<status endtime="20170816 05:11:51.731" status="PASS" starttime="20170816 05:11:51.728"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:11:51.731" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:11:51.732" status="PASS" starttime="20170816 05:11:51.731"></status>
</kw>
<msg timestamp="20170816 05:11:51.732" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:11:51.732" status="PASS" starttime="20170816 05:11:51.472"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:11:51.732" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:11:51.732" status="PASS" starttime="20170816 05:11:51.732"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:11:51.733" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:11:51.733" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:11:51.733" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170816 05:11:51.733" status="PASS" starttime="20170816 05:11:51.733"></status>
</kw>
<msg timestamp="20170816 05:11:51.734" level="INFO">${state} = Off</msg>
<status endtime="20170816 05:11:51.734" status="PASS" starttime="20170816 05:11:51.472"></status>
</kw>
<msg timestamp="20170816 05:11:51.734" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170816 05:11:51.734" status="PASS" starttime="20170816 05:11:51.471"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170816 05:11:51.735" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170816 05:11:51.735" status="FAIL" starttime="20170816 05:11:51.734"></status>
</kw>
<status endtime="20170816 05:11:51.735" status="FAIL" starttime="20170816 05:11:51.471"></status>
</kw>
<msg timestamp="20170816 05:11:51.735" level="INFO">${status} = False</msg>
<status endtime="20170816 05:11:51.735" status="PASS" starttime="20170816 05:11:51.470"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status endtime="20170816 05:11:51.735" status="PASS" starttime="20170816 05:11:51.735"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:11:51.739" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:11:51.739" status="PASS" starttime="20170816 05:11:51.739"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:11:51.740" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:11:51.740" status="PASS" starttime="20170816 05:11:51.740"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:11:51.741" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:11:51.741" status="PASS" starttime="20170816 05:11:51.740"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:11:51.741" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:11:51.741" status="PASS" starttime="20170816 05:11:51.741"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:11:51.919" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:11:51.919" status="PASS" starttime="20170816 05:11:51.742"></status>
</kw>
<msg timestamp="20170816 05:11:51.920" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:11:51.920" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:11:51.920" status="PASS" starttime="20170816 05:11:51.742"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:11:51.920" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:11:51.920" status="PASS" starttime="20170816 05:11:51.920"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:11:51.921" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:11:51.921" status="PASS" starttime="20170816 05:11:51.921"></status>
</kw>
<status endtime="20170816 05:11:51.921" status="PASS" starttime="20170816 05:11:51.738"></status>
</kw>
<status endtime="20170816 05:11:51.921" status="PASS" starttime="20170816 05:11:51.738"></status>
</kw>
<status endtime="20170816 05:11:51.921" status="PASS" starttime="20170816 05:11:51.737"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:11:51.922" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170816 05:11:51.922" status="PASS" starttime="20170816 05:11:51.922"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:11:51.924" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170816 05:11:51.925" status="PASS" starttime="20170816 05:11:51.923"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:11:51.926" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170816 05:11:51.926" status="PASS" starttime="20170816 05:11:51.925"></status>
</kw>
<status endtime="20170816 05:11:51.926" status="PASS" starttime="20170816 05:11:51.925"></status>
</kw>
<status endtime="20170816 05:11:51.926" status="PASS" starttime="20170816 05:11:51.923"></status>
</kw>
<status endtime="20170816 05:11:51.926" status="PASS" starttime="20170816 05:11:51.922"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:11:52.033" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170816 05:11:52.033" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:11:52.033" status="PASS" starttime="20170816 05:11:51.927"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:11:52.035" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:11:52.035" status="PASS" starttime="20170816 05:11:52.035"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:11:52.036" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:11:52.036" status="PASS" starttime="20170816 05:11:52.036"></status>
</kw>
<status endtime="20170816 05:11:52.036" status="PASS" starttime="20170816 05:11:52.035"></status>
</kw>
<status endtime="20170816 05:11:52.036" status="PASS" starttime="20170816 05:11:52.034"></status>
</kw>
<status endtime="20170816 05:11:52.036" status="PASS" starttime="20170816 05:11:52.034"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:11:52.037" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:11:52.037" status="PASS" starttime="20170816 05:11:52.037"></status>
</kw>
<msg timestamp="20170816 05:11:52.037" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:11:52.037" status="PASS" starttime="20170816 05:11:51.737"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:11:52.038" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:11:52.038" status="PASS" starttime="20170816 05:11:52.038"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:11:52.038" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:11:52.039" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:11:52.039" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit'}</msg>
<status endtime="20170816 05:11:52.039" status="PASS" starttime="20170816 05:11:52.038"></status>
</kw>
<msg timestamp="20170816 05:11:52.039" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170816 05:11:52.039" status="PASS" starttime="20170816 05:11:51.736"></status>
</kw>
<msg timestamp="20170816 05:11:52.039" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170816 05:11:52.039" status="PASS" starttime="20170816 05:11:51.736"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170816 05:11:52.040" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170816 05:11:52.040" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170816 05:11:52.040" status="FAIL" starttime="20170816 05:11:52.039"></status>
</kw>
<status endtime="20170816 05:11:52.040" status="FAIL" starttime="20170816 05:11:51.470"></status>
</kw>
<status endtime="20170816 05:11:52.040" status="FAIL" starttime="20170816 05:11:50.782"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:12:02.046" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:12:02.046" status="PASS" starttime="20170816 05:12:02.046"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:12:02.047" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:12:02.047" status="PASS" starttime="20170816 05:12:02.047"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:12:02.047" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:12:02.048" status="PASS" starttime="20170816 05:12:02.047"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:12:02.048" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:12:02.048" status="PASS" starttime="20170816 05:12:02.048"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:12:02.392" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:12:02.392" status="PASS" starttime="20170816 05:12:02.049"></status>
</kw>
<msg timestamp="20170816 05:12:02.392" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:12:02.392" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:12:02.392" status="PASS" starttime="20170816 05:12:02.048"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:12:02.393" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:12:02.393" status="PASS" starttime="20170816 05:12:02.393"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:12:02.394" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:12:02.394" status="PASS" starttime="20170816 05:12:02.393"></status>
</kw>
<status endtime="20170816 05:12:02.394" status="PASS" starttime="20170816 05:12:02.045"></status>
</kw>
<status endtime="20170816 05:12:02.394" status="PASS" starttime="20170816 05:12:02.044"></status>
</kw>
<status endtime="20170816 05:12:02.394" status="PASS" starttime="20170816 05:12:02.043"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:12:02.395" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170816 05:12:02.395" status="PASS" starttime="20170816 05:12:02.394"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:12:02.397" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170816 05:12:02.397" status="PASS" starttime="20170816 05:12:02.397"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:12:02.398" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170816 05:12:02.398" status="PASS" starttime="20170816 05:12:02.398"></status>
</kw>
<status endtime="20170816 05:12:02.398" status="PASS" starttime="20170816 05:12:02.397"></status>
</kw>
<status endtime="20170816 05:12:02.398" status="PASS" starttime="20170816 05:12:02.396"></status>
</kw>
<status endtime="20170816 05:12:02.399" status="PASS" starttime="20170816 05:12:02.395"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:12:03.054" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 05:12:03.054" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:12:03.054" status="PASS" starttime="20170816 05:12:02.399"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:12:03.056" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:12:03.056" status="PASS" starttime="20170816 05:12:03.055"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:12:03.057" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:12:03.057" status="PASS" starttime="20170816 05:12:03.057"></status>
</kw>
<status endtime="20170816 05:12:03.057" status="PASS" starttime="20170816 05:12:03.056"></status>
</kw>
<status endtime="20170816 05:12:03.058" status="PASS" starttime="20170816 05:12:03.055"></status>
</kw>
<status endtime="20170816 05:12:03.058" status="PASS" starttime="20170816 05:12:03.054"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:12:03.058" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:12:03.058" status="PASS" starttime="20170816 05:12:03.058"></status>
</kw>
<msg timestamp="20170816 05:12:03.058" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:12:03.058" status="PASS" starttime="20170816 05:12:02.043"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:12:03.059" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:12:03.059" status="PASS" starttime="20170816 05:12:03.059"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:12:03.060" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:12:03.060" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:12:03.060" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170816 05:12:03.060" status="PASS" starttime="20170816 05:12:03.059"></status>
</kw>
<msg timestamp="20170816 05:12:03.060" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170816 05:12:03.060" status="PASS" starttime="20170816 05:12:02.042"></status>
</kw>
<msg timestamp="20170816 05:12:03.060" level="INFO">${power_state} = On</msg>
<status endtime="20170816 05:12:03.060" status="PASS" starttime="20170816 05:12:02.042"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170816 05:12:03.061" status="PASS" starttime="20170816 05:12:03.061"></status>
</kw>
<status endtime="20170816 05:12:03.061" status="PASS" starttime="20170816 05:12:02.041"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:12:03.065" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:12:03.065" status="PASS" starttime="20170816 05:12:03.065"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:12:03.066" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:12:03.066" status="PASS" starttime="20170816 05:12:03.065"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:12:03.066" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:12:03.066" status="PASS" starttime="20170816 05:12:03.066"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:12:03.067" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:12:03.067" status="PASS" starttime="20170816 05:12:03.067"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:12:03.352" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:12:03.352" status="PASS" starttime="20170816 05:12:03.068"></status>
</kw>
<msg timestamp="20170816 05:12:03.352" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:12:03.352" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:12:03.352" status="PASS" starttime="20170816 05:12:03.067"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:12:03.353" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:12:03.353" status="PASS" starttime="20170816 05:12:03.352"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:12:03.353" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:12:03.353" status="PASS" starttime="20170816 05:12:03.353"></status>
</kw>
<status endtime="20170816 05:12:03.354" status="PASS" starttime="20170816 05:12:03.064"></status>
</kw>
<status endtime="20170816 05:12:03.354" status="PASS" starttime="20170816 05:12:03.063"></status>
</kw>
<status endtime="20170816 05:12:03.354" status="PASS" starttime="20170816 05:12:03.063"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:12:03.354" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170816 05:12:03.354" status="PASS" starttime="20170816 05:12:03.354"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:12:03.357" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170816 05:12:03.357" status="PASS" starttime="20170816 05:12:03.356"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:12:03.358" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170816 05:12:03.358" status="PASS" starttime="20170816 05:12:03.357"></status>
</kw>
<status endtime="20170816 05:12:03.358" status="PASS" starttime="20170816 05:12:03.357"></status>
</kw>
<status endtime="20170816 05:12:03.358" status="PASS" starttime="20170816 05:12:03.355"></status>
</kw>
<status endtime="20170816 05:12:03.358" status="PASS" starttime="20170816 05:12:03.355"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:12:04.117" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 05:12:04.117" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:12:04.117" status="PASS" starttime="20170816 05:12:03.358"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:12:04.119" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:12:04.119" status="PASS" starttime="20170816 05:12:04.119"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:12:04.120" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:12:04.120" status="PASS" starttime="20170816 05:12:04.120"></status>
</kw>
<status endtime="20170816 05:12:04.120" status="PASS" starttime="20170816 05:12:04.119"></status>
</kw>
<status endtime="20170816 05:12:04.121" status="PASS" starttime="20170816 05:12:04.118"></status>
</kw>
<status endtime="20170816 05:12:04.121" status="PASS" starttime="20170816 05:12:04.118"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:12:04.121" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:12:04.121" status="PASS" starttime="20170816 05:12:04.121"></status>
</kw>
<msg timestamp="20170816 05:12:04.121" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:12:04.121" status="PASS" starttime="20170816 05:12:03.062"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:12:04.122" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:12:04.122" status="PASS" starttime="20170816 05:12:04.122"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:12:04.123" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:12:04.123" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:12:04.123" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170816 05:12:04.123" status="PASS" starttime="20170816 05:12:04.123"></status>
</kw>
<msg timestamp="20170816 05:12:04.123" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170816 05:12:04.123" status="PASS" starttime="20170816 05:12:03.062"></status>
</kw>
<msg timestamp="20170816 05:12:04.124" level="INFO">${host_state} = Running</msg>
<status endtime="20170816 05:12:04.124" status="PASS" starttime="20170816 05:12:03.061"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170816 05:12:04.124" status="PASS" starttime="20170816 05:12:04.124"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:12:04.129" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:12:04.130" status="PASS" starttime="20170816 05:12:04.128"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:12:04.130" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:12:04.130" status="PASS" starttime="20170816 05:12:04.130"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:12:04.131" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:12:04.131" status="PASS" starttime="20170816 05:12:04.130"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:12:04.131" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:12:04.131" status="PASS" starttime="20170816 05:12:04.131"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:12:04.689" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:12:04.689" status="PASS" starttime="20170816 05:12:04.132"></status>
</kw>
<msg timestamp="20170816 05:12:04.689" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:12:04.689" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:12:04.690" status="PASS" starttime="20170816 05:12:04.132"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:12:04.690" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:12:04.690" status="PASS" starttime="20170816 05:12:04.690"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:12:04.691" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:12:04.691" status="PASS" starttime="20170816 05:12:04.691"></status>
</kw>
<status endtime="20170816 05:12:04.691" status="PASS" starttime="20170816 05:12:04.128"></status>
</kw>
<status endtime="20170816 05:12:04.691" status="PASS" starttime="20170816 05:12:04.127"></status>
</kw>
<status endtime="20170816 05:12:04.692" status="PASS" starttime="20170816 05:12:04.127"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:12:04.692" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170816 05:12:04.692" status="PASS" starttime="20170816 05:12:04.692"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:12:04.694" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170816 05:12:04.694" status="PASS" starttime="20170816 05:12:04.694"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:12:04.695" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170816 05:12:04.696" status="PASS" starttime="20170816 05:12:04.695"></status>
</kw>
<status endtime="20170816 05:12:04.696" status="PASS" starttime="20170816 05:12:04.695"></status>
</kw>
<status endtime="20170816 05:12:04.696" status="PASS" starttime="20170816 05:12:04.693"></status>
</kw>
<status endtime="20170816 05:12:04.696" status="PASS" starttime="20170816 05:12:04.693"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:12:05.174" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170816 05:12:05.175" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:12:05.175" status="PASS" starttime="20170816 05:12:04.696"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:12:05.176" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:12:05.176" status="PASS" starttime="20170816 05:12:05.176"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:12:05.177" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:12:05.177" status="PASS" starttime="20170816 05:12:05.177"></status>
</kw>
<status endtime="20170816 05:12:05.177" status="PASS" starttime="20170816 05:12:05.177"></status>
</kw>
<status endtime="20170816 05:12:05.178" status="PASS" starttime="20170816 05:12:05.175"></status>
</kw>
<status endtime="20170816 05:12:05.178" status="PASS" starttime="20170816 05:12:05.175"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:12:05.178" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:12:05.178" status="PASS" starttime="20170816 05:12:05.178"></status>
</kw>
<msg timestamp="20170816 05:12:05.178" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:12:05.178" status="PASS" starttime="20170816 05:12:04.126"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:12:05.179" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:12:05.179" status="PASS" starttime="20170816 05:12:05.179"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:12:05.180" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:12:05.180" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:12:05.180" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170816 05:12:05.180" status="PASS" starttime="20170816 05:12:05.179"></status>
</kw>
<msg timestamp="20170816 05:12:05.180" level="INFO">${state} = Off</msg>
<status endtime="20170816 05:12:05.180" status="PASS" starttime="20170816 05:12:04.126"></status>
</kw>
<msg timestamp="20170816 05:12:05.180" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170816 05:12:05.180" status="PASS" starttime="20170816 05:12:04.125"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170816 05:12:05.181" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170816 05:12:05.181" status="FAIL" starttime="20170816 05:12:05.181"></status>
</kw>
<status endtime="20170816 05:12:05.181" status="FAIL" starttime="20170816 05:12:04.125"></status>
</kw>
<msg timestamp="20170816 05:12:05.181" level="INFO">${status} = False</msg>
<status endtime="20170816 05:12:05.181" status="PASS" starttime="20170816 05:12:04.125"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status endtime="20170816 05:12:05.182" status="PASS" starttime="20170816 05:12:05.182"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:12:05.186" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:12:05.186" status="PASS" starttime="20170816 05:12:05.186"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:12:05.187" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:12:05.187" status="PASS" starttime="20170816 05:12:05.187"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:12:05.188" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:12:05.188" status="PASS" starttime="20170816 05:12:05.187"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:12:05.188" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:12:05.188" status="PASS" starttime="20170816 05:12:05.188"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:12:05.415" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:12:05.415" status="PASS" starttime="20170816 05:12:05.189"></status>
</kw>
<msg timestamp="20170816 05:12:05.415" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:12:05.415" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:12:05.415" status="PASS" starttime="20170816 05:12:05.189"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:12:05.416" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:12:05.416" status="PASS" starttime="20170816 05:12:05.416"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:12:05.417" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:12:05.417" status="PASS" starttime="20170816 05:12:05.416"></status>
</kw>
<status endtime="20170816 05:12:05.417" status="PASS" starttime="20170816 05:12:05.185"></status>
</kw>
<status endtime="20170816 05:12:05.417" status="PASS" starttime="20170816 05:12:05.185"></status>
</kw>
<status endtime="20170816 05:12:05.417" status="PASS" starttime="20170816 05:12:05.184"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:12:05.418" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170816 05:12:05.418" status="PASS" starttime="20170816 05:12:05.417"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:12:05.420" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170816 05:12:05.420" status="PASS" starttime="20170816 05:12:05.419"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:12:05.421" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170816 05:12:05.421" status="PASS" starttime="20170816 05:12:05.420"></status>
</kw>
<status endtime="20170816 05:12:05.421" status="PASS" starttime="20170816 05:12:05.420"></status>
</kw>
<status endtime="20170816 05:12:05.421" status="PASS" starttime="20170816 05:12:05.418"></status>
</kw>
<status endtime="20170816 05:12:05.421" status="PASS" starttime="20170816 05:12:05.418"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:12:05.994" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170816 05:12:05.994" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:12:05.994" status="PASS" starttime="20170816 05:12:05.421"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:12:05.996" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:12:05.996" status="PASS" starttime="20170816 05:12:05.996"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:12:05.997" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:12:05.997" status="PASS" starttime="20170816 05:12:05.997"></status>
</kw>
<status endtime="20170816 05:12:05.998" status="PASS" starttime="20170816 05:12:05.997"></status>
</kw>
<status endtime="20170816 05:12:05.998" status="PASS" starttime="20170816 05:12:05.995"></status>
</kw>
<status endtime="20170816 05:12:05.998" status="PASS" starttime="20170816 05:12:05.994"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:12:05.998" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:12:05.998" status="PASS" starttime="20170816 05:12:05.998"></status>
</kw>
<msg timestamp="20170816 05:12:05.998" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:12:05.998" status="PASS" starttime="20170816 05:12:05.183"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:12:05.999" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:12:05.999" status="PASS" starttime="20170816 05:12:05.999"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:12:06.000" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:12:06.000" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:12:06.000" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit'}</msg>
<status endtime="20170816 05:12:06.000" status="PASS" starttime="20170816 05:12:05.999"></status>
</kw>
<msg timestamp="20170816 05:12:06.000" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170816 05:12:06.000" status="PASS" starttime="20170816 05:12:05.182"></status>
</kw>
<msg timestamp="20170816 05:12:06.000" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170816 05:12:06.000" status="PASS" starttime="20170816 05:12:05.182"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170816 05:12:06.001" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170816 05:12:06.001" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170816 05:12:06.001" status="FAIL" starttime="20170816 05:12:06.001"></status>
</kw>
<status endtime="20170816 05:12:06.001" status="FAIL" starttime="20170816 05:12:04.124"></status>
</kw>
<status endtime="20170816 05:12:06.002" status="FAIL" starttime="20170816 05:12:02.041"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:12:16.007" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:12:16.008" status="PASS" starttime="20170816 05:12:16.007"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:12:16.008" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:12:16.008" status="PASS" starttime="20170816 05:12:16.008"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:12:16.009" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:12:16.009" status="PASS" starttime="20170816 05:12:16.008"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:12:16.010" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:12:16.010" status="PASS" starttime="20170816 05:12:16.009"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:12:16.384" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:12:16.384" status="PASS" starttime="20170816 05:12:16.010"></status>
</kw>
<msg timestamp="20170816 05:12:16.384" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:12:16.384" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:12:16.384" status="PASS" starttime="20170816 05:12:16.010"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:12:16.385" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:12:16.385" status="PASS" starttime="20170816 05:12:16.384"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:12:16.385" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:12:16.386" status="PASS" starttime="20170816 05:12:16.385"></status>
</kw>
<status endtime="20170816 05:12:16.386" status="PASS" starttime="20170816 05:12:16.006"></status>
</kw>
<status endtime="20170816 05:12:16.386" status="PASS" starttime="20170816 05:12:16.006"></status>
</kw>
<status endtime="20170816 05:12:16.386" status="PASS" starttime="20170816 05:12:16.005"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:12:16.386" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170816 05:12:16.386" status="PASS" starttime="20170816 05:12:16.386"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:12:16.389" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170816 05:12:16.389" status="PASS" starttime="20170816 05:12:16.388"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:12:16.389" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170816 05:12:16.390" status="PASS" starttime="20170816 05:12:16.389"></status>
</kw>
<status endtime="20170816 05:12:16.390" status="PASS" starttime="20170816 05:12:16.389"></status>
</kw>
<status endtime="20170816 05:12:16.390" status="PASS" starttime="20170816 05:12:16.387"></status>
</kw>
<status endtime="20170816 05:12:16.390" status="PASS" starttime="20170816 05:12:16.387"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:12:17.095" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 05:12:17.095" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:12:17.095" status="PASS" starttime="20170816 05:12:16.390"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:12:17.097" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:12:17.097" status="PASS" starttime="20170816 05:12:17.097"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:12:17.098" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:12:17.098" status="PASS" starttime="20170816 05:12:17.098"></status>
</kw>
<status endtime="20170816 05:12:17.099" status="PASS" starttime="20170816 05:12:17.098"></status>
</kw>
<status endtime="20170816 05:12:17.099" status="PASS" starttime="20170816 05:12:17.096"></status>
</kw>
<status endtime="20170816 05:12:17.099" status="PASS" starttime="20170816 05:12:17.096"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:12:17.099" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:12:17.099" status="PASS" starttime="20170816 05:12:17.099"></status>
</kw>
<msg timestamp="20170816 05:12:17.099" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:12:17.100" status="PASS" starttime="20170816 05:12:16.004"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:12:17.100" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:12:17.100" status="PASS" starttime="20170816 05:12:17.100"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:12:17.101" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:12:17.101" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:12:17.101" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170816 05:12:17.101" status="PASS" starttime="20170816 05:12:17.100"></status>
</kw>
<msg timestamp="20170816 05:12:17.101" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170816 05:12:17.101" status="PASS" starttime="20170816 05:12:16.004"></status>
</kw>
<msg timestamp="20170816 05:12:17.102" level="INFO">${power_state} = On</msg>
<status endtime="20170816 05:12:17.102" status="PASS" starttime="20170816 05:12:16.004"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170816 05:12:17.102" status="PASS" starttime="20170816 05:12:17.102"></status>
</kw>
<status endtime="20170816 05:12:17.102" status="PASS" starttime="20170816 05:12:16.003"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:12:17.106" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:12:17.107" status="PASS" starttime="20170816 05:12:17.106"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:12:17.107" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:12:17.108" status="PASS" starttime="20170816 05:12:17.107"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:12:17.108" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:12:17.108" status="PASS" starttime="20170816 05:12:17.108"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:12:17.109" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:12:17.109" status="PASS" starttime="20170816 05:12:17.108"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:12:17.440" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:12:17.441" status="PASS" starttime="20170816 05:12:17.109"></status>
</kw>
<msg timestamp="20170816 05:12:17.441" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:12:17.441" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:12:17.441" status="PASS" starttime="20170816 05:12:17.109"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:12:17.441" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:12:17.442" status="PASS" starttime="20170816 05:12:17.441"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:12:17.442" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:12:17.442" status="PASS" starttime="20170816 05:12:17.442"></status>
</kw>
<status endtime="20170816 05:12:17.442" status="PASS" starttime="20170816 05:12:17.105"></status>
</kw>
<status endtime="20170816 05:12:17.442" status="PASS" starttime="20170816 05:12:17.105"></status>
</kw>
<status endtime="20170816 05:12:17.443" status="PASS" starttime="20170816 05:12:17.104"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:12:17.443" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170816 05:12:17.443" status="PASS" starttime="20170816 05:12:17.443"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:12:17.445" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170816 05:12:17.445" status="PASS" starttime="20170816 05:12:17.445"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:12:17.446" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170816 05:12:17.446" status="PASS" starttime="20170816 05:12:17.446"></status>
</kw>
<status endtime="20170816 05:12:17.446" status="PASS" starttime="20170816 05:12:17.446"></status>
</kw>
<status endtime="20170816 05:12:17.447" status="PASS" starttime="20170816 05:12:17.444"></status>
</kw>
<status endtime="20170816 05:12:17.447" status="PASS" starttime="20170816 05:12:17.443"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:12:18.204" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 05:12:18.204" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:12:18.205" status="PASS" starttime="20170816 05:12:17.447"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:12:18.207" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:12:18.207" status="PASS" starttime="20170816 05:12:18.206"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:12:18.207" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:12:18.208" status="PASS" starttime="20170816 05:12:18.207"></status>
</kw>
<status endtime="20170816 05:12:18.208" status="PASS" starttime="20170816 05:12:18.207"></status>
</kw>
<status endtime="20170816 05:12:18.208" status="PASS" starttime="20170816 05:12:18.206"></status>
</kw>
<status endtime="20170816 05:12:18.208" status="PASS" starttime="20170816 05:12:18.205"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:12:18.208" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:12:18.208" status="PASS" starttime="20170816 05:12:18.208"></status>
</kw>
<msg timestamp="20170816 05:12:18.209" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:12:18.209" status="PASS" starttime="20170816 05:12:17.103"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:12:18.209" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:12:18.209" status="PASS" starttime="20170816 05:12:18.209"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:12:18.210" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:12:18.210" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:12:18.210" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170816 05:12:18.210" status="PASS" starttime="20170816 05:12:18.210"></status>
</kw>
<msg timestamp="20170816 05:12:18.210" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170816 05:12:18.210" status="PASS" starttime="20170816 05:12:17.103"></status>
</kw>
<msg timestamp="20170816 05:12:18.211" level="INFO">${host_state} = Running</msg>
<status endtime="20170816 05:12:18.211" status="PASS" starttime="20170816 05:12:17.102"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170816 05:12:18.211" status="PASS" starttime="20170816 05:12:18.211"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:12:18.216" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:12:18.217" status="PASS" starttime="20170816 05:12:18.216"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:12:18.217" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:12:18.217" status="PASS" starttime="20170816 05:12:18.217"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:12:18.218" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:12:18.218" status="PASS" starttime="20170816 05:12:18.218"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:12:18.219" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:12:18.219" status="PASS" starttime="20170816 05:12:18.218"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:12:18.605" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:12:18.605" status="PASS" starttime="20170816 05:12:18.219"></status>
</kw>
<msg timestamp="20170816 05:12:18.605" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:12:18.605" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:12:18.605" status="PASS" starttime="20170816 05:12:18.219"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:12:18.606" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:12:18.606" status="PASS" starttime="20170816 05:12:18.606"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:12:18.607" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:12:18.607" status="PASS" starttime="20170816 05:12:18.606"></status>
</kw>
<status endtime="20170816 05:12:18.607" status="PASS" starttime="20170816 05:12:18.216"></status>
</kw>
<status endtime="20170816 05:12:18.607" status="PASS" starttime="20170816 05:12:18.215"></status>
</kw>
<status endtime="20170816 05:12:18.607" status="PASS" starttime="20170816 05:12:18.215"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:12:18.608" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170816 05:12:18.608" status="PASS" starttime="20170816 05:12:18.607"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:12:18.610" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170816 05:12:18.610" status="PASS" starttime="20170816 05:12:18.609"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:12:18.611" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170816 05:12:18.611" status="PASS" starttime="20170816 05:12:18.611"></status>
</kw>
<status endtime="20170816 05:12:18.611" status="PASS" starttime="20170816 05:12:18.610"></status>
</kw>
<status endtime="20170816 05:12:18.611" status="PASS" starttime="20170816 05:12:18.608"></status>
</kw>
<status endtime="20170816 05:12:18.611" status="PASS" starttime="20170816 05:12:18.608"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:12:19.003" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170816 05:12:19.003" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:12:19.003" status="PASS" starttime="20170816 05:12:18.612"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:12:19.005" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:12:19.005" status="PASS" starttime="20170816 05:12:19.005"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:12:19.006" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:12:19.006" status="PASS" starttime="20170816 05:12:19.006"></status>
</kw>
<status endtime="20170816 05:12:19.006" status="PASS" starttime="20170816 05:12:19.005"></status>
</kw>
<status endtime="20170816 05:12:19.007" status="PASS" starttime="20170816 05:12:19.004"></status>
</kw>
<status endtime="20170816 05:12:19.007" status="PASS" starttime="20170816 05:12:19.003"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:12:19.007" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:12:19.007" status="PASS" starttime="20170816 05:12:19.007"></status>
</kw>
<msg timestamp="20170816 05:12:19.007" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:12:19.007" status="PASS" starttime="20170816 05:12:18.214"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:12:19.008" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:12:19.008" status="PASS" starttime="20170816 05:12:19.008"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:12:19.008" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:12:19.009" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:12:19.009" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170816 05:12:19.009" status="PASS" starttime="20170816 05:12:19.008"></status>
</kw>
<msg timestamp="20170816 05:12:19.009" level="INFO">${state} = Off</msg>
<status endtime="20170816 05:12:19.009" status="PASS" starttime="20170816 05:12:18.213"></status>
</kw>
<msg timestamp="20170816 05:12:19.009" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170816 05:12:19.009" status="PASS" starttime="20170816 05:12:18.212"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170816 05:12:19.010" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170816 05:12:19.010" status="FAIL" starttime="20170816 05:12:19.009"></status>
</kw>
<status endtime="20170816 05:12:19.010" status="FAIL" starttime="20170816 05:12:18.212"></status>
</kw>
<msg timestamp="20170816 05:12:19.010" level="INFO">${status} = False</msg>
<status endtime="20170816 05:12:19.010" status="PASS" starttime="20170816 05:12:18.212"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status endtime="20170816 05:12:19.011" status="PASS" starttime="20170816 05:12:19.010"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:12:19.014" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:12:19.015" status="PASS" starttime="20170816 05:12:19.014"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:12:19.015" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:12:19.015" status="PASS" starttime="20170816 05:12:19.015"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:12:19.016" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:12:19.016" status="PASS" starttime="20170816 05:12:19.016"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:12:19.017" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:12:19.017" status="PASS" starttime="20170816 05:12:19.016"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:12:19.449" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:12:19.450" status="PASS" starttime="20170816 05:12:19.017"></status>
</kw>
<msg timestamp="20170816 05:12:19.450" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:12:19.450" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:12:19.450" status="PASS" starttime="20170816 05:12:19.017"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:12:19.450" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:12:19.451" status="PASS" starttime="20170816 05:12:19.450"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:12:19.451" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:12:19.451" status="PASS" starttime="20170816 05:12:19.451"></status>
</kw>
<status endtime="20170816 05:12:19.451" status="PASS" starttime="20170816 05:12:19.014"></status>
</kw>
<status endtime="20170816 05:12:19.452" status="PASS" starttime="20170816 05:12:19.013"></status>
</kw>
<status endtime="20170816 05:12:19.452" status="PASS" starttime="20170816 05:12:19.013"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:12:19.452" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170816 05:12:19.452" status="PASS" starttime="20170816 05:12:19.452"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:12:19.454" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170816 05:12:19.454" status="PASS" starttime="20170816 05:12:19.454"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:12:19.455" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170816 05:12:19.455" status="PASS" starttime="20170816 05:12:19.455"></status>
</kw>
<status endtime="20170816 05:12:19.455" status="PASS" starttime="20170816 05:12:19.455"></status>
</kw>
<status endtime="20170816 05:12:19.456" status="PASS" starttime="20170816 05:12:19.453"></status>
</kw>
<status endtime="20170816 05:12:19.456" status="PASS" starttime="20170816 05:12:19.453"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:12:20.110" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170816 05:12:20.110" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:12:20.111" status="PASS" starttime="20170816 05:12:19.456"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:12:20.112" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:12:20.113" status="PASS" starttime="20170816 05:12:20.112"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:12:20.113" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:12:20.114" status="PASS" starttime="20170816 05:12:20.113"></status>
</kw>
<status endtime="20170816 05:12:20.114" status="PASS" starttime="20170816 05:12:20.113"></status>
</kw>
<status endtime="20170816 05:12:20.114" status="PASS" starttime="20170816 05:12:20.111"></status>
</kw>
<status endtime="20170816 05:12:20.114" status="PASS" starttime="20170816 05:12:20.111"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:12:20.114" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:12:20.114" status="PASS" starttime="20170816 05:12:20.114"></status>
</kw>
<msg timestamp="20170816 05:12:20.115" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:12:20.115" status="PASS" starttime="20170816 05:12:19.012"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:12:20.115" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:12:20.115" status="PASS" starttime="20170816 05:12:20.115"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:12:20.116" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:12:20.116" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:12:20.116" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit'}</msg>
<status endtime="20170816 05:12:20.116" status="PASS" starttime="20170816 05:12:20.115"></status>
</kw>
<msg timestamp="20170816 05:12:20.116" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170816 05:12:20.116" status="PASS" starttime="20170816 05:12:19.011"></status>
</kw>
<msg timestamp="20170816 05:12:20.116" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170816 05:12:20.117" status="PASS" starttime="20170816 05:12:19.011"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170816 05:12:20.117" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170816 05:12:20.117" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170816 05:12:20.117" status="FAIL" starttime="20170816 05:12:20.117"></status>
</kw>
<status endtime="20170816 05:12:20.117" status="FAIL" starttime="20170816 05:12:18.211"></status>
</kw>
<status endtime="20170816 05:12:20.118" status="FAIL" starttime="20170816 05:12:16.002"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:12:30.123" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:12:30.124" status="PASS" starttime="20170816 05:12:30.123"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:12:30.124" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:12:30.125" status="PASS" starttime="20170816 05:12:30.124"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:12:30.125" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:12:30.125" status="PASS" starttime="20170816 05:12:30.125"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:12:30.126" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:12:30.126" status="PASS" starttime="20170816 05:12:30.125"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:12:30.438" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:12:30.438" status="PASS" starttime="20170816 05:12:30.126"></status>
</kw>
<msg timestamp="20170816 05:12:30.438" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:12:30.438" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:12:30.438" status="PASS" starttime="20170816 05:12:30.126"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:12:30.439" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:12:30.439" status="PASS" starttime="20170816 05:12:30.438"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:12:30.439" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:12:30.440" status="PASS" starttime="20170816 05:12:30.439"></status>
</kw>
<status endtime="20170816 05:12:30.440" status="PASS" starttime="20170816 05:12:30.122"></status>
</kw>
<status endtime="20170816 05:12:30.440" status="PASS" starttime="20170816 05:12:30.122"></status>
</kw>
<status endtime="20170816 05:12:30.440" status="PASS" starttime="20170816 05:12:30.121"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:12:30.440" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170816 05:12:30.440" status="PASS" starttime="20170816 05:12:30.440"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:12:30.442" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170816 05:12:30.443" status="PASS" starttime="20170816 05:12:30.442"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:12:30.443" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170816 05:12:30.444" status="PASS" starttime="20170816 05:12:30.443"></status>
</kw>
<status endtime="20170816 05:12:30.444" status="PASS" starttime="20170816 05:12:30.443"></status>
</kw>
<status endtime="20170816 05:12:30.444" status="PASS" starttime="20170816 05:12:30.441"></status>
</kw>
<status endtime="20170816 05:12:30.444" status="PASS" starttime="20170816 05:12:30.441"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:12:30.671" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 05:12:30.671" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:12:30.671" status="PASS" starttime="20170816 05:12:30.444"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:12:30.673" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:12:30.673" status="PASS" starttime="20170816 05:12:30.673"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:12:30.674" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:12:30.675" status="PASS" starttime="20170816 05:12:30.674"></status>
</kw>
<status endtime="20170816 05:12:30.675" status="PASS" starttime="20170816 05:12:30.673"></status>
</kw>
<status endtime="20170816 05:12:30.675" status="PASS" starttime="20170816 05:12:30.672"></status>
</kw>
<status endtime="20170816 05:12:30.675" status="PASS" starttime="20170816 05:12:30.672"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:12:30.675" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:12:30.675" status="PASS" starttime="20170816 05:12:30.675"></status>
</kw>
<msg timestamp="20170816 05:12:30.676" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:12:30.676" status="PASS" starttime="20170816 05:12:30.120"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:12:30.676" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:12:30.676" status="PASS" starttime="20170816 05:12:30.676"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:12:30.677" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:12:30.677" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:12:30.677" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170816 05:12:30.677" status="PASS" starttime="20170816 05:12:30.676"></status>
</kw>
<msg timestamp="20170816 05:12:30.677" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170816 05:12:30.677" status="PASS" starttime="20170816 05:12:30.120"></status>
</kw>
<msg timestamp="20170816 05:12:30.678" level="INFO">${power_state} = On</msg>
<status endtime="20170816 05:12:30.678" status="PASS" starttime="20170816 05:12:30.119"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170816 05:12:30.678" status="PASS" starttime="20170816 05:12:30.678"></status>
</kw>
<status endtime="20170816 05:12:30.678" status="PASS" starttime="20170816 05:12:30.119"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:12:30.682" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:12:30.682" status="PASS" starttime="20170816 05:12:30.681"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:12:30.683" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:12:30.683" status="PASS" starttime="20170816 05:12:30.682"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:12:30.683" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:12:30.683" status="PASS" starttime="20170816 05:12:30.683"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:12:30.684" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:12:30.684" status="PASS" starttime="20170816 05:12:30.684"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:12:31.166" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:12:31.167" status="PASS" starttime="20170816 05:12:30.685"></status>
</kw>
<msg timestamp="20170816 05:12:31.167" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:12:31.167" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:12:31.167" status="PASS" starttime="20170816 05:12:30.684"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:12:31.168" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:12:31.168" status="PASS" starttime="20170816 05:12:31.167"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:12:31.168" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:12:31.168" status="PASS" starttime="20170816 05:12:31.168"></status>
</kw>
<status endtime="20170816 05:12:31.168" status="PASS" starttime="20170816 05:12:30.681"></status>
</kw>
<status endtime="20170816 05:12:31.169" status="PASS" starttime="20170816 05:12:30.680"></status>
</kw>
<status endtime="20170816 05:12:31.169" status="PASS" starttime="20170816 05:12:30.680"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:12:31.169" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170816 05:12:31.169" status="PASS" starttime="20170816 05:12:31.169"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:12:31.172" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170816 05:12:31.172" status="PASS" starttime="20170816 05:12:31.171"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:12:31.173" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170816 05:12:31.173" status="PASS" starttime="20170816 05:12:31.172"></status>
</kw>
<status endtime="20170816 05:12:31.173" status="PASS" starttime="20170816 05:12:31.172"></status>
</kw>
<status endtime="20170816 05:12:31.173" status="PASS" starttime="20170816 05:12:31.170"></status>
</kw>
<status endtime="20170816 05:12:31.173" status="PASS" starttime="20170816 05:12:31.170"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:12:31.764" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 05:12:31.764" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:12:31.764" status="PASS" starttime="20170816 05:12:31.173"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:12:31.766" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:12:31.766" status="PASS" starttime="20170816 05:12:31.765"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:12:31.767" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:12:31.767" status="PASS" starttime="20170816 05:12:31.766"></status>
</kw>
<status endtime="20170816 05:12:31.767" status="PASS" starttime="20170816 05:12:31.766"></status>
</kw>
<status endtime="20170816 05:12:31.767" status="PASS" starttime="20170816 05:12:31.765"></status>
</kw>
<status endtime="20170816 05:12:31.767" status="PASS" starttime="20170816 05:12:31.764"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:12:31.767" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:12:31.768" status="PASS" starttime="20170816 05:12:31.767"></status>
</kw>
<msg timestamp="20170816 05:12:31.768" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:12:31.768" status="PASS" starttime="20170816 05:12:30.679"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:12:31.768" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:12:31.768" status="PASS" starttime="20170816 05:12:31.768"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:12:31.769" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:12:31.769" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:12:31.769" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170816 05:12:31.769" status="PASS" starttime="20170816 05:12:31.769"></status>
</kw>
<msg timestamp="20170816 05:12:31.769" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170816 05:12:31.770" status="PASS" starttime="20170816 05:12:30.679"></status>
</kw>
<msg timestamp="20170816 05:12:31.770" level="INFO">${host_state} = Running</msg>
<status endtime="20170816 05:12:31.770" status="PASS" starttime="20170816 05:12:30.678"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170816 05:12:31.770" status="PASS" starttime="20170816 05:12:31.770"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:12:31.775" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:12:31.776" status="PASS" starttime="20170816 05:12:31.775"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:12:31.776" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:12:31.776" status="PASS" starttime="20170816 05:12:31.776"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:12:31.777" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:12:31.777" status="PASS" starttime="20170816 05:12:31.777"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:12:31.778" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:12:31.778" status="PASS" starttime="20170816 05:12:31.777"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:12:32.148" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:12:32.148" status="PASS" starttime="20170816 05:12:31.778"></status>
</kw>
<msg timestamp="20170816 05:12:32.148" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:12:32.148" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:12:32.148" status="PASS" starttime="20170816 05:12:31.778"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:12:32.149" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:12:32.149" status="PASS" starttime="20170816 05:12:32.148"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:12:32.149" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:12:32.150" status="PASS" starttime="20170816 05:12:32.149"></status>
</kw>
<status endtime="20170816 05:12:32.150" status="PASS" starttime="20170816 05:12:31.774"></status>
</kw>
<status endtime="20170816 05:12:32.150" status="PASS" starttime="20170816 05:12:31.774"></status>
</kw>
<status endtime="20170816 05:12:32.150" status="PASS" starttime="20170816 05:12:31.773"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:12:32.151" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170816 05:12:32.151" status="PASS" starttime="20170816 05:12:32.150"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:12:32.153" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170816 05:12:32.153" status="PASS" starttime="20170816 05:12:32.152"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:12:32.154" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170816 05:12:32.154" status="PASS" starttime="20170816 05:12:32.154"></status>
</kw>
<status endtime="20170816 05:12:32.154" status="PASS" starttime="20170816 05:12:32.153"></status>
</kw>
<status endtime="20170816 05:12:32.154" status="PASS" starttime="20170816 05:12:32.151"></status>
</kw>
<status endtime="20170816 05:12:32.154" status="PASS" starttime="20170816 05:12:32.151"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:12:32.801" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170816 05:12:32.801" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:12:32.801" status="PASS" starttime="20170816 05:12:32.154"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:12:32.803" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:12:32.803" status="PASS" starttime="20170816 05:12:32.802"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:12:32.804" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:12:32.804" status="PASS" starttime="20170816 05:12:32.804"></status>
</kw>
<status endtime="20170816 05:12:32.804" status="PASS" starttime="20170816 05:12:32.803"></status>
</kw>
<status endtime="20170816 05:12:32.804" status="PASS" starttime="20170816 05:12:32.802"></status>
</kw>
<status endtime="20170816 05:12:32.804" status="PASS" starttime="20170816 05:12:32.801"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:12:32.805" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:12:32.805" status="PASS" starttime="20170816 05:12:32.804"></status>
</kw>
<msg timestamp="20170816 05:12:32.805" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:12:32.805" status="PASS" starttime="20170816 05:12:31.772"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:12:32.806" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:12:32.806" status="PASS" starttime="20170816 05:12:32.805"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:12:32.806" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:12:32.806" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:12:32.806" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170816 05:12:32.806" status="PASS" starttime="20170816 05:12:32.806"></status>
</kw>
<msg timestamp="20170816 05:12:32.807" level="INFO">${state} = Off</msg>
<status endtime="20170816 05:12:32.807" status="PASS" starttime="20170816 05:12:31.772"></status>
</kw>
<msg timestamp="20170816 05:12:32.807" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170816 05:12:32.807" status="PASS" starttime="20170816 05:12:31.772"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170816 05:12:32.808" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170816 05:12:32.808" status="FAIL" starttime="20170816 05:12:32.807"></status>
</kw>
<status endtime="20170816 05:12:32.808" status="FAIL" starttime="20170816 05:12:31.771"></status>
</kw>
<msg timestamp="20170816 05:12:32.808" level="INFO">${status} = False</msg>
<status endtime="20170816 05:12:32.808" status="PASS" starttime="20170816 05:12:31.771"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status endtime="20170816 05:12:32.809" status="PASS" starttime="20170816 05:12:32.808"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:12:32.813" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:12:32.813" status="PASS" starttime="20170816 05:12:32.812"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:12:32.814" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:12:32.814" status="PASS" starttime="20170816 05:12:32.813"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:12:32.814" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:12:32.814" status="PASS" starttime="20170816 05:12:32.814"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:12:32.815" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:12:32.815" status="PASS" starttime="20170816 05:12:32.815"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:12:33.183" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:12:33.184" status="PASS" starttime="20170816 05:12:32.816"></status>
</kw>
<msg timestamp="20170816 05:12:33.184" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:12:33.184" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:12:33.184" status="PASS" starttime="20170816 05:12:32.815"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:12:33.184" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:12:33.184" status="PASS" starttime="20170816 05:12:33.184"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:12:33.185" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:12:33.185" status="PASS" starttime="20170816 05:12:33.185"></status>
</kw>
<status endtime="20170816 05:12:33.185" status="PASS" starttime="20170816 05:12:32.812"></status>
</kw>
<status endtime="20170816 05:12:33.185" status="PASS" starttime="20170816 05:12:32.811"></status>
</kw>
<status endtime="20170816 05:12:33.185" status="PASS" starttime="20170816 05:12:32.810"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:12:33.186" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170816 05:12:33.186" status="PASS" starttime="20170816 05:12:33.186"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:12:33.188" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170816 05:12:33.188" status="PASS" starttime="20170816 05:12:33.187"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:12:33.189" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170816 05:12:33.189" status="PASS" starttime="20170816 05:12:33.189"></status>
</kw>
<status endtime="20170816 05:12:33.189" status="PASS" starttime="20170816 05:12:33.188"></status>
</kw>
<status endtime="20170816 05:12:33.190" status="PASS" starttime="20170816 05:12:33.187"></status>
</kw>
<status endtime="20170816 05:12:33.190" status="PASS" starttime="20170816 05:12:33.186"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:12:33.289" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170816 05:12:33.289" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:12:33.289" status="PASS" starttime="20170816 05:12:33.190"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:12:33.291" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:12:33.292" status="PASS" starttime="20170816 05:12:33.291"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:12:33.293" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:12:33.293" status="PASS" starttime="20170816 05:12:33.292"></status>
</kw>
<status endtime="20170816 05:12:33.293" status="PASS" starttime="20170816 05:12:33.292"></status>
</kw>
<status endtime="20170816 05:12:33.293" status="PASS" starttime="20170816 05:12:33.290"></status>
</kw>
<status endtime="20170816 05:12:33.293" status="PASS" starttime="20170816 05:12:33.290"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:12:33.294" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:12:33.294" status="PASS" starttime="20170816 05:12:33.293"></status>
</kw>
<msg timestamp="20170816 05:12:33.294" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:12:33.294" status="PASS" starttime="20170816 05:12:32.810"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:12:33.295" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:12:33.295" status="PASS" starttime="20170816 05:12:33.294"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:12:33.295" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:12:33.295" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:12:33.295" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit'}</msg>
<status endtime="20170816 05:12:33.296" status="PASS" starttime="20170816 05:12:33.295"></status>
</kw>
<msg timestamp="20170816 05:12:33.296" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170816 05:12:33.296" status="PASS" starttime="20170816 05:12:32.809"></status>
</kw>
<msg timestamp="20170816 05:12:33.296" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170816 05:12:33.296" status="PASS" starttime="20170816 05:12:32.809"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170816 05:12:33.297" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170816 05:12:33.297" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170816 05:12:33.297" status="FAIL" starttime="20170816 05:12:33.296"></status>
</kw>
<status endtime="20170816 05:12:33.297" status="FAIL" starttime="20170816 05:12:31.771"></status>
</kw>
<status endtime="20170816 05:12:33.297" status="FAIL" starttime="20170816 05:12:30.118"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:12:43.302" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:12:43.303" status="PASS" starttime="20170816 05:12:43.302"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:12:43.303" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:12:43.303" status="PASS" starttime="20170816 05:12:43.303"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:12:43.304" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:12:43.304" status="PASS" starttime="20170816 05:12:43.304"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:12:43.305" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:12:43.305" status="PASS" starttime="20170816 05:12:43.304"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:12:43.707" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:12:43.707" status="PASS" starttime="20170816 05:12:43.306"></status>
</kw>
<msg timestamp="20170816 05:12:43.708" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:12:43.708" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:12:43.708" status="PASS" starttime="20170816 05:12:43.305"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:12:43.708" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:12:43.708" status="PASS" starttime="20170816 05:12:43.708"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:12:43.709" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:12:43.709" status="PASS" starttime="20170816 05:12:43.709"></status>
</kw>
<status endtime="20170816 05:12:43.709" status="PASS" starttime="20170816 05:12:43.301"></status>
</kw>
<status endtime="20170816 05:12:43.709" status="PASS" starttime="20170816 05:12:43.301"></status>
</kw>
<status endtime="20170816 05:12:43.710" status="PASS" starttime="20170816 05:12:43.300"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:12:43.710" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170816 05:12:43.710" status="PASS" starttime="20170816 05:12:43.710"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:12:43.712" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170816 05:12:43.712" status="PASS" starttime="20170816 05:12:43.712"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:12:43.713" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170816 05:12:43.713" status="PASS" starttime="20170816 05:12:43.713"></status>
</kw>
<status endtime="20170816 05:12:43.713" status="PASS" starttime="20170816 05:12:43.712"></status>
</kw>
<status endtime="20170816 05:12:43.714" status="PASS" starttime="20170816 05:12:43.711"></status>
</kw>
<status endtime="20170816 05:12:43.714" status="PASS" starttime="20170816 05:12:43.710"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:12:47.422" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 05:12:47.422" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:12:47.422" status="PASS" starttime="20170816 05:12:43.714"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:12:47.424" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:12:47.424" status="PASS" starttime="20170816 05:12:47.424"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:12:47.425" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:12:47.425" status="PASS" starttime="20170816 05:12:47.425"></status>
</kw>
<status endtime="20170816 05:12:47.425" status="PASS" starttime="20170816 05:12:47.424"></status>
</kw>
<status endtime="20170816 05:12:47.426" status="PASS" starttime="20170816 05:12:47.423"></status>
</kw>
<status endtime="20170816 05:12:47.426" status="PASS" starttime="20170816 05:12:47.423"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:12:47.426" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:12:47.426" status="PASS" starttime="20170816 05:12:47.426"></status>
</kw>
<msg timestamp="20170816 05:12:47.426" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:12:47.427" status="PASS" starttime="20170816 05:12:43.300"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:12:47.427" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:12:47.427" status="PASS" starttime="20170816 05:12:47.427"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:12:47.428" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:12:47.428" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:12:47.428" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170816 05:12:47.428" status="PASS" starttime="20170816 05:12:47.427"></status>
</kw>
<msg timestamp="20170816 05:12:47.428" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170816 05:12:47.428" status="PASS" starttime="20170816 05:12:43.299"></status>
</kw>
<msg timestamp="20170816 05:12:47.429" level="INFO">${power_state} = On</msg>
<status endtime="20170816 05:12:47.429" status="PASS" starttime="20170816 05:12:43.299"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170816 05:12:47.429" status="PASS" starttime="20170816 05:12:47.429"></status>
</kw>
<status endtime="20170816 05:12:47.429" status="PASS" starttime="20170816 05:12:43.298"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:12:47.433" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:12:47.436" status="PASS" starttime="20170816 05:12:47.433"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:12:47.437" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:12:47.437" status="PASS" starttime="20170816 05:12:47.437"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:12:47.438" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:12:47.438" status="PASS" starttime="20170816 05:12:47.437"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:12:47.439" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:12:47.439" status="PASS" starttime="20170816 05:12:47.438"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:12:47.634" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:12:47.634" status="PASS" starttime="20170816 05:12:47.439"></status>
</kw>
<msg timestamp="20170816 05:12:47.634" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:12:47.634" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:12:47.635" status="PASS" starttime="20170816 05:12:47.439"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:12:47.635" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:12:47.635" status="PASS" starttime="20170816 05:12:47.635"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:12:47.636" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:12:47.636" status="PASS" starttime="20170816 05:12:47.636"></status>
</kw>
<status endtime="20170816 05:12:47.636" status="PASS" starttime="20170816 05:12:47.432"></status>
</kw>
<status endtime="20170816 05:12:47.636" status="PASS" starttime="20170816 05:12:47.432"></status>
</kw>
<status endtime="20170816 05:12:47.636" status="PASS" starttime="20170816 05:12:47.431"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:12:47.637" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170816 05:12:47.637" status="PASS" starttime="20170816 05:12:47.637"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:12:47.639" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170816 05:12:47.639" status="PASS" starttime="20170816 05:12:47.638"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:12:47.640" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170816 05:12:47.640" status="PASS" starttime="20170816 05:12:47.640"></status>
</kw>
<status endtime="20170816 05:12:47.640" status="PASS" starttime="20170816 05:12:47.639"></status>
</kw>
<status endtime="20170816 05:12:47.640" status="PASS" starttime="20170816 05:12:47.638"></status>
</kw>
<status endtime="20170816 05:12:47.640" status="PASS" starttime="20170816 05:12:47.637"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:12:48.510" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 05:12:48.511" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:12:48.511" status="PASS" starttime="20170816 05:12:47.641"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:12:48.513" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:12:48.513" status="PASS" starttime="20170816 05:12:48.512"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:12:48.514" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:12:48.514" status="PASS" starttime="20170816 05:12:48.514"></status>
</kw>
<status endtime="20170816 05:12:48.514" status="PASS" starttime="20170816 05:12:48.513"></status>
</kw>
<status endtime="20170816 05:12:48.514" status="PASS" starttime="20170816 05:12:48.512"></status>
</kw>
<status endtime="20170816 05:12:48.515" status="PASS" starttime="20170816 05:12:48.511"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:12:48.515" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:12:48.515" status="PASS" starttime="20170816 05:12:48.515"></status>
</kw>
<msg timestamp="20170816 05:12:48.515" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:12:48.515" status="PASS" starttime="20170816 05:12:47.430"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:12:48.516" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:12:48.516" status="PASS" starttime="20170816 05:12:48.516"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:12:48.516" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:12:48.517" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:12:48.517" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170816 05:12:48.517" status="PASS" starttime="20170816 05:12:48.516"></status>
</kw>
<msg timestamp="20170816 05:12:48.517" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170816 05:12:48.517" status="PASS" starttime="20170816 05:12:47.430"></status>
</kw>
<msg timestamp="20170816 05:12:48.517" level="INFO">${host_state} = Running</msg>
<status endtime="20170816 05:12:48.517" status="PASS" starttime="20170816 05:12:47.429"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170816 05:12:48.518" status="PASS" starttime="20170816 05:12:48.518"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:12:48.523" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:12:48.523" status="PASS" starttime="20170816 05:12:48.522"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:12:48.524" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:12:48.524" status="PASS" starttime="20170816 05:12:48.523"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:12:48.524" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:12:48.524" status="PASS" starttime="20170816 05:12:48.524"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:12:48.525" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:12:48.525" status="PASS" starttime="20170816 05:12:48.525"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:12:48.711" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:12:48.711" status="PASS" starttime="20170816 05:12:48.526"></status>
</kw>
<msg timestamp="20170816 05:12:48.711" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:12:48.711" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:12:48.711" status="PASS" starttime="20170816 05:12:48.525"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:12:48.712" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:12:48.712" status="PASS" starttime="20170816 05:12:48.712"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:12:48.713" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:12:48.713" status="PASS" starttime="20170816 05:12:48.712"></status>
</kw>
<status endtime="20170816 05:12:48.713" status="PASS" starttime="20170816 05:12:48.522"></status>
</kw>
<status endtime="20170816 05:12:48.713" status="PASS" starttime="20170816 05:12:48.521"></status>
</kw>
<status endtime="20170816 05:12:48.713" status="PASS" starttime="20170816 05:12:48.521"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:12:48.714" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170816 05:12:48.714" status="PASS" starttime="20170816 05:12:48.713"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:12:48.717" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170816 05:12:48.717" status="PASS" starttime="20170816 05:12:48.716"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:12:48.719" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170816 05:12:48.719" status="PASS" starttime="20170816 05:12:48.718"></status>
</kw>
<status endtime="20170816 05:12:48.719" status="PASS" starttime="20170816 05:12:48.718"></status>
</kw>
<status endtime="20170816 05:12:48.719" status="PASS" starttime="20170816 05:12:48.715"></status>
</kw>
<status endtime="20170816 05:12:48.719" status="PASS" starttime="20170816 05:12:48.714"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:12:48.786" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170816 05:12:48.786" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:12:48.786" status="PASS" starttime="20170816 05:12:48.719"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:12:48.788" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:12:48.788" status="PASS" starttime="20170816 05:12:48.787"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:12:48.789" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:12:48.789" status="PASS" starttime="20170816 05:12:48.788"></status>
</kw>
<status endtime="20170816 05:12:48.789" status="PASS" starttime="20170816 05:12:48.788"></status>
</kw>
<status endtime="20170816 05:12:48.789" status="PASS" starttime="20170816 05:12:48.787"></status>
</kw>
<status endtime="20170816 05:12:48.789" status="PASS" starttime="20170816 05:12:48.786"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:12:48.789" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:12:48.790" status="PASS" starttime="20170816 05:12:48.789"></status>
</kw>
<msg timestamp="20170816 05:12:48.790" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:12:48.790" status="PASS" starttime="20170816 05:12:48.520"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:12:48.790" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:12:48.790" status="PASS" starttime="20170816 05:12:48.790"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:12:48.791" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:12:48.791" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:12:48.791" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170816 05:12:48.791" status="PASS" starttime="20170816 05:12:48.791"></status>
</kw>
<msg timestamp="20170816 05:12:48.791" level="INFO">${state} = Off</msg>
<status endtime="20170816 05:12:48.792" status="PASS" starttime="20170816 05:12:48.520"></status>
</kw>
<msg timestamp="20170816 05:12:48.792" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170816 05:12:48.792" status="PASS" starttime="20170816 05:12:48.519"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170816 05:12:48.792" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170816 05:12:48.793" status="FAIL" starttime="20170816 05:12:48.792"></status>
</kw>
<status endtime="20170816 05:12:48.793" status="FAIL" starttime="20170816 05:12:48.519"></status>
</kw>
<msg timestamp="20170816 05:12:48.793" level="INFO">${status} = False</msg>
<status endtime="20170816 05:12:48.793" status="PASS" starttime="20170816 05:12:48.518"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status endtime="20170816 05:12:48.793" status="PASS" starttime="20170816 05:12:48.793"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:12:48.797" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:12:48.798" status="PASS" starttime="20170816 05:12:48.797"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:12:48.798" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:12:48.798" status="PASS" starttime="20170816 05:12:48.798"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:12:48.799" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:12:48.799" status="PASS" starttime="20170816 05:12:48.799"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:12:48.800" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:12:48.800" status="PASS" starttime="20170816 05:12:48.799"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:12:48.977" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:12:48.977" status="PASS" starttime="20170816 05:12:48.800"></status>
</kw>
<msg timestamp="20170816 05:12:48.978" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:12:48.978" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:12:48.978" status="PASS" starttime="20170816 05:12:48.800"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:12:48.978" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:12:48.978" status="PASS" starttime="20170816 05:12:48.978"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:12:48.979" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:12:48.979" status="PASS" starttime="20170816 05:12:48.979"></status>
</kw>
<status endtime="20170816 05:12:48.979" status="PASS" starttime="20170816 05:12:48.797"></status>
</kw>
<status endtime="20170816 05:12:48.979" status="PASS" starttime="20170816 05:12:48.796"></status>
</kw>
<status endtime="20170816 05:12:48.979" status="PASS" starttime="20170816 05:12:48.795"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:12:48.980" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170816 05:12:48.980" status="PASS" starttime="20170816 05:12:48.980"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:12:48.982" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170816 05:12:48.982" status="PASS" starttime="20170816 05:12:48.981"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:12:48.983" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170816 05:12:48.983" status="PASS" starttime="20170816 05:12:48.983"></status>
</kw>
<status endtime="20170816 05:12:48.983" status="PASS" starttime="20170816 05:12:48.982"></status>
</kw>
<status endtime="20170816 05:12:48.984" status="PASS" starttime="20170816 05:12:48.981"></status>
</kw>
<status endtime="20170816 05:12:48.984" status="PASS" starttime="20170816 05:12:48.980"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:12:49.074" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170816 05:12:49.074" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:12:49.074" status="PASS" starttime="20170816 05:12:48.984"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:12:49.076" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:12:49.076" status="PASS" starttime="20170816 05:12:49.075"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:12:49.077" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:12:49.077" status="PASS" starttime="20170816 05:12:49.076"></status>
</kw>
<status endtime="20170816 05:12:49.077" status="PASS" starttime="20170816 05:12:49.076"></status>
</kw>
<status endtime="20170816 05:12:49.077" status="PASS" starttime="20170816 05:12:49.075"></status>
</kw>
<status endtime="20170816 05:12:49.077" status="PASS" starttime="20170816 05:12:49.074"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:12:49.077" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:12:49.077" status="PASS" starttime="20170816 05:12:49.077"></status>
</kw>
<msg timestamp="20170816 05:12:49.078" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:12:49.078" status="PASS" starttime="20170816 05:12:48.795"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:12:49.078" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:12:49.078" status="PASS" starttime="20170816 05:12:49.078"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:12:49.079" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:12:49.079" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:12:49.079" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit'}</msg>
<status endtime="20170816 05:12:49.079" status="PASS" starttime="20170816 05:12:49.079"></status>
</kw>
<msg timestamp="20170816 05:12:49.079" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170816 05:12:49.079" status="PASS" starttime="20170816 05:12:48.794"></status>
</kw>
<msg timestamp="20170816 05:12:49.080" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170816 05:12:49.080" status="PASS" starttime="20170816 05:12:48.794"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170816 05:12:49.080" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170816 05:12:49.080" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170816 05:12:49.080" status="FAIL" starttime="20170816 05:12:49.080"></status>
</kw>
<status endtime="20170816 05:12:49.081" status="FAIL" starttime="20170816 05:12:48.518"></status>
</kw>
<status endtime="20170816 05:12:49.081" status="FAIL" starttime="20170816 05:12:43.298"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:12:59.086" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:12:59.087" status="PASS" starttime="20170816 05:12:59.086"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:12:59.087" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:12:59.087" status="PASS" starttime="20170816 05:12:59.087"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:12:59.088" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:12:59.088" status="PASS" starttime="20170816 05:12:59.088"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:12:59.089" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:12:59.089" status="PASS" starttime="20170816 05:12:59.088"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:12:59.735" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:12:59.735" status="PASS" starttime="20170816 05:12:59.089"></status>
</kw>
<msg timestamp="20170816 05:12:59.735" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:12:59.735" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:12:59.735" status="PASS" starttime="20170816 05:12:59.089"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:12:59.736" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:12:59.737" status="PASS" starttime="20170816 05:12:59.736"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:12:59.738" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:12:59.738" status="PASS" starttime="20170816 05:12:59.737"></status>
</kw>
<status endtime="20170816 05:12:59.738" status="PASS" starttime="20170816 05:12:59.085"></status>
</kw>
<status endtime="20170816 05:12:59.738" status="PASS" starttime="20170816 05:12:59.085"></status>
</kw>
<status endtime="20170816 05:12:59.738" status="PASS" starttime="20170816 05:12:59.084"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:12:59.739" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170816 05:12:59.739" status="PASS" starttime="20170816 05:12:59.738"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:12:59.742" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170816 05:12:59.742" status="PASS" starttime="20170816 05:12:59.741"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:12:59.744" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170816 05:12:59.744" status="PASS" starttime="20170816 05:12:59.743"></status>
</kw>
<status endtime="20170816 05:12:59.744" status="PASS" starttime="20170816 05:12:59.743"></status>
</kw>
<status endtime="20170816 05:12:59.744" status="PASS" starttime="20170816 05:12:59.740"></status>
</kw>
<status endtime="20170816 05:12:59.744" status="PASS" starttime="20170816 05:12:59.739"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:13:05.835" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 05:13:05.836" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:13:05.836" status="PASS" starttime="20170816 05:12:59.744"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:13:05.838" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:13:05.838" status="PASS" starttime="20170816 05:13:05.837"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:13:05.839" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:13:05.839" status="PASS" starttime="20170816 05:13:05.839"></status>
</kw>
<status endtime="20170816 05:13:05.839" status="PASS" starttime="20170816 05:13:05.838"></status>
</kw>
<status endtime="20170816 05:13:05.840" status="PASS" starttime="20170816 05:13:05.837"></status>
</kw>
<status endtime="20170816 05:13:05.840" status="PASS" starttime="20170816 05:13:05.836"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:13:05.840" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:13:05.840" status="PASS" starttime="20170816 05:13:05.840"></status>
</kw>
<msg timestamp="20170816 05:13:05.840" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:13:05.840" status="PASS" starttime="20170816 05:12:59.083"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:13:05.841" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:13:05.841" status="PASS" starttime="20170816 05:13:05.841"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:13:05.842" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:13:05.842" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:13:05.842" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170816 05:13:05.842" status="PASS" starttime="20170816 05:13:05.841"></status>
</kw>
<msg timestamp="20170816 05:13:05.842" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170816 05:13:05.842" status="PASS" starttime="20170816 05:12:59.083"></status>
</kw>
<msg timestamp="20170816 05:13:05.842" level="INFO">${power_state} = Off</msg>
<status endtime="20170816 05:13:05.842" status="PASS" starttime="20170816 05:12:59.082"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170816 05:13:05.843" level="FAIL">On != Off</msg>
<status endtime="20170816 05:13:05.843" status="FAIL" starttime="20170816 05:13:05.843"></status>
</kw>
<status endtime="20170816 05:13:05.843" status="FAIL" starttime="20170816 05:12:59.082"></status>
</kw>
<status endtime="20170816 05:13:05.844" status="FAIL" starttime="20170816 05:12:59.081"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:13:15.849" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:13:15.849" status="PASS" starttime="20170816 05:13:15.848"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:13:15.850" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:13:15.850" status="PASS" starttime="20170816 05:13:15.849"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:13:15.850" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:13:15.850" status="PASS" starttime="20170816 05:13:15.850"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:13:15.851" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:13:15.851" status="PASS" starttime="20170816 05:13:15.851"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:13:16.166" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:13:16.166" status="PASS" starttime="20170816 05:13:15.852"></status>
</kw>
<msg timestamp="20170816 05:13:16.166" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:13:16.166" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:13:16.166" status="PASS" starttime="20170816 05:13:15.851"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:13:16.167" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:13:16.167" status="PASS" starttime="20170816 05:13:16.166"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:13:16.167" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:13:16.168" status="PASS" starttime="20170816 05:13:16.167"></status>
</kw>
<status endtime="20170816 05:13:16.168" status="PASS" starttime="20170816 05:13:15.848"></status>
</kw>
<status endtime="20170816 05:13:16.168" status="PASS" starttime="20170816 05:13:15.847"></status>
</kw>
<status endtime="20170816 05:13:16.168" status="PASS" starttime="20170816 05:13:15.847"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:13:16.169" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170816 05:13:16.169" status="PASS" starttime="20170816 05:13:16.169"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:13:16.172" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170816 05:13:16.172" status="PASS" starttime="20170816 05:13:16.171"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:13:16.173" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170816 05:13:16.173" status="PASS" starttime="20170816 05:13:16.172"></status>
</kw>
<status endtime="20170816 05:13:16.173" status="PASS" starttime="20170816 05:13:16.172"></status>
</kw>
<status endtime="20170816 05:13:16.173" status="PASS" starttime="20170816 05:13:16.170"></status>
</kw>
<status endtime="20170816 05:13:16.173" status="PASS" starttime="20170816 05:13:16.170"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:13:16.607" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 05:13:16.607" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:13:16.607" status="PASS" starttime="20170816 05:13:16.173"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:13:16.609" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:13:16.609" status="PASS" starttime="20170816 05:13:16.608"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:13:16.609" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:13:16.610" status="PASS" starttime="20170816 05:13:16.609"></status>
</kw>
<status endtime="20170816 05:13:16.610" status="PASS" starttime="20170816 05:13:16.609"></status>
</kw>
<status endtime="20170816 05:13:16.610" status="PASS" starttime="20170816 05:13:16.608"></status>
</kw>
<status endtime="20170816 05:13:16.610" status="PASS" starttime="20170816 05:13:16.607"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:13:16.610" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:13:16.610" status="PASS" starttime="20170816 05:13:16.610"></status>
</kw>
<msg timestamp="20170816 05:13:16.611" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:13:16.611" status="PASS" starttime="20170816 05:13:15.846"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:13:16.611" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:13:16.611" status="PASS" starttime="20170816 05:13:16.611"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:13:16.612" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:13:16.612" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:13:16.612" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170816 05:13:16.612" status="PASS" starttime="20170816 05:13:16.612"></status>
</kw>
<msg timestamp="20170816 05:13:16.612" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170816 05:13:16.612" status="PASS" starttime="20170816 05:13:15.846"></status>
</kw>
<msg timestamp="20170816 05:13:16.613" level="INFO">${power_state} = On</msg>
<status endtime="20170816 05:13:16.613" status="PASS" starttime="20170816 05:13:15.845"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170816 05:13:16.613" status="PASS" starttime="20170816 05:13:16.613"></status>
</kw>
<status endtime="20170816 05:13:16.613" status="PASS" starttime="20170816 05:13:15.845"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:13:16.617" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:13:16.618" status="PASS" starttime="20170816 05:13:16.617"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:13:16.618" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:13:16.618" status="PASS" starttime="20170816 05:13:16.618"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:13:16.619" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:13:16.619" status="PASS" starttime="20170816 05:13:16.619"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:13:16.620" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:13:16.620" status="PASS" starttime="20170816 05:13:16.619"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:13:17.115" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:13:17.115" status="PASS" starttime="20170816 05:13:16.620"></status>
</kw>
<msg timestamp="20170816 05:13:17.115" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:13:17.115" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:13:17.115" status="PASS" starttime="20170816 05:13:16.620"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:13:17.116" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:13:17.116" status="PASS" starttime="20170816 05:13:17.116"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:13:17.117" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:13:17.117" status="PASS" starttime="20170816 05:13:17.116"></status>
</kw>
<status endtime="20170816 05:13:17.117" status="PASS" starttime="20170816 05:13:16.616"></status>
</kw>
<status endtime="20170816 05:13:17.117" status="PASS" starttime="20170816 05:13:16.616"></status>
</kw>
<status endtime="20170816 05:13:17.117" status="PASS" starttime="20170816 05:13:16.615"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:13:17.118" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170816 05:13:17.118" status="PASS" starttime="20170816 05:13:17.118"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:13:17.120" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170816 05:13:17.120" status="PASS" starttime="20170816 05:13:17.119"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:13:17.121" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170816 05:13:17.121" status="PASS" starttime="20170816 05:13:17.121"></status>
</kw>
<status endtime="20170816 05:13:17.121" status="PASS" starttime="20170816 05:13:17.120"></status>
</kw>
<status endtime="20170816 05:13:17.121" status="PASS" starttime="20170816 05:13:17.119"></status>
</kw>
<status endtime="20170816 05:13:17.121" status="PASS" starttime="20170816 05:13:17.118"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:13:17.289" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 05:13:17.289" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:13:17.289" status="PASS" starttime="20170816 05:13:17.122"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:13:17.291" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:13:17.291" status="PASS" starttime="20170816 05:13:17.291"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:13:17.292" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:13:17.292" status="PASS" starttime="20170816 05:13:17.292"></status>
</kw>
<status endtime="20170816 05:13:17.292" status="PASS" starttime="20170816 05:13:17.291"></status>
</kw>
<status endtime="20170816 05:13:17.293" status="PASS" starttime="20170816 05:13:17.290"></status>
</kw>
<status endtime="20170816 05:13:17.293" status="PASS" starttime="20170816 05:13:17.290"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:13:17.293" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:13:17.293" status="PASS" starttime="20170816 05:13:17.293"></status>
</kw>
<msg timestamp="20170816 05:13:17.293" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:13:17.293" status="PASS" starttime="20170816 05:13:16.614"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:13:17.294" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:13:17.294" status="PASS" starttime="20170816 05:13:17.294"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:13:17.295" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:13:17.295" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:13:17.295" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170816 05:13:17.295" status="PASS" starttime="20170816 05:13:17.294"></status>
</kw>
<msg timestamp="20170816 05:13:17.295" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170816 05:13:17.295" status="PASS" starttime="20170816 05:13:16.614"></status>
</kw>
<msg timestamp="20170816 05:13:17.295" level="INFO">${host_state} = Running</msg>
<status endtime="20170816 05:13:17.296" status="PASS" starttime="20170816 05:13:16.614"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170816 05:13:17.296" status="PASS" starttime="20170816 05:13:17.296"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:13:17.301" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:13:17.302" status="PASS" starttime="20170816 05:13:17.301"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:13:17.302" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:13:17.302" status="PASS" starttime="20170816 05:13:17.302"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:13:17.303" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:13:17.303" status="PASS" starttime="20170816 05:13:17.302"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:13:17.303" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:13:17.303" status="PASS" starttime="20170816 05:13:17.303"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:13:17.570" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:13:17.570" status="PASS" starttime="20170816 05:13:17.304"></status>
</kw>
<msg timestamp="20170816 05:13:17.570" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:13:17.570" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:13:17.570" status="PASS" starttime="20170816 05:13:17.304"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:13:17.571" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:13:17.571" status="PASS" starttime="20170816 05:13:17.571"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:13:17.572" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:13:17.572" status="PASS" starttime="20170816 05:13:17.571"></status>
</kw>
<status endtime="20170816 05:13:17.572" status="PASS" starttime="20170816 05:13:17.300"></status>
</kw>
<status endtime="20170816 05:13:17.572" status="PASS" starttime="20170816 05:13:17.300"></status>
</kw>
<status endtime="20170816 05:13:17.572" status="PASS" starttime="20170816 05:13:17.299"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:13:17.573" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170816 05:13:17.573" status="PASS" starttime="20170816 05:13:17.573"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:13:17.575" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170816 05:13:17.575" status="PASS" starttime="20170816 05:13:17.574"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:13:17.576" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170816 05:13:17.576" status="PASS" starttime="20170816 05:13:17.576"></status>
</kw>
<status endtime="20170816 05:13:17.577" status="PASS" starttime="20170816 05:13:17.576"></status>
</kw>
<status endtime="20170816 05:13:17.577" status="PASS" starttime="20170816 05:13:17.574"></status>
</kw>
<status endtime="20170816 05:13:17.577" status="PASS" starttime="20170816 05:13:17.573"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:13:17.696" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170816 05:13:17.696" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:13:17.696" status="PASS" starttime="20170816 05:13:17.577"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:13:17.698" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:13:17.698" status="PASS" starttime="20170816 05:13:17.697"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:13:17.699" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:13:17.699" status="PASS" starttime="20170816 05:13:17.698"></status>
</kw>
<status endtime="20170816 05:13:17.699" status="PASS" starttime="20170816 05:13:17.698"></status>
</kw>
<status endtime="20170816 05:13:17.699" status="PASS" starttime="20170816 05:13:17.697"></status>
</kw>
<status endtime="20170816 05:13:17.699" status="PASS" starttime="20170816 05:13:17.696"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:13:17.699" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:13:17.700" status="PASS" starttime="20170816 05:13:17.699"></status>
</kw>
<msg timestamp="20170816 05:13:17.700" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:13:17.700" status="PASS" starttime="20170816 05:13:17.298"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:13:17.700" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:13:17.700" status="PASS" starttime="20170816 05:13:17.700"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:13:17.701" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:13:17.701" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:13:17.701" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170816 05:13:17.701" status="PASS" starttime="20170816 05:13:17.701"></status>
</kw>
<msg timestamp="20170816 05:13:17.701" level="INFO">${state} = Off</msg>
<status endtime="20170816 05:13:17.701" status="PASS" starttime="20170816 05:13:17.298"></status>
</kw>
<msg timestamp="20170816 05:13:17.702" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170816 05:13:17.702" status="PASS" starttime="20170816 05:13:17.297"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170816 05:13:17.703" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170816 05:13:17.703" status="FAIL" starttime="20170816 05:13:17.702"></status>
</kw>
<status endtime="20170816 05:13:17.703" status="FAIL" starttime="20170816 05:13:17.297"></status>
</kw>
<msg timestamp="20170816 05:13:17.703" level="INFO">${status} = False</msg>
<status endtime="20170816 05:13:17.703" status="PASS" starttime="20170816 05:13:17.297"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status endtime="20170816 05:13:17.704" status="PASS" starttime="20170816 05:13:17.703"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:13:17.707" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:13:17.708" status="PASS" starttime="20170816 05:13:17.707"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:13:17.708" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:13:17.708" status="PASS" starttime="20170816 05:13:17.708"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:13:17.709" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:13:17.709" status="PASS" starttime="20170816 05:13:17.709"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:13:17.710" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:13:17.710" status="PASS" starttime="20170816 05:13:17.709"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:13:17.899" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:13:17.899" status="PASS" starttime="20170816 05:13:17.710"></status>
</kw>
<msg timestamp="20170816 05:13:17.900" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:13:17.900" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:13:17.900" status="PASS" starttime="20170816 05:13:17.710"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:13:17.900" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:13:17.900" status="PASS" starttime="20170816 05:13:17.900"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:13:17.901" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:13:17.901" status="PASS" starttime="20170816 05:13:17.901"></status>
</kw>
<status endtime="20170816 05:13:17.901" status="PASS" starttime="20170816 05:13:17.707"></status>
</kw>
<status endtime="20170816 05:13:17.901" status="PASS" starttime="20170816 05:13:17.706"></status>
</kw>
<status endtime="20170816 05:13:17.901" status="PASS" starttime="20170816 05:13:17.706"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:13:17.902" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170816 05:13:17.902" status="PASS" starttime="20170816 05:13:17.902"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:13:17.904" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170816 05:13:17.904" status="PASS" starttime="20170816 05:13:17.904"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:13:17.905" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170816 05:13:17.905" status="PASS" starttime="20170816 05:13:17.905"></status>
</kw>
<status endtime="20170816 05:13:17.905" status="PASS" starttime="20170816 05:13:17.904"></status>
</kw>
<status endtime="20170816 05:13:17.906" status="PASS" starttime="20170816 05:13:17.903"></status>
</kw>
<status endtime="20170816 05:13:17.906" status="PASS" starttime="20170816 05:13:17.902"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:13:17.995" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170816 05:13:17.995" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:13:17.995" status="PASS" starttime="20170816 05:13:17.906"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:13:17.997" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:13:17.997" status="PASS" starttime="20170816 05:13:17.996"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:13:17.998" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:13:17.998" status="PASS" starttime="20170816 05:13:17.997"></status>
</kw>
<status endtime="20170816 05:13:17.998" status="PASS" starttime="20170816 05:13:17.997"></status>
</kw>
<status endtime="20170816 05:13:17.998" status="PASS" starttime="20170816 05:13:17.996"></status>
</kw>
<status endtime="20170816 05:13:17.998" status="PASS" starttime="20170816 05:13:17.995"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:13:17.998" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:13:17.998" status="PASS" starttime="20170816 05:13:17.998"></status>
</kw>
<msg timestamp="20170816 05:13:17.999" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:13:17.999" status="PASS" starttime="20170816 05:13:17.705"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:13:17.999" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:13:17.999" status="PASS" starttime="20170816 05:13:17.999"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:13:18.000" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:13:18.000" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:13:18.000" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit'}</msg>
<status endtime="20170816 05:13:18.000" status="PASS" starttime="20170816 05:13:18.000"></status>
</kw>
<msg timestamp="20170816 05:13:18.000" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170816 05:13:18.001" status="PASS" starttime="20170816 05:13:17.704"></status>
</kw>
<msg timestamp="20170816 05:13:18.001" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170816 05:13:18.001" status="PASS" starttime="20170816 05:13:17.704"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170816 05:13:18.001" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170816 05:13:18.001" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170816 05:13:18.002" status="FAIL" starttime="20170816 05:13:18.001"></status>
</kw>
<status endtime="20170816 05:13:18.002" status="FAIL" starttime="20170816 05:13:17.296"></status>
</kw>
<status endtime="20170816 05:13:18.002" status="FAIL" starttime="20170816 05:13:15.844"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:13:28.010" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:13:28.011" status="PASS" starttime="20170816 05:13:28.010"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:13:28.011" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:13:28.012" status="PASS" starttime="20170816 05:13:28.011"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:13:28.012" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:13:28.012" status="PASS" starttime="20170816 05:13:28.012"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:13:28.013" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:13:28.013" status="PASS" starttime="20170816 05:13:28.012"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:13:28.323" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:13:28.323" status="PASS" starttime="20170816 05:13:28.014"></status>
</kw>
<msg timestamp="20170816 05:13:28.323" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:13:28.323" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:13:28.323" status="PASS" starttime="20170816 05:13:28.013"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:13:28.324" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:13:28.324" status="PASS" starttime="20170816 05:13:28.323"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:13:28.324" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:13:28.325" status="PASS" starttime="20170816 05:13:28.324"></status>
</kw>
<status endtime="20170816 05:13:28.325" status="PASS" starttime="20170816 05:13:28.009"></status>
</kw>
<status endtime="20170816 05:13:28.325" status="PASS" starttime="20170816 05:13:28.009"></status>
</kw>
<status endtime="20170816 05:13:28.325" status="PASS" starttime="20170816 05:13:28.008"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:13:28.325" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170816 05:13:28.325" status="PASS" starttime="20170816 05:13:28.325"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:13:28.328" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170816 05:13:28.328" status="PASS" starttime="20170816 05:13:28.327"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:13:28.328" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170816 05:13:28.329" status="PASS" starttime="20170816 05:13:28.328"></status>
</kw>
<status endtime="20170816 05:13:28.329" status="PASS" starttime="20170816 05:13:28.328"></status>
</kw>
<status endtime="20170816 05:13:28.329" status="PASS" starttime="20170816 05:13:28.326"></status>
</kw>
<status endtime="20170816 05:13:28.329" status="PASS" starttime="20170816 05:13:28.326"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:13:28.449" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 05:13:28.449" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:13:28.449" status="PASS" starttime="20170816 05:13:28.329"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:13:28.451" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:13:28.451" status="PASS" starttime="20170816 05:13:28.450"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:13:28.455" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:13:28.455" status="PASS" starttime="20170816 05:13:28.454"></status>
</kw>
<status endtime="20170816 05:13:28.455" status="PASS" starttime="20170816 05:13:28.451"></status>
</kw>
<status endtime="20170816 05:13:28.455" status="PASS" starttime="20170816 05:13:28.450"></status>
</kw>
<status endtime="20170816 05:13:28.455" status="PASS" starttime="20170816 05:13:28.449"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:13:28.456" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:13:28.456" status="PASS" starttime="20170816 05:13:28.455"></status>
</kw>
<msg timestamp="20170816 05:13:28.456" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:13:28.456" status="PASS" starttime="20170816 05:13:28.007"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:13:28.456" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:13:28.457" status="PASS" starttime="20170816 05:13:28.456"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:13:28.457" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:13:28.457" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:13:28.457" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170816 05:13:28.457" status="PASS" starttime="20170816 05:13:28.457"></status>
</kw>
<msg timestamp="20170816 05:13:28.458" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170816 05:13:28.458" status="PASS" starttime="20170816 05:13:28.006"></status>
</kw>
<msg timestamp="20170816 05:13:28.458" level="INFO">${power_state} = On</msg>
<status endtime="20170816 05:13:28.458" status="PASS" starttime="20170816 05:13:28.006"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170816 05:13:28.459" status="PASS" starttime="20170816 05:13:28.458"></status>
</kw>
<status endtime="20170816 05:13:28.459" status="PASS" starttime="20170816 05:13:28.006"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:13:28.463" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:13:28.463" status="PASS" starttime="20170816 05:13:28.462"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:13:28.464" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:13:28.464" status="PASS" starttime="20170816 05:13:28.463"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:13:28.465" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:13:28.465" status="PASS" starttime="20170816 05:13:28.464"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:13:28.465" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:13:28.465" status="PASS" starttime="20170816 05:13:28.465"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:13:28.654" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:13:28.654" status="PASS" starttime="20170816 05:13:28.466"></status>
</kw>
<msg timestamp="20170816 05:13:28.654" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:13:28.655" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:13:28.655" status="PASS" starttime="20170816 05:13:28.465"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:13:28.655" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:13:28.655" status="PASS" starttime="20170816 05:13:28.655"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:13:28.656" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:13:28.656" status="PASS" starttime="20170816 05:13:28.656"></status>
</kw>
<status endtime="20170816 05:13:28.656" status="PASS" starttime="20170816 05:13:28.462"></status>
</kw>
<status endtime="20170816 05:13:28.656" status="PASS" starttime="20170816 05:13:28.461"></status>
</kw>
<status endtime="20170816 05:13:28.656" status="PASS" starttime="20170816 05:13:28.461"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:13:28.657" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170816 05:13:28.657" status="PASS" starttime="20170816 05:13:28.657"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:13:28.659" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170816 05:13:28.660" status="PASS" starttime="20170816 05:13:28.658"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:13:28.660" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170816 05:13:28.661" status="PASS" starttime="20170816 05:13:28.660"></status>
</kw>
<status endtime="20170816 05:13:28.661" status="PASS" starttime="20170816 05:13:28.660"></status>
</kw>
<status endtime="20170816 05:13:28.661" status="PASS" starttime="20170816 05:13:28.658"></status>
</kw>
<status endtime="20170816 05:13:28.661" status="PASS" starttime="20170816 05:13:28.657"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:13:28.760" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 05:13:28.761" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:13:28.761" status="PASS" starttime="20170816 05:13:28.661"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:13:28.762" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:13:28.763" status="PASS" starttime="20170816 05:13:28.762"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:13:28.764" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:13:28.764" status="PASS" starttime="20170816 05:13:28.763"></status>
</kw>
<status endtime="20170816 05:13:28.764" status="PASS" starttime="20170816 05:13:28.763"></status>
</kw>
<status endtime="20170816 05:13:28.764" status="PASS" starttime="20170816 05:13:28.761"></status>
</kw>
<status endtime="20170816 05:13:28.764" status="PASS" starttime="20170816 05:13:28.761"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:13:28.764" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:13:28.764" status="PASS" starttime="20170816 05:13:28.764"></status>
</kw>
<msg timestamp="20170816 05:13:28.765" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:13:28.765" status="PASS" starttime="20170816 05:13:28.460"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:13:28.765" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:13:28.765" status="PASS" starttime="20170816 05:13:28.765"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:13:28.766" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:13:28.766" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:13:28.766" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170816 05:13:28.766" status="PASS" starttime="20170816 05:13:28.766"></status>
</kw>
<msg timestamp="20170816 05:13:28.766" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170816 05:13:28.766" status="PASS" starttime="20170816 05:13:28.459"></status>
</kw>
<msg timestamp="20170816 05:13:28.767" level="INFO">${host_state} = Running</msg>
<status endtime="20170816 05:13:28.767" status="PASS" starttime="20170816 05:13:28.459"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170816 05:13:28.767" status="PASS" starttime="20170816 05:13:28.767"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:13:28.772" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:13:28.773" status="PASS" starttime="20170816 05:13:28.772"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:13:28.773" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:13:28.773" status="PASS" starttime="20170816 05:13:28.773"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:13:28.774" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:13:28.774" status="PASS" starttime="20170816 05:13:28.774"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:13:28.775" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:13:28.775" status="PASS" starttime="20170816 05:13:28.774"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:13:28.965" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:13:28.965" status="PASS" starttime="20170816 05:13:28.775"></status>
</kw>
<msg timestamp="20170816 05:13:28.965" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:13:28.965" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:13:28.965" status="PASS" starttime="20170816 05:13:28.775"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:13:28.966" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:13:28.966" status="PASS" starttime="20170816 05:13:28.965"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:13:28.966" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:13:28.967" status="PASS" starttime="20170816 05:13:28.966"></status>
</kw>
<status endtime="20170816 05:13:28.967" status="PASS" starttime="20170816 05:13:28.771"></status>
</kw>
<status endtime="20170816 05:13:28.967" status="PASS" starttime="20170816 05:13:28.771"></status>
</kw>
<status endtime="20170816 05:13:28.967" status="PASS" starttime="20170816 05:13:28.770"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:13:28.967" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170816 05:13:28.967" status="PASS" starttime="20170816 05:13:28.967"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:13:28.970" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170816 05:13:28.970" status="PASS" starttime="20170816 05:13:28.969"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:13:28.970" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170816 05:13:28.971" status="PASS" starttime="20170816 05:13:28.970"></status>
</kw>
<status endtime="20170816 05:13:28.971" status="PASS" starttime="20170816 05:13:28.970"></status>
</kw>
<status endtime="20170816 05:13:28.971" status="PASS" starttime="20170816 05:13:28.968"></status>
</kw>
<status endtime="20170816 05:13:28.971" status="PASS" starttime="20170816 05:13:28.968"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:13:29.051" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170816 05:13:29.051" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:13:29.051" status="PASS" starttime="20170816 05:13:28.971"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:13:29.053" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:13:29.053" status="PASS" starttime="20170816 05:13:29.053"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:13:29.054" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:13:29.054" status="PASS" starttime="20170816 05:13:29.054"></status>
</kw>
<status endtime="20170816 05:13:29.054" status="PASS" starttime="20170816 05:13:29.053"></status>
</kw>
<status endtime="20170816 05:13:29.054" status="PASS" starttime="20170816 05:13:29.052"></status>
</kw>
<status endtime="20170816 05:13:29.055" status="PASS" starttime="20170816 05:13:29.052"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:13:29.055" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:13:29.055" status="PASS" starttime="20170816 05:13:29.055"></status>
</kw>
<msg timestamp="20170816 05:13:29.055" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:13:29.055" status="PASS" starttime="20170816 05:13:28.769"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:13:29.056" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:13:29.056" status="PASS" starttime="20170816 05:13:29.055"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:13:29.056" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:13:29.056" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:13:29.057" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170816 05:13:29.057" status="PASS" starttime="20170816 05:13:29.056"></status>
</kw>
<msg timestamp="20170816 05:13:29.057" level="INFO">${state} = Off</msg>
<status endtime="20170816 05:13:29.057" status="PASS" starttime="20170816 05:13:28.769"></status>
</kw>
<msg timestamp="20170816 05:13:29.057" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170816 05:13:29.057" status="PASS" starttime="20170816 05:13:28.768"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170816 05:13:29.058" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170816 05:13:29.058" status="FAIL" starttime="20170816 05:13:29.057"></status>
</kw>
<status endtime="20170816 05:13:29.058" status="FAIL" starttime="20170816 05:13:28.768"></status>
</kw>
<msg timestamp="20170816 05:13:29.058" level="INFO">${status} = False</msg>
<status endtime="20170816 05:13:29.058" status="PASS" starttime="20170816 05:13:28.768"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status endtime="20170816 05:13:29.059" status="PASS" starttime="20170816 05:13:29.058"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:13:29.063" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:13:29.063" status="PASS" starttime="20170816 05:13:29.062"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:13:29.064" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:13:29.064" status="PASS" starttime="20170816 05:13:29.063"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:13:29.064" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:13:29.064" status="PASS" starttime="20170816 05:13:29.064"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:13:29.065" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:13:29.065" status="PASS" starttime="20170816 05:13:29.065"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:13:29.261" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:13:29.261" status="PASS" starttime="20170816 05:13:29.066"></status>
</kw>
<msg timestamp="20170816 05:13:29.262" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:13:29.262" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:13:29.262" status="PASS" starttime="20170816 05:13:29.065"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:13:29.262" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:13:29.262" status="PASS" starttime="20170816 05:13:29.262"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:13:29.263" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:13:29.263" status="PASS" starttime="20170816 05:13:29.263"></status>
</kw>
<status endtime="20170816 05:13:29.263" status="PASS" starttime="20170816 05:13:29.062"></status>
</kw>
<status endtime="20170816 05:13:29.263" status="PASS" starttime="20170816 05:13:29.061"></status>
</kw>
<status endtime="20170816 05:13:29.264" status="PASS" starttime="20170816 05:13:29.060"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:13:29.264" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170816 05:13:29.264" status="PASS" starttime="20170816 05:13:29.264"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:13:29.266" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170816 05:13:29.266" status="PASS" starttime="20170816 05:13:29.266"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:13:29.267" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170816 05:13:29.267" status="PASS" starttime="20170816 05:13:29.267"></status>
</kw>
<status endtime="20170816 05:13:29.267" status="PASS" starttime="20170816 05:13:29.266"></status>
</kw>
<status endtime="20170816 05:13:29.268" status="PASS" starttime="20170816 05:13:29.265"></status>
</kw>
<status endtime="20170816 05:13:29.268" status="PASS" starttime="20170816 05:13:29.264"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:13:29.368" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170816 05:13:29.368" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:13:29.368" status="PASS" starttime="20170816 05:13:29.268"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:13:29.370" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:13:29.370" status="PASS" starttime="20170816 05:13:29.369"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:13:29.371" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:13:29.371" status="PASS" starttime="20170816 05:13:29.371"></status>
</kw>
<status endtime="20170816 05:13:29.371" status="PASS" starttime="20170816 05:13:29.370"></status>
</kw>
<status endtime="20170816 05:13:29.371" status="PASS" starttime="20170816 05:13:29.369"></status>
</kw>
<status endtime="20170816 05:13:29.371" status="PASS" starttime="20170816 05:13:29.368"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:13:29.372" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:13:29.372" status="PASS" starttime="20170816 05:13:29.372"></status>
</kw>
<msg timestamp="20170816 05:13:29.372" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:13:29.372" status="PASS" starttime="20170816 05:13:29.060"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:13:29.373" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:13:29.373" status="PASS" starttime="20170816 05:13:29.372"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:13:29.373" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:13:29.373" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:13:29.374" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit'}</msg>
<status endtime="20170816 05:13:29.374" status="PASS" starttime="20170816 05:13:29.373"></status>
</kw>
<msg timestamp="20170816 05:13:29.374" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170816 05:13:29.374" status="PASS" starttime="20170816 05:13:29.059"></status>
</kw>
<msg timestamp="20170816 05:13:29.374" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170816 05:13:29.374" status="PASS" starttime="20170816 05:13:29.059"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170816 05:13:29.375" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170816 05:13:29.375" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170816 05:13:29.375" status="FAIL" starttime="20170816 05:13:29.374"></status>
</kw>
<status endtime="20170816 05:13:29.375" status="FAIL" starttime="20170816 05:13:28.767"></status>
</kw>
<status endtime="20170816 05:13:29.375" status="FAIL" starttime="20170816 05:13:28.005"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:13:39.381" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:13:39.382" status="PASS" starttime="20170816 05:13:39.381"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:13:39.382" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:13:39.382" status="PASS" starttime="20170816 05:13:39.382"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:13:39.383" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:13:39.383" status="PASS" starttime="20170816 05:13:39.382"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:13:39.383" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:13:39.383" status="PASS" starttime="20170816 05:13:39.383"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:13:39.877" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:13:39.877" status="PASS" starttime="20170816 05:13:39.384"></status>
</kw>
<msg timestamp="20170816 05:13:39.877" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:13:39.877" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:13:39.878" status="PASS" starttime="20170816 05:13:39.384"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:13:39.878" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:13:39.878" status="PASS" starttime="20170816 05:13:39.878"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:13:39.879" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:13:39.879" status="PASS" starttime="20170816 05:13:39.879"></status>
</kw>
<status endtime="20170816 05:13:39.879" status="PASS" starttime="20170816 05:13:39.380"></status>
</kw>
<status endtime="20170816 05:13:39.879" status="PASS" starttime="20170816 05:13:39.380"></status>
</kw>
<status endtime="20170816 05:13:39.879" status="PASS" starttime="20170816 05:13:39.379"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:13:39.880" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170816 05:13:39.880" status="PASS" starttime="20170816 05:13:39.880"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:13:39.882" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170816 05:13:39.882" status="PASS" starttime="20170816 05:13:39.881"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:13:39.883" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170816 05:13:39.883" status="PASS" starttime="20170816 05:13:39.883"></status>
</kw>
<status endtime="20170816 05:13:39.883" status="PASS" starttime="20170816 05:13:39.882"></status>
</kw>
<status endtime="20170816 05:13:39.883" status="PASS" starttime="20170816 05:13:39.881"></status>
</kw>
<status endtime="20170816 05:13:39.884" status="PASS" starttime="20170816 05:13:39.880"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:13:40.498" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 05:13:40.499" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:13:40.499" status="PASS" starttime="20170816 05:13:39.884"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:13:40.501" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:13:40.501" status="PASS" starttime="20170816 05:13:40.500"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:13:40.502" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:13:40.502" status="PASS" starttime="20170816 05:13:40.501"></status>
</kw>
<status endtime="20170816 05:13:40.502" status="PASS" starttime="20170816 05:13:40.501"></status>
</kw>
<status endtime="20170816 05:13:40.502" status="PASS" starttime="20170816 05:13:40.500"></status>
</kw>
<status endtime="20170816 05:13:40.502" status="PASS" starttime="20170816 05:13:40.499"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:13:40.503" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:13:40.503" status="PASS" starttime="20170816 05:13:40.503"></status>
</kw>
<msg timestamp="20170816 05:13:40.503" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:13:40.503" status="PASS" starttime="20170816 05:13:39.378"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:13:40.504" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:13:40.504" status="PASS" starttime="20170816 05:13:40.504"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:13:40.505" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:13:40.505" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:13:40.505" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170816 05:13:40.505" status="PASS" starttime="20170816 05:13:40.505"></status>
</kw>
<msg timestamp="20170816 05:13:40.506" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170816 05:13:40.506" status="PASS" starttime="20170816 05:13:39.378"></status>
</kw>
<msg timestamp="20170816 05:13:40.506" level="INFO">${power_state} = On</msg>
<status endtime="20170816 05:13:40.506" status="PASS" starttime="20170816 05:13:39.377"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170816 05:13:40.507" status="PASS" starttime="20170816 05:13:40.507"></status>
</kw>
<status endtime="20170816 05:13:40.507" status="PASS" starttime="20170816 05:13:39.377"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:13:40.512" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:13:40.513" status="PASS" starttime="20170816 05:13:40.512"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:13:40.514" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:13:40.514" status="PASS" starttime="20170816 05:13:40.513"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:13:40.514" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:13:40.514" status="PASS" starttime="20170816 05:13:40.514"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:13:40.515" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:13:40.515" status="PASS" starttime="20170816 05:13:40.515"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:13:41.221" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:13:41.222" status="PASS" starttime="20170816 05:13:40.516"></status>
</kw>
<msg timestamp="20170816 05:13:41.222" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:13:41.222" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:13:41.222" status="PASS" starttime="20170816 05:13:40.515"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:13:41.223" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:13:41.223" status="PASS" starttime="20170816 05:13:41.222"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:13:41.223" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:13:41.223" status="PASS" starttime="20170816 05:13:41.223"></status>
</kw>
<status endtime="20170816 05:13:41.224" status="PASS" starttime="20170816 05:13:40.511"></status>
</kw>
<status endtime="20170816 05:13:41.224" status="PASS" starttime="20170816 05:13:40.511"></status>
</kw>
<status endtime="20170816 05:13:41.224" status="PASS" starttime="20170816 05:13:40.510"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:13:41.224" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170816 05:13:41.224" status="PASS" starttime="20170816 05:13:41.224"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:13:41.226" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170816 05:13:41.227" status="PASS" starttime="20170816 05:13:41.226"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:13:41.227" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170816 05:13:41.228" status="PASS" starttime="20170816 05:13:41.227"></status>
</kw>
<status endtime="20170816 05:13:41.228" status="PASS" starttime="20170816 05:13:41.227"></status>
</kw>
<status endtime="20170816 05:13:41.228" status="PASS" starttime="20170816 05:13:41.225"></status>
</kw>
<status endtime="20170816 05:13:41.228" status="PASS" starttime="20170816 05:13:41.225"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:13:41.559" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 05:13:41.559" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:13:41.559" status="PASS" starttime="20170816 05:13:41.228"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:13:41.561" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:13:41.561" status="PASS" starttime="20170816 05:13:41.561"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:13:41.562" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:13:41.562" status="PASS" starttime="20170816 05:13:41.562"></status>
</kw>
<status endtime="20170816 05:13:41.562" status="PASS" starttime="20170816 05:13:41.561"></status>
</kw>
<status endtime="20170816 05:13:41.563" status="PASS" starttime="20170816 05:13:41.560"></status>
</kw>
<status endtime="20170816 05:13:41.563" status="PASS" starttime="20170816 05:13:41.560"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:13:41.563" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:13:41.563" status="PASS" starttime="20170816 05:13:41.563"></status>
</kw>
<msg timestamp="20170816 05:13:41.563" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:13:41.563" status="PASS" starttime="20170816 05:13:40.509"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:13:41.564" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:13:41.564" status="PASS" starttime="20170816 05:13:41.564"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:13:41.564" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:13:41.565" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:13:41.565" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170816 05:13:41.565" status="PASS" starttime="20170816 05:13:41.564"></status>
</kw>
<msg timestamp="20170816 05:13:41.565" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170816 05:13:41.565" status="PASS" starttime="20170816 05:13:40.508"></status>
</kw>
<msg timestamp="20170816 05:13:41.565" level="INFO">${host_state} = Running</msg>
<status endtime="20170816 05:13:41.565" status="PASS" starttime="20170816 05:13:40.508"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170816 05:13:41.566" status="PASS" starttime="20170816 05:13:41.566"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:13:41.571" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:13:41.571" status="PASS" starttime="20170816 05:13:41.570"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:13:41.572" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:13:41.572" status="PASS" starttime="20170816 05:13:41.571"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:13:41.572" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:13:41.572" status="PASS" starttime="20170816 05:13:41.572"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:13:41.573" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:13:41.573" status="PASS" starttime="20170816 05:13:41.573"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:13:41.754" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:13:41.754" status="PASS" starttime="20170816 05:13:41.574"></status>
</kw>
<msg timestamp="20170816 05:13:41.754" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:13:41.754" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:13:41.754" status="PASS" starttime="20170816 05:13:41.573"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:13:41.755" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:13:41.755" status="PASS" starttime="20170816 05:13:41.754"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:13:41.755" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:13:41.756" status="PASS" starttime="20170816 05:13:41.755"></status>
</kw>
<status endtime="20170816 05:13:41.756" status="PASS" starttime="20170816 05:13:41.570"></status>
</kw>
<status endtime="20170816 05:13:41.756" status="PASS" starttime="20170816 05:13:41.570"></status>
</kw>
<status endtime="20170816 05:13:41.756" status="PASS" starttime="20170816 05:13:41.569"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:13:41.757" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170816 05:13:41.757" status="PASS" starttime="20170816 05:13:41.756"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:13:41.759" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170816 05:13:41.759" status="PASS" starttime="20170816 05:13:41.758"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:13:41.760" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170816 05:13:41.760" status="PASS" starttime="20170816 05:13:41.760"></status>
</kw>
<status endtime="20170816 05:13:41.760" status="PASS" starttime="20170816 05:13:41.759"></status>
</kw>
<status endtime="20170816 05:13:41.760" status="PASS" starttime="20170816 05:13:41.757"></status>
</kw>
<status endtime="20170816 05:13:41.760" status="PASS" starttime="20170816 05:13:41.757"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:13:42.549" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170816 05:13:42.549" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:13:42.549" status="PASS" starttime="20170816 05:13:41.761"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:13:42.551" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:13:42.551" status="PASS" starttime="20170816 05:13:42.550"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:13:42.552" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:13:42.552" status="PASS" starttime="20170816 05:13:42.551"></status>
</kw>
<status endtime="20170816 05:13:42.552" status="PASS" starttime="20170816 05:13:42.551"></status>
</kw>
<status endtime="20170816 05:13:42.552" status="PASS" starttime="20170816 05:13:42.550"></status>
</kw>
<status endtime="20170816 05:13:42.552" status="PASS" starttime="20170816 05:13:42.549"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:13:42.553" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:13:42.553" status="PASS" starttime="20170816 05:13:42.552"></status>
</kw>
<msg timestamp="20170816 05:13:42.553" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:13:42.553" status="PASS" starttime="20170816 05:13:41.568"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:13:42.553" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:13:42.554" status="PASS" starttime="20170816 05:13:42.553"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:13:42.554" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:13:42.554" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:13:42.554" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170816 05:13:42.554" status="PASS" starttime="20170816 05:13:42.554"></status>
</kw>
<msg timestamp="20170816 05:13:42.555" level="INFO">${state} = Off</msg>
<status endtime="20170816 05:13:42.555" status="PASS" starttime="20170816 05:13:41.568"></status>
</kw>
<msg timestamp="20170816 05:13:42.555" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170816 05:13:42.555" status="PASS" starttime="20170816 05:13:41.567"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170816 05:13:42.555" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170816 05:13:42.556" status="FAIL" starttime="20170816 05:13:42.555"></status>
</kw>
<status endtime="20170816 05:13:42.556" status="FAIL" starttime="20170816 05:13:41.567"></status>
</kw>
<msg timestamp="20170816 05:13:42.556" level="INFO">${status} = False</msg>
<status endtime="20170816 05:13:42.556" status="PASS" starttime="20170816 05:13:41.566"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status endtime="20170816 05:13:42.556" status="PASS" starttime="20170816 05:13:42.556"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:13:42.560" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:13:42.560" status="PASS" starttime="20170816 05:13:42.560"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:13:42.561" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:13:42.561" status="PASS" starttime="20170816 05:13:42.561"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:13:42.561" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:13:42.562" status="PASS" starttime="20170816 05:13:42.561"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:13:42.562" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:13:42.562" status="PASS" starttime="20170816 05:13:42.562"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:13:42.964" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:13:42.964" status="PASS" starttime="20170816 05:13:42.563"></status>
</kw>
<msg timestamp="20170816 05:13:42.965" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:13:42.965" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:13:42.965" status="PASS" starttime="20170816 05:13:42.563"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:13:42.965" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:13:42.965" status="PASS" starttime="20170816 05:13:42.965"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:13:42.966" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:13:42.966" status="PASS" starttime="20170816 05:13:42.966"></status>
</kw>
<status endtime="20170816 05:13:42.966" status="PASS" starttime="20170816 05:13:42.559"></status>
</kw>
<status endtime="20170816 05:13:42.966" status="PASS" starttime="20170816 05:13:42.559"></status>
</kw>
<status endtime="20170816 05:13:42.966" status="PASS" starttime="20170816 05:13:42.558"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:13:42.967" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170816 05:13:42.967" status="PASS" starttime="20170816 05:13:42.967"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:13:42.969" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170816 05:13:42.969" status="PASS" starttime="20170816 05:13:42.968"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:13:42.970" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170816 05:13:42.970" status="PASS" starttime="20170816 05:13:42.970"></status>
</kw>
<status endtime="20170816 05:13:42.970" status="PASS" starttime="20170816 05:13:42.969"></status>
</kw>
<status endtime="20170816 05:13:42.970" status="PASS" starttime="20170816 05:13:42.968"></status>
</kw>
<status endtime="20170816 05:13:42.970" status="PASS" starttime="20170816 05:13:42.967"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:13:43.882" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170816 05:13:43.882" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:13:43.882" status="PASS" starttime="20170816 05:13:42.971"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:13:43.884" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:13:43.884" status="PASS" starttime="20170816 05:13:43.884"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:13:43.885" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:13:43.885" status="PASS" starttime="20170816 05:13:43.885"></status>
</kw>
<status endtime="20170816 05:13:43.885" status="PASS" starttime="20170816 05:13:43.884"></status>
</kw>
<status endtime="20170816 05:13:43.885" status="PASS" starttime="20170816 05:13:43.883"></status>
</kw>
<status endtime="20170816 05:13:43.885" status="PASS" starttime="20170816 05:13:43.883"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:13:43.886" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:13:43.886" status="PASS" starttime="20170816 05:13:43.886"></status>
</kw>
<msg timestamp="20170816 05:13:43.886" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:13:43.886" status="PASS" starttime="20170816 05:13:42.557"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:13:43.887" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:13:43.887" status="PASS" starttime="20170816 05:13:43.886"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:13:43.887" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:13:43.887" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:13:43.888" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit'}</msg>
<status endtime="20170816 05:13:43.888" status="PASS" starttime="20170816 05:13:43.887"></status>
</kw>
<msg timestamp="20170816 05:13:43.888" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170816 05:13:43.888" status="PASS" starttime="20170816 05:13:42.557"></status>
</kw>
<msg timestamp="20170816 05:13:43.888" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170816 05:13:43.888" status="PASS" starttime="20170816 05:13:42.557"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170816 05:13:43.889" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170816 05:13:43.889" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170816 05:13:43.889" status="FAIL" starttime="20170816 05:13:43.888"></status>
</kw>
<status endtime="20170816 05:13:43.889" status="FAIL" starttime="20170816 05:13:41.566"></status>
</kw>
<status endtime="20170816 05:13:43.889" status="FAIL" starttime="20170816 05:13:39.376"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:13:53.895" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:13:53.896" status="PASS" starttime="20170816 05:13:53.895"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:13:53.896" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:13:53.896" status="PASS" starttime="20170816 05:13:53.896"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:13:53.897" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:13:53.897" status="PASS" starttime="20170816 05:13:53.896"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:13:53.897" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:13:53.897" status="PASS" starttime="20170816 05:13:53.897"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:13:54.207" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:13:54.207" status="PASS" starttime="20170816 05:13:53.898"></status>
</kw>
<msg timestamp="20170816 05:13:54.207" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:13:54.207" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:13:54.207" status="PASS" starttime="20170816 05:13:53.898"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:13:54.208" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:13:54.208" status="PASS" starttime="20170816 05:13:54.208"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:13:54.209" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:13:54.209" status="PASS" starttime="20170816 05:13:54.208"></status>
</kw>
<status endtime="20170816 05:13:54.209" status="PASS" starttime="20170816 05:13:53.894"></status>
</kw>
<status endtime="20170816 05:13:54.209" status="PASS" starttime="20170816 05:13:53.893"></status>
</kw>
<status endtime="20170816 05:13:54.209" status="PASS" starttime="20170816 05:13:53.893"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:13:54.210" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170816 05:13:54.210" status="PASS" starttime="20170816 05:13:54.210"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:13:54.212" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170816 05:13:54.212" status="PASS" starttime="20170816 05:13:54.211"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:13:54.213" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170816 05:13:54.213" status="PASS" starttime="20170816 05:13:54.213"></status>
</kw>
<status endtime="20170816 05:13:54.213" status="PASS" starttime="20170816 05:13:54.212"></status>
</kw>
<status endtime="20170816 05:13:54.213" status="PASS" starttime="20170816 05:13:54.211"></status>
</kw>
<status endtime="20170816 05:13:54.213" status="PASS" starttime="20170816 05:13:54.210"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:13:54.619" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 05:13:54.619" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:13:54.619" status="PASS" starttime="20170816 05:13:54.214"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:13:54.621" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:13:54.621" status="PASS" starttime="20170816 05:13:54.620"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:13:54.623" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:13:54.623" status="PASS" starttime="20170816 05:13:54.622"></status>
</kw>
<status endtime="20170816 05:13:54.623" status="PASS" starttime="20170816 05:13:54.621"></status>
</kw>
<status endtime="20170816 05:13:54.623" status="PASS" starttime="20170816 05:13:54.620"></status>
</kw>
<status endtime="20170816 05:13:54.623" status="PASS" starttime="20170816 05:13:54.619"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:13:54.624" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:13:54.624" status="PASS" starttime="20170816 05:13:54.624"></status>
</kw>
<msg timestamp="20170816 05:13:54.624" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:13:54.624" status="PASS" starttime="20170816 05:13:53.892"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:13:54.625" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:13:54.625" status="PASS" starttime="20170816 05:13:54.624"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:13:54.625" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:13:54.625" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:13:54.625" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170816 05:13:54.626" status="PASS" starttime="20170816 05:13:54.625"></status>
</kw>
<msg timestamp="20170816 05:13:54.626" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170816 05:13:54.626" status="PASS" starttime="20170816 05:13:53.891"></status>
</kw>
<msg timestamp="20170816 05:13:54.626" level="INFO">${power_state} = On</msg>
<status endtime="20170816 05:13:54.626" status="PASS" starttime="20170816 05:13:53.891"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170816 05:13:54.627" status="PASS" starttime="20170816 05:13:54.626"></status>
</kw>
<status endtime="20170816 05:13:54.627" status="PASS" starttime="20170816 05:13:53.890"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:13:54.630" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:13:54.631" status="PASS" starttime="20170816 05:13:54.630"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:13:54.632" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:13:54.632" status="PASS" starttime="20170816 05:13:54.631"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:13:54.633" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:13:54.633" status="PASS" starttime="20170816 05:13:54.632"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:13:54.634" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:13:54.634" status="PASS" starttime="20170816 05:13:54.633"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:13:54.988" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:13:54.988" status="PASS" starttime="20170816 05:13:54.635"></status>
</kw>
<msg timestamp="20170816 05:13:54.989" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:13:54.989" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:13:54.989" status="PASS" starttime="20170816 05:13:54.634"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:13:54.989" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:13:54.989" status="PASS" starttime="20170816 05:13:54.989"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:13:54.990" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:13:54.990" status="PASS" starttime="20170816 05:13:54.990"></status>
</kw>
<status endtime="20170816 05:13:54.990" status="PASS" starttime="20170816 05:13:54.630"></status>
</kw>
<status endtime="20170816 05:13:54.990" status="PASS" starttime="20170816 05:13:54.629"></status>
</kw>
<status endtime="20170816 05:13:54.991" status="PASS" starttime="20170816 05:13:54.628"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:13:54.991" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170816 05:13:54.991" status="PASS" starttime="20170816 05:13:54.991"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:13:54.996" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170816 05:13:54.997" status="PASS" starttime="20170816 05:13:54.993"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:13:54.997" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170816 05:13:54.998" status="PASS" starttime="20170816 05:13:54.997"></status>
</kw>
<status endtime="20170816 05:13:54.998" status="PASS" starttime="20170816 05:13:54.997"></status>
</kw>
<status endtime="20170816 05:13:54.998" status="PASS" starttime="20170816 05:13:54.992"></status>
</kw>
<status endtime="20170816 05:13:54.998" status="PASS" starttime="20170816 05:13:54.991"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:13:55.822" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 05:13:55.823" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:13:55.823" status="PASS" starttime="20170816 05:13:54.998"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:13:55.825" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:13:55.825" status="PASS" starttime="20170816 05:13:55.824"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:13:55.826" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:13:55.826" status="PASS" starttime="20170816 05:13:55.826"></status>
</kw>
<status endtime="20170816 05:13:55.826" status="PASS" starttime="20170816 05:13:55.825"></status>
</kw>
<status endtime="20170816 05:13:55.826" status="PASS" starttime="20170816 05:13:55.824"></status>
</kw>
<status endtime="20170816 05:13:55.826" status="PASS" starttime="20170816 05:13:55.823"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:13:55.827" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:13:55.827" status="PASS" starttime="20170816 05:13:55.826"></status>
</kw>
<msg timestamp="20170816 05:13:55.827" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:13:55.827" status="PASS" starttime="20170816 05:13:54.628"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:13:55.828" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:13:55.828" status="PASS" starttime="20170816 05:13:55.827"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:13:55.828" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:13:55.828" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:13:55.828" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170816 05:13:55.828" status="PASS" starttime="20170816 05:13:55.828"></status>
</kw>
<msg timestamp="20170816 05:13:55.829" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170816 05:13:55.829" status="PASS" starttime="20170816 05:13:54.627"></status>
</kw>
<msg timestamp="20170816 05:13:55.829" level="INFO">${host_state} = Running</msg>
<status endtime="20170816 05:13:55.829" status="PASS" starttime="20170816 05:13:54.627"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170816 05:13:55.830" status="PASS" starttime="20170816 05:13:55.829"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:13:55.834" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:13:55.835" status="PASS" starttime="20170816 05:13:55.834"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:13:55.835" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:13:55.835" status="PASS" starttime="20170816 05:13:55.835"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:13:55.836" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:13:55.836" status="PASS" starttime="20170816 05:13:55.836"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:13:55.837" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:13:55.837" status="PASS" starttime="20170816 05:13:55.836"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:13:56.262" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:13:56.263" status="PASS" starttime="20170816 05:13:55.838"></status>
</kw>
<msg timestamp="20170816 05:13:56.263" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:13:56.263" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:13:56.263" status="PASS" starttime="20170816 05:13:55.837"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:13:56.263" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:13:56.263" status="PASS" starttime="20170816 05:13:56.263"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:13:56.264" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:13:56.264" status="PASS" starttime="20170816 05:13:56.264"></status>
</kw>
<status endtime="20170816 05:13:56.264" status="PASS" starttime="20170816 05:13:55.833"></status>
</kw>
<status endtime="20170816 05:13:56.264" status="PASS" starttime="20170816 05:13:55.833"></status>
</kw>
<status endtime="20170816 05:13:56.265" status="PASS" starttime="20170816 05:13:55.832"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:13:56.265" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170816 05:13:56.265" status="PASS" starttime="20170816 05:13:56.265"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:13:56.267" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170816 05:13:56.267" status="PASS" starttime="20170816 05:13:56.267"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:13:56.268" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170816 05:13:56.268" status="PASS" starttime="20170816 05:13:56.268"></status>
</kw>
<status endtime="20170816 05:13:56.268" status="PASS" starttime="20170816 05:13:56.267"></status>
</kw>
<status endtime="20170816 05:13:56.269" status="PASS" starttime="20170816 05:13:56.266"></status>
</kw>
<status endtime="20170816 05:13:56.269" status="PASS" starttime="20170816 05:13:56.265"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:13:56.892" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170816 05:13:56.892" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:13:56.893" status="PASS" starttime="20170816 05:13:56.269"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:13:56.894" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:13:56.894" status="PASS" starttime="20170816 05:13:56.894"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:13:56.895" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:13:56.895" status="PASS" starttime="20170816 05:13:56.895"></status>
</kw>
<status endtime="20170816 05:13:56.896" status="PASS" starttime="20170816 05:13:56.895"></status>
</kw>
<status endtime="20170816 05:13:56.896" status="PASS" starttime="20170816 05:13:56.893"></status>
</kw>
<status endtime="20170816 05:13:56.896" status="PASS" starttime="20170816 05:13:56.893"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:13:56.896" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:13:56.896" status="PASS" starttime="20170816 05:13:56.896"></status>
</kw>
<msg timestamp="20170816 05:13:56.896" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:13:56.896" status="PASS" starttime="20170816 05:13:55.832"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:13:56.897" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:13:56.897" status="PASS" starttime="20170816 05:13:56.897"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:13:56.898" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:13:56.898" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:13:56.898" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170816 05:13:56.898" status="PASS" starttime="20170816 05:13:56.897"></status>
</kw>
<msg timestamp="20170816 05:13:56.898" level="INFO">${state} = Off</msg>
<status endtime="20170816 05:13:56.898" status="PASS" starttime="20170816 05:13:55.831"></status>
</kw>
<msg timestamp="20170816 05:13:56.898" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170816 05:13:56.898" status="PASS" starttime="20170816 05:13:55.831"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170816 05:13:56.899" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170816 05:13:56.899" status="FAIL" starttime="20170816 05:13:56.899"></status>
</kw>
<status endtime="20170816 05:13:56.899" status="FAIL" starttime="20170816 05:13:55.830"></status>
</kw>
<msg timestamp="20170816 05:13:56.899" level="INFO">${status} = False</msg>
<status endtime="20170816 05:13:56.899" status="PASS" starttime="20170816 05:13:55.830"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status endtime="20170816 05:13:56.900" status="PASS" starttime="20170816 05:13:56.900"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:13:56.904" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:13:56.904" status="PASS" starttime="20170816 05:13:56.904"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:13:56.905" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:13:56.905" status="PASS" starttime="20170816 05:13:56.905"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:13:56.906" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:13:56.906" status="PASS" starttime="20170816 05:13:56.905"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:13:56.906" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:13:56.906" status="PASS" starttime="20170816 05:13:56.906"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:13:57.236" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:13:57.236" status="PASS" starttime="20170816 05:13:56.907"></status>
</kw>
<msg timestamp="20170816 05:13:57.237" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:13:57.237" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:13:57.237" status="PASS" starttime="20170816 05:13:56.907"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:13:57.237" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:13:57.237" status="PASS" starttime="20170816 05:13:57.237"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:13:57.238" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:13:57.238" status="PASS" starttime="20170816 05:13:57.238"></status>
</kw>
<status endtime="20170816 05:13:57.238" status="PASS" starttime="20170816 05:13:56.903"></status>
</kw>
<status endtime="20170816 05:13:57.238" status="PASS" starttime="20170816 05:13:56.903"></status>
</kw>
<status endtime="20170816 05:13:57.238" status="PASS" starttime="20170816 05:13:56.902"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:13:57.239" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170816 05:13:57.239" status="PASS" starttime="20170816 05:13:57.239"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:13:57.241" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170816 05:13:57.242" status="PASS" starttime="20170816 05:13:57.240"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:13:57.243" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170816 05:13:57.243" status="PASS" starttime="20170816 05:13:57.243"></status>
</kw>
<status endtime="20170816 05:13:57.243" status="PASS" starttime="20170816 05:13:57.242"></status>
</kw>
<status endtime="20170816 05:13:57.243" status="PASS" starttime="20170816 05:13:57.240"></status>
</kw>
<status endtime="20170816 05:13:57.243" status="PASS" starttime="20170816 05:13:57.239"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:13:57.736" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170816 05:13:57.736" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:13:57.736" status="PASS" starttime="20170816 05:13:57.244"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:13:57.738" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:13:57.738" status="PASS" starttime="20170816 05:13:57.738"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:13:57.739" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:13:57.739" status="PASS" starttime="20170816 05:13:57.739"></status>
</kw>
<status endtime="20170816 05:13:57.740" status="PASS" starttime="20170816 05:13:57.739"></status>
</kw>
<status endtime="20170816 05:13:57.740" status="PASS" starttime="20170816 05:13:57.737"></status>
</kw>
<status endtime="20170816 05:13:57.740" status="PASS" starttime="20170816 05:13:57.736"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:13:57.740" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:13:57.740" status="PASS" starttime="20170816 05:13:57.740"></status>
</kw>
<msg timestamp="20170816 05:13:57.740" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:13:57.740" status="PASS" starttime="20170816 05:13:56.901"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:13:57.741" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:13:57.741" status="PASS" starttime="20170816 05:13:57.741"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:13:57.742" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:13:57.742" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:13:57.742" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit'}</msg>
<status endtime="20170816 05:13:57.742" status="PASS" starttime="20170816 05:13:57.741"></status>
</kw>
<msg timestamp="20170816 05:13:57.742" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170816 05:13:57.742" status="PASS" starttime="20170816 05:13:56.901"></status>
</kw>
<msg timestamp="20170816 05:13:57.742" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170816 05:13:57.742" status="PASS" starttime="20170816 05:13:56.900"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170816 05:13:57.743" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170816 05:13:57.743" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170816 05:13:57.743" status="FAIL" starttime="20170816 05:13:57.743"></status>
</kw>
<status endtime="20170816 05:13:57.743" status="FAIL" starttime="20170816 05:13:55.830"></status>
</kw>
<status endtime="20170816 05:13:57.744" status="FAIL" starttime="20170816 05:13:53.890"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:14:07.749" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:14:07.749" status="PASS" starttime="20170816 05:14:07.748"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:14:07.750" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:14:07.750" status="PASS" starttime="20170816 05:14:07.749"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:14:07.750" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:14:07.750" status="PASS" starttime="20170816 05:14:07.750"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:14:07.751" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:14:07.751" status="PASS" starttime="20170816 05:14:07.751"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:14:08.210" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:14:08.210" status="PASS" starttime="20170816 05:14:07.752"></status>
</kw>
<msg timestamp="20170816 05:14:08.210" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:14:08.210" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:14:08.210" status="PASS" starttime="20170816 05:14:07.751"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:14:08.211" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:14:08.211" status="PASS" starttime="20170816 05:14:08.211"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:14:08.212" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:14:08.212" status="PASS" starttime="20170816 05:14:08.211"></status>
</kw>
<status endtime="20170816 05:14:08.212" status="PASS" starttime="20170816 05:14:07.748"></status>
</kw>
<status endtime="20170816 05:14:08.212" status="PASS" starttime="20170816 05:14:07.747"></status>
</kw>
<status endtime="20170816 05:14:08.212" status="PASS" starttime="20170816 05:14:07.747"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:14:08.213" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170816 05:14:08.213" status="PASS" starttime="20170816 05:14:08.212"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:14:08.215" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170816 05:14:08.215" status="PASS" starttime="20170816 05:14:08.214"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:14:08.216" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170816 05:14:08.216" status="PASS" starttime="20170816 05:14:08.216"></status>
</kw>
<status endtime="20170816 05:14:08.216" status="PASS" starttime="20170816 05:14:08.215"></status>
</kw>
<status endtime="20170816 05:14:08.216" status="PASS" starttime="20170816 05:14:08.214"></status>
</kw>
<status endtime="20170816 05:14:08.216" status="PASS" starttime="20170816 05:14:08.213"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:14:08.853" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 05:14:08.853" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:14:08.853" status="PASS" starttime="20170816 05:14:08.216"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:14:08.855" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:14:08.855" status="PASS" starttime="20170816 05:14:08.854"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:14:08.856" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:14:08.856" status="PASS" starttime="20170816 05:14:08.855"></status>
</kw>
<status endtime="20170816 05:14:08.856" status="PASS" starttime="20170816 05:14:08.855"></status>
</kw>
<status endtime="20170816 05:14:08.856" status="PASS" starttime="20170816 05:14:08.854"></status>
</kw>
<status endtime="20170816 05:14:08.856" status="PASS" starttime="20170816 05:14:08.853"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:14:08.856" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:14:08.856" status="PASS" starttime="20170816 05:14:08.856"></status>
</kw>
<msg timestamp="20170816 05:14:08.857" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:14:08.857" status="PASS" starttime="20170816 05:14:07.746"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:14:08.857" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:14:08.857" status="PASS" starttime="20170816 05:14:08.857"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:14:08.858" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:14:08.858" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:14:08.858" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170816 05:14:08.858" status="PASS" starttime="20170816 05:14:08.858"></status>
</kw>
<msg timestamp="20170816 05:14:08.859" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170816 05:14:08.859" status="PASS" starttime="20170816 05:14:07.745"></status>
</kw>
<msg timestamp="20170816 05:14:08.859" level="INFO">${power_state} = On</msg>
<status endtime="20170816 05:14:08.859" status="PASS" starttime="20170816 05:14:07.745"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170816 05:14:08.860" status="PASS" starttime="20170816 05:14:08.859"></status>
</kw>
<status endtime="20170816 05:14:08.860" status="PASS" starttime="20170816 05:14:07.745"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:14:08.865" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:14:08.866" status="PASS" starttime="20170816 05:14:08.865"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:14:08.867" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:14:08.867" status="PASS" starttime="20170816 05:14:08.867"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:14:08.868" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:14:08.868" status="PASS" starttime="20170816 05:14:08.868"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:14:08.869" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:14:08.869" status="PASS" starttime="20170816 05:14:08.869"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:14:09.210" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:14:09.210" status="PASS" starttime="20170816 05:14:08.870"></status>
</kw>
<msg timestamp="20170816 05:14:09.210" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:14:09.210" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:14:09.210" status="PASS" starttime="20170816 05:14:08.870"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:14:09.211" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:14:09.211" status="PASS" starttime="20170816 05:14:09.211"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:14:09.212" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:14:09.212" status="PASS" starttime="20170816 05:14:09.211"></status>
</kw>
<status endtime="20170816 05:14:09.212" status="PASS" starttime="20170816 05:14:08.864"></status>
</kw>
<status endtime="20170816 05:14:09.212" status="PASS" starttime="20170816 05:14:08.864"></status>
</kw>
<status endtime="20170816 05:14:09.212" status="PASS" starttime="20170816 05:14:08.863"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:14:09.213" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170816 05:14:09.213" status="PASS" starttime="20170816 05:14:09.212"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:14:09.215" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170816 05:14:09.215" status="PASS" starttime="20170816 05:14:09.214"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:14:09.216" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170816 05:14:09.216" status="PASS" starttime="20170816 05:14:09.216"></status>
</kw>
<status endtime="20170816 05:14:09.216" status="PASS" starttime="20170816 05:14:09.215"></status>
</kw>
<status endtime="20170816 05:14:09.216" status="PASS" starttime="20170816 05:14:09.214"></status>
</kw>
<status endtime="20170816 05:14:09.216" status="PASS" starttime="20170816 05:14:09.213"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:14:09.745" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 05:14:09.745" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:14:09.745" status="PASS" starttime="20170816 05:14:09.217"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:14:09.747" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:14:09.747" status="PASS" starttime="20170816 05:14:09.746"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:14:09.748" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:14:09.748" status="PASS" starttime="20170816 05:14:09.747"></status>
</kw>
<status endtime="20170816 05:14:09.748" status="PASS" starttime="20170816 05:14:09.747"></status>
</kw>
<status endtime="20170816 05:14:09.748" status="PASS" starttime="20170816 05:14:09.746"></status>
</kw>
<status endtime="20170816 05:14:09.748" status="PASS" starttime="20170816 05:14:09.745"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:14:09.748" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:14:09.749" status="PASS" starttime="20170816 05:14:09.748"></status>
</kw>
<msg timestamp="20170816 05:14:09.749" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:14:09.749" status="PASS" starttime="20170816 05:14:08.862"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:14:09.749" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:14:09.749" status="PASS" starttime="20170816 05:14:09.749"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:14:09.750" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:14:09.750" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:14:09.750" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170816 05:14:09.750" status="PASS" starttime="20170816 05:14:09.750"></status>
</kw>
<msg timestamp="20170816 05:14:09.750" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170816 05:14:09.750" status="PASS" starttime="20170816 05:14:08.861"></status>
</kw>
<msg timestamp="20170816 05:14:09.751" level="INFO">${host_state} = Running</msg>
<status endtime="20170816 05:14:09.751" status="PASS" starttime="20170816 05:14:08.860"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170816 05:14:09.751" status="PASS" starttime="20170816 05:14:09.751"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:14:09.756" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:14:09.757" status="PASS" starttime="20170816 05:14:09.756"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:14:09.757" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:14:09.757" status="PASS" starttime="20170816 05:14:09.757"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:14:09.758" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:14:09.758" status="PASS" starttime="20170816 05:14:09.758"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:14:09.759" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:14:09.759" status="PASS" starttime="20170816 05:14:09.758"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:14:10.331" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:14:10.332" status="PASS" starttime="20170816 05:14:09.759"></status>
</kw>
<msg timestamp="20170816 05:14:10.332" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:14:10.332" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:14:10.332" status="PASS" starttime="20170816 05:14:09.759"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:14:10.333" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:14:10.333" status="PASS" starttime="20170816 05:14:10.332"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:14:10.333" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:14:10.333" status="PASS" starttime="20170816 05:14:10.333"></status>
</kw>
<status endtime="20170816 05:14:10.333" status="PASS" starttime="20170816 05:14:09.756"></status>
</kw>
<status endtime="20170816 05:14:10.334" status="PASS" starttime="20170816 05:14:09.755"></status>
</kw>
<status endtime="20170816 05:14:10.334" status="PASS" starttime="20170816 05:14:09.754"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:14:10.334" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170816 05:14:10.334" status="PASS" starttime="20170816 05:14:10.334"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:14:10.337" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170816 05:14:10.337" status="PASS" starttime="20170816 05:14:10.336"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:14:10.338" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170816 05:14:10.338" status="PASS" starttime="20170816 05:14:10.337"></status>
</kw>
<status endtime="20170816 05:14:10.338" status="PASS" starttime="20170816 05:14:10.337"></status>
</kw>
<status endtime="20170816 05:14:10.338" status="PASS" starttime="20170816 05:14:10.335"></status>
</kw>
<status endtime="20170816 05:14:10.338" status="PASS" starttime="20170816 05:14:10.335"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:14:10.727" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170816 05:14:10.727" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:14:10.727" status="PASS" starttime="20170816 05:14:10.338"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:14:10.729" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:14:10.730" status="PASS" starttime="20170816 05:14:10.729"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:14:10.730" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:14:10.731" status="PASS" starttime="20170816 05:14:10.730"></status>
</kw>
<status endtime="20170816 05:14:10.731" status="PASS" starttime="20170816 05:14:10.730"></status>
</kw>
<status endtime="20170816 05:14:10.731" status="PASS" starttime="20170816 05:14:10.728"></status>
</kw>
<status endtime="20170816 05:14:10.731" status="PASS" starttime="20170816 05:14:10.728"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:14:10.731" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:14:10.731" status="PASS" starttime="20170816 05:14:10.731"></status>
</kw>
<msg timestamp="20170816 05:14:10.732" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:14:10.732" status="PASS" starttime="20170816 05:14:09.754"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:14:10.732" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:14:10.732" status="PASS" starttime="20170816 05:14:10.732"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:14:10.733" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:14:10.733" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:14:10.733" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170816 05:14:10.733" status="PASS" starttime="20170816 05:14:10.733"></status>
</kw>
<msg timestamp="20170816 05:14:10.733" level="INFO">${state} = Off</msg>
<status endtime="20170816 05:14:10.733" status="PASS" starttime="20170816 05:14:09.753"></status>
</kw>
<msg timestamp="20170816 05:14:10.734" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170816 05:14:10.734" status="PASS" starttime="20170816 05:14:09.753"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170816 05:14:10.734" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170816 05:14:10.734" status="FAIL" starttime="20170816 05:14:10.734"></status>
</kw>
<status endtime="20170816 05:14:10.735" status="FAIL" starttime="20170816 05:14:09.752"></status>
</kw>
<msg timestamp="20170816 05:14:10.735" level="INFO">${status} = False</msg>
<status endtime="20170816 05:14:10.735" status="PASS" starttime="20170816 05:14:09.752"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status endtime="20170816 05:14:10.735" status="PASS" starttime="20170816 05:14:10.735"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:14:10.739" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:14:10.739" status="PASS" starttime="20170816 05:14:10.739"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:14:10.740" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:14:10.740" status="PASS" starttime="20170816 05:14:10.740"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:14:10.741" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:14:10.741" status="PASS" starttime="20170816 05:14:10.740"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:14:10.741" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:14:10.741" status="PASS" starttime="20170816 05:14:10.741"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:14:11.125" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:14:11.125" status="PASS" starttime="20170816 05:14:10.742"></status>
</kw>
<msg timestamp="20170816 05:14:11.125" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:14:11.125" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:14:11.125" status="PASS" starttime="20170816 05:14:10.741"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:14:11.126" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:14:11.126" status="PASS" starttime="20170816 05:14:11.125"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:14:11.126" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:14:11.127" status="PASS" starttime="20170816 05:14:11.126"></status>
</kw>
<status endtime="20170816 05:14:11.127" status="PASS" starttime="20170816 05:14:10.738"></status>
</kw>
<status endtime="20170816 05:14:11.127" status="PASS" starttime="20170816 05:14:10.738"></status>
</kw>
<status endtime="20170816 05:14:11.127" status="PASS" starttime="20170816 05:14:10.737"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:14:11.128" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170816 05:14:11.128" status="PASS" starttime="20170816 05:14:11.127"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:14:11.130" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170816 05:14:11.130" status="PASS" starttime="20170816 05:14:11.129"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:14:11.131" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170816 05:14:11.131" status="PASS" starttime="20170816 05:14:11.130"></status>
</kw>
<status endtime="20170816 05:14:11.131" status="PASS" starttime="20170816 05:14:11.130"></status>
</kw>
<status endtime="20170816 05:14:11.131" status="PASS" starttime="20170816 05:14:11.128"></status>
</kw>
<status endtime="20170816 05:14:11.131" status="PASS" starttime="20170816 05:14:11.128"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:14:11.693" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170816 05:14:11.693" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:14:11.693" status="PASS" starttime="20170816 05:14:11.131"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:14:11.695" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:14:11.695" status="PASS" starttime="20170816 05:14:11.694"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:14:11.696" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:14:11.696" status="PASS" starttime="20170816 05:14:11.696"></status>
</kw>
<status endtime="20170816 05:14:11.696" status="PASS" starttime="20170816 05:14:11.695"></status>
</kw>
<status endtime="20170816 05:14:11.696" status="PASS" starttime="20170816 05:14:11.694"></status>
</kw>
<status endtime="20170816 05:14:11.697" status="PASS" starttime="20170816 05:14:11.693"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:14:11.697" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:14:11.697" status="PASS" starttime="20170816 05:14:11.697"></status>
</kw>
<msg timestamp="20170816 05:14:11.697" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:14:11.697" status="PASS" starttime="20170816 05:14:10.736"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:14:11.698" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:14:11.698" status="PASS" starttime="20170816 05:14:11.698"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:14:11.698" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:14:11.699" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:14:11.699" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit'}</msg>
<status endtime="20170816 05:14:11.699" status="PASS" starttime="20170816 05:14:11.698"></status>
</kw>
<msg timestamp="20170816 05:14:11.699" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170816 05:14:11.699" status="PASS" starttime="20170816 05:14:10.736"></status>
</kw>
<msg timestamp="20170816 05:14:11.699" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170816 05:14:11.699" status="PASS" starttime="20170816 05:14:10.735"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170816 05:14:11.700" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170816 05:14:11.700" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170816 05:14:11.700" status="FAIL" starttime="20170816 05:14:11.699"></status>
</kw>
<status endtime="20170816 05:14:11.700" status="FAIL" starttime="20170816 05:14:09.751"></status>
</kw>
<status endtime="20170816 05:14:11.700" status="FAIL" starttime="20170816 05:14:07.744"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:14:21.706" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:14:21.707" status="PASS" starttime="20170816 05:14:21.706"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:14:21.707" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:14:21.708" status="PASS" starttime="20170816 05:14:21.707"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:14:21.708" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:14:21.708" status="PASS" starttime="20170816 05:14:21.708"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:14:21.709" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:14:21.709" status="PASS" starttime="20170816 05:14:21.708"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:14:22.155" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:14:22.155" status="PASS" starttime="20170816 05:14:21.709"></status>
</kw>
<msg timestamp="20170816 05:14:22.156" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:14:22.156" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:14:22.156" status="PASS" starttime="20170816 05:14:21.709"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:14:22.156" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:14:22.157" status="PASS" starttime="20170816 05:14:22.156"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:14:22.157" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:14:22.157" status="PASS" starttime="20170816 05:14:22.157"></status>
</kw>
<status endtime="20170816 05:14:22.157" status="PASS" starttime="20170816 05:14:21.705"></status>
</kw>
<status endtime="20170816 05:14:22.157" status="PASS" starttime="20170816 05:14:21.705"></status>
</kw>
<status endtime="20170816 05:14:22.158" status="PASS" starttime="20170816 05:14:21.704"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:14:22.158" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170816 05:14:22.158" status="PASS" starttime="20170816 05:14:22.158"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:14:22.160" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170816 05:14:22.160" status="PASS" starttime="20170816 05:14:22.160"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:14:22.162" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170816 05:14:22.162" status="PASS" starttime="20170816 05:14:22.161"></status>
</kw>
<status endtime="20170816 05:14:22.162" status="PASS" starttime="20170816 05:14:22.161"></status>
</kw>
<status endtime="20170816 05:14:22.162" status="PASS" starttime="20170816 05:14:22.159"></status>
</kw>
<status endtime="20170816 05:14:22.162" status="PASS" starttime="20170816 05:14:22.159"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:14:22.563" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 05:14:22.563" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:14:22.563" status="PASS" starttime="20170816 05:14:22.162"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:14:22.565" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:14:22.565" status="PASS" starttime="20170816 05:14:22.564"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:14:22.566" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:14:22.566" status="PASS" starttime="20170816 05:14:22.566"></status>
</kw>
<status endtime="20170816 05:14:22.566" status="PASS" starttime="20170816 05:14:22.565"></status>
</kw>
<status endtime="20170816 05:14:22.567" status="PASS" starttime="20170816 05:14:22.564"></status>
</kw>
<status endtime="20170816 05:14:22.567" status="PASS" starttime="20170816 05:14:22.563"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:14:22.567" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:14:22.567" status="PASS" starttime="20170816 05:14:22.567"></status>
</kw>
<msg timestamp="20170816 05:14:22.567" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:14:22.567" status="PASS" starttime="20170816 05:14:21.703"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:14:22.568" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:14:22.568" status="PASS" starttime="20170816 05:14:22.568"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:14:22.568" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:14:22.569" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:14:22.569" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170816 05:14:22.569" status="PASS" starttime="20170816 05:14:22.568"></status>
</kw>
<msg timestamp="20170816 05:14:22.569" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170816 05:14:22.569" status="PASS" starttime="20170816 05:14:21.702"></status>
</kw>
<msg timestamp="20170816 05:14:22.569" level="INFO">${power_state} = On</msg>
<status endtime="20170816 05:14:22.569" status="PASS" starttime="20170816 05:14:21.702"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170816 05:14:22.570" status="PASS" starttime="20170816 05:14:22.570"></status>
</kw>
<status endtime="20170816 05:14:22.570" status="PASS" starttime="20170816 05:14:21.702"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:14:22.573" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:14:22.574" status="PASS" starttime="20170816 05:14:22.573"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:14:22.574" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:14:22.574" status="PASS" starttime="20170816 05:14:22.574"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:14:22.575" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:14:22.575" status="PASS" starttime="20170816 05:14:22.575"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:14:22.576" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:14:22.576" status="PASS" starttime="20170816 05:14:22.575"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:14:22.893" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:14:22.893" status="PASS" starttime="20170816 05:14:22.576"></status>
</kw>
<msg timestamp="20170816 05:14:22.893" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:14:22.893" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:14:22.893" status="PASS" starttime="20170816 05:14:22.576"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:14:22.894" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:14:22.894" status="PASS" starttime="20170816 05:14:22.893"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:14:22.894" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:14:22.894" status="PASS" starttime="20170816 05:14:22.894"></status>
</kw>
<status endtime="20170816 05:14:22.895" status="PASS" starttime="20170816 05:14:22.573"></status>
</kw>
<status endtime="20170816 05:14:22.895" status="PASS" starttime="20170816 05:14:22.572"></status>
</kw>
<status endtime="20170816 05:14:22.895" status="PASS" starttime="20170816 05:14:22.572"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:14:22.895" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170816 05:14:22.895" status="PASS" starttime="20170816 05:14:22.895"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:14:22.898" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170816 05:14:22.898" status="PASS" starttime="20170816 05:14:22.897"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:14:22.899" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170816 05:14:22.899" status="PASS" starttime="20170816 05:14:22.899"></status>
</kw>
<status endtime="20170816 05:14:22.899" status="PASS" starttime="20170816 05:14:22.898"></status>
</kw>
<status endtime="20170816 05:14:22.899" status="PASS" starttime="20170816 05:14:22.896"></status>
</kw>
<status endtime="20170816 05:14:22.899" status="PASS" starttime="20170816 05:14:22.896"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:14:23.726" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 05:14:23.726" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:14:23.726" status="PASS" starttime="20170816 05:14:22.900"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:14:23.728" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:14:23.728" status="PASS" starttime="20170816 05:14:23.727"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:14:23.729" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:14:23.729" status="PASS" starttime="20170816 05:14:23.729"></status>
</kw>
<status endtime="20170816 05:14:23.729" status="PASS" starttime="20170816 05:14:23.728"></status>
</kw>
<status endtime="20170816 05:14:23.729" status="PASS" starttime="20170816 05:14:23.727"></status>
</kw>
<status endtime="20170816 05:14:23.729" status="PASS" starttime="20170816 05:14:23.726"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:14:23.730" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:14:23.730" status="PASS" starttime="20170816 05:14:23.729"></status>
</kw>
<msg timestamp="20170816 05:14:23.730" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:14:23.730" status="PASS" starttime="20170816 05:14:22.571"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:14:23.730" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:14:23.731" status="PASS" starttime="20170816 05:14:23.730"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:14:23.731" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:14:23.731" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:14:23.731" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170816 05:14:23.731" status="PASS" starttime="20170816 05:14:23.731"></status>
</kw>
<msg timestamp="20170816 05:14:23.732" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170816 05:14:23.732" status="PASS" starttime="20170816 05:14:22.570"></status>
</kw>
<msg timestamp="20170816 05:14:23.732" level="INFO">${host_state} = Running</msg>
<status endtime="20170816 05:14:23.732" status="PASS" starttime="20170816 05:14:22.570"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170816 05:14:23.733" status="PASS" starttime="20170816 05:14:23.732"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:14:23.737" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:14:23.741" status="PASS" starttime="20170816 05:14:23.737"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:14:23.741" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:14:23.741" status="PASS" starttime="20170816 05:14:23.741"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:14:23.742" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:14:23.742" status="PASS" starttime="20170816 05:14:23.742"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:14:23.743" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:14:23.743" status="PASS" starttime="20170816 05:14:23.742"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:14:24.133" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:14:24.133" status="PASS" starttime="20170816 05:14:23.744"></status>
</kw>
<msg timestamp="20170816 05:14:24.134" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:14:24.134" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:14:24.134" status="PASS" starttime="20170816 05:14:23.743"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:14:24.134" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:14:24.134" status="PASS" starttime="20170816 05:14:24.134"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:14:24.135" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:14:24.135" status="PASS" starttime="20170816 05:14:24.135"></status>
</kw>
<status endtime="20170816 05:14:24.135" status="PASS" starttime="20170816 05:14:23.736"></status>
</kw>
<status endtime="20170816 05:14:24.135" status="PASS" starttime="20170816 05:14:23.736"></status>
</kw>
<status endtime="20170816 05:14:24.135" status="PASS" starttime="20170816 05:14:23.735"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:14:24.136" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170816 05:14:24.136" status="PASS" starttime="20170816 05:14:24.136"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:14:24.138" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170816 05:14:24.138" status="PASS" starttime="20170816 05:14:24.137"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:14:24.139" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170816 05:14:24.139" status="PASS" starttime="20170816 05:14:24.139"></status>
</kw>
<status endtime="20170816 05:14:24.139" status="PASS" starttime="20170816 05:14:24.138"></status>
</kw>
<status endtime="20170816 05:14:24.139" status="PASS" starttime="20170816 05:14:24.137"></status>
</kw>
<status endtime="20170816 05:14:24.140" status="PASS" starttime="20170816 05:14:24.136"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:14:24.700" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170816 05:14:24.700" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:14:24.700" status="PASS" starttime="20170816 05:14:24.140"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:14:24.702" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:14:24.702" status="PASS" starttime="20170816 05:14:24.702"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:14:24.703" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:14:24.703" status="PASS" starttime="20170816 05:14:24.703"></status>
</kw>
<status endtime="20170816 05:14:24.703" status="PASS" starttime="20170816 05:14:24.702"></status>
</kw>
<status endtime="20170816 05:14:24.704" status="PASS" starttime="20170816 05:14:24.701"></status>
</kw>
<status endtime="20170816 05:14:24.704" status="PASS" starttime="20170816 05:14:24.701"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:14:24.704" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:14:24.704" status="PASS" starttime="20170816 05:14:24.704"></status>
</kw>
<msg timestamp="20170816 05:14:24.704" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:14:24.704" status="PASS" starttime="20170816 05:14:23.735"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:14:24.705" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:14:24.705" status="PASS" starttime="20170816 05:14:24.705"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:14:24.705" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:14:24.706" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:14:24.706" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170816 05:14:24.706" status="PASS" starttime="20170816 05:14:24.705"></status>
</kw>
<msg timestamp="20170816 05:14:24.706" level="INFO">${state} = Off</msg>
<status endtime="20170816 05:14:24.706" status="PASS" starttime="20170816 05:14:23.734"></status>
</kw>
<msg timestamp="20170816 05:14:24.706" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170816 05:14:24.706" status="PASS" starttime="20170816 05:14:23.734"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170816 05:14:24.707" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170816 05:14:24.707" status="FAIL" starttime="20170816 05:14:24.706"></status>
</kw>
<status endtime="20170816 05:14:24.707" status="FAIL" starttime="20170816 05:14:23.733"></status>
</kw>
<msg timestamp="20170816 05:14:24.707" level="INFO">${status} = False</msg>
<status endtime="20170816 05:14:24.707" status="PASS" starttime="20170816 05:14:23.733"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status endtime="20170816 05:14:24.708" status="PASS" starttime="20170816 05:14:24.708"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:14:24.712" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:14:24.712" status="PASS" starttime="20170816 05:14:24.711"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:14:24.713" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:14:24.713" status="PASS" starttime="20170816 05:14:24.712"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:14:24.713" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:14:24.714" status="PASS" starttime="20170816 05:14:24.713"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:14:24.714" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:14:24.714" status="PASS" starttime="20170816 05:14:24.714"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:14:25.011" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:14:25.011" status="PASS" starttime="20170816 05:14:24.715"></status>
</kw>
<msg timestamp="20170816 05:14:25.011" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:14:25.011" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:14:25.011" status="PASS" starttime="20170816 05:14:24.715"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:14:25.012" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:14:25.012" status="PASS" starttime="20170816 05:14:25.012"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:14:25.013" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:14:25.013" status="PASS" starttime="20170816 05:14:25.012"></status>
</kw>
<status endtime="20170816 05:14:25.013" status="PASS" starttime="20170816 05:14:24.711"></status>
</kw>
<status endtime="20170816 05:14:25.013" status="PASS" starttime="20170816 05:14:24.711"></status>
</kw>
<status endtime="20170816 05:14:25.013" status="PASS" starttime="20170816 05:14:24.710"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:14:25.014" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170816 05:14:25.014" status="PASS" starttime="20170816 05:14:25.013"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:14:25.016" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170816 05:14:25.016" status="PASS" starttime="20170816 05:14:25.015"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:14:25.017" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170816 05:14:25.017" status="PASS" starttime="20170816 05:14:25.017"></status>
</kw>
<status endtime="20170816 05:14:25.017" status="PASS" starttime="20170816 05:14:25.016"></status>
</kw>
<status endtime="20170816 05:14:25.017" status="PASS" starttime="20170816 05:14:25.015"></status>
</kw>
<status endtime="20170816 05:14:25.017" status="PASS" starttime="20170816 05:14:25.014"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:14:25.787" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170816 05:14:25.787" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:14:25.787" status="PASS" starttime="20170816 05:14:25.018"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:14:25.790" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:14:25.790" status="PASS" starttime="20170816 05:14:25.789"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:14:25.791" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:14:25.791" status="PASS" starttime="20170816 05:14:25.790"></status>
</kw>
<status endtime="20170816 05:14:25.791" status="PASS" starttime="20170816 05:14:25.790"></status>
</kw>
<status endtime="20170816 05:14:25.791" status="PASS" starttime="20170816 05:14:25.788"></status>
</kw>
<status endtime="20170816 05:14:25.791" status="PASS" starttime="20170816 05:14:25.788"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:14:25.791" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:14:25.791" status="PASS" starttime="20170816 05:14:25.791"></status>
</kw>
<msg timestamp="20170816 05:14:25.792" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:14:25.792" status="PASS" starttime="20170816 05:14:24.709"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:14:25.792" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:14:25.792" status="PASS" starttime="20170816 05:14:25.792"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:14:25.793" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:14:25.793" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:14:25.793" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit'}</msg>
<status endtime="20170816 05:14:25.793" status="PASS" starttime="20170816 05:14:25.793"></status>
</kw>
<msg timestamp="20170816 05:14:25.793" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170816 05:14:25.794" status="PASS" starttime="20170816 05:14:24.708"></status>
</kw>
<msg timestamp="20170816 05:14:25.794" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170816 05:14:25.794" status="PASS" starttime="20170816 05:14:24.708"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170816 05:14:25.794" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170816 05:14:25.795" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170816 05:14:25.795" status="FAIL" starttime="20170816 05:14:25.794"></status>
</kw>
<status endtime="20170816 05:14:25.795" status="FAIL" starttime="20170816 05:14:23.733"></status>
</kw>
<status endtime="20170816 05:14:25.795" status="FAIL" starttime="20170816 05:14:21.701"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:14:35.800" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:14:35.801" status="PASS" starttime="20170816 05:14:35.800"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:14:35.801" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:14:35.801" status="PASS" starttime="20170816 05:14:35.801"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:14:35.802" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:14:35.802" status="PASS" starttime="20170816 05:14:35.802"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:14:35.803" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:14:35.803" status="PASS" starttime="20170816 05:14:35.802"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:14:35.982" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:14:35.982" status="PASS" starttime="20170816 05:14:35.803"></status>
</kw>
<msg timestamp="20170816 05:14:35.982" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:14:35.982" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:14:35.982" status="PASS" starttime="20170816 05:14:35.803"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:14:35.983" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:14:35.983" status="PASS" starttime="20170816 05:14:35.983"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:14:35.984" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:14:35.984" status="PASS" starttime="20170816 05:14:35.983"></status>
</kw>
<status endtime="20170816 05:14:35.984" status="PASS" starttime="20170816 05:14:35.799"></status>
</kw>
<status endtime="20170816 05:14:35.984" status="PASS" starttime="20170816 05:14:35.799"></status>
</kw>
<status endtime="20170816 05:14:35.984" status="PASS" starttime="20170816 05:14:35.798"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:14:35.985" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170816 05:14:35.985" status="PASS" starttime="20170816 05:14:35.985"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:14:35.987" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170816 05:14:35.987" status="PASS" starttime="20170816 05:14:35.986"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:14:35.988" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170816 05:14:35.988" status="PASS" starttime="20170816 05:14:35.988"></status>
</kw>
<status endtime="20170816 05:14:35.988" status="PASS" starttime="20170816 05:14:35.987"></status>
</kw>
<status endtime="20170816 05:14:35.988" status="PASS" starttime="20170816 05:14:35.986"></status>
</kw>
<status endtime="20170816 05:14:35.988" status="PASS" starttime="20170816 05:14:35.985"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:14:36.052" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 05:14:36.052" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:14:36.053" status="PASS" starttime="20170816 05:14:35.989"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:14:36.054" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:14:36.054" status="PASS" starttime="20170816 05:14:36.054"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:14:36.055" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:14:36.055" status="PASS" starttime="20170816 05:14:36.055"></status>
</kw>
<status endtime="20170816 05:14:36.055" status="PASS" starttime="20170816 05:14:36.054"></status>
</kw>
<status endtime="20170816 05:14:36.056" status="PASS" starttime="20170816 05:14:36.053"></status>
</kw>
<status endtime="20170816 05:14:36.056" status="PASS" starttime="20170816 05:14:36.053"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:14:36.056" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:14:36.056" status="PASS" starttime="20170816 05:14:36.056"></status>
</kw>
<msg timestamp="20170816 05:14:36.056" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:14:36.056" status="PASS" starttime="20170816 05:14:35.798"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:14:36.057" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:14:36.057" status="PASS" starttime="20170816 05:14:36.057"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:14:36.058" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:14:36.058" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:14:36.058" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170816 05:14:36.058" status="PASS" starttime="20170816 05:14:36.057"></status>
</kw>
<msg timestamp="20170816 05:14:36.058" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170816 05:14:36.058" status="PASS" starttime="20170816 05:14:35.797"></status>
</kw>
<msg timestamp="20170816 05:14:36.058" level="INFO">${power_state} = On</msg>
<status endtime="20170816 05:14:36.058" status="PASS" starttime="20170816 05:14:35.797"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170816 05:14:36.059" status="PASS" starttime="20170816 05:14:36.059"></status>
</kw>
<status endtime="20170816 05:14:36.059" status="PASS" starttime="20170816 05:14:35.796"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:14:36.063" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:14:36.063" status="PASS" starttime="20170816 05:14:36.062"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:14:36.064" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:14:36.064" status="PASS" starttime="20170816 05:14:36.064"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:14:36.065" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:14:36.065" status="PASS" starttime="20170816 05:14:36.064"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:14:36.065" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:14:36.065" status="PASS" starttime="20170816 05:14:36.065"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:14:36.242" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:14:36.242" status="PASS" starttime="20170816 05:14:36.066"></status>
</kw>
<msg timestamp="20170816 05:14:36.242" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:14:36.243" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:14:36.243" status="PASS" starttime="20170816 05:14:36.066"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:14:36.243" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:14:36.243" status="PASS" starttime="20170816 05:14:36.243"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:14:36.244" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:14:36.244" status="PASS" starttime="20170816 05:14:36.244"></status>
</kw>
<status endtime="20170816 05:14:36.244" status="PASS" starttime="20170816 05:14:36.062"></status>
</kw>
<status endtime="20170816 05:14:36.244" status="PASS" starttime="20170816 05:14:36.061"></status>
</kw>
<status endtime="20170816 05:14:36.244" status="PASS" starttime="20170816 05:14:36.061"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:14:36.245" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170816 05:14:36.245" status="PASS" starttime="20170816 05:14:36.245"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:14:36.247" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170816 05:14:36.247" status="PASS" starttime="20170816 05:14:36.246"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:14:36.248" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170816 05:14:36.248" status="PASS" starttime="20170816 05:14:36.248"></status>
</kw>
<status endtime="20170816 05:14:36.248" status="PASS" starttime="20170816 05:14:36.247"></status>
</kw>
<status endtime="20170816 05:14:36.248" status="PASS" starttime="20170816 05:14:36.246"></status>
</kw>
<status endtime="20170816 05:14:36.248" status="PASS" starttime="20170816 05:14:36.245"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:14:36.338" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 05:14:36.338" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:14:36.338" status="PASS" starttime="20170816 05:14:36.249"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:14:36.340" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:14:36.340" status="PASS" starttime="20170816 05:14:36.340"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:14:36.341" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:14:36.341" status="PASS" starttime="20170816 05:14:36.341"></status>
</kw>
<status endtime="20170816 05:14:36.341" status="PASS" starttime="20170816 05:14:36.340"></status>
</kw>
<status endtime="20170816 05:14:36.341" status="PASS" starttime="20170816 05:14:36.339"></status>
</kw>
<status endtime="20170816 05:14:36.342" status="PASS" starttime="20170816 05:14:36.339"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:14:36.342" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:14:36.342" status="PASS" starttime="20170816 05:14:36.342"></status>
</kw>
<msg timestamp="20170816 05:14:36.342" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:14:36.342" status="PASS" starttime="20170816 05:14:36.060"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:14:36.343" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:14:36.343" status="PASS" starttime="20170816 05:14:36.343"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:14:36.343" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:14:36.344" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:14:36.344" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170816 05:14:36.344" status="PASS" starttime="20170816 05:14:36.343"></status>
</kw>
<msg timestamp="20170816 05:14:36.344" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170816 05:14:36.344" status="PASS" starttime="20170816 05:14:36.060"></status>
</kw>
<msg timestamp="20170816 05:14:36.344" level="INFO">${host_state} = Running</msg>
<status endtime="20170816 05:14:36.344" status="PASS" starttime="20170816 05:14:36.059"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170816 05:14:36.345" status="PASS" starttime="20170816 05:14:36.345"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:14:36.350" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:14:36.350" status="PASS" starttime="20170816 05:14:36.349"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:14:36.351" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:14:36.351" status="PASS" starttime="20170816 05:14:36.350"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:14:36.351" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:14:36.351" status="PASS" starttime="20170816 05:14:36.351"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:14:36.352" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:14:36.352" status="PASS" starttime="20170816 05:14:36.352"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:14:36.570" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:14:36.570" status="PASS" starttime="20170816 05:14:36.353"></status>
</kw>
<msg timestamp="20170816 05:14:36.570" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:14:36.570" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:14:36.570" status="PASS" starttime="20170816 05:14:36.352"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:14:36.571" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:14:36.571" status="PASS" starttime="20170816 05:14:36.571"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:14:36.572" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:14:36.572" status="PASS" starttime="20170816 05:14:36.571"></status>
</kw>
<status endtime="20170816 05:14:36.572" status="PASS" starttime="20170816 05:14:36.349"></status>
</kw>
<status endtime="20170816 05:14:36.572" status="PASS" starttime="20170816 05:14:36.348"></status>
</kw>
<status endtime="20170816 05:14:36.572" status="PASS" starttime="20170816 05:14:36.348"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:14:36.573" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170816 05:14:36.573" status="PASS" starttime="20170816 05:14:36.573"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:14:36.576" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170816 05:14:36.576" status="PASS" starttime="20170816 05:14:36.574"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:14:36.578" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170816 05:14:36.578" status="PASS" starttime="20170816 05:14:36.578"></status>
</kw>
<status endtime="20170816 05:14:36.578" status="PASS" starttime="20170816 05:14:36.576"></status>
</kw>
<status endtime="20170816 05:14:36.578" status="PASS" starttime="20170816 05:14:36.574"></status>
</kw>
<status endtime="20170816 05:14:36.578" status="PASS" starttime="20170816 05:14:36.573"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:14:36.662" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170816 05:14:36.662" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:14:36.662" status="PASS" starttime="20170816 05:14:36.578"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:14:36.664" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:14:36.664" status="PASS" starttime="20170816 05:14:36.664"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:14:36.665" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:14:36.665" status="PASS" starttime="20170816 05:14:36.665"></status>
</kw>
<status endtime="20170816 05:14:36.665" status="PASS" starttime="20170816 05:14:36.664"></status>
</kw>
<status endtime="20170816 05:14:36.665" status="PASS" starttime="20170816 05:14:36.663"></status>
</kw>
<status endtime="20170816 05:14:36.665" status="PASS" starttime="20170816 05:14:36.663"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:14:36.666" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:14:36.666" status="PASS" starttime="20170816 05:14:36.666"></status>
</kw>
<msg timestamp="20170816 05:14:36.666" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:14:36.666" status="PASS" starttime="20170816 05:14:36.347"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:14:36.667" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:14:36.667" status="PASS" starttime="20170816 05:14:36.666"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:14:36.667" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:14:36.667" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:14:36.668" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170816 05:14:36.668" status="PASS" starttime="20170816 05:14:36.667"></status>
</kw>
<msg timestamp="20170816 05:14:36.668" level="INFO">${state} = Off</msg>
<status endtime="20170816 05:14:36.668" status="PASS" starttime="20170816 05:14:36.347"></status>
</kw>
<msg timestamp="20170816 05:14:36.668" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170816 05:14:36.668" status="PASS" starttime="20170816 05:14:36.346"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170816 05:14:36.669" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170816 05:14:36.669" status="FAIL" starttime="20170816 05:14:36.668"></status>
</kw>
<status endtime="20170816 05:14:36.669" status="FAIL" starttime="20170816 05:14:36.346"></status>
</kw>
<msg timestamp="20170816 05:14:36.669" level="INFO">${status} = False</msg>
<status endtime="20170816 05:14:36.669" status="PASS" starttime="20170816 05:14:36.345"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status endtime="20170816 05:14:36.670" status="PASS" starttime="20170816 05:14:36.669"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:14:36.673" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:14:36.674" status="PASS" starttime="20170816 05:14:36.673"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:14:36.674" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:14:36.674" status="PASS" starttime="20170816 05:14:36.674"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:14:36.675" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:14:36.675" status="PASS" starttime="20170816 05:14:36.675"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:14:36.676" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:14:36.676" status="PASS" starttime="20170816 05:14:36.675"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:14:36.943" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:14:36.944" status="PASS" starttime="20170816 05:14:36.676"></status>
</kw>
<msg timestamp="20170816 05:14:36.944" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:14:36.944" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:14:36.944" status="PASS" starttime="20170816 05:14:36.676"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:14:36.944" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:14:36.945" status="PASS" starttime="20170816 05:14:36.944"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:14:36.945" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:14:36.945" status="PASS" starttime="20170816 05:14:36.945"></status>
</kw>
<status endtime="20170816 05:14:36.945" status="PASS" starttime="20170816 05:14:36.673"></status>
</kw>
<status endtime="20170816 05:14:36.945" status="PASS" starttime="20170816 05:14:36.672"></status>
</kw>
<status endtime="20170816 05:14:36.946" status="PASS" starttime="20170816 05:14:36.672"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:14:36.946" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170816 05:14:36.946" status="PASS" starttime="20170816 05:14:36.946"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:14:36.948" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170816 05:14:36.948" status="PASS" starttime="20170816 05:14:36.947"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:14:36.949" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170816 05:14:36.949" status="PASS" starttime="20170816 05:14:36.949"></status>
</kw>
<status endtime="20170816 05:14:36.949" status="PASS" starttime="20170816 05:14:36.948"></status>
</kw>
<status endtime="20170816 05:14:36.949" status="PASS" starttime="20170816 05:14:36.947"></status>
</kw>
<status endtime="20170816 05:14:36.950" status="PASS" starttime="20170816 05:14:36.946"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:14:37.039" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170816 05:14:37.039" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:14:37.039" status="PASS" starttime="20170816 05:14:36.950"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:14:37.041" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:14:37.041" status="PASS" starttime="20170816 05:14:37.041"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:14:37.042" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:14:37.042" status="PASS" starttime="20170816 05:14:37.042"></status>
</kw>
<status endtime="20170816 05:14:37.042" status="PASS" starttime="20170816 05:14:37.041"></status>
</kw>
<status endtime="20170816 05:14:37.042" status="PASS" starttime="20170816 05:14:37.040"></status>
</kw>
<status endtime="20170816 05:14:37.043" status="PASS" starttime="20170816 05:14:37.040"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:14:37.043" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:14:37.043" status="PASS" starttime="20170816 05:14:37.043"></status>
</kw>
<msg timestamp="20170816 05:14:37.043" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:14:37.043" status="PASS" starttime="20170816 05:14:36.671"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:14:37.044" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:14:37.044" status="PASS" starttime="20170816 05:14:37.043"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:14:37.045" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:14:37.045" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:14:37.045" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit'}</msg>
<status endtime="20170816 05:14:37.045" status="PASS" starttime="20170816 05:14:37.044"></status>
</kw>
<msg timestamp="20170816 05:14:37.045" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170816 05:14:37.045" status="PASS" starttime="20170816 05:14:36.670"></status>
</kw>
<msg timestamp="20170816 05:14:37.045" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170816 05:14:37.045" status="PASS" starttime="20170816 05:14:36.670"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170816 05:14:37.046" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170816 05:14:37.046" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170816 05:14:37.046" status="FAIL" starttime="20170816 05:14:37.046"></status>
</kw>
<status endtime="20170816 05:14:37.046" status="FAIL" starttime="20170816 05:14:36.345"></status>
</kw>
<status endtime="20170816 05:14:37.046" status="FAIL" starttime="20170816 05:14:35.796"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:14:47.052" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:14:47.052" status="PASS" starttime="20170816 05:14:47.051"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:14:47.053" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:14:47.053" status="PASS" starttime="20170816 05:14:47.053"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:14:47.054" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:14:47.054" status="PASS" starttime="20170816 05:14:47.053"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:14:47.054" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:14:47.054" status="PASS" starttime="20170816 05:14:47.054"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:14:47.272" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:14:47.272" status="PASS" starttime="20170816 05:14:47.055"></status>
</kw>
<msg timestamp="20170816 05:14:47.273" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:14:47.273" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:14:47.273" status="PASS" starttime="20170816 05:14:47.055"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:14:47.273" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:14:47.273" status="PASS" starttime="20170816 05:14:47.273"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:14:47.274" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:14:47.274" status="PASS" starttime="20170816 05:14:47.274"></status>
</kw>
<status endtime="20170816 05:14:47.274" status="PASS" starttime="20170816 05:14:47.050"></status>
</kw>
<status endtime="20170816 05:14:47.274" status="PASS" starttime="20170816 05:14:47.050"></status>
</kw>
<status endtime="20170816 05:14:47.274" status="PASS" starttime="20170816 05:14:47.049"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:14:47.275" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170816 05:14:47.275" status="PASS" starttime="20170816 05:14:47.275"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:14:47.277" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170816 05:14:47.277" status="PASS" starttime="20170816 05:14:47.276"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:14:47.278" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170816 05:14:47.278" status="PASS" starttime="20170816 05:14:47.278"></status>
</kw>
<status endtime="20170816 05:14:47.278" status="PASS" starttime="20170816 05:14:47.277"></status>
</kw>
<status endtime="20170816 05:14:47.278" status="PASS" starttime="20170816 05:14:47.276"></status>
</kw>
<status endtime="20170816 05:14:47.278" status="PASS" starttime="20170816 05:14:47.275"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:14:47.357" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 05:14:47.357" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:14:47.358" status="PASS" starttime="20170816 05:14:47.279"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:14:47.359" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:14:47.359" status="PASS" starttime="20170816 05:14:47.359"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:14:47.361" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:14:47.361" status="PASS" starttime="20170816 05:14:47.360"></status>
</kw>
<status endtime="20170816 05:14:47.361" status="PASS" starttime="20170816 05:14:47.359"></status>
</kw>
<status endtime="20170816 05:14:47.361" status="PASS" starttime="20170816 05:14:47.358"></status>
</kw>
<status endtime="20170816 05:14:47.361" status="PASS" starttime="20170816 05:14:47.358"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:14:47.361" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:14:47.361" status="PASS" starttime="20170816 05:14:47.361"></status>
</kw>
<msg timestamp="20170816 05:14:47.362" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:14:47.362" status="PASS" starttime="20170816 05:14:47.049"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:14:47.362" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:14:47.363" status="PASS" starttime="20170816 05:14:47.362"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:14:47.363" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:14:47.363" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:14:47.363" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170816 05:14:47.363" status="PASS" starttime="20170816 05:14:47.363"></status>
</kw>
<msg timestamp="20170816 05:14:47.364" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170816 05:14:47.364" status="PASS" starttime="20170816 05:14:47.048"></status>
</kw>
<msg timestamp="20170816 05:14:47.364" level="INFO">${power_state} = On</msg>
<status endtime="20170816 05:14:47.364" status="PASS" starttime="20170816 05:14:47.048"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170816 05:14:47.364" status="PASS" starttime="20170816 05:14:47.364"></status>
</kw>
<status endtime="20170816 05:14:47.365" status="PASS" starttime="20170816 05:14:47.047"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:14:47.368" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:14:47.368" status="PASS" starttime="20170816 05:14:47.368"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:14:47.369" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:14:47.369" status="PASS" starttime="20170816 05:14:47.369"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:14:47.370" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:14:47.370" status="PASS" starttime="20170816 05:14:47.369"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:14:47.370" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:14:47.370" status="PASS" starttime="20170816 05:14:47.370"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:14:47.648" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:14:47.648" status="PASS" starttime="20170816 05:14:47.371"></status>
</kw>
<msg timestamp="20170816 05:14:47.649" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:14:47.649" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:14:47.649" status="PASS" starttime="20170816 05:14:47.371"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:14:47.649" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:14:47.649" status="PASS" starttime="20170816 05:14:47.649"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:14:47.650" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:14:47.650" status="PASS" starttime="20170816 05:14:47.650"></status>
</kw>
<status endtime="20170816 05:14:47.650" status="PASS" starttime="20170816 05:14:47.367"></status>
</kw>
<status endtime="20170816 05:14:47.650" status="PASS" starttime="20170816 05:14:47.367"></status>
</kw>
<status endtime="20170816 05:14:47.650" status="PASS" starttime="20170816 05:14:47.366"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:14:47.651" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170816 05:14:47.651" status="PASS" starttime="20170816 05:14:47.651"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:14:47.654" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170816 05:14:47.654" status="PASS" starttime="20170816 05:14:47.653"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:14:47.655" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170816 05:14:47.655" status="PASS" starttime="20170816 05:14:47.654"></status>
</kw>
<status endtime="20170816 05:14:47.655" status="PASS" starttime="20170816 05:14:47.654"></status>
</kw>
<status endtime="20170816 05:14:47.655" status="PASS" starttime="20170816 05:14:47.652"></status>
</kw>
<status endtime="20170816 05:14:47.655" status="PASS" starttime="20170816 05:14:47.651"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:14:47.747" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 05:14:47.747" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:14:47.747" status="PASS" starttime="20170816 05:14:47.655"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:14:47.749" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:14:47.749" status="PASS" starttime="20170816 05:14:47.749"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:14:47.750" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:14:47.750" status="PASS" starttime="20170816 05:14:47.750"></status>
</kw>
<status endtime="20170816 05:14:47.750" status="PASS" starttime="20170816 05:14:47.749"></status>
</kw>
<status endtime="20170816 05:14:47.751" status="PASS" starttime="20170816 05:14:47.748"></status>
</kw>
<status endtime="20170816 05:14:47.751" status="PASS" starttime="20170816 05:14:47.748"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:14:47.751" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:14:47.751" status="PASS" starttime="20170816 05:14:47.751"></status>
</kw>
<msg timestamp="20170816 05:14:47.751" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:14:47.751" status="PASS" starttime="20170816 05:14:47.366"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:14:47.752" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:14:47.752" status="PASS" starttime="20170816 05:14:47.752"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:14:47.753" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:14:47.753" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:14:47.753" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170816 05:14:47.753" status="PASS" starttime="20170816 05:14:47.752"></status>
</kw>
<msg timestamp="20170816 05:14:47.753" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170816 05:14:47.753" status="PASS" starttime="20170816 05:14:47.365"></status>
</kw>
<msg timestamp="20170816 05:14:47.753" level="INFO">${host_state} = Running</msg>
<status endtime="20170816 05:14:47.753" status="PASS" starttime="20170816 05:14:47.365"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170816 05:14:47.754" status="PASS" starttime="20170816 05:14:47.754"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:14:47.758" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:14:47.759" status="PASS" starttime="20170816 05:14:47.758"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:14:47.760" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:14:47.760" status="PASS" starttime="20170816 05:14:47.760"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:14:47.760" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:14:47.761" status="PASS" starttime="20170816 05:14:47.760"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:14:47.761" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:14:47.761" status="PASS" starttime="20170816 05:14:47.761"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:14:47.970" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:14:47.970" status="PASS" starttime="20170816 05:14:47.762"></status>
</kw>
<msg timestamp="20170816 05:14:47.970" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:14:47.970" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:14:47.970" status="PASS" starttime="20170816 05:14:47.761"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:14:47.971" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:14:47.971" status="PASS" starttime="20170816 05:14:47.970"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:14:47.971" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:14:47.971" status="PASS" starttime="20170816 05:14:47.971"></status>
</kw>
<status endtime="20170816 05:14:47.972" status="PASS" starttime="20170816 05:14:47.758"></status>
</kw>
<status endtime="20170816 05:14:47.972" status="PASS" starttime="20170816 05:14:47.757"></status>
</kw>
<status endtime="20170816 05:14:47.972" status="PASS" starttime="20170816 05:14:47.757"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:14:47.972" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170816 05:14:47.972" status="PASS" starttime="20170816 05:14:47.972"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:14:47.974" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170816 05:14:47.974" status="PASS" starttime="20170816 05:14:47.974"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:14:47.975" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170816 05:14:47.975" status="PASS" starttime="20170816 05:14:47.975"></status>
</kw>
<status endtime="20170816 05:14:47.976" status="PASS" starttime="20170816 05:14:47.975"></status>
</kw>
<status endtime="20170816 05:14:47.976" status="PASS" starttime="20170816 05:14:47.973"></status>
</kw>
<status endtime="20170816 05:14:47.976" status="PASS" starttime="20170816 05:14:47.973"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:14:48.043" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170816 05:14:48.043" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:14:48.043" status="PASS" starttime="20170816 05:14:47.976"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:14:48.045" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:14:48.045" status="PASS" starttime="20170816 05:14:48.044"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:14:48.046" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:14:48.046" status="PASS" starttime="20170816 05:14:48.045"></status>
</kw>
<status endtime="20170816 05:14:48.046" status="PASS" starttime="20170816 05:14:48.045"></status>
</kw>
<status endtime="20170816 05:14:48.046" status="PASS" starttime="20170816 05:14:48.044"></status>
</kw>
<status endtime="20170816 05:14:48.046" status="PASS" starttime="20170816 05:14:48.043"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:14:48.046" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:14:48.047" status="PASS" starttime="20170816 05:14:48.046"></status>
</kw>
<msg timestamp="20170816 05:14:48.047" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:14:48.047" status="PASS" starttime="20170816 05:14:47.756"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:14:48.047" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:14:48.047" status="PASS" starttime="20170816 05:14:48.047"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:14:48.048" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:14:48.048" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:14:48.048" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170816 05:14:48.048" status="PASS" starttime="20170816 05:14:48.048"></status>
</kw>
<msg timestamp="20170816 05:14:48.048" level="INFO">${state} = Off</msg>
<status endtime="20170816 05:14:48.048" status="PASS" starttime="20170816 05:14:47.755"></status>
</kw>
<msg timestamp="20170816 05:14:48.049" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170816 05:14:48.049" status="PASS" starttime="20170816 05:14:47.755"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170816 05:14:48.049" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170816 05:14:48.049" status="FAIL" starttime="20170816 05:14:48.049"></status>
</kw>
<status endtime="20170816 05:14:48.050" status="FAIL" starttime="20170816 05:14:47.755"></status>
</kw>
<msg timestamp="20170816 05:14:48.050" level="INFO">${status} = False</msg>
<status endtime="20170816 05:14:48.050" status="PASS" starttime="20170816 05:14:47.755"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status endtime="20170816 05:14:48.050" status="PASS" starttime="20170816 05:14:48.050"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:14:48.057" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:14:48.058" status="PASS" starttime="20170816 05:14:48.057"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:14:48.058" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:14:48.058" status="PASS" starttime="20170816 05:14:48.058"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:14:48.059" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:14:48.059" status="PASS" starttime="20170816 05:14:48.059"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:14:48.060" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:14:48.060" status="PASS" starttime="20170816 05:14:48.059"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:14:48.283" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:14:48.284" status="PASS" starttime="20170816 05:14:48.060"></status>
</kw>
<msg timestamp="20170816 05:14:48.284" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:14:48.284" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:14:48.284" status="PASS" starttime="20170816 05:14:48.060"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:14:48.285" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:14:48.285" status="PASS" starttime="20170816 05:14:48.284"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:14:48.285" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:14:48.285" status="PASS" starttime="20170816 05:14:48.285"></status>
</kw>
<status endtime="20170816 05:14:48.286" status="PASS" starttime="20170816 05:14:48.056"></status>
</kw>
<status endtime="20170816 05:14:48.286" status="PASS" starttime="20170816 05:14:48.056"></status>
</kw>
<status endtime="20170816 05:14:48.286" status="PASS" starttime="20170816 05:14:48.055"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:14:48.286" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170816 05:14:48.286" status="PASS" starttime="20170816 05:14:48.286"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:14:48.288" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170816 05:14:48.288" status="PASS" starttime="20170816 05:14:48.288"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:14:48.289" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170816 05:14:48.289" status="PASS" starttime="20170816 05:14:48.289"></status>
</kw>
<status endtime="20170816 05:14:48.290" status="PASS" starttime="20170816 05:14:48.289"></status>
</kw>
<status endtime="20170816 05:14:48.290" status="PASS" starttime="20170816 05:14:48.287"></status>
</kw>
<status endtime="20170816 05:14:48.290" status="PASS" starttime="20170816 05:14:48.287"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:14:48.381" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170816 05:14:48.381" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:14:48.381" status="PASS" starttime="20170816 05:14:48.290"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:14:48.383" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:14:48.384" status="PASS" starttime="20170816 05:14:48.383"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:14:48.384" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:14:48.385" status="PASS" starttime="20170816 05:14:48.384"></status>
</kw>
<status endtime="20170816 05:14:48.385" status="PASS" starttime="20170816 05:14:48.384"></status>
</kw>
<status endtime="20170816 05:14:48.385" status="PASS" starttime="20170816 05:14:48.382"></status>
</kw>
<status endtime="20170816 05:14:48.385" status="PASS" starttime="20170816 05:14:48.382"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:14:48.385" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:14:48.385" status="PASS" starttime="20170816 05:14:48.385"></status>
</kw>
<msg timestamp="20170816 05:14:48.385" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:14:48.386" status="PASS" starttime="20170816 05:14:48.051"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:14:48.386" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:14:48.386" status="PASS" starttime="20170816 05:14:48.386"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:14:48.387" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:14:48.387" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:14:48.387" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit'}</msg>
<status endtime="20170816 05:14:48.387" status="PASS" starttime="20170816 05:14:48.386"></status>
</kw>
<msg timestamp="20170816 05:14:48.387" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170816 05:14:48.387" status="PASS" starttime="20170816 05:14:48.051"></status>
</kw>
<msg timestamp="20170816 05:14:48.387" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170816 05:14:48.387" status="PASS" starttime="20170816 05:14:48.050"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170816 05:14:48.388" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170816 05:14:48.388" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170816 05:14:48.388" status="FAIL" starttime="20170816 05:14:48.388"></status>
</kw>
<status endtime="20170816 05:14:48.388" status="FAIL" starttime="20170816 05:14:47.754"></status>
</kw>
<status endtime="20170816 05:14:48.389" status="FAIL" starttime="20170816 05:14:47.047"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:14:58.394" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:14:58.394" status="PASS" starttime="20170816 05:14:58.394"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:14:58.395" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:14:58.395" status="PASS" starttime="20170816 05:14:58.395"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:14:58.396" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:14:58.396" status="PASS" starttime="20170816 05:14:58.395"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:14:58.396" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:14:58.396" status="PASS" starttime="20170816 05:14:58.396"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:14:58.588" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:14:58.588" status="PASS" starttime="20170816 05:14:58.397"></status>
</kw>
<msg timestamp="20170816 05:14:58.588" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:14:58.588" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:14:58.588" status="PASS" starttime="20170816 05:14:58.397"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:14:58.589" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:14:58.589" status="PASS" starttime="20170816 05:14:58.588"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:14:58.589" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:14:58.589" status="PASS" starttime="20170816 05:14:58.589"></status>
</kw>
<status endtime="20170816 05:14:58.590" status="PASS" starttime="20170816 05:14:58.393"></status>
</kw>
<status endtime="20170816 05:14:58.590" status="PASS" starttime="20170816 05:14:58.393"></status>
</kw>
<status endtime="20170816 05:14:58.590" status="PASS" starttime="20170816 05:14:58.392"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:14:58.590" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170816 05:14:58.590" status="PASS" starttime="20170816 05:14:58.590"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:14:58.592" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170816 05:14:58.592" status="PASS" starttime="20170816 05:14:58.592"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:14:58.593" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170816 05:14:58.593" status="PASS" starttime="20170816 05:14:58.593"></status>
</kw>
<status endtime="20170816 05:14:58.594" status="PASS" starttime="20170816 05:14:58.593"></status>
</kw>
<status endtime="20170816 05:14:58.594" status="PASS" starttime="20170816 05:14:58.591"></status>
</kw>
<status endtime="20170816 05:14:58.594" status="PASS" starttime="20170816 05:14:58.591"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:14:58.663" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 05:14:58.663" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:14:58.663" status="PASS" starttime="20170816 05:14:58.594"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:14:58.665" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:14:58.665" status="PASS" starttime="20170816 05:14:58.664"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:14:58.666" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:14:58.666" status="PASS" starttime="20170816 05:14:58.665"></status>
</kw>
<status endtime="20170816 05:14:58.666" status="PASS" starttime="20170816 05:14:58.665"></status>
</kw>
<status endtime="20170816 05:14:58.666" status="PASS" starttime="20170816 05:14:58.664"></status>
</kw>
<status endtime="20170816 05:14:58.666" status="PASS" starttime="20170816 05:14:58.663"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:14:58.666" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:14:58.666" status="PASS" starttime="20170816 05:14:58.666"></status>
</kw>
<msg timestamp="20170816 05:14:58.667" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:14:58.667" status="PASS" starttime="20170816 05:14:58.391"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:14:58.667" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:14:58.667" status="PASS" starttime="20170816 05:14:58.667"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:14:58.668" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:14:58.668" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:14:58.668" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170816 05:14:58.668" status="PASS" starttime="20170816 05:14:58.668"></status>
</kw>
<msg timestamp="20170816 05:14:58.668" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170816 05:14:58.668" status="PASS" starttime="20170816 05:14:58.391"></status>
</kw>
<msg timestamp="20170816 05:14:58.669" level="INFO">${power_state} = On</msg>
<status endtime="20170816 05:14:58.669" status="PASS" starttime="20170816 05:14:58.390"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170816 05:14:58.669" status="PASS" starttime="20170816 05:14:58.669"></status>
</kw>
<status endtime="20170816 05:14:58.669" status="PASS" starttime="20170816 05:14:58.390"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:14:58.673" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:14:58.674" status="PASS" starttime="20170816 05:14:58.673"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:14:58.674" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:14:58.674" status="PASS" starttime="20170816 05:14:58.674"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:14:58.675" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:14:58.675" status="PASS" starttime="20170816 05:14:58.675"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:14:58.676" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:14:58.676" status="PASS" starttime="20170816 05:14:58.675"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:14:58.864" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:14:58.864" status="PASS" starttime="20170816 05:14:58.676"></status>
</kw>
<msg timestamp="20170816 05:14:58.864" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:14:58.864" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:14:58.864" status="PASS" starttime="20170816 05:14:58.676"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:14:58.865" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:14:58.865" status="PASS" starttime="20170816 05:14:58.865"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:14:58.866" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:14:58.866" status="PASS" starttime="20170816 05:14:58.865"></status>
</kw>
<status endtime="20170816 05:14:58.866" status="PASS" starttime="20170816 05:14:58.672"></status>
</kw>
<status endtime="20170816 05:14:58.866" status="PASS" starttime="20170816 05:14:58.672"></status>
</kw>
<status endtime="20170816 05:14:58.866" status="PASS" starttime="20170816 05:14:58.671"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:14:58.867" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170816 05:14:58.867" status="PASS" starttime="20170816 05:14:58.866"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:14:58.869" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170816 05:14:58.869" status="PASS" starttime="20170816 05:14:58.868"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:14:58.870" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170816 05:14:58.870" status="PASS" starttime="20170816 05:14:58.870"></status>
</kw>
<status endtime="20170816 05:14:58.870" status="PASS" starttime="20170816 05:14:58.869"></status>
</kw>
<status endtime="20170816 05:14:58.870" status="PASS" starttime="20170816 05:14:58.868"></status>
</kw>
<status endtime="20170816 05:14:58.870" status="PASS" starttime="20170816 05:14:58.867"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:14:58.966" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 05:14:58.966" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:14:58.966" status="PASS" starttime="20170816 05:14:58.870"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:14:58.968" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:14:58.968" status="PASS" starttime="20170816 05:14:58.968"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:14:58.969" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:14:58.969" status="PASS" starttime="20170816 05:14:58.969"></status>
</kw>
<status endtime="20170816 05:14:58.969" status="PASS" starttime="20170816 05:14:58.968"></status>
</kw>
<status endtime="20170816 05:14:58.970" status="PASS" starttime="20170816 05:14:58.967"></status>
</kw>
<status endtime="20170816 05:14:58.970" status="PASS" starttime="20170816 05:14:58.967"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:14:58.970" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:14:58.970" status="PASS" starttime="20170816 05:14:58.970"></status>
</kw>
<msg timestamp="20170816 05:14:58.970" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:14:58.970" status="PASS" starttime="20170816 05:14:58.670"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:14:58.971" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:14:58.971" status="PASS" starttime="20170816 05:14:58.971"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:14:58.971" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:14:58.972" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:14:58.972" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170816 05:14:58.972" status="PASS" starttime="20170816 05:14:58.971"></status>
</kw>
<msg timestamp="20170816 05:14:58.972" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170816 05:14:58.972" status="PASS" starttime="20170816 05:14:58.670"></status>
</kw>
<msg timestamp="20170816 05:14:58.972" level="INFO">${host_state} = Running</msg>
<status endtime="20170816 05:14:58.972" status="PASS" starttime="20170816 05:14:58.670"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170816 05:14:58.973" status="PASS" starttime="20170816 05:14:58.973"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:14:58.978" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:14:58.978" status="PASS" starttime="20170816 05:14:58.978"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:14:58.979" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:14:58.979" status="PASS" starttime="20170816 05:14:58.978"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:14:58.979" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:14:58.979" status="PASS" starttime="20170816 05:14:58.979"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:14:58.980" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:14:58.980" status="PASS" starttime="20170816 05:14:58.980"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:14:59.206" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:14:59.206" status="PASS" starttime="20170816 05:14:58.981"></status>
</kw>
<msg timestamp="20170816 05:14:59.206" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:14:59.206" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:14:59.206" status="PASS" starttime="20170816 05:14:58.980"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:14:59.207" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:14:59.207" status="PASS" starttime="20170816 05:14:59.206"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:14:59.207" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:14:59.207" status="PASS" starttime="20170816 05:14:59.207"></status>
</kw>
<status endtime="20170816 05:14:59.208" status="PASS" starttime="20170816 05:14:58.977"></status>
</kw>
<status endtime="20170816 05:14:59.208" status="PASS" starttime="20170816 05:14:58.977"></status>
</kw>
<status endtime="20170816 05:14:59.208" status="PASS" starttime="20170816 05:14:58.976"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:14:59.208" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170816 05:14:59.208" status="PASS" starttime="20170816 05:14:59.208"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:14:59.211" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170816 05:14:59.211" status="PASS" starttime="20170816 05:14:59.210"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:14:59.212" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170816 05:14:59.212" status="PASS" starttime="20170816 05:14:59.212"></status>
</kw>
<status endtime="20170816 05:14:59.212" status="PASS" starttime="20170816 05:14:59.211"></status>
</kw>
<status endtime="20170816 05:14:59.212" status="PASS" starttime="20170816 05:14:59.209"></status>
</kw>
<status endtime="20170816 05:14:59.213" status="PASS" starttime="20170816 05:14:59.209"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:14:59.297" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170816 05:14:59.297" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:14:59.297" status="PASS" starttime="20170816 05:14:59.213"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:14:59.299" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:14:59.299" status="PASS" starttime="20170816 05:14:59.299"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:14:59.300" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:14:59.300" status="PASS" starttime="20170816 05:14:59.300"></status>
</kw>
<status endtime="20170816 05:14:59.300" status="PASS" starttime="20170816 05:14:59.299"></status>
</kw>
<status endtime="20170816 05:14:59.300" status="PASS" starttime="20170816 05:14:59.298"></status>
</kw>
<status endtime="20170816 05:14:59.301" status="PASS" starttime="20170816 05:14:59.298"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:14:59.301" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:14:59.301" status="PASS" starttime="20170816 05:14:59.301"></status>
</kw>
<msg timestamp="20170816 05:14:59.301" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:14:59.301" status="PASS" starttime="20170816 05:14:58.975"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:14:59.302" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:14:59.302" status="PASS" starttime="20170816 05:14:59.301"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:14:59.302" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:14:59.302" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:14:59.303" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170816 05:14:59.303" status="PASS" starttime="20170816 05:14:59.302"></status>
</kw>
<msg timestamp="20170816 05:14:59.303" level="INFO">${state} = Off</msg>
<status endtime="20170816 05:14:59.303" status="PASS" starttime="20170816 05:14:58.975"></status>
</kw>
<msg timestamp="20170816 05:14:59.303" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170816 05:14:59.303" status="PASS" starttime="20170816 05:14:58.974"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170816 05:14:59.304" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170816 05:14:59.304" status="FAIL" starttime="20170816 05:14:59.303"></status>
</kw>
<status endtime="20170816 05:14:59.304" status="FAIL" starttime="20170816 05:14:58.974"></status>
</kw>
<msg timestamp="20170816 05:14:59.304" level="INFO">${status} = False</msg>
<status endtime="20170816 05:14:59.304" status="PASS" starttime="20170816 05:14:58.974"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status endtime="20170816 05:14:59.305" status="PASS" starttime="20170816 05:14:59.304"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:14:59.308" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:14:59.309" status="PASS" starttime="20170816 05:14:59.308"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:14:59.309" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:14:59.309" status="PASS" starttime="20170816 05:14:59.309"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:14:59.310" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:14:59.310" status="PASS" starttime="20170816 05:14:59.310"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:14:59.311" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:14:59.311" status="PASS" starttime="20170816 05:14:59.310"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:14:59.565" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:14:59.565" status="PASS" starttime="20170816 05:14:59.311"></status>
</kw>
<msg timestamp="20170816 05:14:59.565" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:14:59.565" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:14:59.565" status="PASS" starttime="20170816 05:14:59.311"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:14:59.566" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:14:59.566" status="PASS" starttime="20170816 05:14:59.565"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:14:59.566" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:14:59.566" status="PASS" starttime="20170816 05:14:59.566"></status>
</kw>
<status endtime="20170816 05:14:59.567" status="PASS" starttime="20170816 05:14:59.307"></status>
</kw>
<status endtime="20170816 05:14:59.567" status="PASS" starttime="20170816 05:14:59.307"></status>
</kw>
<status endtime="20170816 05:14:59.567" status="PASS" starttime="20170816 05:14:59.307"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:14:59.567" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170816 05:14:59.567" status="PASS" starttime="20170816 05:14:59.567"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:14:59.569" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170816 05:14:59.569" status="PASS" starttime="20170816 05:14:59.569"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:14:59.570" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170816 05:14:59.570" status="PASS" starttime="20170816 05:14:59.570"></status>
</kw>
<status endtime="20170816 05:14:59.571" status="PASS" starttime="20170816 05:14:59.570"></status>
</kw>
<status endtime="20170816 05:14:59.571" status="PASS" starttime="20170816 05:14:59.568"></status>
</kw>
<status endtime="20170816 05:14:59.571" status="PASS" starttime="20170816 05:14:59.568"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:14:59.663" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170816 05:14:59.664" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:14:59.664" status="PASS" starttime="20170816 05:14:59.571"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:14:59.665" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:14:59.666" status="PASS" starttime="20170816 05:14:59.665"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:14:59.666" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:14:59.666" status="PASS" starttime="20170816 05:14:59.666"></status>
</kw>
<status endtime="20170816 05:14:59.667" status="PASS" starttime="20170816 05:14:59.666"></status>
</kw>
<status endtime="20170816 05:14:59.667" status="PASS" starttime="20170816 05:14:59.664"></status>
</kw>
<status endtime="20170816 05:14:59.667" status="PASS" starttime="20170816 05:14:59.664"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:14:59.667" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:14:59.667" status="PASS" starttime="20170816 05:14:59.667"></status>
</kw>
<msg timestamp="20170816 05:14:59.668" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:14:59.668" status="PASS" starttime="20170816 05:14:59.306"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:14:59.668" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:14:59.668" status="PASS" starttime="20170816 05:14:59.668"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:14:59.669" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:14:59.669" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:14:59.669" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit'}</msg>
<status endtime="20170816 05:14:59.669" status="PASS" starttime="20170816 05:14:59.668"></status>
</kw>
<msg timestamp="20170816 05:14:59.669" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170816 05:14:59.669" status="PASS" starttime="20170816 05:14:59.305"></status>
</kw>
<msg timestamp="20170816 05:14:59.669" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170816 05:14:59.670" status="PASS" starttime="20170816 05:14:59.305"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170816 05:14:59.670" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170816 05:14:59.670" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170816 05:14:59.670" status="FAIL" starttime="20170816 05:14:59.670"></status>
</kw>
<status endtime="20170816 05:14:59.670" status="FAIL" starttime="20170816 05:14:58.973"></status>
</kw>
<status endtime="20170816 05:14:59.671" status="FAIL" starttime="20170816 05:14:58.389"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:15:09.676" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:15:09.677" status="PASS" starttime="20170816 05:15:09.676"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:15:09.677" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:15:09.677" status="PASS" starttime="20170816 05:15:09.677"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:15:09.678" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:15:09.678" status="PASS" starttime="20170816 05:15:09.678"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:15:09.679" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:15:09.679" status="PASS" starttime="20170816 05:15:09.678"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:15:09.874" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:15:09.874" status="PASS" starttime="20170816 05:15:09.679"></status>
</kw>
<msg timestamp="20170816 05:15:09.874" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:15:09.874" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:15:09.874" status="PASS" starttime="20170816 05:15:09.679"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:15:09.875" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:15:09.875" status="PASS" starttime="20170816 05:15:09.874"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:15:09.875" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:15:09.875" status="PASS" starttime="20170816 05:15:09.875"></status>
</kw>
<status endtime="20170816 05:15:09.876" status="PASS" starttime="20170816 05:15:09.675"></status>
</kw>
<status endtime="20170816 05:15:09.876" status="PASS" starttime="20170816 05:15:09.675"></status>
</kw>
<status endtime="20170816 05:15:09.876" status="PASS" starttime="20170816 05:15:09.674"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:15:09.876" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170816 05:15:09.877" status="PASS" starttime="20170816 05:15:09.876"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:15:09.879" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170816 05:15:09.879" status="PASS" starttime="20170816 05:15:09.878"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:15:09.880" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170816 05:15:09.880" status="PASS" starttime="20170816 05:15:09.879"></status>
</kw>
<status endtime="20170816 05:15:09.880" status="PASS" starttime="20170816 05:15:09.879"></status>
</kw>
<status endtime="20170816 05:15:09.880" status="PASS" starttime="20170816 05:15:09.877"></status>
</kw>
<status endtime="20170816 05:15:09.880" status="PASS" starttime="20170816 05:15:09.877"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:15:09.944" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 05:15:09.944" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:15:09.944" status="PASS" starttime="20170816 05:15:09.880"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:15:09.946" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:15:09.946" status="PASS" starttime="20170816 05:15:09.945"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:15:09.947" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:15:09.947" status="PASS" starttime="20170816 05:15:09.946"></status>
</kw>
<status endtime="20170816 05:15:09.947" status="PASS" starttime="20170816 05:15:09.946"></status>
</kw>
<status endtime="20170816 05:15:09.947" status="PASS" starttime="20170816 05:15:09.945"></status>
</kw>
<status endtime="20170816 05:15:09.947" status="PASS" starttime="20170816 05:15:09.944"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:15:09.948" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:15:09.948" status="PASS" starttime="20170816 05:15:09.948"></status>
</kw>
<msg timestamp="20170816 05:15:09.948" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:15:09.948" status="PASS" starttime="20170816 05:15:09.673"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:15:09.949" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:15:09.949" status="PASS" starttime="20170816 05:15:09.948"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:15:09.949" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:15:09.949" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:15:09.949" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170816 05:15:09.950" status="PASS" starttime="20170816 05:15:09.949"></status>
</kw>
<msg timestamp="20170816 05:15:09.950" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170816 05:15:09.950" status="PASS" starttime="20170816 05:15:09.673"></status>
</kw>
<msg timestamp="20170816 05:15:09.950" level="INFO">${power_state} = On</msg>
<status endtime="20170816 05:15:09.950" status="PASS" starttime="20170816 05:15:09.672"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170816 05:15:09.951" status="PASS" starttime="20170816 05:15:09.950"></status>
</kw>
<status endtime="20170816 05:15:09.951" status="PASS" starttime="20170816 05:15:09.672"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:15:09.954" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:15:09.955" status="PASS" starttime="20170816 05:15:09.954"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:15:09.955" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:15:09.955" status="PASS" starttime="20170816 05:15:09.955"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:15:09.957" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:15:09.957" status="PASS" starttime="20170816 05:15:09.956"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:15:09.958" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:15:09.958" status="PASS" starttime="20170816 05:15:09.957"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:15:10.239" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:15:10.239" status="PASS" starttime="20170816 05:15:09.959"></status>
</kw>
<msg timestamp="20170816 05:15:10.239" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:15:10.239" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:15:10.239" status="PASS" starttime="20170816 05:15:09.958"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:15:10.240" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:15:10.240" status="PASS" starttime="20170816 05:15:10.239"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:15:10.240" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:15:10.241" status="PASS" starttime="20170816 05:15:10.240"></status>
</kw>
<status endtime="20170816 05:15:10.241" status="PASS" starttime="20170816 05:15:09.954"></status>
</kw>
<status endtime="20170816 05:15:10.241" status="PASS" starttime="20170816 05:15:09.953"></status>
</kw>
<status endtime="20170816 05:15:10.241" status="PASS" starttime="20170816 05:15:09.953"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:15:10.242" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170816 05:15:10.242" status="PASS" starttime="20170816 05:15:10.241"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:15:10.244" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170816 05:15:10.244" status="PASS" starttime="20170816 05:15:10.243"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:15:10.245" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170816 05:15:10.245" status="PASS" starttime="20170816 05:15:10.245"></status>
</kw>
<status endtime="20170816 05:15:10.245" status="PASS" starttime="20170816 05:15:10.244"></status>
</kw>
<status endtime="20170816 05:15:10.245" status="PASS" starttime="20170816 05:15:10.242"></status>
</kw>
<status endtime="20170816 05:15:10.245" status="PASS" starttime="20170816 05:15:10.242"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:15:10.336" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 05:15:10.336" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:15:10.336" status="PASS" starttime="20170816 05:15:10.246"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:15:10.338" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:15:10.338" status="PASS" starttime="20170816 05:15:10.338"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:15:10.339" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:15:10.339" status="PASS" starttime="20170816 05:15:10.339"></status>
</kw>
<status endtime="20170816 05:15:10.339" status="PASS" starttime="20170816 05:15:10.338"></status>
</kw>
<status endtime="20170816 05:15:10.340" status="PASS" starttime="20170816 05:15:10.337"></status>
</kw>
<status endtime="20170816 05:15:10.340" status="PASS" starttime="20170816 05:15:10.337"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:15:10.340" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:15:10.340" status="PASS" starttime="20170816 05:15:10.340"></status>
</kw>
<msg timestamp="20170816 05:15:10.340" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:15:10.340" status="PASS" starttime="20170816 05:15:09.952"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:15:10.341" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:15:10.341" status="PASS" starttime="20170816 05:15:10.341"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:15:10.341" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:15:10.342" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:15:10.342" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170816 05:15:10.342" status="PASS" starttime="20170816 05:15:10.341"></status>
</kw>
<msg timestamp="20170816 05:15:10.342" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170816 05:15:10.342" status="PASS" starttime="20170816 05:15:09.951"></status>
</kw>
<msg timestamp="20170816 05:15:10.342" level="INFO">${host_state} = Running</msg>
<status endtime="20170816 05:15:10.342" status="PASS" starttime="20170816 05:15:09.951"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170816 05:15:10.343" status="PASS" starttime="20170816 05:15:10.343"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:15:10.347" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:15:10.348" status="PASS" starttime="20170816 05:15:10.347"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:15:10.349" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:15:10.349" status="PASS" starttime="20170816 05:15:10.348"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:15:10.349" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:15:10.349" status="PASS" starttime="20170816 05:15:10.349"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:15:10.350" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:15:10.350" status="PASS" starttime="20170816 05:15:10.350"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:15:10.540" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:15:10.540" status="PASS" starttime="20170816 05:15:10.351"></status>
</kw>
<msg timestamp="20170816 05:15:10.540" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:15:10.541" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:15:10.541" status="PASS" starttime="20170816 05:15:10.350"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:15:10.541" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:15:10.541" status="PASS" starttime="20170816 05:15:10.541"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:15:10.542" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:15:10.542" status="PASS" starttime="20170816 05:15:10.542"></status>
</kw>
<status endtime="20170816 05:15:10.542" status="PASS" starttime="20170816 05:15:10.347"></status>
</kw>
<status endtime="20170816 05:15:10.542" status="PASS" starttime="20170816 05:15:10.346"></status>
</kw>
<status endtime="20170816 05:15:10.542" status="PASS" starttime="20170816 05:15:10.346"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:15:10.543" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170816 05:15:10.543" status="PASS" starttime="20170816 05:15:10.543"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:15:10.545" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170816 05:15:10.545" status="PASS" starttime="20170816 05:15:10.544"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:15:10.546" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170816 05:15:10.546" status="PASS" starttime="20170816 05:15:10.546"></status>
</kw>
<status endtime="20170816 05:15:10.546" status="PASS" starttime="20170816 05:15:10.545"></status>
</kw>
<status endtime="20170816 05:15:10.546" status="PASS" starttime="20170816 05:15:10.544"></status>
</kw>
<status endtime="20170816 05:15:10.546" status="PASS" starttime="20170816 05:15:10.543"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:15:10.624" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170816 05:15:10.624" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:15:10.624" status="PASS" starttime="20170816 05:15:10.547"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:15:10.626" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:15:10.626" status="PASS" starttime="20170816 05:15:10.625"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:15:10.626" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:15:10.627" status="PASS" starttime="20170816 05:15:10.626"></status>
</kw>
<status endtime="20170816 05:15:10.627" status="PASS" starttime="20170816 05:15:10.626"></status>
</kw>
<status endtime="20170816 05:15:10.627" status="PASS" starttime="20170816 05:15:10.625"></status>
</kw>
<status endtime="20170816 05:15:10.627" status="PASS" starttime="20170816 05:15:10.624"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:15:10.627" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:15:10.627" status="PASS" starttime="20170816 05:15:10.627"></status>
</kw>
<msg timestamp="20170816 05:15:10.628" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:15:10.628" status="PASS" starttime="20170816 05:15:10.345"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:15:10.628" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:15:10.628" status="PASS" starttime="20170816 05:15:10.628"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:15:10.629" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:15:10.629" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:15:10.629" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170816 05:15:10.629" status="PASS" starttime="20170816 05:15:10.628"></status>
</kw>
<msg timestamp="20170816 05:15:10.629" level="INFO">${state} = Off</msg>
<status endtime="20170816 05:15:10.629" status="PASS" starttime="20170816 05:15:10.344"></status>
</kw>
<msg timestamp="20170816 05:15:10.630" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170816 05:15:10.630" status="PASS" starttime="20170816 05:15:10.344"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170816 05:15:10.631" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170816 05:15:10.631" status="FAIL" starttime="20170816 05:15:10.630"></status>
</kw>
<status endtime="20170816 05:15:10.631" status="FAIL" starttime="20170816 05:15:10.344"></status>
</kw>
<msg timestamp="20170816 05:15:10.631" level="INFO">${status} = False</msg>
<status endtime="20170816 05:15:10.631" status="PASS" starttime="20170816 05:15:10.343"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status endtime="20170816 05:15:10.632" status="PASS" starttime="20170816 05:15:10.631"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:15:10.636" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:15:10.636" status="PASS" starttime="20170816 05:15:10.635"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:15:10.637" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:15:10.637" status="PASS" starttime="20170816 05:15:10.636"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:15:10.637" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:15:10.637" status="PASS" starttime="20170816 05:15:10.637"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:15:10.638" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:15:10.638" status="PASS" starttime="20170816 05:15:10.638"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:15:10.826" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:15:10.827" status="PASS" starttime="20170816 05:15:10.639"></status>
</kw>
<msg timestamp="20170816 05:15:10.827" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:15:10.827" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:15:10.827" status="PASS" starttime="20170816 05:15:10.638"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:15:10.827" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:15:10.828" status="PASS" starttime="20170816 05:15:10.827"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:15:10.828" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:15:10.828" status="PASS" starttime="20170816 05:15:10.828"></status>
</kw>
<status endtime="20170816 05:15:10.828" status="PASS" starttime="20170816 05:15:10.635"></status>
</kw>
<status endtime="20170816 05:15:10.828" status="PASS" starttime="20170816 05:15:10.635"></status>
</kw>
<status endtime="20170816 05:15:10.829" status="PASS" starttime="20170816 05:15:10.634"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:15:10.829" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170816 05:15:10.829" status="PASS" starttime="20170816 05:15:10.829"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:15:10.831" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170816 05:15:10.831" status="PASS" starttime="20170816 05:15:10.831"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:15:10.833" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170816 05:15:10.833" status="PASS" starttime="20170816 05:15:10.832"></status>
</kw>
<status endtime="20170816 05:15:10.833" status="PASS" starttime="20170816 05:15:10.832"></status>
</kw>
<status endtime="20170816 05:15:10.833" status="PASS" starttime="20170816 05:15:10.830"></status>
</kw>
<status endtime="20170816 05:15:10.833" status="PASS" starttime="20170816 05:15:10.829"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:15:10.924" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170816 05:15:10.924" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:15:10.924" status="PASS" starttime="20170816 05:15:10.833"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:15:10.929" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:15:10.929" status="PASS" starttime="20170816 05:15:10.929"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:15:10.930" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:15:10.930" status="PASS" starttime="20170816 05:15:10.930"></status>
</kw>
<status endtime="20170816 05:15:10.930" status="PASS" starttime="20170816 05:15:10.929"></status>
</kw>
<status endtime="20170816 05:15:10.930" status="PASS" starttime="20170816 05:15:10.925"></status>
</kw>
<status endtime="20170816 05:15:10.930" status="PASS" starttime="20170816 05:15:10.925"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:15:10.931" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:15:10.931" status="PASS" starttime="20170816 05:15:10.931"></status>
</kw>
<msg timestamp="20170816 05:15:10.931" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:15:10.931" status="PASS" starttime="20170816 05:15:10.633"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:15:10.932" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:15:10.932" status="PASS" starttime="20170816 05:15:10.931"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:15:10.932" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:15:10.932" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:15:10.933" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit'}</msg>
<status endtime="20170816 05:15:10.933" status="PASS" starttime="20170816 05:15:10.932"></status>
</kw>
<msg timestamp="20170816 05:15:10.933" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170816 05:15:10.933" status="PASS" starttime="20170816 05:15:10.632"></status>
</kw>
<msg timestamp="20170816 05:15:10.933" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170816 05:15:10.933" status="PASS" starttime="20170816 05:15:10.632"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170816 05:15:10.934" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170816 05:15:10.935" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170816 05:15:10.935" status="FAIL" starttime="20170816 05:15:10.934"></status>
</kw>
<status endtime="20170816 05:15:10.935" status="FAIL" starttime="20170816 05:15:10.343"></status>
</kw>
<status endtime="20170816 05:15:10.935" status="FAIL" starttime="20170816 05:15:09.671"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:15:20.940" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:15:20.941" status="PASS" starttime="20170816 05:15:20.940"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:15:20.941" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:15:20.941" status="PASS" starttime="20170816 05:15:20.941"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:15:20.942" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:15:20.942" status="PASS" starttime="20170816 05:15:20.942"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:15:20.943" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:15:20.943" status="PASS" starttime="20170816 05:15:20.942"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:15:21.510" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:15:21.510" status="PASS" starttime="20170816 05:15:20.943"></status>
</kw>
<msg timestamp="20170816 05:15:21.510" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:15:21.510" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:15:21.510" status="PASS" starttime="20170816 05:15:20.943"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:15:21.511" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:15:21.511" status="PASS" starttime="20170816 05:15:21.510"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:15:21.511" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:15:21.511" status="PASS" starttime="20170816 05:15:21.511"></status>
</kw>
<status endtime="20170816 05:15:21.512" status="PASS" starttime="20170816 05:15:20.939"></status>
</kw>
<status endtime="20170816 05:15:21.512" status="PASS" starttime="20170816 05:15:20.939"></status>
</kw>
<status endtime="20170816 05:15:21.512" status="PASS" starttime="20170816 05:15:20.938"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:15:21.512" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170816 05:15:21.512" status="PASS" starttime="20170816 05:15:21.512"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:15:21.515" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170816 05:15:21.515" status="PASS" starttime="20170816 05:15:21.514"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:15:21.515" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170816 05:15:21.516" status="PASS" starttime="20170816 05:15:21.515"></status>
</kw>
<status endtime="20170816 05:15:21.516" status="PASS" starttime="20170816 05:15:21.515"></status>
</kw>
<status endtime="20170816 05:15:21.516" status="PASS" starttime="20170816 05:15:21.513"></status>
</kw>
<status endtime="20170816 05:15:21.516" status="PASS" starttime="20170816 05:15:21.513"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:15:21.717" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 05:15:21.717" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:15:21.717" status="PASS" starttime="20170816 05:15:21.516"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:15:21.719" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:15:21.719" status="PASS" starttime="20170816 05:15:21.719"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:15:21.721" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:15:21.721" status="PASS" starttime="20170816 05:15:21.720"></status>
</kw>
<status endtime="20170816 05:15:21.721" status="PASS" starttime="20170816 05:15:21.719"></status>
</kw>
<status endtime="20170816 05:15:21.721" status="PASS" starttime="20170816 05:15:21.718"></status>
</kw>
<status endtime="20170816 05:15:21.721" status="PASS" starttime="20170816 05:15:21.718"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:15:21.721" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:15:21.721" status="PASS" starttime="20170816 05:15:21.721"></status>
</kw>
<msg timestamp="20170816 05:15:21.722" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:15:21.722" status="PASS" starttime="20170816 05:15:20.938"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:15:21.722" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:15:21.722" status="PASS" starttime="20170816 05:15:21.722"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:15:21.723" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:15:21.723" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:15:21.723" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170816 05:15:21.723" status="PASS" starttime="20170816 05:15:21.723"></status>
</kw>
<msg timestamp="20170816 05:15:21.723" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170816 05:15:21.724" status="PASS" starttime="20170816 05:15:20.937"></status>
</kw>
<msg timestamp="20170816 05:15:21.724" level="INFO">${power_state} = On</msg>
<status endtime="20170816 05:15:21.724" status="PASS" starttime="20170816 05:15:20.937"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170816 05:15:21.724" status="PASS" starttime="20170816 05:15:21.724"></status>
</kw>
<status endtime="20170816 05:15:21.724" status="PASS" starttime="20170816 05:15:20.936"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:15:21.728" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:15:21.729" status="PASS" starttime="20170816 05:15:21.728"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:15:21.729" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:15:21.729" status="PASS" starttime="20170816 05:15:21.729"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:15:21.730" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:15:21.730" status="PASS" starttime="20170816 05:15:21.730"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:15:21.731" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:15:21.731" status="PASS" starttime="20170816 05:15:21.730"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:15:22.336" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:15:22.336" status="PASS" starttime="20170816 05:15:21.731"></status>
</kw>
<msg timestamp="20170816 05:15:22.337" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:15:22.337" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:15:22.337" status="PASS" starttime="20170816 05:15:21.731"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:15:22.337" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:15:22.337" status="PASS" starttime="20170816 05:15:22.337"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:15:22.338" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:15:22.338" status="PASS" starttime="20170816 05:15:22.338"></status>
</kw>
<status endtime="20170816 05:15:22.338" status="PASS" starttime="20170816 05:15:21.727"></status>
</kw>
<status endtime="20170816 05:15:22.338" status="PASS" starttime="20170816 05:15:21.727"></status>
</kw>
<status endtime="20170816 05:15:22.338" status="PASS" starttime="20170816 05:15:21.726"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:15:22.339" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170816 05:15:22.339" status="PASS" starttime="20170816 05:15:22.339"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:15:22.341" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170816 05:15:22.341" status="PASS" starttime="20170816 05:15:22.341"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:15:22.342" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170816 05:15:22.342" status="PASS" starttime="20170816 05:15:22.342"></status>
</kw>
<status endtime="20170816 05:15:22.342" status="PASS" starttime="20170816 05:15:22.341"></status>
</kw>
<status endtime="20170816 05:15:22.343" status="PASS" starttime="20170816 05:15:22.340"></status>
</kw>
<status endtime="20170816 05:15:22.343" status="PASS" starttime="20170816 05:15:22.339"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:15:22.814" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 05:15:22.815" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:15:22.815" status="PASS" starttime="20170816 05:15:22.343"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:15:22.816" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:15:22.816" status="PASS" starttime="20170816 05:15:22.816"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:15:22.817" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:15:22.817" status="PASS" starttime="20170816 05:15:22.817"></status>
</kw>
<status endtime="20170816 05:15:22.818" status="PASS" starttime="20170816 05:15:22.817"></status>
</kw>
<status endtime="20170816 05:15:22.818" status="PASS" starttime="20170816 05:15:22.815"></status>
</kw>
<status endtime="20170816 05:15:22.818" status="PASS" starttime="20170816 05:15:22.815"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:15:22.818" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:15:22.818" status="PASS" starttime="20170816 05:15:22.818"></status>
</kw>
<msg timestamp="20170816 05:15:22.818" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:15:22.818" status="PASS" starttime="20170816 05:15:21.726"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:15:22.819" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:15:22.819" status="PASS" starttime="20170816 05:15:22.819"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:15:22.820" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:15:22.820" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:15:22.820" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170816 05:15:22.820" status="PASS" starttime="20170816 05:15:22.820"></status>
</kw>
<msg timestamp="20170816 05:15:22.821" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170816 05:15:22.821" status="PASS" starttime="20170816 05:15:21.725"></status>
</kw>
<msg timestamp="20170816 05:15:22.821" level="INFO">${host_state} = Running</msg>
<status endtime="20170816 05:15:22.821" status="PASS" starttime="20170816 05:15:21.725"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170816 05:15:22.822" status="PASS" starttime="20170816 05:15:22.821"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:15:22.827" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:15:22.827" status="PASS" starttime="20170816 05:15:22.826"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:15:22.828" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:15:22.828" status="PASS" starttime="20170816 05:15:22.827"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:15:22.828" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:15:22.828" status="PASS" starttime="20170816 05:15:22.828"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:15:22.829" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:15:22.829" status="PASS" starttime="20170816 05:15:22.829"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:15:25.485" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:15:25.485" status="PASS" starttime="20170816 05:15:22.830"></status>
</kw>
<msg timestamp="20170816 05:15:25.485" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:15:25.485" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:15:25.485" status="PASS" starttime="20170816 05:15:22.829"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:15:25.486" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:15:25.486" status="PASS" starttime="20170816 05:15:25.486"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:15:25.487" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:15:25.487" status="PASS" starttime="20170816 05:15:25.486"></status>
</kw>
<status endtime="20170816 05:15:25.487" status="PASS" starttime="20170816 05:15:22.826"></status>
</kw>
<status endtime="20170816 05:15:25.487" status="PASS" starttime="20170816 05:15:22.825"></status>
</kw>
<status endtime="20170816 05:15:25.487" status="PASS" starttime="20170816 05:15:22.825"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:15:25.488" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170816 05:15:25.488" status="PASS" starttime="20170816 05:15:25.487"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:15:25.490" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170816 05:15:25.490" status="PASS" starttime="20170816 05:15:25.489"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:15:25.491" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170816 05:15:25.491" status="PASS" starttime="20170816 05:15:25.491"></status>
</kw>
<status endtime="20170816 05:15:25.491" status="PASS" starttime="20170816 05:15:25.490"></status>
</kw>
<status endtime="20170816 05:15:25.492" status="PASS" starttime="20170816 05:15:25.489"></status>
</kw>
<status endtime="20170816 05:15:25.492" status="PASS" starttime="20170816 05:15:25.488"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:15:35.504" level="WARN">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ReadTimeoutError("HTTPSConnectionPool(host='9.41.166.169', port=443): Read timed out. (read timeout=10.0)",)': /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<msg timestamp="20170816 05:15:46.232" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170816 05:15:46.232" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:15:46.233" status="PASS" starttime="20170816 05:15:25.492"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:15:46.235" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:15:46.235" status="PASS" starttime="20170816 05:15:46.234"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:15:46.236" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:15:46.236" status="PASS" starttime="20170816 05:15:46.236"></status>
</kw>
<status endtime="20170816 05:15:46.236" status="PASS" starttime="20170816 05:15:46.235"></status>
</kw>
<status endtime="20170816 05:15:46.236" status="PASS" starttime="20170816 05:15:46.234"></status>
</kw>
<status endtime="20170816 05:15:46.236" status="PASS" starttime="20170816 05:15:46.233"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:15:46.237" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:15:46.237" status="PASS" starttime="20170816 05:15:46.237"></status>
</kw>
<msg timestamp="20170816 05:15:46.237" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:15:46.237" status="PASS" starttime="20170816 05:15:22.824"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:15:46.238" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:15:46.238" status="PASS" starttime="20170816 05:15:46.237"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:15:46.238" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:15:46.238" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:15:46.238" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170816 05:15:46.239" status="PASS" starttime="20170816 05:15:46.238"></status>
</kw>
<msg timestamp="20170816 05:15:46.239" level="INFO">${state} = Off</msg>
<status endtime="20170816 05:15:46.239" status="PASS" starttime="20170816 05:15:22.824"></status>
</kw>
<msg timestamp="20170816 05:15:46.239" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170816 05:15:46.239" status="PASS" starttime="20170816 05:15:22.823"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170816 05:15:46.240" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170816 05:15:46.240" status="FAIL" starttime="20170816 05:15:46.239"></status>
</kw>
<status endtime="20170816 05:15:46.240" status="FAIL" starttime="20170816 05:15:22.822"></status>
</kw>
<msg timestamp="20170816 05:15:46.240" level="INFO">${status} = False</msg>
<status endtime="20170816 05:15:46.240" status="PASS" starttime="20170816 05:15:22.822"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status endtime="20170816 05:15:46.241" status="PASS" starttime="20170816 05:15:46.240"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:15:46.244" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:15:46.245" status="PASS" starttime="20170816 05:15:46.244"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:15:46.245" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:15:46.245" status="PASS" starttime="20170816 05:15:46.245"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:15:46.246" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:15:46.246" status="PASS" starttime="20170816 05:15:46.246"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:15:46.247" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:15:46.247" status="PASS" starttime="20170816 05:15:46.246"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:15:46.724" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:15:46.725" status="PASS" starttime="20170816 05:15:46.247"></status>
</kw>
<msg timestamp="20170816 05:15:46.725" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:15:46.725" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:15:46.725" status="PASS" starttime="20170816 05:15:46.247"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:15:46.726" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:15:46.726" status="PASS" starttime="20170816 05:15:46.725"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:15:46.726" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:15:46.726" status="PASS" starttime="20170816 05:15:46.726"></status>
</kw>
<status endtime="20170816 05:15:46.726" status="PASS" starttime="20170816 05:15:46.243"></status>
</kw>
<status endtime="20170816 05:15:46.727" status="PASS" starttime="20170816 05:15:46.243"></status>
</kw>
<status endtime="20170816 05:15:46.727" status="PASS" starttime="20170816 05:15:46.242"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:15:46.727" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170816 05:15:46.727" status="PASS" starttime="20170816 05:15:46.727"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:15:46.729" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170816 05:15:46.729" status="PASS" starttime="20170816 05:15:46.729"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:15:46.730" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170816 05:15:46.730" status="PASS" starttime="20170816 05:15:46.730"></status>
</kw>
<status endtime="20170816 05:15:46.731" status="PASS" starttime="20170816 05:15:46.730"></status>
</kw>
<status endtime="20170816 05:15:46.731" status="PASS" starttime="20170816 05:15:46.728"></status>
</kw>
<status endtime="20170816 05:15:46.731" status="PASS" starttime="20170816 05:15:46.728"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:15:47.237" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170816 05:15:47.238" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:15:47.238" status="PASS" starttime="20170816 05:15:46.731"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:15:47.240" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:15:47.240" status="PASS" starttime="20170816 05:15:47.239"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:15:47.241" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:15:47.241" status="PASS" starttime="20170816 05:15:47.240"></status>
</kw>
<status endtime="20170816 05:15:47.241" status="PASS" starttime="20170816 05:15:47.240"></status>
</kw>
<status endtime="20170816 05:15:47.241" status="PASS" starttime="20170816 05:15:47.239"></status>
</kw>
<status endtime="20170816 05:15:47.241" status="PASS" starttime="20170816 05:15:47.238"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:15:47.241" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:15:47.242" status="PASS" starttime="20170816 05:15:47.241"></status>
</kw>
<msg timestamp="20170816 05:15:47.242" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:15:47.242" status="PASS" starttime="20170816 05:15:46.242"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:15:47.242" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:15:47.243" status="PASS" starttime="20170816 05:15:47.242"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:15:47.243" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:15:47.243" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:15:47.243" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit'}</msg>
<status endtime="20170816 05:15:47.243" status="PASS" starttime="20170816 05:15:47.243"></status>
</kw>
<msg timestamp="20170816 05:15:47.244" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170816 05:15:47.244" status="PASS" starttime="20170816 05:15:46.241"></status>
</kw>
<msg timestamp="20170816 05:15:47.244" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170816 05:15:47.244" status="PASS" starttime="20170816 05:15:46.241"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170816 05:15:47.244" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170816 05:15:47.245" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170816 05:15:47.245" status="FAIL" starttime="20170816 05:15:47.244"></status>
</kw>
<status endtime="20170816 05:15:47.245" status="FAIL" starttime="20170816 05:15:22.822"></status>
</kw>
<status endtime="20170816 05:15:47.245" status="FAIL" starttime="20170816 05:15:20.936"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:15:57.251" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:15:57.251" status="PASS" starttime="20170816 05:15:57.251"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:15:57.252" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:15:57.252" status="PASS" starttime="20170816 05:15:57.252"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:15:57.253" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:15:57.253" status="PASS" starttime="20170816 05:15:57.252"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:15:57.253" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:15:57.253" status="PASS" starttime="20170816 05:15:57.253"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:15:57.737" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:15:57.737" status="PASS" starttime="20170816 05:15:57.254"></status>
</kw>
<msg timestamp="20170816 05:15:57.737" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:15:57.737" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:15:57.737" status="PASS" starttime="20170816 05:15:57.254"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:15:57.738" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:15:57.738" status="PASS" starttime="20170816 05:15:57.737"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:15:57.738" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:15:57.739" status="PASS" starttime="20170816 05:15:57.738"></status>
</kw>
<status endtime="20170816 05:15:57.739" status="PASS" starttime="20170816 05:15:57.249"></status>
</kw>
<status endtime="20170816 05:15:57.739" status="PASS" starttime="20170816 05:15:57.249"></status>
</kw>
<status endtime="20170816 05:15:57.739" status="PASS" starttime="20170816 05:15:57.248"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:15:57.739" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170816 05:15:57.739" status="PASS" starttime="20170816 05:15:57.739"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:15:57.742" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170816 05:15:57.742" status="PASS" starttime="20170816 05:15:57.741"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:15:57.742" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170816 05:15:57.743" status="PASS" starttime="20170816 05:15:57.742"></status>
</kw>
<status endtime="20170816 05:15:57.743" status="PASS" starttime="20170816 05:15:57.742"></status>
</kw>
<status endtime="20170816 05:15:57.743" status="PASS" starttime="20170816 05:15:57.740"></status>
</kw>
<status endtime="20170816 05:15:57.743" status="PASS" starttime="20170816 05:15:57.740"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:15:58.056" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 05:15:58.056" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:15:58.056" status="PASS" starttime="20170816 05:15:57.743"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:15:58.058" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:15:58.058" status="PASS" starttime="20170816 05:15:58.057"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:15:58.059" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:15:58.059" status="PASS" starttime="20170816 05:15:58.059"></status>
</kw>
<status endtime="20170816 05:15:58.059" status="PASS" starttime="20170816 05:15:58.058"></status>
</kw>
<status endtime="20170816 05:15:58.060" status="PASS" starttime="20170816 05:15:58.057"></status>
</kw>
<status endtime="20170816 05:15:58.060" status="PASS" starttime="20170816 05:15:58.056"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:15:58.060" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:15:58.060" status="PASS" starttime="20170816 05:15:58.060"></status>
</kw>
<msg timestamp="20170816 05:15:58.060" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:15:58.060" status="PASS" starttime="20170816 05:15:57.248"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:15:58.061" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:15:58.061" status="PASS" starttime="20170816 05:15:58.061"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:15:58.062" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:15:58.062" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:15:58.062" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170816 05:15:58.062" status="PASS" starttime="20170816 05:15:58.061"></status>
</kw>
<msg timestamp="20170816 05:15:58.062" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170816 05:15:58.062" status="PASS" starttime="20170816 05:15:57.247"></status>
</kw>
<msg timestamp="20170816 05:15:58.062" level="INFO">${power_state} = On</msg>
<status endtime="20170816 05:15:58.062" status="PASS" starttime="20170816 05:15:57.247"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170816 05:15:58.063" status="PASS" starttime="20170816 05:15:58.063"></status>
</kw>
<status endtime="20170816 05:15:58.063" status="PASS" starttime="20170816 05:15:57.246"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:15:58.067" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:15:58.067" status="PASS" starttime="20170816 05:15:58.066"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:15:58.068" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:15:58.068" status="PASS" starttime="20170816 05:15:58.067"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:15:58.068" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:15:58.068" status="PASS" starttime="20170816 05:15:58.068"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:15:58.069" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:15:58.069" status="PASS" starttime="20170816 05:15:58.068"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:15:58.269" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:15:58.269" status="PASS" starttime="20170816 05:15:58.070"></status>
</kw>
<msg timestamp="20170816 05:15:58.269" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:15:58.270" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:15:58.270" status="PASS" starttime="20170816 05:15:58.069"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:15:58.270" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:15:58.270" status="PASS" starttime="20170816 05:15:58.270"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:15:58.271" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:15:58.271" status="PASS" starttime="20170816 05:15:58.271"></status>
</kw>
<status endtime="20170816 05:15:58.271" status="PASS" starttime="20170816 05:15:58.066"></status>
</kw>
<status endtime="20170816 05:15:58.271" status="PASS" starttime="20170816 05:15:58.065"></status>
</kw>
<status endtime="20170816 05:15:58.271" status="PASS" starttime="20170816 05:15:58.065"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:15:58.272" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170816 05:15:58.272" status="PASS" starttime="20170816 05:15:58.272"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:15:58.274" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170816 05:15:58.274" status="PASS" starttime="20170816 05:15:58.273"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:15:58.275" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170816 05:15:58.275" status="PASS" starttime="20170816 05:15:58.275"></status>
</kw>
<status endtime="20170816 05:15:58.276" status="PASS" starttime="20170816 05:15:58.275"></status>
</kw>
<status endtime="20170816 05:15:58.276" status="PASS" starttime="20170816 05:15:58.273"></status>
</kw>
<status endtime="20170816 05:15:58.276" status="PASS" starttime="20170816 05:15:58.272"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:15:58.365" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 05:15:58.366" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:15:58.366" status="PASS" starttime="20170816 05:15:58.276"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:15:58.368" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:15:58.368" status="PASS" starttime="20170816 05:15:58.367"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:15:58.368" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:15:58.369" status="PASS" starttime="20170816 05:15:58.368"></status>
</kw>
<status endtime="20170816 05:15:58.369" status="PASS" starttime="20170816 05:15:58.368"></status>
</kw>
<status endtime="20170816 05:15:58.369" status="PASS" starttime="20170816 05:15:58.367"></status>
</kw>
<status endtime="20170816 05:15:58.369" status="PASS" starttime="20170816 05:15:58.366"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:15:58.369" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:15:58.369" status="PASS" starttime="20170816 05:15:58.369"></status>
</kw>
<msg timestamp="20170816 05:15:58.370" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:15:58.370" status="PASS" starttime="20170816 05:15:58.064"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:15:58.370" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:15:58.370" status="PASS" starttime="20170816 05:15:58.370"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:15:58.371" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:15:58.371" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:15:58.371" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170816 05:15:58.371" status="PASS" starttime="20170816 05:15:58.371"></status>
</kw>
<msg timestamp="20170816 05:15:58.371" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170816 05:15:58.371" status="PASS" starttime="20170816 05:15:58.064"></status>
</kw>
<msg timestamp="20170816 05:15:58.372" level="INFO">${host_state} = Running</msg>
<status endtime="20170816 05:15:58.372" status="PASS" starttime="20170816 05:15:58.063"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170816 05:15:58.372" status="PASS" starttime="20170816 05:15:58.372"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:15:58.377" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:15:58.378" status="PASS" starttime="20170816 05:15:58.377"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:15:58.378" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:15:58.378" status="PASS" starttime="20170816 05:15:58.378"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:15:58.379" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:15:58.379" status="PASS" starttime="20170816 05:15:58.379"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:15:58.380" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:15:58.380" status="PASS" starttime="20170816 05:15:58.379"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:15:58.557" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:15:58.557" status="PASS" starttime="20170816 05:15:58.380"></status>
</kw>
<msg timestamp="20170816 05:15:58.557" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:15:58.557" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:15:58.557" status="PASS" starttime="20170816 05:15:58.380"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:15:58.558" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:15:58.558" status="PASS" starttime="20170816 05:15:58.557"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:15:58.558" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:15:58.558" status="PASS" starttime="20170816 05:15:58.558"></status>
</kw>
<status endtime="20170816 05:15:58.559" status="PASS" starttime="20170816 05:15:58.376"></status>
</kw>
<status endtime="20170816 05:15:58.559" status="PASS" starttime="20170816 05:15:58.376"></status>
</kw>
<status endtime="20170816 05:15:58.559" status="PASS" starttime="20170816 05:15:58.375"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:15:58.559" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170816 05:15:58.559" status="PASS" starttime="20170816 05:15:58.559"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:15:58.562" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170816 05:15:58.562" status="PASS" starttime="20170816 05:15:58.561"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:15:58.562" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170816 05:15:58.563" status="PASS" starttime="20170816 05:15:58.562"></status>
</kw>
<status endtime="20170816 05:15:58.563" status="PASS" starttime="20170816 05:15:58.562"></status>
</kw>
<status endtime="20170816 05:15:58.563" status="PASS" starttime="20170816 05:15:58.560"></status>
</kw>
<status endtime="20170816 05:15:58.563" status="PASS" starttime="20170816 05:15:58.560"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:15:58.641" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170816 05:15:58.641" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:15:58.641" status="PASS" starttime="20170816 05:15:58.563"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:15:58.643" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:15:58.643" status="PASS" starttime="20170816 05:15:58.642"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:15:58.644" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:15:58.644" status="PASS" starttime="20170816 05:15:58.643"></status>
</kw>
<status endtime="20170816 05:15:58.644" status="PASS" starttime="20170816 05:15:58.643"></status>
</kw>
<status endtime="20170816 05:15:58.644" status="PASS" starttime="20170816 05:15:58.642"></status>
</kw>
<status endtime="20170816 05:15:58.644" status="PASS" starttime="20170816 05:15:58.641"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:15:58.644" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:15:58.645" status="PASS" starttime="20170816 05:15:58.644"></status>
</kw>
<msg timestamp="20170816 05:15:58.645" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:15:58.645" status="PASS" starttime="20170816 05:15:58.374"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:15:58.646" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:15:58.646" status="PASS" starttime="20170816 05:15:58.645"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:15:58.646" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:15:58.646" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:15:58.647" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170816 05:15:58.647" status="PASS" starttime="20170816 05:15:58.646"></status>
</kw>
<msg timestamp="20170816 05:15:58.647" level="INFO">${state} = Off</msg>
<status endtime="20170816 05:15:58.647" status="PASS" starttime="20170816 05:15:58.374"></status>
</kw>
<msg timestamp="20170816 05:15:58.647" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170816 05:15:58.647" status="PASS" starttime="20170816 05:15:58.374"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170816 05:15:58.648" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170816 05:15:58.649" status="FAIL" starttime="20170816 05:15:58.648"></status>
</kw>
<status endtime="20170816 05:15:58.649" status="FAIL" starttime="20170816 05:15:58.373"></status>
</kw>
<msg timestamp="20170816 05:15:58.649" level="INFO">${status} = False</msg>
<status endtime="20170816 05:15:58.649" status="PASS" starttime="20170816 05:15:58.373"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status endtime="20170816 05:15:58.650" status="PASS" starttime="20170816 05:15:58.649"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:15:58.656" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:15:58.656" status="PASS" starttime="20170816 05:15:58.655"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:15:58.657" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:15:58.657" status="PASS" starttime="20170816 05:15:58.656"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:15:58.657" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:15:58.657" status="PASS" starttime="20170816 05:15:58.657"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:15:58.658" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:15:58.658" status="PASS" starttime="20170816 05:15:58.658"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:15:58.863" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:15:58.863" status="PASS" starttime="20170816 05:15:58.659"></status>
</kw>
<msg timestamp="20170816 05:15:58.863" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:15:58.863" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:15:58.863" status="PASS" starttime="20170816 05:15:58.658"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:15:58.864" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:15:58.864" status="PASS" starttime="20170816 05:15:58.864"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:15:58.865" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:15:58.865" status="PASS" starttime="20170816 05:15:58.864"></status>
</kw>
<status endtime="20170816 05:15:58.865" status="PASS" starttime="20170816 05:15:58.654"></status>
</kw>
<status endtime="20170816 05:15:58.865" status="PASS" starttime="20170816 05:15:58.654"></status>
</kw>
<status endtime="20170816 05:15:58.865" status="PASS" starttime="20170816 05:15:58.652"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:15:58.866" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170816 05:15:58.866" status="PASS" starttime="20170816 05:15:58.865"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:15:58.868" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170816 05:15:58.868" status="PASS" starttime="20170816 05:15:58.867"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:15:58.869" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170816 05:15:58.869" status="PASS" starttime="20170816 05:15:58.869"></status>
</kw>
<status endtime="20170816 05:15:58.869" status="PASS" starttime="20170816 05:15:58.868"></status>
</kw>
<status endtime="20170816 05:15:58.869" status="PASS" starttime="20170816 05:15:58.867"></status>
</kw>
<status endtime="20170816 05:15:58.869" status="PASS" starttime="20170816 05:15:58.866"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:15:58.972" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170816 05:15:58.972" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:15:58.972" status="PASS" starttime="20170816 05:15:58.869"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:15:58.975" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:15:58.975" status="PASS" starttime="20170816 05:15:58.974"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:15:58.976" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:15:58.976" status="PASS" starttime="20170816 05:15:58.975"></status>
</kw>
<status endtime="20170816 05:15:58.976" status="PASS" starttime="20170816 05:15:58.975"></status>
</kw>
<status endtime="20170816 05:15:58.976" status="PASS" starttime="20170816 05:15:58.973"></status>
</kw>
<status endtime="20170816 05:15:58.976" status="PASS" starttime="20170816 05:15:58.973"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:15:58.976" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:15:58.976" status="PASS" starttime="20170816 05:15:58.976"></status>
</kw>
<msg timestamp="20170816 05:15:58.977" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:15:58.977" status="PASS" starttime="20170816 05:15:58.651"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:15:58.977" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:15:58.977" status="PASS" starttime="20170816 05:15:58.977"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:15:58.978" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:15:58.978" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:15:58.978" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit'}</msg>
<status endtime="20170816 05:15:58.978" status="PASS" starttime="20170816 05:15:58.978"></status>
</kw>
<msg timestamp="20170816 05:15:58.978" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170816 05:15:58.978" status="PASS" starttime="20170816 05:15:58.651"></status>
</kw>
<msg timestamp="20170816 05:15:58.979" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170816 05:15:58.979" status="PASS" starttime="20170816 05:15:58.650"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170816 05:15:58.979" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170816 05:15:58.979" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170816 05:15:58.979" status="FAIL" starttime="20170816 05:15:58.979"></status>
</kw>
<status endtime="20170816 05:15:58.980" status="FAIL" starttime="20170816 05:15:58.373"></status>
</kw>
<status endtime="20170816 05:15:58.980" status="FAIL" starttime="20170816 05:15:57.246"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:16:08.985" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:16:08.985" status="PASS" starttime="20170816 05:16:08.985"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:16:08.986" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:16:08.986" status="PASS" starttime="20170816 05:16:08.986"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:16:08.987" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:16:08.987" status="PASS" starttime="20170816 05:16:08.986"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:16:08.987" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:16:08.987" status="PASS" starttime="20170816 05:16:08.987"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:16:09.181" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:16:09.181" status="PASS" starttime="20170816 05:16:08.988"></status>
</kw>
<msg timestamp="20170816 05:16:09.181" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:16:09.181" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:16:09.182" status="PASS" starttime="20170816 05:16:08.988"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:16:09.182" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:16:09.182" status="PASS" starttime="20170816 05:16:09.182"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:16:09.183" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:16:09.183" status="PASS" starttime="20170816 05:16:09.183"></status>
</kw>
<status endtime="20170816 05:16:09.183" status="PASS" starttime="20170816 05:16:08.984"></status>
</kw>
<status endtime="20170816 05:16:09.183" status="PASS" starttime="20170816 05:16:08.984"></status>
</kw>
<status endtime="20170816 05:16:09.183" status="PASS" starttime="20170816 05:16:08.983"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:16:09.184" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170816 05:16:09.184" status="PASS" starttime="20170816 05:16:09.184"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:16:09.186" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170816 05:16:09.186" status="PASS" starttime="20170816 05:16:09.185"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:16:09.187" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170816 05:16:09.187" status="PASS" starttime="20170816 05:16:09.187"></status>
</kw>
<status endtime="20170816 05:16:09.187" status="PASS" starttime="20170816 05:16:09.186"></status>
</kw>
<status endtime="20170816 05:16:09.187" status="PASS" starttime="20170816 05:16:09.185"></status>
</kw>
<status endtime="20170816 05:16:09.187" status="PASS" starttime="20170816 05:16:09.184"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:16:09.270" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 05:16:09.270" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:16:09.270" status="PASS" starttime="20170816 05:16:09.188"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:16:09.272" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:16:09.272" status="PASS" starttime="20170816 05:16:09.271"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:16:09.273" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:16:09.273" status="PASS" starttime="20170816 05:16:09.273"></status>
</kw>
<status endtime="20170816 05:16:09.273" status="PASS" starttime="20170816 05:16:09.272"></status>
</kw>
<status endtime="20170816 05:16:09.273" status="PASS" starttime="20170816 05:16:09.271"></status>
</kw>
<status endtime="20170816 05:16:09.274" status="PASS" starttime="20170816 05:16:09.270"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:16:09.274" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:16:09.274" status="PASS" starttime="20170816 05:16:09.274"></status>
</kw>
<msg timestamp="20170816 05:16:09.274" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:16:09.274" status="PASS" starttime="20170816 05:16:08.982"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:16:09.275" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:16:09.275" status="PASS" starttime="20170816 05:16:09.274"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:16:09.275" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:16:09.275" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:16:09.276" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170816 05:16:09.276" status="PASS" starttime="20170816 05:16:09.275"></status>
</kw>
<msg timestamp="20170816 05:16:09.276" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170816 05:16:09.276" status="PASS" starttime="20170816 05:16:08.982"></status>
</kw>
<msg timestamp="20170816 05:16:09.276" level="INFO">${power_state} = On</msg>
<status endtime="20170816 05:16:09.276" status="PASS" starttime="20170816 05:16:08.981"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170816 05:16:09.277" status="PASS" starttime="20170816 05:16:09.276"></status>
</kw>
<status endtime="20170816 05:16:09.277" status="PASS" starttime="20170816 05:16:08.981"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:16:09.280" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:16:09.281" status="PASS" starttime="20170816 05:16:09.280"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:16:09.282" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:16:09.282" status="PASS" starttime="20170816 05:16:09.281"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:16:09.282" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:16:09.282" status="PASS" starttime="20170816 05:16:09.282"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:16:09.283" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:16:09.283" status="PASS" starttime="20170816 05:16:09.283"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:16:09.473" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:16:09.473" status="PASS" starttime="20170816 05:16:09.284"></status>
</kw>
<msg timestamp="20170816 05:16:09.474" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:16:09.474" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:16:09.474" status="PASS" starttime="20170816 05:16:09.283"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:16:09.475" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:16:09.475" status="PASS" starttime="20170816 05:16:09.474"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:16:09.476" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:16:09.476" status="PASS" starttime="20170816 05:16:09.475"></status>
</kw>
<status endtime="20170816 05:16:09.476" status="PASS" starttime="20170816 05:16:09.280"></status>
</kw>
<status endtime="20170816 05:16:09.476" status="PASS" starttime="20170816 05:16:09.279"></status>
</kw>
<status endtime="20170816 05:16:09.476" status="PASS" starttime="20170816 05:16:09.279"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:16:09.477" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170816 05:16:09.477" status="PASS" starttime="20170816 05:16:09.477"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:16:09.480" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170816 05:16:09.480" status="PASS" starttime="20170816 05:16:09.479"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:16:09.481" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170816 05:16:09.482" status="PASS" starttime="20170816 05:16:09.481"></status>
</kw>
<status endtime="20170816 05:16:09.482" status="PASS" starttime="20170816 05:16:09.480"></status>
</kw>
<status endtime="20170816 05:16:09.482" status="PASS" starttime="20170816 05:16:09.478"></status>
</kw>
<status endtime="20170816 05:16:09.482" status="PASS" starttime="20170816 05:16:09.477"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:16:09.606" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 05:16:09.607" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:16:09.607" status="PASS" starttime="20170816 05:16:09.482"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:16:09.609" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:16:09.609" status="PASS" starttime="20170816 05:16:09.608"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:16:09.609" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:16:09.610" status="PASS" starttime="20170816 05:16:09.609"></status>
</kw>
<status endtime="20170816 05:16:09.610" status="PASS" starttime="20170816 05:16:09.609"></status>
</kw>
<status endtime="20170816 05:16:09.610" status="PASS" starttime="20170816 05:16:09.608"></status>
</kw>
<status endtime="20170816 05:16:09.610" status="PASS" starttime="20170816 05:16:09.607"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:16:09.610" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:16:09.610" status="PASS" starttime="20170816 05:16:09.610"></status>
</kw>
<msg timestamp="20170816 05:16:09.611" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:16:09.611" status="PASS" starttime="20170816 05:16:09.278"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:16:09.611" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:16:09.611" status="PASS" starttime="20170816 05:16:09.611"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:16:09.612" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:16:09.612" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:16:09.612" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170816 05:16:09.612" status="PASS" starttime="20170816 05:16:09.611"></status>
</kw>
<msg timestamp="20170816 05:16:09.612" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170816 05:16:09.612" status="PASS" starttime="20170816 05:16:09.277"></status>
</kw>
<msg timestamp="20170816 05:16:09.613" level="INFO">${host_state} = Running</msg>
<status endtime="20170816 05:16:09.613" status="PASS" starttime="20170816 05:16:09.277"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170816 05:16:09.613" status="PASS" starttime="20170816 05:16:09.613"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:16:09.620" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:16:09.620" status="PASS" starttime="20170816 05:16:09.619"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:16:09.621" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:16:09.621" status="PASS" starttime="20170816 05:16:09.621"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:16:09.622" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:16:09.622" status="PASS" starttime="20170816 05:16:09.622"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:16:09.623" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:16:09.623" status="PASS" starttime="20170816 05:16:09.623"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:16:10.203" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:16:10.203" status="PASS" starttime="20170816 05:16:09.624"></status>
</kw>
<msg timestamp="20170816 05:16:10.203" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:16:10.203" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:16:10.203" status="PASS" starttime="20170816 05:16:09.624"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:16:10.204" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:16:10.204" status="PASS" starttime="20170816 05:16:10.203"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:16:10.204" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:16:10.205" status="PASS" starttime="20170816 05:16:10.204"></status>
</kw>
<status endtime="20170816 05:16:10.205" status="PASS" starttime="20170816 05:16:09.619"></status>
</kw>
<status endtime="20170816 05:16:10.205" status="PASS" starttime="20170816 05:16:09.618"></status>
</kw>
<status endtime="20170816 05:16:10.205" status="PASS" starttime="20170816 05:16:09.617"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:16:10.206" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170816 05:16:10.206" status="PASS" starttime="20170816 05:16:10.205"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:16:10.208" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170816 05:16:10.208" status="PASS" starttime="20170816 05:16:10.207"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:16:10.209" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170816 05:16:10.209" status="PASS" starttime="20170816 05:16:10.209"></status>
</kw>
<status endtime="20170816 05:16:10.209" status="PASS" starttime="20170816 05:16:10.208"></status>
</kw>
<status endtime="20170816 05:16:10.209" status="PASS" starttime="20170816 05:16:10.206"></status>
</kw>
<status endtime="20170816 05:16:10.209" status="PASS" starttime="20170816 05:16:10.206"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:16:10.286" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170816 05:16:10.286" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:16:10.286" status="PASS" starttime="20170816 05:16:10.210"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:16:10.288" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:16:10.288" status="PASS" starttime="20170816 05:16:10.287"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:16:10.289" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:16:10.289" status="PASS" starttime="20170816 05:16:10.289"></status>
</kw>
<status endtime="20170816 05:16:10.289" status="PASS" starttime="20170816 05:16:10.288"></status>
</kw>
<status endtime="20170816 05:16:10.289" status="PASS" starttime="20170816 05:16:10.287"></status>
</kw>
<status endtime="20170816 05:16:10.289" status="PASS" starttime="20170816 05:16:10.286"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:16:10.290" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:16:10.290" status="PASS" starttime="20170816 05:16:10.289"></status>
</kw>
<msg timestamp="20170816 05:16:10.290" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:16:10.290" status="PASS" starttime="20170816 05:16:09.616"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:16:10.290" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:16:10.291" status="PASS" starttime="20170816 05:16:10.290"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:16:10.291" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:16:10.291" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:16:10.291" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170816 05:16:10.291" status="PASS" starttime="20170816 05:16:10.291"></status>
</kw>
<msg timestamp="20170816 05:16:10.292" level="INFO">${state} = Off</msg>
<status endtime="20170816 05:16:10.292" status="PASS" starttime="20170816 05:16:09.616"></status>
</kw>
<msg timestamp="20170816 05:16:10.292" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170816 05:16:10.292" status="PASS" starttime="20170816 05:16:09.615"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170816 05:16:10.293" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170816 05:16:10.293" status="FAIL" starttime="20170816 05:16:10.292"></status>
</kw>
<status endtime="20170816 05:16:10.293" status="FAIL" starttime="20170816 05:16:09.614"></status>
</kw>
<msg timestamp="20170816 05:16:10.293" level="INFO">${status} = False</msg>
<status endtime="20170816 05:16:10.293" status="PASS" starttime="20170816 05:16:09.614"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status endtime="20170816 05:16:10.294" status="PASS" starttime="20170816 05:16:10.293"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:16:10.297" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:16:10.297" status="PASS" starttime="20170816 05:16:10.297"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:16:10.298" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:16:10.298" status="PASS" starttime="20170816 05:16:10.298"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:16:10.299" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:16:10.299" status="PASS" starttime="20170816 05:16:10.298"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:16:10.299" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:16:10.299" status="PASS" starttime="20170816 05:16:10.299"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:16:10.623" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:16:10.623" status="PASS" starttime="20170816 05:16:10.300"></status>
</kw>
<msg timestamp="20170816 05:16:10.624" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:16:10.624" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:16:10.624" status="PASS" starttime="20170816 05:16:10.300"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:16:10.624" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:16:10.625" status="PASS" starttime="20170816 05:16:10.624"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:16:10.625" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:16:10.625" status="PASS" starttime="20170816 05:16:10.625"></status>
</kw>
<status endtime="20170816 05:16:10.625" status="PASS" starttime="20170816 05:16:10.296"></status>
</kw>
<status endtime="20170816 05:16:10.625" status="PASS" starttime="20170816 05:16:10.296"></status>
</kw>
<status endtime="20170816 05:16:10.626" status="PASS" starttime="20170816 05:16:10.295"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:16:10.626" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170816 05:16:10.626" status="PASS" starttime="20170816 05:16:10.626"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:16:10.629" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170816 05:16:10.629" status="PASS" starttime="20170816 05:16:10.628"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:16:10.630" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170816 05:16:10.630" status="PASS" starttime="20170816 05:16:10.630"></status>
</kw>
<status endtime="20170816 05:16:10.631" status="PASS" starttime="20170816 05:16:10.630"></status>
</kw>
<status endtime="20170816 05:16:10.631" status="PASS" starttime="20170816 05:16:10.627"></status>
</kw>
<status endtime="20170816 05:16:10.631" status="PASS" starttime="20170816 05:16:10.627"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:16:10.810" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170816 05:16:10.810" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:16:10.810" status="PASS" starttime="20170816 05:16:10.631"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:16:10.812" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:16:10.812" status="PASS" starttime="20170816 05:16:10.812"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:16:10.813" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:16:10.813" status="PASS" starttime="20170816 05:16:10.813"></status>
</kw>
<status endtime="20170816 05:16:10.813" status="PASS" starttime="20170816 05:16:10.812"></status>
</kw>
<status endtime="20170816 05:16:10.814" status="PASS" starttime="20170816 05:16:10.811"></status>
</kw>
<status endtime="20170816 05:16:10.814" status="PASS" starttime="20170816 05:16:10.811"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:16:10.814" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:16:10.814" status="PASS" starttime="20170816 05:16:10.814"></status>
</kw>
<msg timestamp="20170816 05:16:10.814" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:16:10.814" status="PASS" starttime="20170816 05:16:10.295"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:16:10.815" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:16:10.815" status="PASS" starttime="20170816 05:16:10.815"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:16:10.816" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:16:10.816" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:16:10.816" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit'}</msg>
<status endtime="20170816 05:16:10.816" status="PASS" starttime="20170816 05:16:10.815"></status>
</kw>
<msg timestamp="20170816 05:16:10.816" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170816 05:16:10.816" status="PASS" starttime="20170816 05:16:10.294"></status>
</kw>
<msg timestamp="20170816 05:16:10.816" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170816 05:16:10.816" status="PASS" starttime="20170816 05:16:10.294"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170816 05:16:10.817" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170816 05:16:10.817" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170816 05:16:10.817" status="FAIL" starttime="20170816 05:16:10.817"></status>
</kw>
<status endtime="20170816 05:16:10.817" status="FAIL" starttime="20170816 05:16:09.613"></status>
</kw>
<status endtime="20170816 05:16:10.817" status="FAIL" starttime="20170816 05:16:08.980"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:16:20.823" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:16:20.824" status="PASS" starttime="20170816 05:16:20.823"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:16:20.824" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:16:20.824" status="PASS" starttime="20170816 05:16:20.824"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:16:20.825" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:16:20.825" status="PASS" starttime="20170816 05:16:20.825"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:16:20.826" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:16:20.826" status="PASS" starttime="20170816 05:16:20.825"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:16:21.208" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:16:21.208" status="PASS" starttime="20170816 05:16:20.826"></status>
</kw>
<msg timestamp="20170816 05:16:21.208" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:16:21.208" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:16:21.208" status="PASS" starttime="20170816 05:16:20.826"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:16:21.209" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:16:21.209" status="PASS" starttime="20170816 05:16:21.208"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:16:21.209" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:16:21.209" status="PASS" starttime="20170816 05:16:21.209"></status>
</kw>
<status endtime="20170816 05:16:21.210" status="PASS" starttime="20170816 05:16:20.822"></status>
</kw>
<status endtime="20170816 05:16:21.210" status="PASS" starttime="20170816 05:16:20.821"></status>
</kw>
<status endtime="20170816 05:16:21.210" status="PASS" starttime="20170816 05:16:20.821"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:16:21.210" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170816 05:16:21.210" status="PASS" starttime="20170816 05:16:21.210"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:16:21.212" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170816 05:16:21.213" status="PASS" starttime="20170816 05:16:21.212"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:16:21.213" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170816 05:16:21.214" status="PASS" starttime="20170816 05:16:21.213"></status>
</kw>
<status endtime="20170816 05:16:21.214" status="PASS" starttime="20170816 05:16:21.213"></status>
</kw>
<status endtime="20170816 05:16:21.214" status="PASS" starttime="20170816 05:16:21.211"></status>
</kw>
<status endtime="20170816 05:16:21.214" status="PASS" starttime="20170816 05:16:21.211"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:16:21.847" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 05:16:21.847" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:16:21.847" status="PASS" starttime="20170816 05:16:21.214"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:16:21.849" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:16:21.849" status="PASS" starttime="20170816 05:16:21.849"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:16:21.851" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:16:21.851" status="PASS" starttime="20170816 05:16:21.850"></status>
</kw>
<status endtime="20170816 05:16:21.851" status="PASS" starttime="20170816 05:16:21.850"></status>
</kw>
<status endtime="20170816 05:16:21.851" status="PASS" starttime="20170816 05:16:21.848"></status>
</kw>
<status endtime="20170816 05:16:21.851" status="PASS" starttime="20170816 05:16:21.848"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:16:21.852" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:16:21.852" status="PASS" starttime="20170816 05:16:21.851"></status>
</kw>
<msg timestamp="20170816 05:16:21.852" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:16:21.852" status="PASS" starttime="20170816 05:16:20.820"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:16:21.853" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:16:21.853" status="PASS" starttime="20170816 05:16:21.852"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:16:21.853" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:16:21.853" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:16:21.853" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170816 05:16:21.854" status="PASS" starttime="20170816 05:16:21.853"></status>
</kw>
<msg timestamp="20170816 05:16:21.854" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170816 05:16:21.854" status="PASS" starttime="20170816 05:16:20.819"></status>
</kw>
<msg timestamp="20170816 05:16:21.854" level="INFO">${power_state} = On</msg>
<status endtime="20170816 05:16:21.854" status="PASS" starttime="20170816 05:16:20.819"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170816 05:16:21.855" status="PASS" starttime="20170816 05:16:21.854"></status>
</kw>
<status endtime="20170816 05:16:21.855" status="PASS" starttime="20170816 05:16:20.819"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:16:21.858" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:16:21.859" status="PASS" starttime="20170816 05:16:21.858"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:16:21.859" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:16:21.859" status="PASS" starttime="20170816 05:16:21.859"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:16:21.860" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:16:21.860" status="PASS" starttime="20170816 05:16:21.859"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:16:21.861" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:16:21.861" status="PASS" starttime="20170816 05:16:21.860"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:16:22.244" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:16:22.245" status="PASS" starttime="20170816 05:16:21.861"></status>
</kw>
<msg timestamp="20170816 05:16:22.245" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:16:22.245" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:16:22.245" status="PASS" starttime="20170816 05:16:21.861"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:16:22.246" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:16:22.246" status="PASS" starttime="20170816 05:16:22.245"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:16:22.247" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:16:22.247" status="PASS" starttime="20170816 05:16:22.246"></status>
</kw>
<status endtime="20170816 05:16:22.247" status="PASS" starttime="20170816 05:16:21.857"></status>
</kw>
<status endtime="20170816 05:16:22.247" status="PASS" starttime="20170816 05:16:21.857"></status>
</kw>
<status endtime="20170816 05:16:22.247" status="PASS" starttime="20170816 05:16:21.856"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:16:22.248" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170816 05:16:22.248" status="PASS" starttime="20170816 05:16:22.248"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:16:22.251" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170816 05:16:22.251" status="PASS" starttime="20170816 05:16:22.250"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:16:22.252" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170816 05:16:22.252" status="PASS" starttime="20170816 05:16:22.252"></status>
</kw>
<status endtime="20170816 05:16:22.252" status="PASS" starttime="20170816 05:16:22.251"></status>
</kw>
<status endtime="20170816 05:16:22.252" status="PASS" starttime="20170816 05:16:22.249"></status>
</kw>
<status endtime="20170816 05:16:22.253" status="PASS" starttime="20170816 05:16:22.249"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:16:22.836" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 05:16:22.836" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:16:22.836" status="PASS" starttime="20170816 05:16:22.253"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:16:22.838" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:16:22.838" status="PASS" starttime="20170816 05:16:22.837"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:16:22.839" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:16:22.839" status="PASS" starttime="20170816 05:16:22.838"></status>
</kw>
<status endtime="20170816 05:16:22.839" status="PASS" starttime="20170816 05:16:22.838"></status>
</kw>
<status endtime="20170816 05:16:22.839" status="PASS" starttime="20170816 05:16:22.837"></status>
</kw>
<status endtime="20170816 05:16:22.839" status="PASS" starttime="20170816 05:16:22.836"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:16:22.840" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:16:22.840" status="PASS" starttime="20170816 05:16:22.839"></status>
</kw>
<msg timestamp="20170816 05:16:22.840" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:16:22.840" status="PASS" starttime="20170816 05:16:21.856"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:16:22.841" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:16:22.841" status="PASS" starttime="20170816 05:16:22.840"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:16:22.841" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:16:22.841" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:16:22.841" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170816 05:16:22.841" status="PASS" starttime="20170816 05:16:22.841"></status>
</kw>
<msg timestamp="20170816 05:16:22.842" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170816 05:16:22.842" status="PASS" starttime="20170816 05:16:21.855"></status>
</kw>
<msg timestamp="20170816 05:16:22.842" level="INFO">${host_state} = Running</msg>
<status endtime="20170816 05:16:22.842" status="PASS" starttime="20170816 05:16:21.855"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170816 05:16:22.842" status="PASS" starttime="20170816 05:16:22.842"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:16:22.847" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:16:22.848" status="PASS" starttime="20170816 05:16:22.847"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:16:22.849" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:16:22.849" status="PASS" starttime="20170816 05:16:22.848"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:16:22.849" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:16:22.850" status="PASS" starttime="20170816 05:16:22.849"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:16:22.850" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:16:22.850" status="PASS" starttime="20170816 05:16:22.850"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:16:23.330" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:16:23.330" status="PASS" starttime="20170816 05:16:22.851"></status>
</kw>
<msg timestamp="20170816 05:16:23.330" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:16:23.330" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:16:23.330" status="PASS" starttime="20170816 05:16:22.851"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:16:23.331" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:16:23.331" status="PASS" starttime="20170816 05:16:23.331"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:16:23.332" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:16:23.332" status="PASS" starttime="20170816 05:16:23.331"></status>
</kw>
<status endtime="20170816 05:16:23.332" status="PASS" starttime="20170816 05:16:22.846"></status>
</kw>
<status endtime="20170816 05:16:23.332" status="PASS" starttime="20170816 05:16:22.846"></status>
</kw>
<status endtime="20170816 05:16:23.332" status="PASS" starttime="20170816 05:16:22.845"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:16:23.333" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170816 05:16:23.333" status="PASS" starttime="20170816 05:16:23.332"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:16:23.335" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170816 05:16:23.335" status="PASS" starttime="20170816 05:16:23.335"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:16:23.336" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170816 05:16:23.336" status="PASS" starttime="20170816 05:16:23.336"></status>
</kw>
<status endtime="20170816 05:16:23.336" status="PASS" starttime="20170816 05:16:23.335"></status>
</kw>
<status endtime="20170816 05:16:23.336" status="PASS" starttime="20170816 05:16:23.334"></status>
</kw>
<status endtime="20170816 05:16:23.337" status="PASS" starttime="20170816 05:16:23.333"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:16:23.937" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170816 05:16:23.937" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:16:23.937" status="PASS" starttime="20170816 05:16:23.337"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:16:23.939" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:16:23.939" status="PASS" starttime="20170816 05:16:23.938"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:16:23.940" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:16:23.940" status="PASS" starttime="20170816 05:16:23.940"></status>
</kw>
<status endtime="20170816 05:16:23.940" status="PASS" starttime="20170816 05:16:23.939"></status>
</kw>
<status endtime="20170816 05:16:23.940" status="PASS" starttime="20170816 05:16:23.938"></status>
</kw>
<status endtime="20170816 05:16:23.940" status="PASS" starttime="20170816 05:16:23.937"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:16:23.941" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:16:23.941" status="PASS" starttime="20170816 05:16:23.941"></status>
</kw>
<msg timestamp="20170816 05:16:23.941" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:16:23.941" status="PASS" starttime="20170816 05:16:22.845"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:16:23.942" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:16:23.942" status="PASS" starttime="20170816 05:16:23.941"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:16:23.942" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:16:23.942" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:16:23.943" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170816 05:16:23.943" status="PASS" starttime="20170816 05:16:23.942"></status>
</kw>
<msg timestamp="20170816 05:16:23.943" level="INFO">${state} = Off</msg>
<status endtime="20170816 05:16:23.943" status="PASS" starttime="20170816 05:16:22.844"></status>
</kw>
<msg timestamp="20170816 05:16:23.943" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170816 05:16:23.943" status="PASS" starttime="20170816 05:16:22.844"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170816 05:16:23.944" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170816 05:16:23.944" status="FAIL" starttime="20170816 05:16:23.943"></status>
</kw>
<status endtime="20170816 05:16:23.944" status="FAIL" starttime="20170816 05:16:22.843"></status>
</kw>
<msg timestamp="20170816 05:16:23.944" level="INFO">${status} = False</msg>
<status endtime="20170816 05:16:23.944" status="PASS" starttime="20170816 05:16:22.843"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status endtime="20170816 05:16:23.945" status="PASS" starttime="20170816 05:16:23.944"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:16:23.949" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:16:23.949" status="PASS" starttime="20170816 05:16:23.948"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:16:23.950" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:16:23.950" status="PASS" starttime="20170816 05:16:23.949"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:16:23.950" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:16:23.950" status="PASS" starttime="20170816 05:16:23.950"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:16:23.951" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:16:23.951" status="PASS" starttime="20170816 05:16:23.951"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:16:24.367" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:16:24.367" status="PASS" starttime="20170816 05:16:23.952"></status>
</kw>
<msg timestamp="20170816 05:16:24.367" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:16:24.367" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:16:24.367" status="PASS" starttime="20170816 05:16:23.951"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:16:24.368" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:16:24.368" status="PASS" starttime="20170816 05:16:24.367"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:16:24.368" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:16:24.369" status="PASS" starttime="20170816 05:16:24.368"></status>
</kw>
<status endtime="20170816 05:16:24.369" status="PASS" starttime="20170816 05:16:23.948"></status>
</kw>
<status endtime="20170816 05:16:24.369" status="PASS" starttime="20170816 05:16:23.948"></status>
</kw>
<status endtime="20170816 05:16:24.369" status="PASS" starttime="20170816 05:16:23.947"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:16:24.369" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170816 05:16:24.370" status="PASS" starttime="20170816 05:16:24.369"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:16:24.372" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170816 05:16:24.372" status="PASS" starttime="20170816 05:16:24.371"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:16:24.373" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170816 05:16:24.373" status="PASS" starttime="20170816 05:16:24.372"></status>
</kw>
<status endtime="20170816 05:16:24.373" status="PASS" starttime="20170816 05:16:24.372"></status>
</kw>
<status endtime="20170816 05:16:24.373" status="PASS" starttime="20170816 05:16:24.370"></status>
</kw>
<status endtime="20170816 05:16:24.373" status="PASS" starttime="20170816 05:16:24.370"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:16:25.032" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170816 05:16:25.033" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:16:25.033" status="PASS" starttime="20170816 05:16:24.373"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:16:25.036" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:16:25.036" status="PASS" starttime="20170816 05:16:25.035"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:16:25.036" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:16:25.037" status="PASS" starttime="20170816 05:16:25.036"></status>
</kw>
<status endtime="20170816 05:16:25.037" status="PASS" starttime="20170816 05:16:25.036"></status>
</kw>
<status endtime="20170816 05:16:25.037" status="PASS" starttime="20170816 05:16:25.034"></status>
</kw>
<status endtime="20170816 05:16:25.037" status="PASS" starttime="20170816 05:16:25.033"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:16:25.037" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:16:25.037" status="PASS" starttime="20170816 05:16:25.037"></status>
</kw>
<msg timestamp="20170816 05:16:25.038" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:16:25.038" status="PASS" starttime="20170816 05:16:23.946"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:16:25.038" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:16:25.038" status="PASS" starttime="20170816 05:16:25.038"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:16:25.039" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:16:25.039" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:16:25.039" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit'}</msg>
<status endtime="20170816 05:16:25.039" status="PASS" starttime="20170816 05:16:25.039"></status>
</kw>
<msg timestamp="20170816 05:16:25.039" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170816 05:16:25.039" status="PASS" starttime="20170816 05:16:23.945"></status>
</kw>
<msg timestamp="20170816 05:16:25.040" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170816 05:16:25.040" status="PASS" starttime="20170816 05:16:23.945"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170816 05:16:25.040" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170816 05:16:25.040" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170816 05:16:25.040" status="FAIL" starttime="20170816 05:16:25.040"></status>
</kw>
<status endtime="20170816 05:16:25.041" status="FAIL" starttime="20170816 05:16:22.843"></status>
</kw>
<status endtime="20170816 05:16:25.041" status="FAIL" starttime="20170816 05:16:20.818"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:16:35.046" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:16:35.047" status="PASS" starttime="20170816 05:16:35.046"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:16:35.047" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:16:35.047" status="PASS" starttime="20170816 05:16:35.047"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:16:35.048" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:16:35.048" status="PASS" starttime="20170816 05:16:35.047"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:16:35.048" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:16:35.048" status="PASS" starttime="20170816 05:16:35.048"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:16:35.486" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:16:35.486" status="PASS" starttime="20170816 05:16:35.049"></status>
</kw>
<msg timestamp="20170816 05:16:35.486" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:16:35.486" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:16:35.486" status="PASS" starttime="20170816 05:16:35.049"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:16:35.487" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:16:35.487" status="PASS" starttime="20170816 05:16:35.486"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:16:35.487" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:16:35.487" status="PASS" starttime="20170816 05:16:35.487"></status>
</kw>
<status endtime="20170816 05:16:35.488" status="PASS" starttime="20170816 05:16:35.045"></status>
</kw>
<status endtime="20170816 05:16:35.488" status="PASS" starttime="20170816 05:16:35.045"></status>
</kw>
<status endtime="20170816 05:16:35.488" status="PASS" starttime="20170816 05:16:35.044"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:16:35.488" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170816 05:16:35.488" status="PASS" starttime="20170816 05:16:35.488"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:16:35.490" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170816 05:16:35.490" status="PASS" starttime="20170816 05:16:35.490"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:16:35.491" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170816 05:16:35.492" status="PASS" starttime="20170816 05:16:35.491"></status>
</kw>
<status endtime="20170816 05:16:35.492" status="PASS" starttime="20170816 05:16:35.491"></status>
</kw>
<status endtime="20170816 05:16:35.492" status="PASS" starttime="20170816 05:16:35.489"></status>
</kw>
<status endtime="20170816 05:16:35.492" status="PASS" starttime="20170816 05:16:35.489"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:16:36.052" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 05:16:36.052" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:16:36.052" status="PASS" starttime="20170816 05:16:35.492"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:16:36.054" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:16:36.054" status="PASS" starttime="20170816 05:16:36.054"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:16:36.055" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:16:36.055" status="PASS" starttime="20170816 05:16:36.055"></status>
</kw>
<status endtime="20170816 05:16:36.055" status="PASS" starttime="20170816 05:16:36.054"></status>
</kw>
<status endtime="20170816 05:16:36.055" status="PASS" starttime="20170816 05:16:36.053"></status>
</kw>
<status endtime="20170816 05:16:36.055" status="PASS" starttime="20170816 05:16:36.053"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:16:36.056" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:16:36.056" status="PASS" starttime="20170816 05:16:36.056"></status>
</kw>
<msg timestamp="20170816 05:16:36.056" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:16:36.056" status="PASS" starttime="20170816 05:16:35.043"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:16:36.057" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:16:36.057" status="PASS" starttime="20170816 05:16:36.056"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:16:36.057" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:16:36.057" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:16:36.058" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170816 05:16:36.058" status="PASS" starttime="20170816 05:16:36.057"></status>
</kw>
<msg timestamp="20170816 05:16:36.058" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170816 05:16:36.058" status="PASS" starttime="20170816 05:16:35.043"></status>
</kw>
<msg timestamp="20170816 05:16:36.058" level="INFO">${power_state} = On</msg>
<status endtime="20170816 05:16:36.058" status="PASS" starttime="20170816 05:16:35.042"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170816 05:16:36.059" status="PASS" starttime="20170816 05:16:36.058"></status>
</kw>
<status endtime="20170816 05:16:36.059" status="PASS" starttime="20170816 05:16:35.042"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:16:36.062" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:16:36.066" status="PASS" starttime="20170816 05:16:36.062"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:16:36.067" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:16:36.067" status="PASS" starttime="20170816 05:16:36.066"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:16:36.067" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:16:36.067" status="PASS" starttime="20170816 05:16:36.067"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:16:36.068" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:16:36.068" status="PASS" starttime="20170816 05:16:36.068"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:16:36.499" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:16:36.500" status="PASS" starttime="20170816 05:16:36.069"></status>
</kw>
<msg timestamp="20170816 05:16:36.500" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:16:36.500" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:16:36.500" status="PASS" starttime="20170816 05:16:36.068"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:16:36.501" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:16:36.501" status="PASS" starttime="20170816 05:16:36.500"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:16:36.501" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:16:36.501" status="PASS" starttime="20170816 05:16:36.501"></status>
</kw>
<status endtime="20170816 05:16:36.501" status="PASS" starttime="20170816 05:16:36.061"></status>
</kw>
<status endtime="20170816 05:16:36.501" status="PASS" starttime="20170816 05:16:36.061"></status>
</kw>
<status endtime="20170816 05:16:36.502" status="PASS" starttime="20170816 05:16:36.061"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:16:36.502" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170816 05:16:36.502" status="PASS" starttime="20170816 05:16:36.502"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:16:36.504" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170816 05:16:36.504" status="PASS" starttime="20170816 05:16:36.504"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:16:36.505" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170816 05:16:36.505" status="PASS" starttime="20170816 05:16:36.505"></status>
</kw>
<status endtime="20170816 05:16:36.506" status="PASS" starttime="20170816 05:16:36.505"></status>
</kw>
<status endtime="20170816 05:16:36.506" status="PASS" starttime="20170816 05:16:36.503"></status>
</kw>
<status endtime="20170816 05:16:36.506" status="PASS" starttime="20170816 05:16:36.502"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:16:37.098" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 05:16:37.098" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:16:37.098" status="PASS" starttime="20170816 05:16:36.506"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:16:37.100" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:16:37.100" status="PASS" starttime="20170816 05:16:37.100"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:16:37.101" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:16:37.101" status="PASS" starttime="20170816 05:16:37.101"></status>
</kw>
<status endtime="20170816 05:16:37.101" status="PASS" starttime="20170816 05:16:37.100"></status>
</kw>
<status endtime="20170816 05:16:37.101" status="PASS" starttime="20170816 05:16:37.099"></status>
</kw>
<status endtime="20170816 05:16:37.101" status="PASS" starttime="20170816 05:16:37.098"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:16:37.102" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:16:37.102" status="PASS" starttime="20170816 05:16:37.102"></status>
</kw>
<msg timestamp="20170816 05:16:37.102" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:16:37.102" status="PASS" starttime="20170816 05:16:36.060"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:16:37.103" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:16:37.103" status="PASS" starttime="20170816 05:16:37.102"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:16:37.103" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:16:37.104" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:16:37.104" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170816 05:16:37.104" status="PASS" starttime="20170816 05:16:37.103"></status>
</kw>
<msg timestamp="20170816 05:16:37.104" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170816 05:16:37.104" status="PASS" starttime="20170816 05:16:36.059"></status>
</kw>
<msg timestamp="20170816 05:16:37.104" level="INFO">${host_state} = Running</msg>
<status endtime="20170816 05:16:37.104" status="PASS" starttime="20170816 05:16:36.059"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170816 05:16:37.105" status="PASS" starttime="20170816 05:16:37.105"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:16:37.110" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:16:37.111" status="PASS" starttime="20170816 05:16:37.110"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:16:37.111" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:16:37.112" status="PASS" starttime="20170816 05:16:37.111"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:16:37.112" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:16:37.112" status="PASS" starttime="20170816 05:16:37.112"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:16:37.113" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:16:37.113" status="PASS" starttime="20170816 05:16:37.113"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:16:37.469" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:16:37.469" status="PASS" starttime="20170816 05:16:37.114"></status>
</kw>
<msg timestamp="20170816 05:16:37.469" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:16:37.469" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:16:37.469" status="PASS" starttime="20170816 05:16:37.113"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:16:37.470" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:16:37.470" status="PASS" starttime="20170816 05:16:37.469"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:16:37.470" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:16:37.470" status="PASS" starttime="20170816 05:16:37.470"></status>
</kw>
<status endtime="20170816 05:16:37.470" status="PASS" starttime="20170816 05:16:37.109"></status>
</kw>
<status endtime="20170816 05:16:37.471" status="PASS" starttime="20170816 05:16:37.109"></status>
</kw>
<status endtime="20170816 05:16:37.471" status="PASS" starttime="20170816 05:16:37.108"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:16:37.471" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170816 05:16:37.471" status="PASS" starttime="20170816 05:16:37.471"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:16:37.474" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170816 05:16:37.474" status="PASS" starttime="20170816 05:16:37.473"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:16:37.475" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170816 05:16:37.475" status="PASS" starttime="20170816 05:16:37.475"></status>
</kw>
<status endtime="20170816 05:16:37.475" status="PASS" starttime="20170816 05:16:37.474"></status>
</kw>
<status endtime="20170816 05:16:37.475" status="PASS" starttime="20170816 05:16:37.472"></status>
</kw>
<status endtime="20170816 05:16:37.475" status="PASS" starttime="20170816 05:16:37.471"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:16:38.123" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170816 05:16:38.123" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:16:38.123" status="PASS" starttime="20170816 05:16:37.475"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:16:38.125" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:16:38.125" status="PASS" starttime="20170816 05:16:38.125"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:16:38.126" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:16:38.126" status="PASS" starttime="20170816 05:16:38.126"></status>
</kw>
<status endtime="20170816 05:16:38.126" status="PASS" starttime="20170816 05:16:38.125"></status>
</kw>
<status endtime="20170816 05:16:38.126" status="PASS" starttime="20170816 05:16:38.124"></status>
</kw>
<status endtime="20170816 05:16:38.126" status="PASS" starttime="20170816 05:16:38.124"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:16:38.127" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:16:38.127" status="PASS" starttime="20170816 05:16:38.127"></status>
</kw>
<msg timestamp="20170816 05:16:38.127" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:16:38.127" status="PASS" starttime="20170816 05:16:37.107"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:16:38.128" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:16:38.128" status="PASS" starttime="20170816 05:16:38.127"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:16:38.128" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:16:38.128" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:16:38.129" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170816 05:16:38.129" status="PASS" starttime="20170816 05:16:38.128"></status>
</kw>
<msg timestamp="20170816 05:16:38.129" level="INFO">${state} = Off</msg>
<status endtime="20170816 05:16:38.129" status="PASS" starttime="20170816 05:16:37.107"></status>
</kw>
<msg timestamp="20170816 05:16:38.129" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170816 05:16:38.129" status="PASS" starttime="20170816 05:16:37.106"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170816 05:16:38.130" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170816 05:16:38.130" status="FAIL" starttime="20170816 05:16:38.129"></status>
</kw>
<status endtime="20170816 05:16:38.130" status="FAIL" starttime="20170816 05:16:37.106"></status>
</kw>
<msg timestamp="20170816 05:16:38.130" level="INFO">${status} = False</msg>
<status endtime="20170816 05:16:38.130" status="PASS" starttime="20170816 05:16:37.105"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status endtime="20170816 05:16:38.131" status="PASS" starttime="20170816 05:16:38.130"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:16:38.135" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:16:38.135" status="PASS" starttime="20170816 05:16:38.134"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:16:38.136" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:16:38.136" status="PASS" starttime="20170816 05:16:38.135"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:16:38.136" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:16:38.136" status="PASS" starttime="20170816 05:16:38.136"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:16:38.137" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:16:38.137" status="PASS" starttime="20170816 05:16:38.137"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:16:38.490" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:16:38.490" status="PASS" starttime="20170816 05:16:38.138"></status>
</kw>
<msg timestamp="20170816 05:16:38.490" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:16:38.490" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:16:38.490" status="PASS" starttime="20170816 05:16:38.137"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:16:38.491" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:16:38.491" status="PASS" starttime="20170816 05:16:38.491"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:16:38.492" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:16:38.492" status="PASS" starttime="20170816 05:16:38.491"></status>
</kw>
<status endtime="20170816 05:16:38.492" status="PASS" starttime="20170816 05:16:38.133"></status>
</kw>
<status endtime="20170816 05:16:38.492" status="PASS" starttime="20170816 05:16:38.133"></status>
</kw>
<status endtime="20170816 05:16:38.492" status="PASS" starttime="20170816 05:16:38.132"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:16:38.493" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170816 05:16:38.493" status="PASS" starttime="20170816 05:16:38.492"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:16:38.495" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170816 05:16:38.495" status="PASS" starttime="20170816 05:16:38.494"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:16:38.496" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170816 05:16:38.496" status="PASS" starttime="20170816 05:16:38.496"></status>
</kw>
<status endtime="20170816 05:16:38.496" status="PASS" starttime="20170816 05:16:38.495"></status>
</kw>
<status endtime="20170816 05:16:38.496" status="PASS" starttime="20170816 05:16:38.494"></status>
</kw>
<status endtime="20170816 05:16:38.496" status="PASS" starttime="20170816 05:16:38.493"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:16:39.172" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170816 05:16:39.172" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:16:39.172" status="PASS" starttime="20170816 05:16:38.497"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:16:39.174" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:16:39.174" status="PASS" starttime="20170816 05:16:39.174"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:16:39.175" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:16:39.176" status="PASS" starttime="20170816 05:16:39.175"></status>
</kw>
<status endtime="20170816 05:16:39.176" status="PASS" starttime="20170816 05:16:39.175"></status>
</kw>
<status endtime="20170816 05:16:39.176" status="PASS" starttime="20170816 05:16:39.173"></status>
</kw>
<status endtime="20170816 05:16:39.176" status="PASS" starttime="20170816 05:16:39.173"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:16:39.176" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:16:39.176" status="PASS" starttime="20170816 05:16:39.176"></status>
</kw>
<msg timestamp="20170816 05:16:39.177" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:16:39.177" status="PASS" starttime="20170816 05:16:38.132"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:16:39.177" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:16:39.177" status="PASS" starttime="20170816 05:16:39.177"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:16:39.178" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:16:39.178" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:16:39.178" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit'}</msg>
<status endtime="20170816 05:16:39.178" status="PASS" starttime="20170816 05:16:39.177"></status>
</kw>
<msg timestamp="20170816 05:16:39.178" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170816 05:16:39.178" status="PASS" starttime="20170816 05:16:38.131"></status>
</kw>
<msg timestamp="20170816 05:16:39.178" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170816 05:16:39.178" status="PASS" starttime="20170816 05:16:38.131"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170816 05:16:39.179" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170816 05:16:39.179" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170816 05:16:39.179" status="FAIL" starttime="20170816 05:16:39.179"></status>
</kw>
<status endtime="20170816 05:16:39.179" status="FAIL" starttime="20170816 05:16:37.105"></status>
</kw>
<status endtime="20170816 05:16:39.180" status="FAIL" starttime="20170816 05:16:35.041"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:16:49.185" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:16:49.186" status="PASS" starttime="20170816 05:16:49.185"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:16:49.186" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:16:49.186" status="PASS" starttime="20170816 05:16:49.186"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:16:49.187" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:16:49.187" status="PASS" starttime="20170816 05:16:49.187"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:16:49.188" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:16:49.188" status="PASS" starttime="20170816 05:16:49.187"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:16:49.591" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:16:49.591" status="PASS" starttime="20170816 05:16:49.189"></status>
</kw>
<msg timestamp="20170816 05:16:49.591" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:16:49.591" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:16:49.592" status="PASS" starttime="20170816 05:16:49.188"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:16:49.592" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:16:49.592" status="PASS" starttime="20170816 05:16:49.592"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:16:49.593" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:16:49.593" status="PASS" starttime="20170816 05:16:49.593"></status>
</kw>
<status endtime="20170816 05:16:49.593" status="PASS" starttime="20170816 05:16:49.184"></status>
</kw>
<status endtime="20170816 05:16:49.593" status="PASS" starttime="20170816 05:16:49.184"></status>
</kw>
<status endtime="20170816 05:16:49.594" status="PASS" starttime="20170816 05:16:49.183"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:16:49.594" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170816 05:16:49.594" status="PASS" starttime="20170816 05:16:49.594"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:16:49.596" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170816 05:16:49.596" status="PASS" starttime="20170816 05:16:49.596"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:16:49.597" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170816 05:16:49.597" status="PASS" starttime="20170816 05:16:49.597"></status>
</kw>
<status endtime="20170816 05:16:49.597" status="PASS" starttime="20170816 05:16:49.596"></status>
</kw>
<status endtime="20170816 05:16:49.597" status="PASS" starttime="20170816 05:16:49.595"></status>
</kw>
<status endtime="20170816 05:16:49.598" status="PASS" starttime="20170816 05:16:49.594"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:16:49.996" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 05:16:49.996" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:16:49.996" status="PASS" starttime="20170816 05:16:49.598"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:16:49.998" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:16:49.998" status="PASS" starttime="20170816 05:16:49.997"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:16:49.999" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:16:49.999" status="PASS" starttime="20170816 05:16:49.998"></status>
</kw>
<status endtime="20170816 05:16:49.999" status="PASS" starttime="20170816 05:16:49.998"></status>
</kw>
<status endtime="20170816 05:16:49.999" status="PASS" starttime="20170816 05:16:49.997"></status>
</kw>
<status endtime="20170816 05:16:50.000" status="PASS" starttime="20170816 05:16:49.996"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:16:50.000" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:16:50.000" status="PASS" starttime="20170816 05:16:50.000"></status>
</kw>
<msg timestamp="20170816 05:16:50.000" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:16:50.000" status="PASS" starttime="20170816 05:16:49.182"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:16:50.001" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:16:50.001" status="PASS" starttime="20170816 05:16:50.001"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:16:50.002" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:16:50.002" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:16:50.002" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170816 05:16:50.002" status="PASS" starttime="20170816 05:16:50.001"></status>
</kw>
<msg timestamp="20170816 05:16:50.002" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170816 05:16:50.002" status="PASS" starttime="20170816 05:16:49.182"></status>
</kw>
<msg timestamp="20170816 05:16:50.002" level="INFO">${power_state} = On</msg>
<status endtime="20170816 05:16:50.002" status="PASS" starttime="20170816 05:16:49.181"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170816 05:16:50.003" status="PASS" starttime="20170816 05:16:50.003"></status>
</kw>
<status endtime="20170816 05:16:50.003" status="PASS" starttime="20170816 05:16:49.181"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:16:50.007" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:16:50.007" status="PASS" starttime="20170816 05:16:50.006"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:16:50.008" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:16:50.008" status="PASS" starttime="20170816 05:16:50.007"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:16:50.008" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:16:50.008" status="PASS" starttime="20170816 05:16:50.008"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:16:50.009" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:16:50.009" status="PASS" starttime="20170816 05:16:50.009"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:16:50.340" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:16:50.340" status="PASS" starttime="20170816 05:16:50.010"></status>
</kw>
<msg timestamp="20170816 05:16:50.341" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:16:50.341" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:16:50.341" status="PASS" starttime="20170816 05:16:50.009"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:16:50.341" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:16:50.341" status="PASS" starttime="20170816 05:16:50.341"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:16:50.342" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:16:50.342" status="PASS" starttime="20170816 05:16:50.342"></status>
</kw>
<status endtime="20170816 05:16:50.342" status="PASS" starttime="20170816 05:16:50.006"></status>
</kw>
<status endtime="20170816 05:16:50.342" status="PASS" starttime="20170816 05:16:50.005"></status>
</kw>
<status endtime="20170816 05:16:50.342" status="PASS" starttime="20170816 05:16:50.005"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:16:50.343" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170816 05:16:50.343" status="PASS" starttime="20170816 05:16:50.343"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:16:50.346" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170816 05:16:50.346" status="PASS" starttime="20170816 05:16:50.344"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:16:50.346" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170816 05:16:50.347" status="PASS" starttime="20170816 05:16:50.346"></status>
</kw>
<status endtime="20170816 05:16:50.347" status="PASS" starttime="20170816 05:16:50.346"></status>
</kw>
<status endtime="20170816 05:16:50.347" status="PASS" starttime="20170816 05:16:50.344"></status>
</kw>
<status endtime="20170816 05:16:50.347" status="PASS" starttime="20170816 05:16:50.343"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:16:51.200" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 05:16:51.200" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:16:51.200" status="PASS" starttime="20170816 05:16:50.347"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:16:51.202" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:16:51.202" status="PASS" starttime="20170816 05:16:51.202"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:16:51.203" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:16:51.203" status="PASS" starttime="20170816 05:16:51.203"></status>
</kw>
<status endtime="20170816 05:16:51.203" status="PASS" starttime="20170816 05:16:51.202"></status>
</kw>
<status endtime="20170816 05:16:51.204" status="PASS" starttime="20170816 05:16:51.201"></status>
</kw>
<status endtime="20170816 05:16:51.204" status="PASS" starttime="20170816 05:16:51.201"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:16:51.204" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:16:51.204" status="PASS" starttime="20170816 05:16:51.204"></status>
</kw>
<msg timestamp="20170816 05:16:51.204" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:16:51.204" status="PASS" starttime="20170816 05:16:50.004"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:16:51.205" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:16:51.205" status="PASS" starttime="20170816 05:16:51.205"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:16:51.206" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:16:51.206" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:16:51.206" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170816 05:16:51.206" status="PASS" starttime="20170816 05:16:51.205"></status>
</kw>
<msg timestamp="20170816 05:16:51.206" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170816 05:16:51.206" status="PASS" starttime="20170816 05:16:50.004"></status>
</kw>
<msg timestamp="20170816 05:16:51.207" level="INFO">${host_state} = Running</msg>
<status endtime="20170816 05:16:51.207" status="PASS" starttime="20170816 05:16:50.003"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170816 05:16:51.207" status="PASS" starttime="20170816 05:16:51.207"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:16:51.212" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:16:51.213" status="PASS" starttime="20170816 05:16:51.211"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:16:51.213" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:16:51.213" status="PASS" starttime="20170816 05:16:51.213"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:16:51.214" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:16:51.214" status="PASS" starttime="20170816 05:16:51.213"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:16:51.214" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:16:51.214" status="PASS" starttime="20170816 05:16:51.214"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:16:51.612" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:16:51.612" status="PASS" starttime="20170816 05:16:51.215"></status>
</kw>
<msg timestamp="20170816 05:16:51.612" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:16:51.612" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:16:51.612" status="PASS" starttime="20170816 05:16:51.215"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:16:51.613" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:16:51.613" status="PASS" starttime="20170816 05:16:51.613"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:16:51.614" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:16:51.614" status="PASS" starttime="20170816 05:16:51.613"></status>
</kw>
<status endtime="20170816 05:16:51.614" status="PASS" starttime="20170816 05:16:51.211"></status>
</kw>
<status endtime="20170816 05:16:51.614" status="PASS" starttime="20170816 05:16:51.210"></status>
</kw>
<status endtime="20170816 05:16:51.614" status="PASS" starttime="20170816 05:16:51.210"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:16:51.615" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170816 05:16:51.615" status="PASS" starttime="20170816 05:16:51.614"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:16:51.617" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170816 05:16:51.617" status="PASS" starttime="20170816 05:16:51.616"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:16:51.618" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170816 05:16:51.618" status="PASS" starttime="20170816 05:16:51.617"></status>
</kw>
<status endtime="20170816 05:16:51.618" status="PASS" starttime="20170816 05:16:51.617"></status>
</kw>
<status endtime="20170816 05:16:51.618" status="PASS" starttime="20170816 05:16:51.615"></status>
</kw>
<status endtime="20170816 05:16:51.618" status="PASS" starttime="20170816 05:16:51.615"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:16:52.034" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170816 05:16:52.034" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:16:52.035" status="PASS" starttime="20170816 05:16:51.618"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:16:52.036" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:16:52.037" status="PASS" starttime="20170816 05:16:52.036"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:16:52.038" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:16:52.038" status="PASS" starttime="20170816 05:16:52.037"></status>
</kw>
<status endtime="20170816 05:16:52.038" status="PASS" starttime="20170816 05:16:52.037"></status>
</kw>
<status endtime="20170816 05:16:52.038" status="PASS" starttime="20170816 05:16:52.035"></status>
</kw>
<status endtime="20170816 05:16:52.038" status="PASS" starttime="20170816 05:16:52.035"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:16:52.039" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:16:52.039" status="PASS" starttime="20170816 05:16:52.039"></status>
</kw>
<msg timestamp="20170816 05:16:52.039" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:16:52.039" status="PASS" starttime="20170816 05:16:51.209"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:16:52.040" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:16:52.040" status="PASS" starttime="20170816 05:16:52.039"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:16:52.040" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:16:52.040" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:16:52.040" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170816 05:16:52.040" status="PASS" starttime="20170816 05:16:52.040"></status>
</kw>
<msg timestamp="20170816 05:16:52.041" level="INFO">${state} = Off</msg>
<status endtime="20170816 05:16:52.041" status="PASS" starttime="20170816 05:16:51.209"></status>
</kw>
<msg timestamp="20170816 05:16:52.041" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170816 05:16:52.041" status="PASS" starttime="20170816 05:16:51.208"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170816 05:16:52.042" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170816 05:16:52.042" status="FAIL" starttime="20170816 05:16:52.041"></status>
</kw>
<status endtime="20170816 05:16:52.042" status="FAIL" starttime="20170816 05:16:51.208"></status>
</kw>
<msg timestamp="20170816 05:16:52.042" level="INFO">${status} = False</msg>
<status endtime="20170816 05:16:52.042" status="PASS" starttime="20170816 05:16:51.208"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status endtime="20170816 05:16:52.043" status="PASS" starttime="20170816 05:16:52.042"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:16:52.047" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:16:52.047" status="PASS" starttime="20170816 05:16:52.046"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:16:52.048" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:16:52.048" status="PASS" starttime="20170816 05:16:52.047"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:16:52.048" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:16:52.048" status="PASS" starttime="20170816 05:16:52.048"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:16:52.049" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:16:52.049" status="PASS" starttime="20170816 05:16:52.049"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:16:52.436" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:16:52.437" status="PASS" starttime="20170816 05:16:52.050"></status>
</kw>
<msg timestamp="20170816 05:16:52.437" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:16:52.437" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:16:52.437" status="PASS" starttime="20170816 05:16:52.049"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:16:52.437" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:16:52.438" status="PASS" starttime="20170816 05:16:52.437"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:16:52.438" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:16:52.438" status="PASS" starttime="20170816 05:16:52.438"></status>
</kw>
<status endtime="20170816 05:16:52.438" status="PASS" starttime="20170816 05:16:52.046"></status>
</kw>
<status endtime="20170816 05:16:52.438" status="PASS" starttime="20170816 05:16:52.045"></status>
</kw>
<status endtime="20170816 05:16:52.439" status="PASS" starttime="20170816 05:16:52.044"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:16:52.440" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170816 05:16:52.440" status="PASS" starttime="20170816 05:16:52.439"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:16:52.442" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170816 05:16:52.442" status="PASS" starttime="20170816 05:16:52.442"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:16:52.443" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170816 05:16:52.443" status="PASS" starttime="20170816 05:16:52.443"></status>
</kw>
<status endtime="20170816 05:16:52.444" status="PASS" starttime="20170816 05:16:52.443"></status>
</kw>
<status endtime="20170816 05:16:52.444" status="PASS" starttime="20170816 05:16:52.441"></status>
</kw>
<status endtime="20170816 05:16:52.444" status="PASS" starttime="20170816 05:16:52.440"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:16:53.084" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170816 05:16:53.084" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:16:53.084" status="PASS" starttime="20170816 05:16:52.444"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:16:53.086" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:16:53.086" status="PASS" starttime="20170816 05:16:53.085"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:16:53.087" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:16:53.087" status="PASS" starttime="20170816 05:16:53.087"></status>
</kw>
<status endtime="20170816 05:16:53.088" status="PASS" starttime="20170816 05:16:53.087"></status>
</kw>
<status endtime="20170816 05:16:53.088" status="PASS" starttime="20170816 05:16:53.085"></status>
</kw>
<status endtime="20170816 05:16:53.088" status="PASS" starttime="20170816 05:16:53.084"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:16:53.088" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:16:53.088" status="PASS" starttime="20170816 05:16:53.088"></status>
</kw>
<msg timestamp="20170816 05:16:53.088" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:16:53.088" status="PASS" starttime="20170816 05:16:52.044"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:16:53.089" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:16:53.089" status="PASS" starttime="20170816 05:16:53.089"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:16:53.090" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:16:53.090" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:16:53.090" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit'}</msg>
<status endtime="20170816 05:16:53.090" status="PASS" starttime="20170816 05:16:53.089"></status>
</kw>
<msg timestamp="20170816 05:16:53.090" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170816 05:16:53.090" status="PASS" starttime="20170816 05:16:52.043"></status>
</kw>
<msg timestamp="20170816 05:16:53.090" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170816 05:16:53.090" status="PASS" starttime="20170816 05:16:52.043"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170816 05:16:53.091" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170816 05:16:53.091" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170816 05:16:53.091" status="FAIL" starttime="20170816 05:16:53.091"></status>
</kw>
<status endtime="20170816 05:16:53.091" status="FAIL" starttime="20170816 05:16:51.207"></status>
</kw>
<status endtime="20170816 05:16:53.091" status="FAIL" starttime="20170816 05:16:49.180"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:17:03.097" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:17:03.097" status="PASS" starttime="20170816 05:17:03.096"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:17:03.098" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:17:03.098" status="PASS" starttime="20170816 05:17:03.097"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:17:03.098" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:17:03.098" status="PASS" starttime="20170816 05:17:03.098"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:17:03.099" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:17:03.099" status="PASS" starttime="20170816 05:17:03.099"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:17:03.532" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:17:03.532" status="PASS" starttime="20170816 05:17:03.100"></status>
</kw>
<msg timestamp="20170816 05:17:03.532" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:17:03.532" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:17:03.532" status="PASS" starttime="20170816 05:17:03.099"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:17:03.533" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:17:03.533" status="PASS" starttime="20170816 05:17:03.532"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:17:03.534" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:17:03.534" status="PASS" starttime="20170816 05:17:03.533"></status>
</kw>
<status endtime="20170816 05:17:03.534" status="PASS" starttime="20170816 05:17:03.096"></status>
</kw>
<status endtime="20170816 05:17:03.534" status="PASS" starttime="20170816 05:17:03.095"></status>
</kw>
<status endtime="20170816 05:17:03.534" status="PASS" starttime="20170816 05:17:03.095"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:17:03.535" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170816 05:17:03.535" status="PASS" starttime="20170816 05:17:03.534"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:17:03.537" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170816 05:17:03.537" status="PASS" starttime="20170816 05:17:03.536"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:17:03.538" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170816 05:17:03.538" status="PASS" starttime="20170816 05:17:03.537"></status>
</kw>
<status endtime="20170816 05:17:03.538" status="PASS" starttime="20170816 05:17:03.537"></status>
</kw>
<status endtime="20170816 05:17:03.538" status="PASS" starttime="20170816 05:17:03.535"></status>
</kw>
<status endtime="20170816 05:17:03.538" status="PASS" starttime="20170816 05:17:03.535"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:17:03.717" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 05:17:03.717" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:17:03.717" status="PASS" starttime="20170816 05:17:03.538"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:17:03.719" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:17:03.719" status="PASS" starttime="20170816 05:17:03.718"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:17:03.720" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:17:03.720" status="PASS" starttime="20170816 05:17:03.720"></status>
</kw>
<status endtime="20170816 05:17:03.720" status="PASS" starttime="20170816 05:17:03.719"></status>
</kw>
<status endtime="20170816 05:17:03.720" status="PASS" starttime="20170816 05:17:03.718"></status>
</kw>
<status endtime="20170816 05:17:03.720" status="PASS" starttime="20170816 05:17:03.717"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:17:03.721" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:17:03.721" status="PASS" starttime="20170816 05:17:03.721"></status>
</kw>
<msg timestamp="20170816 05:17:03.721" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:17:03.721" status="PASS" starttime="20170816 05:17:03.094"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:17:03.722" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:17:03.722" status="PASS" starttime="20170816 05:17:03.721"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:17:03.722" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:17:03.722" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:17:03.722" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170816 05:17:03.722" status="PASS" starttime="20170816 05:17:03.722"></status>
</kw>
<msg timestamp="20170816 05:17:03.723" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170816 05:17:03.723" status="PASS" starttime="20170816 05:17:03.093"></status>
</kw>
<msg timestamp="20170816 05:17:03.723" level="INFO">${power_state} = On</msg>
<status endtime="20170816 05:17:03.723" status="PASS" starttime="20170816 05:17:03.093"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170816 05:17:03.724" status="PASS" starttime="20170816 05:17:03.723"></status>
</kw>
<status endtime="20170816 05:17:03.724" status="PASS" starttime="20170816 05:17:03.093"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:17:03.727" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:17:03.728" status="PASS" starttime="20170816 05:17:03.727"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:17:03.729" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:17:03.729" status="PASS" starttime="20170816 05:17:03.728"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:17:03.729" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:17:03.729" status="PASS" starttime="20170816 05:17:03.729"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:17:03.730" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:17:03.730" status="PASS" starttime="20170816 05:17:03.730"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:17:04.248" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:17:04.248" status="PASS" starttime="20170816 05:17:03.731"></status>
</kw>
<msg timestamp="20170816 05:17:04.249" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:17:04.249" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:17:04.249" status="PASS" starttime="20170816 05:17:03.730"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:17:04.250" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:17:04.250" status="PASS" starttime="20170816 05:17:04.249"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:17:04.251" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:17:04.251" status="PASS" starttime="20170816 05:17:04.250"></status>
</kw>
<status endtime="20170816 05:17:04.251" status="PASS" starttime="20170816 05:17:03.727"></status>
</kw>
<status endtime="20170816 05:17:04.251" status="PASS" starttime="20170816 05:17:03.726"></status>
</kw>
<status endtime="20170816 05:17:04.251" status="PASS" starttime="20170816 05:17:03.726"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:17:04.252" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170816 05:17:04.252" status="PASS" starttime="20170816 05:17:04.252"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:17:04.254" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170816 05:17:04.254" status="PASS" starttime="20170816 05:17:04.254"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:17:04.255" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170816 05:17:04.255" status="PASS" starttime="20170816 05:17:04.255"></status>
</kw>
<status endtime="20170816 05:17:04.255" status="PASS" starttime="20170816 05:17:04.254"></status>
</kw>
<status endtime="20170816 05:17:04.256" status="PASS" starttime="20170816 05:17:04.253"></status>
</kw>
<status endtime="20170816 05:17:04.256" status="PASS" starttime="20170816 05:17:04.252"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:17:04.792" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 05:17:04.792" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:17:04.792" status="PASS" starttime="20170816 05:17:04.256"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:17:04.794" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:17:04.794" status="PASS" starttime="20170816 05:17:04.793"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:17:04.795" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:17:04.795" status="PASS" starttime="20170816 05:17:04.794"></status>
</kw>
<status endtime="20170816 05:17:04.795" status="PASS" starttime="20170816 05:17:04.794"></status>
</kw>
<status endtime="20170816 05:17:04.795" status="PASS" starttime="20170816 05:17:04.793"></status>
</kw>
<status endtime="20170816 05:17:04.795" status="PASS" starttime="20170816 05:17:04.792"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:17:04.795" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:17:04.796" status="PASS" starttime="20170816 05:17:04.795"></status>
</kw>
<msg timestamp="20170816 05:17:04.796" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:17:04.796" status="PASS" starttime="20170816 05:17:03.725"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:17:04.796" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:17:04.796" status="PASS" starttime="20170816 05:17:04.796"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:17:04.797" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:17:04.797" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:17:04.797" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170816 05:17:04.797" status="PASS" starttime="20170816 05:17:04.797"></status>
</kw>
<msg timestamp="20170816 05:17:04.797" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170816 05:17:04.797" status="PASS" starttime="20170816 05:17:03.724"></status>
</kw>
<msg timestamp="20170816 05:17:04.798" level="INFO">${host_state} = Running</msg>
<status endtime="20170816 05:17:04.798" status="PASS" starttime="20170816 05:17:03.724"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170816 05:17:04.798" status="PASS" starttime="20170816 05:17:04.798"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:17:04.807" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:17:04.807" status="PASS" starttime="20170816 05:17:04.806"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:17:04.808" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:17:04.808" status="PASS" starttime="20170816 05:17:04.808"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:17:04.808" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:17:04.809" status="PASS" starttime="20170816 05:17:04.808"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:17:04.809" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:17:04.809" status="PASS" starttime="20170816 05:17:04.809"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:17:05.244" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:17:05.244" status="PASS" starttime="20170816 05:17:04.810"></status>
</kw>
<msg timestamp="20170816 05:17:05.244" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:17:05.244" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:17:05.244" status="PASS" starttime="20170816 05:17:04.810"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:17:05.245" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:17:05.245" status="PASS" starttime="20170816 05:17:05.245"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:17:05.246" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:17:05.246" status="PASS" starttime="20170816 05:17:05.245"></status>
</kw>
<status endtime="20170816 05:17:05.246" status="PASS" starttime="20170816 05:17:04.806"></status>
</kw>
<status endtime="20170816 05:17:05.246" status="PASS" starttime="20170816 05:17:04.805"></status>
</kw>
<status endtime="20170816 05:17:05.246" status="PASS" starttime="20170816 05:17:04.805"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:17:05.247" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170816 05:17:05.247" status="PASS" starttime="20170816 05:17:05.246"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:17:05.249" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170816 05:17:05.249" status="PASS" starttime="20170816 05:17:05.248"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:17:05.250" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170816 05:17:05.250" status="PASS" starttime="20170816 05:17:05.250"></status>
</kw>
<status endtime="20170816 05:17:05.250" status="PASS" starttime="20170816 05:17:05.249"></status>
</kw>
<status endtime="20170816 05:17:05.250" status="PASS" starttime="20170816 05:17:05.247"></status>
</kw>
<status endtime="20170816 05:17:05.250" status="PASS" starttime="20170816 05:17:05.247"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:17:06.037" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170816 05:17:06.037" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:17:06.037" status="PASS" starttime="20170816 05:17:05.251"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:17:06.039" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:17:06.039" status="PASS" starttime="20170816 05:17:06.039"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:17:06.040" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:17:06.040" status="PASS" starttime="20170816 05:17:06.040"></status>
</kw>
<status endtime="20170816 05:17:06.040" status="PASS" starttime="20170816 05:17:06.039"></status>
</kw>
<status endtime="20170816 05:17:06.040" status="PASS" starttime="20170816 05:17:06.038"></status>
</kw>
<status endtime="20170816 05:17:06.040" status="PASS" starttime="20170816 05:17:06.038"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:17:06.041" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:17:06.041" status="PASS" starttime="20170816 05:17:06.041"></status>
</kw>
<msg timestamp="20170816 05:17:06.041" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:17:06.041" status="PASS" starttime="20170816 05:17:04.804"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:17:06.042" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:17:06.042" status="PASS" starttime="20170816 05:17:06.041"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:17:06.042" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:17:06.042" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:17:06.043" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170816 05:17:06.043" status="PASS" starttime="20170816 05:17:06.042"></status>
</kw>
<msg timestamp="20170816 05:17:06.043" level="INFO">${state} = Off</msg>
<status endtime="20170816 05:17:06.043" status="PASS" starttime="20170816 05:17:04.803"></status>
</kw>
<msg timestamp="20170816 05:17:06.043" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170816 05:17:06.043" status="PASS" starttime="20170816 05:17:04.799"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170816 05:17:06.044" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170816 05:17:06.044" status="FAIL" starttime="20170816 05:17:06.044"></status>
</kw>
<status endtime="20170816 05:17:06.044" status="FAIL" starttime="20170816 05:17:04.799"></status>
</kw>
<msg timestamp="20170816 05:17:06.044" level="INFO">${status} = False</msg>
<status endtime="20170816 05:17:06.044" status="PASS" starttime="20170816 05:17:04.799"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status endtime="20170816 05:17:06.045" status="PASS" starttime="20170816 05:17:06.045"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:17:06.049" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:17:06.049" status="PASS" starttime="20170816 05:17:06.048"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:17:06.050" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:17:06.050" status="PASS" starttime="20170816 05:17:06.049"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:17:06.050" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:17:06.050" status="PASS" starttime="20170816 05:17:06.050"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:17:06.051" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:17:06.051" status="PASS" starttime="20170816 05:17:06.050"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:17:06.466" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:17:06.467" status="PASS" starttime="20170816 05:17:06.052"></status>
</kw>
<msg timestamp="20170816 05:17:06.467" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:17:06.467" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:17:06.467" status="PASS" starttime="20170816 05:17:06.051"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:17:06.467" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:17:06.468" status="PASS" starttime="20170816 05:17:06.467"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:17:06.468" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:17:06.468" status="PASS" starttime="20170816 05:17:06.468"></status>
</kw>
<status endtime="20170816 05:17:06.468" status="PASS" starttime="20170816 05:17:06.048"></status>
</kw>
<status endtime="20170816 05:17:06.468" status="PASS" starttime="20170816 05:17:06.047"></status>
</kw>
<status endtime="20170816 05:17:06.469" status="PASS" starttime="20170816 05:17:06.047"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:17:06.469" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170816 05:17:06.469" status="PASS" starttime="20170816 05:17:06.469"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:17:06.471" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170816 05:17:06.471" status="PASS" starttime="20170816 05:17:06.471"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:17:06.472" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170816 05:17:06.472" status="PASS" starttime="20170816 05:17:06.472"></status>
</kw>
<status endtime="20170816 05:17:06.472" status="PASS" starttime="20170816 05:17:06.471"></status>
</kw>
<status endtime="20170816 05:17:06.473" status="PASS" starttime="20170816 05:17:06.470"></status>
</kw>
<status endtime="20170816 05:17:06.473" status="PASS" starttime="20170816 05:17:06.469"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:17:07.217" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170816 05:17:07.217" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:17:07.217" status="PASS" starttime="20170816 05:17:06.473"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:17:07.219" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:17:07.219" status="PASS" starttime="20170816 05:17:07.219"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:17:07.220" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:17:07.220" status="PASS" starttime="20170816 05:17:07.220"></status>
</kw>
<status endtime="20170816 05:17:07.220" status="PASS" starttime="20170816 05:17:07.219"></status>
</kw>
<status endtime="20170816 05:17:07.220" status="PASS" starttime="20170816 05:17:07.218"></status>
</kw>
<status endtime="20170816 05:17:07.220" status="PASS" starttime="20170816 05:17:07.218"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:17:07.221" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:17:07.221" status="PASS" starttime="20170816 05:17:07.221"></status>
</kw>
<msg timestamp="20170816 05:17:07.221" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:17:07.221" status="PASS" starttime="20170816 05:17:06.046"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:17:07.222" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:17:07.222" status="PASS" starttime="20170816 05:17:07.221"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:17:07.222" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:17:07.222" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:17:07.223" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit'}</msg>
<status endtime="20170816 05:17:07.223" status="PASS" starttime="20170816 05:17:07.222"></status>
</kw>
<msg timestamp="20170816 05:17:07.223" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170816 05:17:07.223" status="PASS" starttime="20170816 05:17:06.046"></status>
</kw>
<msg timestamp="20170816 05:17:07.223" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170816 05:17:07.223" status="PASS" starttime="20170816 05:17:06.045"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170816 05:17:07.224" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170816 05:17:07.224" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170816 05:17:07.224" status="FAIL" starttime="20170816 05:17:07.224"></status>
</kw>
<status endtime="20170816 05:17:07.224" status="FAIL" starttime="20170816 05:17:04.798"></status>
</kw>
<status endtime="20170816 05:17:07.224" status="FAIL" starttime="20170816 05:17:03.092"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:17:17.231" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:17:17.231" status="PASS" starttime="20170816 05:17:17.230"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:17:17.232" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:17:17.232" status="PASS" starttime="20170816 05:17:17.232"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:17:17.233" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:17:17.233" status="PASS" starttime="20170816 05:17:17.233"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:17:17.235" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:17:17.235" status="PASS" starttime="20170816 05:17:17.234"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:17:17.940" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:17:17.940" status="PASS" starttime="20170816 05:17:17.236"></status>
</kw>
<msg timestamp="20170816 05:17:17.940" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:17:17.940" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:17:17.940" status="PASS" starttime="20170816 05:17:17.235"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:17:17.941" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:17:17.941" status="PASS" starttime="20170816 05:17:17.940"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:17:17.941" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:17:17.942" status="PASS" starttime="20170816 05:17:17.941"></status>
</kw>
<status endtime="20170816 05:17:17.942" status="PASS" starttime="20170816 05:17:17.229"></status>
</kw>
<status endtime="20170816 05:17:17.942" status="PASS" starttime="20170816 05:17:17.228"></status>
</kw>
<status endtime="20170816 05:17:17.942" status="PASS" starttime="20170816 05:17:17.228"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:17:17.942" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170816 05:17:17.943" status="PASS" starttime="20170816 05:17:17.942"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:17:17.945" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170816 05:17:17.945" status="PASS" starttime="20170816 05:17:17.944"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:17:17.946" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170816 05:17:17.946" status="PASS" starttime="20170816 05:17:17.946"></status>
</kw>
<status endtime="20170816 05:17:17.946" status="PASS" starttime="20170816 05:17:17.945"></status>
</kw>
<status endtime="20170816 05:17:17.946" status="PASS" starttime="20170816 05:17:17.943"></status>
</kw>
<status endtime="20170816 05:17:17.946" status="PASS" starttime="20170816 05:17:17.943"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:17:18.144" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 05:17:18.144" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:17:18.144" status="PASS" starttime="20170816 05:17:17.946"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:17:18.146" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:17:18.146" status="PASS" starttime="20170816 05:17:18.146"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:17:18.148" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:17:18.148" status="PASS" starttime="20170816 05:17:18.147"></status>
</kw>
<status endtime="20170816 05:17:18.148" status="PASS" starttime="20170816 05:17:18.147"></status>
</kw>
<status endtime="20170816 05:17:18.148" status="PASS" starttime="20170816 05:17:18.145"></status>
</kw>
<status endtime="20170816 05:17:18.148" status="PASS" starttime="20170816 05:17:18.145"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:17:18.148" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:17:18.149" status="PASS" starttime="20170816 05:17:18.148"></status>
</kw>
<msg timestamp="20170816 05:17:18.149" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:17:18.149" status="PASS" starttime="20170816 05:17:17.227"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:17:18.149" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:17:18.149" status="PASS" starttime="20170816 05:17:18.149"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:17:18.150" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:17:18.150" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:17:18.150" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170816 05:17:18.150" status="PASS" starttime="20170816 05:17:18.150"></status>
</kw>
<msg timestamp="20170816 05:17:18.151" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170816 05:17:18.151" status="PASS" starttime="20170816 05:17:17.226"></status>
</kw>
<msg timestamp="20170816 05:17:18.151" level="INFO">${power_state} = On</msg>
<status endtime="20170816 05:17:18.151" status="PASS" starttime="20170816 05:17:17.226"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170816 05:17:18.152" status="PASS" starttime="20170816 05:17:18.151"></status>
</kw>
<status endtime="20170816 05:17:18.152" status="PASS" starttime="20170816 05:17:17.226"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:17:18.155" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:17:18.156" status="PASS" starttime="20170816 05:17:18.155"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:17:18.156" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:17:18.156" status="PASS" starttime="20170816 05:17:18.156"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:17:18.157" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:17:18.157" status="PASS" starttime="20170816 05:17:18.157"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:17:18.158" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:17:18.158" status="PASS" starttime="20170816 05:17:18.157"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:17:18.613" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:17:18.613" status="PASS" starttime="20170816 05:17:18.158"></status>
</kw>
<msg timestamp="20170816 05:17:18.613" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:17:18.613" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:17:18.613" status="PASS" starttime="20170816 05:17:18.158"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:17:18.614" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:17:18.614" status="PASS" starttime="20170816 05:17:18.614"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:17:18.615" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:17:18.615" status="PASS" starttime="20170816 05:17:18.614"></status>
</kw>
<status endtime="20170816 05:17:18.615" status="PASS" starttime="20170816 05:17:18.154"></status>
</kw>
<status endtime="20170816 05:17:18.615" status="PASS" starttime="20170816 05:17:18.154"></status>
</kw>
<status endtime="20170816 05:17:18.615" status="PASS" starttime="20170816 05:17:18.153"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:17:18.616" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170816 05:17:18.616" status="PASS" starttime="20170816 05:17:18.615"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:17:18.618" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170816 05:17:18.618" status="PASS" starttime="20170816 05:17:18.617"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:17:18.619" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170816 05:17:18.619" status="PASS" starttime="20170816 05:17:18.619"></status>
</kw>
<status endtime="20170816 05:17:18.619" status="PASS" starttime="20170816 05:17:18.618"></status>
</kw>
<status endtime="20170816 05:17:18.620" status="PASS" starttime="20170816 05:17:18.617"></status>
</kw>
<status endtime="20170816 05:17:18.620" status="PASS" starttime="20170816 05:17:18.616"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:17:18.724" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 05:17:18.725" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:17:18.725" status="PASS" starttime="20170816 05:17:18.620"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:17:18.726" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:17:18.726" status="PASS" starttime="20170816 05:17:18.726"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:17:18.727" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:17:18.727" status="PASS" starttime="20170816 05:17:18.727"></status>
</kw>
<status endtime="20170816 05:17:18.728" status="PASS" starttime="20170816 05:17:18.727"></status>
</kw>
<status endtime="20170816 05:17:18.728" status="PASS" starttime="20170816 05:17:18.725"></status>
</kw>
<status endtime="20170816 05:17:18.728" status="PASS" starttime="20170816 05:17:18.725"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:17:18.728" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:17:18.728" status="PASS" starttime="20170816 05:17:18.728"></status>
</kw>
<msg timestamp="20170816 05:17:18.729" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:17:18.729" status="PASS" starttime="20170816 05:17:18.153"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:17:18.729" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:17:18.729" status="PASS" starttime="20170816 05:17:18.729"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:17:18.730" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:17:18.730" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:17:18.730" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170816 05:17:18.730" status="PASS" starttime="20170816 05:17:18.729"></status>
</kw>
<msg timestamp="20170816 05:17:18.730" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170816 05:17:18.730" status="PASS" starttime="20170816 05:17:18.152"></status>
</kw>
<msg timestamp="20170816 05:17:18.731" level="INFO">${host_state} = Running</msg>
<status endtime="20170816 05:17:18.731" status="PASS" starttime="20170816 05:17:18.152"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170816 05:17:18.731" status="PASS" starttime="20170816 05:17:18.731"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:17:18.736" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:17:18.737" status="PASS" starttime="20170816 05:17:18.736"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:17:18.738" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:17:18.738" status="PASS" starttime="20170816 05:17:18.737"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:17:18.738" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:17:18.738" status="PASS" starttime="20170816 05:17:18.738"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:17:18.739" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:17:18.739" status="PASS" starttime="20170816 05:17:18.739"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:17:18.949" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:17:18.949" status="PASS" starttime="20170816 05:17:18.740"></status>
</kw>
<msg timestamp="20170816 05:17:18.950" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:17:18.950" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:17:18.950" status="PASS" starttime="20170816 05:17:18.739"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:17:18.950" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:17:18.950" status="PASS" starttime="20170816 05:17:18.950"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:17:18.951" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:17:18.951" status="PASS" starttime="20170816 05:17:18.951"></status>
</kw>
<status endtime="20170816 05:17:18.951" status="PASS" starttime="20170816 05:17:18.735"></status>
</kw>
<status endtime="20170816 05:17:18.951" status="PASS" starttime="20170816 05:17:18.735"></status>
</kw>
<status endtime="20170816 05:17:18.952" status="PASS" starttime="20170816 05:17:18.734"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:17:18.952" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170816 05:17:18.952" status="PASS" starttime="20170816 05:17:18.952"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:17:18.954" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170816 05:17:18.954" status="PASS" starttime="20170816 05:17:18.954"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:17:18.955" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170816 05:17:18.955" status="PASS" starttime="20170816 05:17:18.955"></status>
</kw>
<status endtime="20170816 05:17:18.956" status="PASS" starttime="20170816 05:17:18.955"></status>
</kw>
<status endtime="20170816 05:17:18.956" status="PASS" starttime="20170816 05:17:18.953"></status>
</kw>
<status endtime="20170816 05:17:18.956" status="PASS" starttime="20170816 05:17:18.953"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:17:19.038" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170816 05:17:19.038" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:17:19.038" status="PASS" starttime="20170816 05:17:18.956"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:17:19.040" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:17:19.040" status="PASS" starttime="20170816 05:17:19.039"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:17:19.041" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:17:19.041" status="PASS" starttime="20170816 05:17:19.040"></status>
</kw>
<status endtime="20170816 05:17:19.041" status="PASS" starttime="20170816 05:17:19.040"></status>
</kw>
<status endtime="20170816 05:17:19.041" status="PASS" starttime="20170816 05:17:19.039"></status>
</kw>
<status endtime="20170816 05:17:19.041" status="PASS" starttime="20170816 05:17:19.038"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:17:19.042" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:17:19.042" status="PASS" starttime="20170816 05:17:19.041"></status>
</kw>
<msg timestamp="20170816 05:17:19.042" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:17:19.042" status="PASS" starttime="20170816 05:17:18.733"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:17:19.043" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:17:19.043" status="PASS" starttime="20170816 05:17:19.043"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:17:19.044" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:17:19.044" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:17:19.044" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170816 05:17:19.044" status="PASS" starttime="20170816 05:17:19.044"></status>
</kw>
<msg timestamp="20170816 05:17:19.045" level="INFO">${state} = Off</msg>
<status endtime="20170816 05:17:19.045" status="PASS" starttime="20170816 05:17:18.733"></status>
</kw>
<msg timestamp="20170816 05:17:19.045" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170816 05:17:19.045" status="PASS" starttime="20170816 05:17:18.732"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170816 05:17:19.046" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170816 05:17:19.046" status="FAIL" starttime="20170816 05:17:19.045"></status>
</kw>
<status endtime="20170816 05:17:19.046" status="FAIL" starttime="20170816 05:17:18.732"></status>
</kw>
<msg timestamp="20170816 05:17:19.046" level="INFO">${status} = False</msg>
<status endtime="20170816 05:17:19.046" status="PASS" starttime="20170816 05:17:18.732"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status endtime="20170816 05:17:19.047" status="PASS" starttime="20170816 05:17:19.047"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:17:19.053" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:17:19.053" status="PASS" starttime="20170816 05:17:19.052"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:17:19.054" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:17:19.054" status="PASS" starttime="20170816 05:17:19.053"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:17:19.054" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:17:19.054" status="PASS" starttime="20170816 05:17:19.054"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:17:19.055" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:17:19.055" status="PASS" starttime="20170816 05:17:19.055"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:17:19.259" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:17:19.259" status="PASS" starttime="20170816 05:17:19.056"></status>
</kw>
<msg timestamp="20170816 05:17:19.259" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:17:19.259" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:17:19.259" status="PASS" starttime="20170816 05:17:19.055"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:17:19.260" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:17:19.260" status="PASS" starttime="20170816 05:17:19.259"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:17:19.260" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:17:19.261" status="PASS" starttime="20170816 05:17:19.260"></status>
</kw>
<status endtime="20170816 05:17:19.261" status="PASS" starttime="20170816 05:17:19.052"></status>
</kw>
<status endtime="20170816 05:17:19.261" status="PASS" starttime="20170816 05:17:19.051"></status>
</kw>
<status endtime="20170816 05:17:19.261" status="PASS" starttime="20170816 05:17:19.050"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:17:19.261" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170816 05:17:19.261" status="PASS" starttime="20170816 05:17:19.261"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:17:19.264" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170816 05:17:19.264" status="PASS" starttime="20170816 05:17:19.263"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:17:19.265" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170816 05:17:19.265" status="PASS" starttime="20170816 05:17:19.264"></status>
</kw>
<status endtime="20170816 05:17:19.265" status="PASS" starttime="20170816 05:17:19.264"></status>
</kw>
<status endtime="20170816 05:17:19.265" status="PASS" starttime="20170816 05:17:19.262"></status>
</kw>
<status endtime="20170816 05:17:19.265" status="PASS" starttime="20170816 05:17:19.262"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:17:19.384" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170816 05:17:19.384" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:17:19.384" status="PASS" starttime="20170816 05:17:19.265"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:17:19.386" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:17:19.386" status="PASS" starttime="20170816 05:17:19.385"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:17:19.387" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:17:19.387" status="PASS" starttime="20170816 05:17:19.387"></status>
</kw>
<status endtime="20170816 05:17:19.387" status="PASS" starttime="20170816 05:17:19.386"></status>
</kw>
<status endtime="20170816 05:17:19.388" status="PASS" starttime="20170816 05:17:19.385"></status>
</kw>
<status endtime="20170816 05:17:19.388" status="PASS" starttime="20170816 05:17:19.384"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:17:19.388" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:17:19.388" status="PASS" starttime="20170816 05:17:19.388"></status>
</kw>
<msg timestamp="20170816 05:17:19.388" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:17:19.388" status="PASS" starttime="20170816 05:17:19.049"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:17:19.389" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:17:19.389" status="PASS" starttime="20170816 05:17:19.389"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:17:19.389" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:17:19.390" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:17:19.390" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit'}</msg>
<status endtime="20170816 05:17:19.390" status="PASS" starttime="20170816 05:17:19.389"></status>
</kw>
<msg timestamp="20170816 05:17:19.390" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170816 05:17:19.390" status="PASS" starttime="20170816 05:17:19.048"></status>
</kw>
<msg timestamp="20170816 05:17:19.390" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170816 05:17:19.390" status="PASS" starttime="20170816 05:17:19.048"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170816 05:17:19.391" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170816 05:17:19.391" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status endtime="20170816 05:17:19.391" status="FAIL" starttime="20170816 05:17:19.390"></status>
</kw>
<status endtime="20170816 05:17:19.391" status="FAIL" starttime="20170816 05:17:18.731"></status>
</kw>
<status endtime="20170816 05:17:19.391" status="FAIL" starttime="20170816 05:17:17.225"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:17:29.397" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:17:29.398" status="PASS" starttime="20170816 05:17:29.397"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:17:29.398" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:17:29.398" status="PASS" starttime="20170816 05:17:29.398"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:17:29.399" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:17:29.399" status="PASS" starttime="20170816 05:17:29.398"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:17:29.399" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:17:29.400" status="PASS" starttime="20170816 05:17:29.399"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:17:29.686" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:17:29.687" status="PASS" starttime="20170816 05:17:29.400"></status>
</kw>
<msg timestamp="20170816 05:17:29.687" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:17:29.687" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:17:29.687" status="PASS" starttime="20170816 05:17:29.400"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:17:29.688" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:17:29.688" status="PASS" starttime="20170816 05:17:29.687"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:17:29.688" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:17:29.688" status="PASS" starttime="20170816 05:17:29.688"></status>
</kw>
<status endtime="20170816 05:17:29.689" status="PASS" starttime="20170816 05:17:29.396"></status>
</kw>
<status endtime="20170816 05:17:29.689" status="PASS" starttime="20170816 05:17:29.396"></status>
</kw>
<status endtime="20170816 05:17:29.689" status="PASS" starttime="20170816 05:17:29.395"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:17:29.689" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170816 05:17:29.689" status="PASS" starttime="20170816 05:17:29.689"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:17:29.691" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170816 05:17:29.691" status="PASS" starttime="20170816 05:17:29.691"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:17:29.692" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170816 05:17:29.692" status="PASS" starttime="20170816 05:17:29.692"></status>
</kw>
<status endtime="20170816 05:17:29.693" status="PASS" starttime="20170816 05:17:29.692"></status>
</kw>
<status endtime="20170816 05:17:29.693" status="PASS" starttime="20170816 05:17:29.690"></status>
</kw>
<status endtime="20170816 05:17:29.693" status="PASS" starttime="20170816 05:17:29.690"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:17:29.759" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 05:17:29.759" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:17:29.759" status="PASS" starttime="20170816 05:17:29.693"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:17:29.761" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:17:29.761" status="PASS" starttime="20170816 05:17:29.761"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:17:29.762" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:17:29.762" status="PASS" starttime="20170816 05:17:29.762"></status>
</kw>
<status endtime="20170816 05:17:29.762" status="PASS" starttime="20170816 05:17:29.761"></status>
</kw>
<status endtime="20170816 05:17:29.762" status="PASS" starttime="20170816 05:17:29.760"></status>
</kw>
<status endtime="20170816 05:17:29.763" status="PASS" starttime="20170816 05:17:29.760"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:17:29.763" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:17:29.763" status="PASS" starttime="20170816 05:17:29.763"></status>
</kw>
<msg timestamp="20170816 05:17:29.763" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:17:29.763" status="PASS" starttime="20170816 05:17:29.394"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:17:29.764" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:17:29.764" status="PASS" starttime="20170816 05:17:29.764"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:17:29.764" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:17:29.765" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:17:29.765" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170816 05:17:29.765" status="PASS" starttime="20170816 05:17:29.764"></status>
</kw>
<msg timestamp="20170816 05:17:29.765" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170816 05:17:29.765" status="PASS" starttime="20170816 05:17:29.393"></status>
</kw>
<msg timestamp="20170816 05:17:29.765" level="INFO">${power_state} = On</msg>
<status endtime="20170816 05:17:29.765" status="PASS" starttime="20170816 05:17:29.393"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170816 05:17:29.766" status="PASS" starttime="20170816 05:17:29.766"></status>
</kw>
<status endtime="20170816 05:17:29.766" status="PASS" starttime="20170816 05:17:29.393"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:17:29.771" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:17:29.772" status="PASS" starttime="20170816 05:17:29.771"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:17:29.773" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:17:29.773" status="PASS" starttime="20170816 05:17:29.773"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:17:29.774" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:17:29.774" status="PASS" starttime="20170816 05:17:29.774"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:17:29.775" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:17:29.775" status="PASS" starttime="20170816 05:17:29.775"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:17:29.974" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:17:29.974" status="PASS" starttime="20170816 05:17:29.776"></status>
</kw>
<msg timestamp="20170816 05:17:29.974" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:17:29.974" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:17:29.974" status="PASS" starttime="20170816 05:17:29.776"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:17:29.975" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:17:29.975" status="PASS" starttime="20170816 05:17:29.975"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:17:29.976" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:17:29.976" status="PASS" starttime="20170816 05:17:29.975"></status>
</kw>
<status endtime="20170816 05:17:29.976" status="PASS" starttime="20170816 05:17:29.770"></status>
</kw>
<status endtime="20170816 05:17:29.976" status="PASS" starttime="20170816 05:17:29.770"></status>
</kw>
<status endtime="20170816 05:17:29.976" status="PASS" starttime="20170816 05:17:29.769"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:17:29.977" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170816 05:17:29.977" status="PASS" starttime="20170816 05:17:29.976"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:17:29.980" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170816 05:17:29.980" status="PASS" starttime="20170816 05:17:29.979"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:17:29.981" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170816 05:17:29.981" status="PASS" starttime="20170816 05:17:29.981"></status>
</kw>
<status endtime="20170816 05:17:29.981" status="PASS" starttime="20170816 05:17:29.980"></status>
</kw>
<status endtime="20170816 05:17:29.981" status="PASS" starttime="20170816 05:17:29.978"></status>
</kw>
<status endtime="20170816 05:17:29.982" status="PASS" starttime="20170816 05:17:29.977"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:17:30.071" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 05:17:30.071" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:17:30.071" status="PASS" starttime="20170816 05:17:29.982"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:17:30.073" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:17:30.073" status="PASS" starttime="20170816 05:17:30.072"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:17:30.074" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:17:30.074" status="PASS" starttime="20170816 05:17:30.073"></status>
</kw>
<status endtime="20170816 05:17:30.074" status="PASS" starttime="20170816 05:17:30.073"></status>
</kw>
<status endtime="20170816 05:17:30.074" status="PASS" starttime="20170816 05:17:30.072"></status>
</kw>
<status endtime="20170816 05:17:30.074" status="PASS" starttime="20170816 05:17:30.071"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:17:30.075" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:17:30.075" status="PASS" starttime="20170816 05:17:30.074"></status>
</kw>
<msg timestamp="20170816 05:17:30.075" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:17:30.075" status="PASS" starttime="20170816 05:17:29.768"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:17:30.075" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:17:30.076" status="PASS" starttime="20170816 05:17:30.075"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:17:30.076" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:17:30.076" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:17:30.076" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170816 05:17:30.076" status="PASS" starttime="20170816 05:17:30.076"></status>
</kw>
<msg timestamp="20170816 05:17:30.077" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170816 05:17:30.077" status="PASS" starttime="20170816 05:17:29.767"></status>
</kw>
<msg timestamp="20170816 05:17:30.077" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170816 05:17:30.077" status="PASS" starttime="20170816 05:17:29.766"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170816 05:17:30.078" level="FAIL">Running != Quiesced</msg>
<status endtime="20170816 05:17:30.078" status="FAIL" starttime="20170816 05:17:30.077"></status>
</kw>
<status endtime="20170816 05:17:30.078" status="FAIL" starttime="20170816 05:17:29.392"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:17:40.083" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:17:40.084" status="PASS" starttime="20170816 05:17:40.083"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:17:40.084" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:17:40.084" status="PASS" starttime="20170816 05:17:40.084"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:17:40.085" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:17:40.085" status="PASS" starttime="20170816 05:17:40.085"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:17:40.086" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:17:40.086" status="PASS" starttime="20170816 05:17:40.085"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:17:40.326" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:17:40.326" status="PASS" starttime="20170816 05:17:40.086"></status>
</kw>
<msg timestamp="20170816 05:17:40.326" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:17:40.326" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:17:40.326" status="PASS" starttime="20170816 05:17:40.086"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:17:40.327" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:17:40.327" status="PASS" starttime="20170816 05:17:40.327"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:17:40.328" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:17:40.328" status="PASS" starttime="20170816 05:17:40.327"></status>
</kw>
<status endtime="20170816 05:17:40.328" status="PASS" starttime="20170816 05:17:40.082"></status>
</kw>
<status endtime="20170816 05:17:40.328" status="PASS" starttime="20170816 05:17:40.082"></status>
</kw>
<status endtime="20170816 05:17:40.328" status="PASS" starttime="20170816 05:17:40.081"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:17:40.329" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170816 05:17:40.329" status="PASS" starttime="20170816 05:17:40.328"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:17:40.331" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170816 05:17:40.331" status="PASS" starttime="20170816 05:17:40.330"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:17:40.335" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170816 05:17:40.336" status="PASS" starttime="20170816 05:17:40.331"></status>
</kw>
<status endtime="20170816 05:17:40.336" status="PASS" starttime="20170816 05:17:40.331"></status>
</kw>
<status endtime="20170816 05:17:40.336" status="PASS" starttime="20170816 05:17:40.329"></status>
</kw>
<status endtime="20170816 05:17:40.336" status="PASS" starttime="20170816 05:17:40.329"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:17:40.471" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 05:17:40.471" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:17:40.471" status="PASS" starttime="20170816 05:17:40.336"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:17:40.473" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:17:40.473" status="PASS" starttime="20170816 05:17:40.472"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:17:40.474" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:17:40.474" status="PASS" starttime="20170816 05:17:40.474"></status>
</kw>
<status endtime="20170816 05:17:40.474" status="PASS" starttime="20170816 05:17:40.473"></status>
</kw>
<status endtime="20170816 05:17:40.474" status="PASS" starttime="20170816 05:17:40.472"></status>
</kw>
<status endtime="20170816 05:17:40.474" status="PASS" starttime="20170816 05:17:40.471"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:17:40.475" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:17:40.475" status="PASS" starttime="20170816 05:17:40.475"></status>
</kw>
<msg timestamp="20170816 05:17:40.475" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:17:40.475" status="PASS" starttime="20170816 05:17:40.081"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:17:40.476" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:17:40.476" status="PASS" starttime="20170816 05:17:40.475"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:17:40.476" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:17:40.476" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:17:40.477" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170816 05:17:40.477" status="PASS" starttime="20170816 05:17:40.476"></status>
</kw>
<msg timestamp="20170816 05:17:40.477" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170816 05:17:40.477" status="PASS" starttime="20170816 05:17:40.080"></status>
</kw>
<msg timestamp="20170816 05:17:40.477" level="INFO">${power_state} = On</msg>
<status endtime="20170816 05:17:40.477" status="PASS" starttime="20170816 05:17:40.079"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170816 05:17:40.478" status="PASS" starttime="20170816 05:17:40.477"></status>
</kw>
<status endtime="20170816 05:17:40.478" status="PASS" starttime="20170816 05:17:40.079"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:17:40.481" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:17:40.482" status="PASS" starttime="20170816 05:17:40.481"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:17:40.482" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:17:40.482" status="PASS" starttime="20170816 05:17:40.482"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:17:40.483" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:17:40.483" status="PASS" starttime="20170816 05:17:40.483"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:17:40.484" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:17:40.484" status="PASS" starttime="20170816 05:17:40.484"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:17:40.690" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:17:40.690" status="PASS" starttime="20170816 05:17:40.485"></status>
</kw>
<msg timestamp="20170816 05:17:40.690" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:17:40.690" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:17:40.690" status="PASS" starttime="20170816 05:17:40.484"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:17:40.691" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:17:40.691" status="PASS" starttime="20170816 05:17:40.690"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:17:40.691" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:17:40.691" status="PASS" starttime="20170816 05:17:40.691"></status>
</kw>
<status endtime="20170816 05:17:40.692" status="PASS" starttime="20170816 05:17:40.481"></status>
</kw>
<status endtime="20170816 05:17:40.692" status="PASS" starttime="20170816 05:17:40.480"></status>
</kw>
<status endtime="20170816 05:17:40.692" status="PASS" starttime="20170816 05:17:40.480"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:17:40.692" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170816 05:17:40.692" status="PASS" starttime="20170816 05:17:40.692"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:17:40.694" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170816 05:17:40.695" status="PASS" starttime="20170816 05:17:40.694"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:17:40.696" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170816 05:17:40.696" status="PASS" starttime="20170816 05:17:40.695"></status>
</kw>
<status endtime="20170816 05:17:40.696" status="PASS" starttime="20170816 05:17:40.695"></status>
</kw>
<status endtime="20170816 05:17:40.696" status="PASS" starttime="20170816 05:17:40.693"></status>
</kw>
<status endtime="20170816 05:17:40.696" status="PASS" starttime="20170816 05:17:40.693"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:17:40.796" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 05:17:40.796" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:17:40.796" status="PASS" starttime="20170816 05:17:40.696"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:17:40.798" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:17:40.798" status="PASS" starttime="20170816 05:17:40.798"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:17:40.799" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:17:40.799" status="PASS" starttime="20170816 05:17:40.799"></status>
</kw>
<status endtime="20170816 05:17:40.800" status="PASS" starttime="20170816 05:17:40.798"></status>
</kw>
<status endtime="20170816 05:17:40.800" status="PASS" starttime="20170816 05:17:40.797"></status>
</kw>
<status endtime="20170816 05:17:40.800" status="PASS" starttime="20170816 05:17:40.797"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:17:40.800" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:17:40.800" status="PASS" starttime="20170816 05:17:40.800"></status>
</kw>
<msg timestamp="20170816 05:17:40.800" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:17:40.800" status="PASS" starttime="20170816 05:17:40.479"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:17:40.801" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:17:40.801" status="PASS" starttime="20170816 05:17:40.801"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:17:40.802" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:17:40.802" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:17:40.802" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170816 05:17:40.802" status="PASS" starttime="20170816 05:17:40.801"></status>
</kw>
<msg timestamp="20170816 05:17:40.802" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170816 05:17:40.802" status="PASS" starttime="20170816 05:17:40.478"></status>
</kw>
<msg timestamp="20170816 05:17:40.802" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170816 05:17:40.802" status="PASS" starttime="20170816 05:17:40.478"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170816 05:17:40.803" level="FAIL">Running != Quiesced</msg>
<status endtime="20170816 05:17:40.803" status="FAIL" starttime="20170816 05:17:40.803"></status>
</kw>
<status endtime="20170816 05:17:40.803" status="FAIL" starttime="20170816 05:17:40.078"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:17:50.809" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:17:50.810" status="PASS" starttime="20170816 05:17:50.809"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:17:50.811" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:17:50.811" status="PASS" starttime="20170816 05:17:50.810"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:17:50.811" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:17:50.811" status="PASS" starttime="20170816 05:17:50.811"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:17:50.812" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:17:50.812" status="PASS" starttime="20170816 05:17:50.812"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:17:51.057" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:17:51.057" status="PASS" starttime="20170816 05:17:50.813"></status>
</kw>
<msg timestamp="20170816 05:17:51.057" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:17:51.057" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:17:51.057" status="PASS" starttime="20170816 05:17:50.813"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:17:51.058" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:17:51.058" status="PASS" starttime="20170816 05:17:51.058"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:17:51.059" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:17:51.059" status="PASS" starttime="20170816 05:17:51.058"></status>
</kw>
<status endtime="20170816 05:17:51.059" status="PASS" starttime="20170816 05:17:50.808"></status>
</kw>
<status endtime="20170816 05:17:51.059" status="PASS" starttime="20170816 05:17:50.807"></status>
</kw>
<status endtime="20170816 05:17:51.059" status="PASS" starttime="20170816 05:17:50.807"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:17:51.060" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170816 05:17:51.060" status="PASS" starttime="20170816 05:17:51.059"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:17:51.062" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170816 05:17:51.062" status="PASS" starttime="20170816 05:17:51.061"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:17:51.063" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170816 05:17:51.063" status="PASS" starttime="20170816 05:17:51.063"></status>
</kw>
<status endtime="20170816 05:17:51.063" status="PASS" starttime="20170816 05:17:51.062"></status>
</kw>
<status endtime="20170816 05:17:51.063" status="PASS" starttime="20170816 05:17:51.061"></status>
</kw>
<status endtime="20170816 05:17:51.063" status="PASS" starttime="20170816 05:17:51.060"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:17:51.151" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 05:17:51.152" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:17:51.152" status="PASS" starttime="20170816 05:17:51.063"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:17:51.154" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:17:51.154" status="PASS" starttime="20170816 05:17:51.153"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:17:51.155" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:17:51.155" status="PASS" starttime="20170816 05:17:51.155"></status>
</kw>
<status endtime="20170816 05:17:51.155" status="PASS" starttime="20170816 05:17:51.154"></status>
</kw>
<status endtime="20170816 05:17:51.155" status="PASS" starttime="20170816 05:17:51.153"></status>
</kw>
<status endtime="20170816 05:17:51.155" status="PASS" starttime="20170816 05:17:51.152"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:17:51.156" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:17:51.156" status="PASS" starttime="20170816 05:17:51.156"></status>
</kw>
<msg timestamp="20170816 05:17:51.156" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:17:51.156" status="PASS" starttime="20170816 05:17:50.806"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:17:51.157" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:17:51.157" status="PASS" starttime="20170816 05:17:51.157"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:17:51.158" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:17:51.158" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:17:51.158" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170816 05:17:51.158" status="PASS" starttime="20170816 05:17:51.157"></status>
</kw>
<msg timestamp="20170816 05:17:51.158" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170816 05:17:51.158" status="PASS" starttime="20170816 05:17:50.805"></status>
</kw>
<msg timestamp="20170816 05:17:51.158" level="INFO">${power_state} = On</msg>
<status endtime="20170816 05:17:51.158" status="PASS" starttime="20170816 05:17:50.805"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170816 05:17:51.159" status="PASS" starttime="20170816 05:17:51.159"></status>
</kw>
<status endtime="20170816 05:17:51.159" status="PASS" starttime="20170816 05:17:50.805"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:17:51.162" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:17:51.163" status="PASS" starttime="20170816 05:17:51.162"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:17:51.163" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:17:51.164" status="PASS" starttime="20170816 05:17:51.163"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:17:51.164" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:17:51.164" status="PASS" starttime="20170816 05:17:51.164"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:17:51.165" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:17:51.165" status="PASS" starttime="20170816 05:17:51.164"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:17:51.408" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:17:51.408" status="PASS" starttime="20170816 05:17:51.165"></status>
</kw>
<msg timestamp="20170816 05:17:51.408" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:17:51.408" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:17:51.408" status="PASS" starttime="20170816 05:17:51.165"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:17:51.409" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:17:51.409" status="PASS" starttime="20170816 05:17:51.408"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:17:51.409" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:17:51.410" status="PASS" starttime="20170816 05:17:51.409"></status>
</kw>
<status endtime="20170816 05:17:51.410" status="PASS" starttime="20170816 05:17:51.162"></status>
</kw>
<status endtime="20170816 05:17:51.410" status="PASS" starttime="20170816 05:17:51.161"></status>
</kw>
<status endtime="20170816 05:17:51.410" status="PASS" starttime="20170816 05:17:51.161"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:17:51.410" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170816 05:17:51.411" status="PASS" starttime="20170816 05:17:51.410"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:17:51.414" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170816 05:17:51.414" status="PASS" starttime="20170816 05:17:51.412"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:17:51.415" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170816 05:17:51.415" status="PASS" starttime="20170816 05:17:51.415"></status>
</kw>
<status endtime="20170816 05:17:51.415" status="PASS" starttime="20170816 05:17:51.414"></status>
</kw>
<status endtime="20170816 05:17:51.415" status="PASS" starttime="20170816 05:17:51.411"></status>
</kw>
<status endtime="20170816 05:17:51.416" status="PASS" starttime="20170816 05:17:51.411"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:17:51.533" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 05:17:51.533" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:17:51.533" status="PASS" starttime="20170816 05:17:51.416"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:17:51.535" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:17:51.535" status="PASS" starttime="20170816 05:17:51.535"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:17:51.536" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:17:51.536" status="PASS" starttime="20170816 05:17:51.536"></status>
</kw>
<status endtime="20170816 05:17:51.537" status="PASS" starttime="20170816 05:17:51.536"></status>
</kw>
<status endtime="20170816 05:17:51.537" status="PASS" starttime="20170816 05:17:51.534"></status>
</kw>
<status endtime="20170816 05:17:51.537" status="PASS" starttime="20170816 05:17:51.534"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:17:51.537" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:17:51.537" status="PASS" starttime="20170816 05:17:51.537"></status>
</kw>
<msg timestamp="20170816 05:17:51.537" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:17:51.537" status="PASS" starttime="20170816 05:17:51.160"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:17:51.538" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:17:51.538" status="PASS" starttime="20170816 05:17:51.538"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:17:51.539" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:17:51.539" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:17:51.539" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170816 05:17:51.539" status="PASS" starttime="20170816 05:17:51.538"></status>
</kw>
<msg timestamp="20170816 05:17:51.539" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170816 05:17:51.539" status="PASS" starttime="20170816 05:17:51.160"></status>
</kw>
<msg timestamp="20170816 05:17:51.539" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170816 05:17:51.539" status="PASS" starttime="20170816 05:17:51.159"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170816 05:17:51.540" level="FAIL">Running != Quiesced</msg>
<status endtime="20170816 05:17:51.540" status="FAIL" starttime="20170816 05:17:51.540"></status>
</kw>
<status endtime="20170816 05:17:51.540" status="FAIL" starttime="20170816 05:17:50.804"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:18:01.546" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:18:01.546" status="PASS" starttime="20170816 05:18:01.545"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:18:01.547" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:18:01.547" status="PASS" starttime="20170816 05:18:01.546"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:18:01.547" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:18:01.547" status="PASS" starttime="20170816 05:18:01.547"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:18:01.549" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:18:01.549" status="PASS" starttime="20170816 05:18:01.548"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:18:01.751" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:18:01.751" status="PASS" starttime="20170816 05:18:01.549"></status>
</kw>
<msg timestamp="20170816 05:18:01.751" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:18:01.751" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:18:01.751" status="PASS" starttime="20170816 05:18:01.549"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:18:01.752" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:18:01.752" status="PASS" starttime="20170816 05:18:01.751"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:18:01.752" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:18:01.753" status="PASS" starttime="20170816 05:18:01.752"></status>
</kw>
<status endtime="20170816 05:18:01.753" status="PASS" starttime="20170816 05:18:01.545"></status>
</kw>
<status endtime="20170816 05:18:01.753" status="PASS" starttime="20170816 05:18:01.544"></status>
</kw>
<status endtime="20170816 05:18:01.753" status="PASS" starttime="20170816 05:18:01.544"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:18:01.753" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170816 05:18:01.754" status="PASS" starttime="20170816 05:18:01.753"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:18:01.756" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170816 05:18:01.756" status="PASS" starttime="20170816 05:18:01.755"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:18:01.756" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170816 05:18:01.757" status="PASS" starttime="20170816 05:18:01.756"></status>
</kw>
<status endtime="20170816 05:18:01.757" status="PASS" starttime="20170816 05:18:01.756"></status>
</kw>
<status endtime="20170816 05:18:01.757" status="PASS" starttime="20170816 05:18:01.754"></status>
</kw>
<status endtime="20170816 05:18:01.757" status="PASS" starttime="20170816 05:18:01.754"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:18:01.836" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 05:18:01.836" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:18:01.836" status="PASS" starttime="20170816 05:18:01.757"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:18:01.838" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:18:01.838" status="PASS" starttime="20170816 05:18:01.837"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:18:01.839" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:18:01.839" status="PASS" starttime="20170816 05:18:01.839"></status>
</kw>
<status endtime="20170816 05:18:01.839" status="PASS" starttime="20170816 05:18:01.838"></status>
</kw>
<status endtime="20170816 05:18:01.839" status="PASS" starttime="20170816 05:18:01.837"></status>
</kw>
<status endtime="20170816 05:18:01.839" status="PASS" starttime="20170816 05:18:01.836"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:18:01.840" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:18:01.840" status="PASS" starttime="20170816 05:18:01.840"></status>
</kw>
<msg timestamp="20170816 05:18:01.840" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:18:01.840" status="PASS" starttime="20170816 05:18:01.543"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:18:01.841" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:18:01.841" status="PASS" starttime="20170816 05:18:01.840"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:18:01.841" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:18:01.841" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:18:01.841" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170816 05:18:01.841" status="PASS" starttime="20170816 05:18:01.841"></status>
</kw>
<msg timestamp="20170816 05:18:01.842" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170816 05:18:01.842" status="PASS" starttime="20170816 05:18:01.542"></status>
</kw>
<msg timestamp="20170816 05:18:01.842" level="INFO">${power_state} = On</msg>
<status endtime="20170816 05:18:01.842" status="PASS" starttime="20170816 05:18:01.542"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170816 05:18:01.843" status="PASS" starttime="20170816 05:18:01.842"></status>
</kw>
<status endtime="20170816 05:18:01.843" status="PASS" starttime="20170816 05:18:01.542"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:18:01.847" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:18:01.847" status="PASS" starttime="20170816 05:18:01.846"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:18:01.848" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:18:01.848" status="PASS" starttime="20170816 05:18:01.847"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:18:01.848" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:18:01.848" status="PASS" starttime="20170816 05:18:01.848"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:18:01.849" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:18:01.849" status="PASS" starttime="20170816 05:18:01.849"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:18:02.152" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:18:02.153" status="PASS" starttime="20170816 05:18:01.850"></status>
</kw>
<msg timestamp="20170816 05:18:02.153" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:18:02.153" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:18:02.153" status="PASS" starttime="20170816 05:18:01.849"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:18:02.153" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:18:02.154" status="PASS" starttime="20170816 05:18:02.153"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:18:02.154" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:18:02.154" status="PASS" starttime="20170816 05:18:02.154"></status>
</kw>
<status endtime="20170816 05:18:02.154" status="PASS" starttime="20170816 05:18:01.846"></status>
</kw>
<status endtime="20170816 05:18:02.155" status="PASS" starttime="20170816 05:18:01.845"></status>
</kw>
<status endtime="20170816 05:18:02.155" status="PASS" starttime="20170816 05:18:01.844"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:18:02.155" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170816 05:18:02.155" status="PASS" starttime="20170816 05:18:02.155"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:18:02.157" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170816 05:18:02.158" status="PASS" starttime="20170816 05:18:02.157"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:18:02.158" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170816 05:18:02.159" status="PASS" starttime="20170816 05:18:02.158"></status>
</kw>
<status endtime="20170816 05:18:02.159" status="PASS" starttime="20170816 05:18:02.158"></status>
</kw>
<status endtime="20170816 05:18:02.159" status="PASS" starttime="20170816 05:18:02.156"></status>
</kw>
<status endtime="20170816 05:18:02.159" status="PASS" starttime="20170816 05:18:02.156"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:18:02.248" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 05:18:02.248" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:18:02.248" status="PASS" starttime="20170816 05:18:02.159"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:18:02.250" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:18:02.250" status="PASS" starttime="20170816 05:18:02.249"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:18:02.251" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:18:02.251" status="PASS" starttime="20170816 05:18:02.251"></status>
</kw>
<status endtime="20170816 05:18:02.251" status="PASS" starttime="20170816 05:18:02.250"></status>
</kw>
<status endtime="20170816 05:18:02.251" status="PASS" starttime="20170816 05:18:02.249"></status>
</kw>
<status endtime="20170816 05:18:02.251" status="PASS" starttime="20170816 05:18:02.248"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:18:02.252" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:18:02.252" status="PASS" starttime="20170816 05:18:02.252"></status>
</kw>
<msg timestamp="20170816 05:18:02.252" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:18:02.252" status="PASS" starttime="20170816 05:18:01.844"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:18:02.253" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:18:02.253" status="PASS" starttime="20170816 05:18:02.252"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:18:02.253" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:18:02.253" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:18:02.254" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170816 05:18:02.254" status="PASS" starttime="20170816 05:18:02.253"></status>
</kw>
<msg timestamp="20170816 05:18:02.254" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170816 05:18:02.254" status="PASS" starttime="20170816 05:18:01.843"></status>
</kw>
<msg timestamp="20170816 05:18:02.254" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170816 05:18:02.254" status="PASS" starttime="20170816 05:18:01.843"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170816 05:18:02.255" level="FAIL">Running != Quiesced</msg>
<status endtime="20170816 05:18:02.255" status="FAIL" starttime="20170816 05:18:02.255"></status>
</kw>
<status endtime="20170816 05:18:02.255" status="FAIL" starttime="20170816 05:18:01.541"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:18:12.261" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:18:12.261" status="PASS" starttime="20170816 05:18:12.260"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:18:12.262" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:18:12.262" status="PASS" starttime="20170816 05:18:12.261"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:18:12.262" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:18:12.262" status="PASS" starttime="20170816 05:18:12.262"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:18:12.263" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:18:12.263" status="PASS" starttime="20170816 05:18:12.262"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:18:12.462" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:18:12.463" status="PASS" starttime="20170816 05:18:12.264"></status>
</kw>
<msg timestamp="20170816 05:18:12.463" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:18:12.463" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:18:12.463" status="PASS" starttime="20170816 05:18:12.263"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:18:12.464" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:18:12.464" status="PASS" starttime="20170816 05:18:12.463"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:18:12.464" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:18:12.464" status="PASS" starttime="20170816 05:18:12.464"></status>
</kw>
<status endtime="20170816 05:18:12.464" status="PASS" starttime="20170816 05:18:12.260"></status>
</kw>
<status endtime="20170816 05:18:12.465" status="PASS" starttime="20170816 05:18:12.259"></status>
</kw>
<status endtime="20170816 05:18:12.465" status="PASS" starttime="20170816 05:18:12.259"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:18:12.465" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170816 05:18:12.465" status="PASS" starttime="20170816 05:18:12.465"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:18:12.467" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170816 05:18:12.467" status="PASS" starttime="20170816 05:18:12.467"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:18:12.468" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170816 05:18:12.468" status="PASS" starttime="20170816 05:18:12.468"></status>
</kw>
<status endtime="20170816 05:18:12.468" status="PASS" starttime="20170816 05:18:12.467"></status>
</kw>
<status endtime="20170816 05:18:12.469" status="PASS" starttime="20170816 05:18:12.466"></status>
</kw>
<status endtime="20170816 05:18:12.469" status="PASS" starttime="20170816 05:18:12.466"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:18:12.550" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 05:18:12.550" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:18:12.551" status="PASS" starttime="20170816 05:18:12.469"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:18:12.552" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:18:12.553" status="PASS" starttime="20170816 05:18:12.552"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:18:12.554" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:18:12.554" status="PASS" starttime="20170816 05:18:12.554"></status>
</kw>
<status endtime="20170816 05:18:12.554" status="PASS" starttime="20170816 05:18:12.553"></status>
</kw>
<status endtime="20170816 05:18:12.554" status="PASS" starttime="20170816 05:18:12.551"></status>
</kw>
<status endtime="20170816 05:18:12.554" status="PASS" starttime="20170816 05:18:12.551"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:18:12.555" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:18:12.555" status="PASS" starttime="20170816 05:18:12.555"></status>
</kw>
<msg timestamp="20170816 05:18:12.555" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:18:12.555" status="PASS" starttime="20170816 05:18:12.258"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:18:12.556" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:18:12.556" status="PASS" starttime="20170816 05:18:12.555"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:18:12.556" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:18:12.556" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:18:12.556" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170816 05:18:12.556" status="PASS" starttime="20170816 05:18:12.556"></status>
</kw>
<msg timestamp="20170816 05:18:12.557" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170816 05:18:12.557" status="PASS" starttime="20170816 05:18:12.257"></status>
</kw>
<msg timestamp="20170816 05:18:12.557" level="INFO">${power_state} = On</msg>
<status endtime="20170816 05:18:12.557" status="PASS" starttime="20170816 05:18:12.257"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170816 05:18:12.558" status="PASS" starttime="20170816 05:18:12.557"></status>
</kw>
<status endtime="20170816 05:18:12.558" status="PASS" starttime="20170816 05:18:12.256"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:18:12.561" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:18:12.562" status="PASS" starttime="20170816 05:18:12.561"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:18:12.563" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:18:12.563" status="PASS" starttime="20170816 05:18:12.562"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:18:12.563" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:18:12.563" status="PASS" starttime="20170816 05:18:12.563"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:18:12.564" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:18:12.564" status="PASS" starttime="20170816 05:18:12.563"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:18:12.854" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:18:12.854" status="PASS" starttime="20170816 05:18:12.565"></status>
</kw>
<msg timestamp="20170816 05:18:12.854" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:18:12.854" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:18:12.854" status="PASS" starttime="20170816 05:18:12.564"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:18:12.855" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:18:12.855" status="PASS" starttime="20170816 05:18:12.855"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:18:12.856" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:18:12.856" status="PASS" starttime="20170816 05:18:12.856"></status>
</kw>
<status endtime="20170816 05:18:12.856" status="PASS" starttime="20170816 05:18:12.560"></status>
</kw>
<status endtime="20170816 05:18:12.857" status="PASS" starttime="20170816 05:18:12.560"></status>
</kw>
<status endtime="20170816 05:18:12.857" status="PASS" starttime="20170816 05:18:12.559"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:18:12.858" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170816 05:18:12.858" status="PASS" starttime="20170816 05:18:12.857"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:18:12.861" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170816 05:18:12.861" status="PASS" starttime="20170816 05:18:12.860"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:18:12.862" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170816 05:18:12.862" status="PASS" starttime="20170816 05:18:12.862"></status>
</kw>
<status endtime="20170816 05:18:12.862" status="PASS" starttime="20170816 05:18:12.861"></status>
</kw>
<status endtime="20170816 05:18:12.862" status="PASS" starttime="20170816 05:18:12.859"></status>
</kw>
<status endtime="20170816 05:18:12.862" status="PASS" starttime="20170816 05:18:12.858"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:18:12.954" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 05:18:12.954" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:18:12.954" status="PASS" starttime="20170816 05:18:12.863"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:18:12.956" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:18:12.956" status="PASS" starttime="20170816 05:18:12.955"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:18:12.957" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:18:12.957" status="PASS" starttime="20170816 05:18:12.957"></status>
</kw>
<status endtime="20170816 05:18:12.957" status="PASS" starttime="20170816 05:18:12.956"></status>
</kw>
<status endtime="20170816 05:18:12.957" status="PASS" starttime="20170816 05:18:12.955"></status>
</kw>
<status endtime="20170816 05:18:12.957" status="PASS" starttime="20170816 05:18:12.955"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:18:12.958" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:18:12.958" status="PASS" starttime="20170816 05:18:12.958"></status>
</kw>
<msg timestamp="20170816 05:18:12.958" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:18:12.958" status="PASS" starttime="20170816 05:18:12.559"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:18:12.959" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:18:12.959" status="PASS" starttime="20170816 05:18:12.958"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:18:12.959" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:18:12.959" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:18:12.959" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170816 05:18:12.959" status="PASS" starttime="20170816 05:18:12.959"></status>
</kw>
<msg timestamp="20170816 05:18:12.960" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170816 05:18:12.960" status="PASS" starttime="20170816 05:18:12.558"></status>
</kw>
<msg timestamp="20170816 05:18:12.960" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170816 05:18:12.960" status="PASS" starttime="20170816 05:18:12.558"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170816 05:18:12.961" level="FAIL">Running != Quiesced</msg>
<status endtime="20170816 05:18:12.961" status="FAIL" starttime="20170816 05:18:12.960"></status>
</kw>
<status endtime="20170816 05:18:12.961" status="FAIL" starttime="20170816 05:18:12.256"></status>
</kw>
<msg timestamp="20170816 05:18:12.961" level="FAIL">Keyword 'Is Host Running' failed after retrying for 10 minutes. The last error was: Running != Quiesced</msg>
<status endtime="20170816 05:18:12.961" status="FAIL" starttime="20170816 05:08:02.256"></status>
</kw>
<status endtime="20170816 05:18:12.961" status="FAIL" starttime="20170816 05:08:01.655"></status>
</kw>
<status endtime="20170816 05:18:12.962" status="FAIL" starttime="20170816 05:07:53.585"></status>
</kw>
<status endtime="20170816 05:18:12.962" status="FAIL" starttime="20170816 05:07:53.584"></status>
</kw>
<kw name="Test Exit Logs" type="teardown">
<doc>Collect FFDC and SOL log.</doc>
<kw library="openbmc_ffdc" name="FFDC On Test Case Fail">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="state_manager" name="Is Host Quiesced">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:18:12.969" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:18:12.969" status="PASS" starttime="20170816 05:18:12.968"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:18:12.970" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:18:12.970" status="PASS" starttime="20170816 05:18:12.970"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:18:12.971" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:18:12.971" status="PASS" starttime="20170816 05:18:12.971"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:18:12.972" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:18:12.972" status="PASS" starttime="20170816 05:18:12.972"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:18:13.153" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:18:13.153" status="PASS" starttime="20170816 05:18:12.973"></status>
</kw>
<msg timestamp="20170816 05:18:13.153" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:18:13.153" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:18:13.153" status="PASS" starttime="20170816 05:18:12.973"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:18:13.154" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:18:13.154" status="PASS" starttime="20170816 05:18:13.153"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:18:13.155" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:18:13.155" status="PASS" starttime="20170816 05:18:13.154"></status>
</kw>
<status endtime="20170816 05:18:13.155" status="PASS" starttime="20170816 05:18:12.968"></status>
</kw>
<status endtime="20170816 05:18:13.155" status="PASS" starttime="20170816 05:18:12.967"></status>
</kw>
<status endtime="20170816 05:18:13.155" status="PASS" starttime="20170816 05:18:12.966"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:18:13.155" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170816 05:18:13.156" status="PASS" starttime="20170816 05:18:13.155"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:18:13.158" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170816 05:18:13.158" status="PASS" starttime="20170816 05:18:13.157"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:18:13.159" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170816 05:18:13.159" status="PASS" starttime="20170816 05:18:13.158"></status>
</kw>
<status endtime="20170816 05:18:13.159" status="PASS" starttime="20170816 05:18:13.158"></status>
</kw>
<status endtime="20170816 05:18:13.159" status="PASS" starttime="20170816 05:18:13.156"></status>
</kw>
<status endtime="20170816 05:18:13.159" status="PASS" starttime="20170816 05:18:13.156"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:18:13.258" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 05:18:13.258" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:18:13.258" status="PASS" starttime="20170816 05:18:13.159"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:18:13.260" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:18:13.260" status="PASS" starttime="20170816 05:18:13.259"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:18:13.261" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:18:13.261" status="PASS" starttime="20170816 05:18:13.261"></status>
</kw>
<status endtime="20170816 05:18:13.261" status="PASS" starttime="20170816 05:18:13.260"></status>
</kw>
<status endtime="20170816 05:18:13.261" status="PASS" starttime="20170816 05:18:13.259"></status>
</kw>
<status endtime="20170816 05:18:13.261" status="PASS" starttime="20170816 05:18:13.258"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:18:13.262" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:18:13.262" status="PASS" starttime="20170816 05:18:13.261"></status>
</kw>
<msg timestamp="20170816 05:18:13.262" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:18:13.262" status="PASS" starttime="20170816 05:18:12.965"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:18:13.262" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:18:13.263" status="PASS" starttime="20170816 05:18:13.262"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:18:13.263" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:18:13.263" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:18:13.263" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170816 05:18:13.263" status="PASS" starttime="20170816 05:18:13.263"></status>
</kw>
<msg timestamp="20170816 05:18:13.264" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170816 05:18:13.264" status="PASS" starttime="20170816 05:18:12.964"></status>
</kw>
<msg timestamp="20170816 05:18:13.264" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170816 05:18:13.264" status="PASS" starttime="20170816 05:18:12.963"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<status endtime="20170816 05:18:13.265" status="PASS" starttime="20170816 05:18:13.265"></status>
</kw>
<msg timestamp="20170816 05:18:13.265" level="INFO">${status} = True</msg>
<status endtime="20170816 05:18:13.265" status="PASS" starttime="20170816 05:18:13.264"></status>
</kw>
<msg timestamp="20170816 05:18:13.265" level="INFO">${status} = True</msg>
<status endtime="20170816 05:18:13.265" status="PASS" starttime="20170816 05:18:12.963"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw library="openbmc_ffdc" name="Ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw library="utils" name="Ping Host">
<arguments>
<arg>9.41.166.169</arg>
</arguments>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170816 05:18:13.293" level="INFO">Length is 12</msg>
<status endtime="20170816 05:18:13.293" status="PASS" starttime="20170816 05:18:13.293"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170816 05:18:13.302" level="INFO">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg timestamp="20170816 05:18:16.303" level="INFO">${RC} = 0</msg>
<msg timestamp="20170816 05:18:16.303" level="INFO">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=0.766 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=0.589 ms
64 bytes from 9.41.166.16...</msg>
<status endtime="20170816 05:18:16.303" status="PASS" starttime="20170816 05:18:13.294"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170816 05:18:16.306" level="INFO">RC: 0
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=0.766 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=0.589 ms
64 bytes from 9.41.166.169: icmp_seq=3 ttl=63 time=0.595 ms
64 bytes from 9.41.166.169: icmp_seq=4 ttl=63 time=0.563 ms

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2998ms
rtt min/avg/max/mdev = 0.563/0.628/0.766/0.082 ms</msg>
<status endtime="20170816 05:18:16.307" status="PASS" starttime="20170816 05:18:16.305"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status endtime="20170816 05:18:16.307" status="PASS" starttime="20170816 05:18:16.307"></status>
</kw>
<status endtime="20170816 05:18:16.308" status="PASS" starttime="20170816 05:18:13.292"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170816 05:18:16.322" level="INFO">${cur_time} = 2017-08-16 05:18:16:321351</msg>
<status endtime="20170816 05:18:16.322" status="PASS" starttime="20170816 05:18:16.321"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170816 05:18:16.322" level="INFO">${cur_time} = 20170816051816321351</msg>
<status endtime="20170816 05:18:16.322" status="PASS" starttime="20170816 05:18:16.322"></status>
</kw>
<status endtime="20170816 05:18:16.323" status="PASS" starttime="20170816 05:18:16.321"></status>
</kw>
<msg timestamp="20170816 05:18:16.323" level="INFO">${FFDC_TIME} = 20170816051816321351</msg>
<kw library="openbmc_ffdc_utils" name="Get Test Dir and Name">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170816 05:18:16.373" level="INFO">${suite_name} = TestsTestBasicPoweron</msg>
<status endtime="20170816 05:18:16.373" status="PASS" starttime="20170816 05:18:16.373"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170816 05:18:16.374" level="INFO">${suite_name} = 20170816051816321351_TestsTestBasicPoweron</msg>
<status endtime="20170816 05:18:16.374" status="PASS" starttime="20170816 05:18:16.373"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170816 05:18:16.374" level="INFO">${test_name} = PowerOnTest</msg>
<status endtime="20170816 05:18:16.374" status="PASS" starttime="20170816 05:18:16.374"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170816 05:18:16.375" level="INFO">${test_name} = 20170816051816321351_PowerOnTest</msg>
<status endtime="20170816 05:18:16.375" status="PASS" starttime="20170816 05:18:16.374"></status>
</kw>
<status endtime="20170816 05:18:16.375" status="PASS" starttime="20170816 05:18:16.372"></status>
</kw>
<msg timestamp="20170816 05:18:16.375" level="INFO">${FFDC_DIR_PATH} = /tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/</msg>
<msg timestamp="20170816 05:18:16.376" level="INFO">${FFDC_PREFIX} = 20170816051816321351_</msg>
<msg timestamp="20170816 05:18:16.396" level="INFO">${LOG_PREFIX} = /tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_</msg>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/</arg>
</arguments>
<msg html="yes" timestamp="20170816 05:18:16.397" level="INFO">Created directory '&lt;a href="file:///tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest"&gt;/tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest&lt;/a&gt;'.</msg>
<status endtime="20170816 05:18:16.397" status="PASS" starttime="20170816 05:18:16.397"></status>
</kw>
<msg timestamp="20170816 05:18:16.402" level="INFO">${FFDC_FILE_PATH} = /tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_general.txt</msg>
<kw library="openbmc_ffdc_utils" name="Header Message">
<doc>Write header message to the report document manifest.</doc>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 05:18:16.422" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_general.txt"&gt;/tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170816 05:18:16.422" status="PASS" starttime="20170816 05:18:16.422"></status>
</kw>
<status endtime="20170816 05:18:16.423" status="PASS" starttime="20170816 05:18:16.421"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 05:18:16.424" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_general.txt"&gt;/tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170816 05:18:16.424" status="PASS" starttime="20170816 05:18:16.423"></status>
</kw>
<status endtime="20170816 05:18:16.424" status="PASS" starttime="20170816 05:18:16.423"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 05:18:16.425" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_general.txt"&gt;/tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170816 05:18:16.425" status="PASS" starttime="20170816 05:18:16.425"></status>
</kw>
<status endtime="20170816 05:18:16.425" status="PASS" starttime="20170816 05:18:16.424"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 05:18:16.426" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_general.txt"&gt;/tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170816 05:18:16.426" status="PASS" starttime="20170816 05:18:16.426"></status>
</kw>
<status endtime="20170816 05:18:16.426" status="PASS" starttime="20170816 05:18:16.425"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 05:18:16.428" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_general.txt"&gt;/tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170816 05:18:16.428" status="PASS" starttime="20170816 05:18:16.427"></status>
</kw>
<status endtime="20170816 05:18:16.428" status="PASS" starttime="20170816 05:18:16.427"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 05:18:16.429" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_general.txt"&gt;/tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170816 05:18:16.429" status="PASS" starttime="20170816 05:18:16.429"></status>
</kw>
<status endtime="20170816 05:18:16.429" status="PASS" starttime="20170816 05:18:16.428"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 05:18:16.430" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_general.txt"&gt;/tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170816 05:18:16.430" status="PASS" starttime="20170816 05:18:16.430"></status>
</kw>
<status endtime="20170816 05:18:16.430" status="PASS" starttime="20170816 05:18:16.429"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 05:18:16.432" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_general.txt"&gt;/tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170816 05:18:16.432" status="PASS" starttime="20170816 05:18:16.431"></status>
</kw>
<status endtime="20170816 05:18:16.432" status="PASS" starttime="20170816 05:18:16.431"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 05:18:16.433" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_general.txt"&gt;/tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170816 05:18:16.433" status="PASS" starttime="20170816 05:18:16.432"></status>
</kw>
<status endtime="20170816 05:18:16.433" status="PASS" starttime="20170816 05:18:16.432"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Test Setup Info">
<doc>BMC IP, Model and other information</doc>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 05:18:16.435" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_general.txt"&gt;/tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170816 05:18:16.435" status="PASS" starttime="20170816 05:18:16.435"></status>
</kw>
<status endtime="20170816 05:18:16.435" status="PASS" starttime="20170816 05:18:16.433"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 05:18:16.436" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_general.txt"&gt;/tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170816 05:18:16.436" status="PASS" starttime="20170816 05:18:16.436"></status>
</kw>
<status endtime="20170816 05:18:16.436" status="PASS" starttime="20170816 05:18:16.435"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 05:18:16.438" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_general.txt"&gt;/tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170816 05:18:16.438" status="PASS" starttime="20170816 05:18:16.437"></status>
</kw>
<status endtime="20170816 05:18:16.438" status="PASS" starttime="20170816 05:18:16.437"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 05:18:16.439" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_general.txt"&gt;/tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170816 05:18:16.439" status="PASS" starttime="20170816 05:18:16.438"></status>
</kw>
<status endtime="20170816 05:18:16.439" status="PASS" starttime="20170816 05:18:16.438"></status>
</kw>
<kw library="utils" name="Get BMC System Model">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170816 05:18:16.467" level="INFO">host=9.41.166.169
width=80
timeout=25 seconds
path_separator=/
alias=bmc_connection
port=22
term_type=vt100
index=1
prompt=# 
newline=

encoding=UTF-8
height=24</msg>
<msg timestamp="20170816 05:18:16.467" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170816 05:18:16.544" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170816 05:18:16.553" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170816 05:18:16.553" level="INFO">${stderr} = </msg>
<msg timestamp="20170816 05:18:16.553" level="INFO">${rc} = 0</msg>
<status endtime="20170816 05:18:16.553" status="PASS" starttime="20170816 05:18:16.440"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170816 05:18:16.554" level="INFO">Length is 0</msg>
<status endtime="20170816 05:18:16.554" status="PASS" starttime="20170816 05:18:16.554"></status>
</kw>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170816 05:18:16.554" level="INFO">Length is 11</msg>
<status endtime="20170816 05:18:16.555" status="PASS" starttime="20170816 05:18:16.554"></status>
</kw>
<msg timestamp="20170816 05:18:16.555" level="INFO">${model_name} = Witherspoon</msg>
<status endtime="20170816 05:18:16.555" status="PASS" starttime="20170816 05:18:16.439"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 05:18:16.556" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_general.txt"&gt;/tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170816 05:18:16.556" status="PASS" starttime="20170816 05:18:16.556"></status>
</kw>
<status endtime="20170816 05:18:16.556" status="PASS" starttime="20170816 05:18:16.555"></status>
</kw>
<status endtime="20170816 05:18:16.556" status="PASS" starttime="20170816 05:18:16.433"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 05:18:16.558" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_general.txt"&gt;/tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170816 05:18:16.558" status="PASS" starttime="20170816 05:18:16.557"></status>
</kw>
<status endtime="20170816 05:18:16.558" status="PASS" starttime="20170816 05:18:16.557"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Ffdc Cmd Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170816 05:18:16.558" level="INFO">@{entries} = [ BMC DATA | DRIVER INFO | APPLICATION DATA ]</msg>
<status endtime="20170816 05:18:16.558" status="PASS" starttime="20170816 05:18:16.558"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC DATA" type="foritem">
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 05:18:16.560" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_general.txt"&gt;/tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170816 05:18:16.560" status="PASS" starttime="20170816 05:18:16.559"></status>
</kw>
<status endtime="20170816 05:18:16.560" status="PASS" starttime="20170816 05:18:16.559"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 05:18:16.561" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_general.txt"&gt;/tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170816 05:18:16.561" status="PASS" starttime="20170816 05:18:16.561"></status>
</kw>
<status endtime="20170816 05:18:16.561" status="PASS" starttime="20170816 05:18:16.560"></status>
</kw>
<status endtime="20170816 05:18:16.561" status="PASS" starttime="20170816 05:18:16.558"></status>
</kw>
<kw name="${index} = DRIVER INFO" type="foritem">
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 05:18:16.563" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_general.txt"&gt;/tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170816 05:18:16.563" status="PASS" starttime="20170816 05:18:16.562"></status>
</kw>
<status endtime="20170816 05:18:16.563" status="PASS" starttime="20170816 05:18:16.562"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 05:18:16.564" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_general.txt"&gt;/tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170816 05:18:16.564" status="PASS" starttime="20170816 05:18:16.564"></status>
</kw>
<status endtime="20170816 05:18:16.564" status="PASS" starttime="20170816 05:18:16.563"></status>
</kw>
<status endtime="20170816 05:18:16.564" status="PASS" starttime="20170816 05:18:16.562"></status>
</kw>
<kw name="${index} = APPLICATION DATA" type="foritem">
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 05:18:16.565" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_general.txt"&gt;/tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170816 05:18:16.565" status="PASS" starttime="20170816 05:18:16.565"></status>
</kw>
<status endtime="20170816 05:18:16.566" status="PASS" starttime="20170816 05:18:16.564"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 05:18:16.567" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_general.txt"&gt;/tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170816 05:18:16.567" status="PASS" starttime="20170816 05:18:16.566"></status>
</kw>
<status endtime="20170816 05:18:16.567" status="PASS" starttime="20170816 05:18:16.566"></status>
</kw>
<status endtime="20170816 05:18:16.567" status="PASS" starttime="20170816 05:18:16.564"></status>
</kw>
<status endtime="20170816 05:18:16.567" status="PASS" starttime="20170816 05:18:16.558"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 05:18:16.568" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_general.txt"&gt;/tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170816 05:18:16.568" status="PASS" starttime="20170816 05:18:16.568"></status>
</kw>
<status endtime="20170816 05:18:16.568" status="PASS" starttime="20170816 05:18:16.567"></status>
</kw>
<status endtime="20170816 05:18:16.568" status="PASS" starttime="20170816 05:18:16.421"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Call FFDC Methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170816 05:18:16.574" level="INFO">@{entries} = [ BMC LOGS ]</msg>
<status endtime="20170816 05:18:16.574" status="PASS" starttime="20170816 05:18:16.574"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC LOGS" type="foritem">
<kw library="openbmc_ffdc_methods" name="Method Call Keyword List">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Call">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg timestamp="20170816 05:18:16.576" level="INFO">@{method_list} = [ ('Core Files', 'SCP Coredump Files') | ('BMC Specific Files', 'BMC FFDC Files') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('FFDC Generic Report', 'BMC FFDC Manifest') | ('SEL Log', 'Collect ...</msg>
<status endtime="20170816 05:18:16.576" status="PASS" starttime="20170816 05:18:16.575"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Desc">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status endtime="20170816 05:18:16.577" status="PASS" starttime="20170816 05:18:16.577"></status>
</kw>
<msg timestamp="20170816 05:18:16.577" level="INFO">@{ffdc_function_list} = [ Core Files | BMC Specific Files | Get Request FFDC | FFDC Generic Report | SEL Log | OS FFDC ]</msg>
<status endtime="20170816 05:18:16.577" status="PASS" starttime="20170816 05:18:16.576"></status>
</kw>
<kw name="${method} IN [ @{method_list} ]" type="for">
<kw name="${method} = ('Core Files', 'SCP Coredump Files')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170816 05:18:16.579" status="PASS" starttime="20170816 05:18:16.579"></status>
</kw>
<msg timestamp="20170816 05:18:16.579" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:18:16.579" level="INFO">${ret_values} = None</msg>
<status endtime="20170816 05:18:16.579" status="PASS" starttime="20170816 05:18:16.578"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170816 05:18:16.580" status="PASS" starttime="20170816 05:18:16.580"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="SCP Coredump Files">
<doc>Copy core dump file from BMC to local system.</doc>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170816 05:18:16.638" level="INFO">host=9.41.166.169
width=80
timeout=25 seconds
path_separator=/
alias=bmc_connection
port=22
term_type=vt100
index=1
prompt=# 
newline=

encoding=UTF-8
height=24</msg>
<msg timestamp="20170816 05:18:16.639" level="INFO">Executing command 'ls /tmp/core_*'.</msg>
<msg timestamp="20170816 05:18:16.695" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170816 05:18:16.706" level="INFO">${core_files} = /tmp/core_phosphor-hwmon-.2056</msg>
<msg timestamp="20170816 05:18:16.706" level="INFO">${stderr} = </msg>
<msg timestamp="20170816 05:18:16.706" level="INFO">${rc} = 0</msg>
<status endtime="20170816 05:18:16.707" status="PASS" starttime="20170816 05:18:16.606"></status>
</kw>
<kw library="String" name="Split String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg timestamp="20170816 05:18:16.707" level="INFO">@{core_list} = [ /tmp/core_phosphor-hwmon-.2056 ]</msg>
<status endtime="20170816 05:18:16.707" status="PASS" starttime="20170816 05:18:16.707"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key U">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Open Connection for SCP</arg>
</arguments>
<kw library="connection_client" name="Open Connection for SCP">
<kw library="BuiltIn" name="Import Library">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status endtime="20170816 05:18:16.723" status="PASS" starttime="20170816 05:18:16.717"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw library="scp" name="Open Connection">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status endtime="20170816 05:18:17.392" status="PASS" starttime="20170816 05:18:16.724"></status>
</kw>
<status endtime="20170816 05:18:17.392" status="PASS" starttime="20170816 05:18:16.724"></status>
</kw>
<status endtime="20170816 05:18:17.392" status="PASS" starttime="20170816 05:18:16.723"></status>
</kw>
<status endtime="20170816 05:18:17.392" status="PASS" starttime="20170816 05:18:16.717"></status>
</kw>
<status endtime="20170816 05:18:17.393" status="PASS" starttime="20170816 05:18:16.707"></status>
</kw>
<kw name="${index} IN [ @{core_list} ]" type="for">
<kw name="${index} = /tmp/core_phosphor-hwmon-.2056" type="foritem">
<kw library="scp" name="Get File">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status endtime="20170816 05:18:17.730" status="PASS" starttime="20170816 05:18:17.393"></status>
</kw>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<msg timestamp="20170816 05:18:17.763" level="INFO">host=9.41.166.169
width=80
timeout=25 seconds
path_separator=/
alias=bmc_connection
port=22
term_type=vt100
index=1
prompt=# 
newline=

encoding=UTF-8
height=24</msg>
<msg timestamp="20170816 05:18:17.764" level="INFO">Executing command 'rm /tmp/core_phosphor-hwmon-.2056'.</msg>
<msg timestamp="20170816 05:18:17.810" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170816 05:18:17.822" status="PASS" starttime="20170816 05:18:17.731"></status>
</kw>
<status endtime="20170816 05:18:17.822" status="PASS" starttime="20170816 05:18:17.393"></status>
</kw>
<status endtime="20170816 05:18:17.822" status="PASS" starttime="20170816 05:18:17.393"></status>
</kw>
<status endtime="20170816 05:18:17.822" status="PASS" starttime="20170816 05:18:16.605"></status>
</kw>
<status endtime="20170816 05:18:17.823" status="PASS" starttime="20170816 05:18:16.580"></status>
</kw>
<status endtime="20170816 05:18:17.823" status="PASS" starttime="20170816 05:18:16.577"></status>
</kw>
<status endtime="20170816 05:18:17.823" status="PASS" starttime="20170816 05:18:16.577"></status>
</kw>
<kw name="${method} = ('BMC Specific Files', 'BMC FFDC Files')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170816 05:18:17.825" status="PASS" starttime="20170816 05:18:17.824"></status>
</kw>
<msg timestamp="20170816 05:18:17.825" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:18:17.825" level="INFO">${ret_values} = None</msg>
<status endtime="20170816 05:18:17.825" status="PASS" starttime="20170816 05:18:17.824"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170816 05:18:17.826" status="PASS" starttime="20170816 05:18:17.825"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Files">
<doc>Get the command list and iterate</doc>
<kw library="openbmc_ffdc_list" name="Get Ffdc File Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170816 05:18:17.852" level="INFO">@{entries} = [ BMC FILES ]</msg>
<status endtime="20170816 05:18:17.852" status="PASS" starttime="20170816 05:18:17.851"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC FILES" type="foritem">
<kw library="openbmc_ffdc_methods" name="Create File and Write Data">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc File">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170816 05:18:17.853" level="INFO">@{cmd_list} = [ ('BMC_dmesg', 'dmesg') | ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/') | ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_proc_list', 'top -n 1 -b') | ('BMC_j...</msg>
<status endtime="20170816 05:18:17.853" status="PASS" starttime="20170816 05:18:17.853"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC_dmesg', 'dmesg')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170816 05:18:17.854" level="INFO">${logpath} = /tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_dmesg.txt</msg>
<status endtime="20170816 05:18:17.854" status="PASS" starttime="20170816 05:18:17.854"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170816 05:18:17.856" status="PASS" starttime="20170816 05:18:17.855"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170816 05:18:17.857" level="INFO">${cmd_buf} = BMC Execute Command  dmesg  ignore_err=1</msg>
<status endtime="20170816 05:18:17.857" status="PASS" starttime="20170816 05:18:17.856"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>dmesg</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170816 05:18:17.926" level="INFO">host=9.41.166.169
width=80
timeout=25 seconds
path_separator=/
alias=bmc_connection
port=22
term_type=vt100
index=1
prompt=# 
newline=

encoding=UTF-8
height=24</msg>
<msg timestamp="20170816 05:18:17.927" level="INFO">Executing command 'dmesg'.</msg>
<msg timestamp="20170816 05:18:17.983" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170816 05:18:17.984" status="PASS" starttime="20170816 05:18:17.890"></status>
</kw>
<msg timestamp="20170816 05:18:17.984" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:18:17.984" level="INFO">${ret_values} = (u'[    0.140000] clocksource: jiffies: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: 19112604462750000 ns\n[    0.140000] futex hash table entries: 256 (order: -1, 3072 bytes)\n[    0.140000]...</msg>
<status endtime="20170816 05:18:17.984" status="PASS" starttime="20170816 05:18:17.857"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170816 05:18:17.985" level="INFO">${stdout} = [    0.140000] clocksource: jiffies: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: 19112604462750000 ns
[    0.140000] futex hash table entries: 256 (order: -1, 3072 bytes)
[    0.140000] pinc...</msg>
<status endtime="20170816 05:18:17.985" status="PASS" starttime="20170816 05:18:17.984"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170816 05:18:17.985" level="INFO">${stderr} = </msg>
<status endtime="20170816 05:18:17.985" status="PASS" starttime="20170816 05:18:17.985"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 05:18:17.993" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_dmesg.txt"&gt;/tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status endtime="20170816 05:18:17.993" status="PASS" starttime="20170816 05:18:17.992"></status>
</kw>
<status endtime="20170816 05:18:17.993" status="PASS" starttime="20170816 05:18:17.991"></status>
</kw>
<status endtime="20170816 05:18:17.993" status="PASS" starttime="20170816 05:18:17.986"></status>
</kw>
<status endtime="20170816 05:18:17.993" status="PASS" starttime="20170816 05:18:17.854"></status>
</kw>
<status endtime="20170816 05:18:17.993" status="PASS" starttime="20170816 05:18:17.853"></status>
</kw>
<kw name="${cmd} = ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170816 05:18:17.994" level="INFO">${logpath} = /tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_proc_fd_active_list.txt</msg>
<status endtime="20170816 05:18:17.994" status="PASS" starttime="20170816 05:18:17.994"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170816 05:18:17.995" status="PASS" starttime="20170816 05:18:17.995"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170816 05:18:17.996" level="INFO">${cmd_buf} = BMC Execute Command  ls -Al /proc/*/fd/  ignore_err=1</msg>
<status endtime="20170816 05:18:17.996" status="PASS" starttime="20170816 05:18:17.996"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls -Al /proc/*/fd/</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170816 05:18:18.064" level="INFO">host=9.41.166.169
width=80
timeout=25 seconds
path_separator=/
alias=bmc_connection
port=22
term_type=vt100
index=1
prompt=# 
newline=

encoding=UTF-8
height=24</msg>
<msg timestamp="20170816 05:18:18.065" level="INFO">Executing command 'ls -Al /proc/*/fd/'.</msg>
<msg timestamp="20170816 05:18:18.656" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170816 05:18:18.656" status="PASS" starttime="20170816 05:18:18.027"></status>
</kw>
<msg timestamp="20170816 05:18:18.656" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:18:18.657" level="INFO">${ret_values} = (u'/proc/1/fd/:\ntotal 0\nlrwx------    1 root     root            64 Aug  3 15:59 0 -&gt; /dev/null\nlrwx------    1 root     root            64 Aug  3 15:59 1 -&gt; /dev/null\nlr-x------    1 root     roo...</msg>
<status endtime="20170816 05:18:18.657" status="PASS" starttime="20170816 05:18:17.997"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170816 05:18:18.658" level="INFO">${stdout} = /proc/1/fd/:
total 0
lrwx------    1 root     root            64 Aug  3 15:59 0 -&gt; /dev/null
lrwx------    1 root     root            64 Aug  3 15:59 1 -&gt; /dev/null
lr-x------    1 root     root      ...</msg>
<status endtime="20170816 05:18:18.658" status="PASS" starttime="20170816 05:18:18.658"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170816 05:18:18.659" level="INFO">${stderr} = ls: /proc/3322/fd/3: cannot read link: No such file or directory
ls: /proc/self/fd/3: cannot read link: No such file or directory
ls: /proc/thread-self/fd/3: cannot read link: No such file or director...</msg>
<status endtime="20170816 05:18:18.659" status="PASS" starttime="20170816 05:18:18.659"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 05:18:18.666" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_proc_fd_active_list.txt"&gt;/tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_proc_fd_active_list.txt&lt;/a&gt;'.</msg>
<status endtime="20170816 05:18:18.666" status="PASS" starttime="20170816 05:18:18.666"></status>
</kw>
<status endtime="20170816 05:18:18.667" status="PASS" starttime="20170816 05:18:18.665"></status>
</kw>
<status endtime="20170816 05:18:18.667" status="PASS" starttime="20170816 05:18:18.659"></status>
</kw>
<status endtime="20170816 05:18:18.667" status="PASS" starttime="20170816 05:18:17.994"></status>
</kw>
<status endtime="20170816 05:18:18.667" status="PASS" starttime="20170816 05:18:17.993"></status>
</kw>
<kw name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170816 05:18:18.667" level="INFO">${logpath} = /tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_procinfo.txt</msg>
<status endtime="20170816 05:18:18.668" status="PASS" starttime="20170816 05:18:18.667"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170816 05:18:18.669" status="PASS" starttime="20170816 05:18:18.669"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170816 05:18:18.670" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/cpuinfo  ignore_err=1</msg>
<status endtime="20170816 05:18:18.670" status="PASS" starttime="20170816 05:18:18.669"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/cpuinfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170816 05:18:18.742" level="INFO">host=9.41.166.169
width=80
timeout=25 seconds
path_separator=/
alias=bmc_connection
port=22
term_type=vt100
index=1
prompt=# 
newline=

encoding=UTF-8
height=24</msg>
<msg timestamp="20170816 05:18:18.742" level="INFO">Executing command 'cat /proc/cpuinfo'.</msg>
<msg timestamp="20170816 05:18:18.799" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170816 05:18:18.799" status="PASS" starttime="20170816 05:18:18.706"></status>
</kw>
<msg timestamp="20170816 05:18:18.799" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:18:18.799" level="INFO">${ret_values} = (u'processor\t: 0\nmodel name\t: ARMv6-compatible processor rev 7 (v6l)\nBogoMIPS\t: 789.70\nFeatures\t: half thumb fastmult edsp java tls \nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t...</msg>
<status endtime="20170816 05:18:18.799" status="PASS" starttime="20170816 05:18:18.670"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170816 05:18:18.800" level="INFO">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<status endtime="20170816 05:18:18.800" status="PASS" starttime="20170816 05:18:18.800"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170816 05:18:18.801" level="INFO">${stderr} = </msg>
<status endtime="20170816 05:18:18.801" status="PASS" starttime="20170816 05:18:18.800"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 05:18:18.809" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_procinfo.txt"&gt;/tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status endtime="20170816 05:18:18.809" status="PASS" starttime="20170816 05:18:18.808"></status>
</kw>
<status endtime="20170816 05:18:18.809" status="PASS" starttime="20170816 05:18:18.807"></status>
</kw>
<status endtime="20170816 05:18:18.809" status="PASS" starttime="20170816 05:18:18.801"></status>
</kw>
<status endtime="20170816 05:18:18.809" status="PASS" starttime="20170816 05:18:18.668"></status>
</kw>
<status endtime="20170816 05:18:18.809" status="PASS" starttime="20170816 05:18:18.667"></status>
</kw>
<kw name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170816 05:18:18.810" level="INFO">${logpath} = /tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_meminfo.txt</msg>
<status endtime="20170816 05:18:18.810" status="PASS" starttime="20170816 05:18:18.809"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170816 05:18:18.811" status="PASS" starttime="20170816 05:18:18.811"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170816 05:18:18.812" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/meminfo  ignore_err=1</msg>
<status endtime="20170816 05:18:18.812" status="PASS" starttime="20170816 05:18:18.811"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/meminfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170816 05:18:18.882" level="INFO">host=9.41.166.169
width=80
timeout=25 seconds
path_separator=/
alias=bmc_connection
port=22
term_type=vt100
index=1
prompt=# 
newline=

encoding=UTF-8
height=24</msg>
<msg timestamp="20170816 05:18:18.882" level="INFO">Executing command 'cat /proc/meminfo'.</msg>
<msg timestamp="20170816 05:18:18.964" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170816 05:18:18.964" status="PASS" starttime="20170816 05:18:18.843"></status>
</kw>
<msg timestamp="20170816 05:18:18.964" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:18:18.964" level="INFO">${ret_values} = (u'MemTotal:         432248 kB\nMemFree:          244668 kB\nMemAvailable:     318196 kB\nBuffers:           16380 kB\nCached:            73584 kB\nSwapCached:            0 kB\nActive:           12635...</msg>
<status endtime="20170816 05:18:18.964" status="PASS" starttime="20170816 05:18:18.812"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170816 05:18:18.965" level="INFO">${stdout} = MemTotal:         432248 kB
MemFree:          244668 kB
MemAvailable:     318196 kB
Buffers:           16380 kB
Cached:            73584 kB
SwapCached:            0 kB
Active:           126356 kB
Inac...</msg>
<status endtime="20170816 05:18:18.965" status="PASS" starttime="20170816 05:18:18.964"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170816 05:18:18.965" level="INFO">${stderr} = </msg>
<status endtime="20170816 05:18:18.965" status="PASS" starttime="20170816 05:18:18.965"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 05:18:18.972" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_meminfo.txt"&gt;/tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status endtime="20170816 05:18:18.972" status="PASS" starttime="20170816 05:18:18.971"></status>
</kw>
<status endtime="20170816 05:18:18.972" status="PASS" starttime="20170816 05:18:18.971"></status>
</kw>
<status endtime="20170816 05:18:18.972" status="PASS" starttime="20170816 05:18:18.966"></status>
</kw>
<status endtime="20170816 05:18:18.972" status="PASS" starttime="20170816 05:18:18.810"></status>
</kw>
<status endtime="20170816 05:18:18.972" status="PASS" starttime="20170816 05:18:18.809"></status>
</kw>
<kw name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170816 05:18:18.973" level="INFO">${logpath} = /tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_proc_list.txt</msg>
<status endtime="20170816 05:18:18.973" status="PASS" starttime="20170816 05:18:18.973"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170816 05:18:18.975" status="PASS" starttime="20170816 05:18:18.974"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170816 05:18:18.976" level="INFO">${cmd_buf} = BMC Execute Command  top -n 1 -b  ignore_err=1</msg>
<status endtime="20170816 05:18:18.976" status="PASS" starttime="20170816 05:18:18.975"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>top -n 1 -b</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170816 05:18:19.043" level="INFO">host=9.41.166.169
width=80
timeout=25 seconds
path_separator=/
alias=bmc_connection
port=22
term_type=vt100
index=1
prompt=# 
newline=

encoding=UTF-8
height=24</msg>
<msg timestamp="20170816 05:18:19.044" level="INFO">Executing command 'top -n 1 -b'.</msg>
<msg timestamp="20170816 05:18:19.343" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170816 05:18:19.343" status="PASS" starttime="20170816 05:18:19.007"></status>
</kw>
<msg timestamp="20170816 05:18:19.343" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:18:19.343" level="INFO">${ret_values} = (u'Mem: 187580K used, 244668K free, 14876K shrd, 16380K buff, 73588K cached\nCPU:   0% usr  23% sys   0% nic  76% idle   0% io   0% irq   0% sirq\nLoad average: 0.80 1.28 0.95 1/161 3325\n  PID  PPID ...</msg>
<status endtime="20170816 05:18:19.343" status="PASS" starttime="20170816 05:18:18.976"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170816 05:18:19.344" level="INFO">${stdout} = Mem: 187580K used, 244668K free, 14876K shrd, 16380K buff, 73588K cached
CPU:   0% usr  23% sys   0% nic  76% idle   0% io   0% irq   0% sirq
Load average: 0.80 1.28 0.95 1/161 3325
  PID  PPID USER  ...</msg>
<status endtime="20170816 05:18:19.344" status="PASS" starttime="20170816 05:18:19.344"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170816 05:18:19.344" level="INFO">${stderr} = </msg>
<status endtime="20170816 05:18:19.345" status="PASS" starttime="20170816 05:18:19.344"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 05:18:19.351" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_proc_list.txt"&gt;/tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status endtime="20170816 05:18:19.351" status="PASS" starttime="20170816 05:18:19.351"></status>
</kw>
<status endtime="20170816 05:18:19.351" status="PASS" starttime="20170816 05:18:19.350"></status>
</kw>
<status endtime="20170816 05:18:19.351" status="PASS" starttime="20170816 05:18:19.345"></status>
</kw>
<status endtime="20170816 05:18:19.352" status="PASS" starttime="20170816 05:18:18.973"></status>
</kw>
<status endtime="20170816 05:18:19.352" status="PASS" starttime="20170816 05:18:18.972"></status>
</kw>
<kw name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170816 05:18:19.352" level="INFO">${logpath} = /tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_journalctl.txt</msg>
<status endtime="20170816 05:18:19.352" status="PASS" starttime="20170816 05:18:19.352"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170816 05:18:19.354" status="PASS" starttime="20170816 05:18:19.354"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170816 05:18:19.355" level="INFO">${cmd_buf} = BMC Execute Command  journalctl --no-pager  ignore_err=1</msg>
<status endtime="20170816 05:18:19.355" status="PASS" starttime="20170816 05:18:19.354"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl --no-pager</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170816 05:18:19.423" level="INFO">host=9.41.166.169
width=80
timeout=25 seconds
path_separator=/
alias=bmc_connection
port=22
term_type=vt100
index=1
prompt=# 
newline=

encoding=UTF-8
height=24</msg>
<msg timestamp="20170816 05:18:19.424" level="INFO">Executing command 'journalctl --no-pager'.</msg>
<msg timestamp="20170816 05:18:22.704" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170816 05:18:22.705" status="PASS" starttime="20170816 05:18:19.387"></status>
</kw>
<msg timestamp="20170816 05:18:22.706" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:18:22.710" level="INFO">${ret_values} = (u'-- Logs begin at Thu 2017-08-03 15:42:59 UTC, end at Thu 2017-08-03 15:59:11 UTC. --\nAug 03 15:42:59 witherspoon kernel: Booting Linux on physical CPU 0x0\nAug 03 15:42:59 witherspoon kernel: Linu...</msg>
<status endtime="20170816 05:18:22.710" status="PASS" starttime="20170816 05:18:19.355"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170816 05:18:22.712" level="INFO">${stdout} = -- Logs begin at Thu 2017-08-03 15:42:59 UTC, end at Thu 2017-08-03 15:59:11 UTC. --
Aug 03 15:42:59 witherspoon kernel: Booting Linux on physical CPU 0x0
Aug 03 15:42:59 witherspoon kernel: Linux ver...</msg>
<status endtime="20170816 05:18:22.712" status="PASS" starttime="20170816 05:18:22.711"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170816 05:18:22.713" level="INFO">${stderr} = </msg>
<status endtime="20170816 05:18:22.713" status="PASS" starttime="20170816 05:18:22.713"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 05:18:22.726" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_journalctl.txt"&gt;/tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status endtime="20170816 05:18:22.726" status="PASS" starttime="20170816 05:18:22.724"></status>
</kw>
<status endtime="20170816 05:18:22.726" status="PASS" starttime="20170816 05:18:22.721"></status>
</kw>
<status endtime="20170816 05:18:22.726" status="PASS" starttime="20170816 05:18:22.713"></status>
</kw>
<status endtime="20170816 05:18:22.726" status="PASS" starttime="20170816 05:18:19.353"></status>
</kw>
<status endtime="20170816 05:18:22.726" status="PASS" starttime="20170816 05:18:19.352"></status>
</kw>
<status endtime="20170816 05:18:22.726" status="PASS" starttime="20170816 05:18:17.853"></status>
</kw>
<status endtime="20170816 05:18:22.726" status="PASS" starttime="20170816 05:18:17.852"></status>
</kw>
<status endtime="20170816 05:18:22.726" status="PASS" starttime="20170816 05:18:17.852"></status>
</kw>
<status endtime="20170816 05:18:22.726" status="PASS" starttime="20170816 05:18:17.852"></status>
</kw>
<status endtime="20170816 05:18:22.726" status="PASS" starttime="20170816 05:18:17.851"></status>
</kw>
<status endtime="20170816 05:18:22.727" status="PASS" starttime="20170816 05:18:17.826"></status>
</kw>
<status endtime="20170816 05:18:22.727" status="PASS" starttime="20170816 05:18:17.823"></status>
</kw>
<status endtime="20170816 05:18:22.727" status="PASS" starttime="20170816 05:18:17.823"></status>
</kw>
<kw name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170816 05:18:22.729" status="PASS" starttime="20170816 05:18:22.728"></status>
</kw>
<msg timestamp="20170816 05:18:22.729" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:18:22.729" level="INFO">${ret_values} = None</msg>
<status endtime="20170816 05:18:22.729" status="PASS" starttime="20170816 05:18:22.728"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170816 05:18:22.729" status="PASS" starttime="20170816 05:18:22.729"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Get Requests">
<doc>Get the command list and iterate</doc>
<kw library="openbmc_ffdc_list" name="Get Ffdc Get Request Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170816 05:18:22.757" level="INFO">@{entries} = [ GET REQUESTS ]</msg>
<status endtime="20170816 05:18:22.757" status="PASS" starttime="20170816 05:18:22.756"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = GET REQUESTS" type="foritem">
<kw library="openbmc_ffdc_methods" name="Log FFDC Get Requests">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Get Request">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170816 05:18:22.758" level="INFO">@{cmd_list} = [ ('BMC_led', '/org/openbmc/records/events/enumerate') | ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate') | ('BMC_sensor_list', '/org/openbmc/sensors/enumerate') | ('BMC_elog', '/xyz/open...</msg>
<status endtime="20170816 05:18:22.758" status="PASS" starttime="20170816 05:18:22.758"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170816 05:18:22.759" level="INFO">${logpath} = /tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_led.txt</msg>
<status endtime="20170816 05:18:22.759" status="PASS" starttime="20170816 05:18:22.759"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:18:22.762" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:18:22.762" status="PASS" starttime="20170816 05:18:22.761"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:18:22.763" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:18:22.763" status="PASS" starttime="20170816 05:18:22.762"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:18:22.763" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:18:22.763" status="PASS" starttime="20170816 05:18:22.763"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:18:22.764" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:18:22.764" status="PASS" starttime="20170816 05:18:22.764"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:18:22.963" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:18:22.964" status="PASS" starttime="20170816 05:18:22.765"></status>
</kw>
<msg timestamp="20170816 05:18:22.964" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:18:22.964" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:18:22.964" status="PASS" starttime="20170816 05:18:22.764"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:18:22.964" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:18:22.965" status="PASS" starttime="20170816 05:18:22.964"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:18:22.965" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:18:22.965" status="PASS" starttime="20170816 05:18:22.965"></status>
</kw>
<status endtime="20170816 05:18:22.965" status="PASS" starttime="20170816 05:18:22.761"></status>
</kw>
<status endtime="20170816 05:18:22.965" status="PASS" starttime="20170816 05:18:22.760"></status>
</kw>
<status endtime="20170816 05:18:22.966" status="PASS" starttime="20170816 05:18:22.760"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:18:22.966" level="INFO">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status endtime="20170816 05:18:22.966" status="PASS" starttime="20170816 05:18:22.966"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170816 05:18:22.967" status="PASS" starttime="20170816 05:18:22.966"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:18:23.009" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None json=None</msg>
<msg timestamp="20170816 05:18:23.009" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status endtime="20170816 05:18:23.009" status="PASS" starttime="20170816 05:18:22.967"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170816 05:18:23.010" status="PASS" starttime="20170816 05:18:23.010"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:18:23.010" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:18:23.010" status="PASS" starttime="20170816 05:18:23.010"></status>
</kw>
<msg timestamp="20170816 05:18:23.011" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status endtime="20170816 05:18:23.011" status="PASS" starttime="20170816 05:18:22.759"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:18:23.012" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170816 05:18:23.012" level="FAIL">404 != 200</msg>
<status endtime="20170816 05:18:23.012" status="FAIL" starttime="20170816 05:18:23.011"></status>
</kw>
<msg timestamp="20170816 05:18:23.012" level="INFO">${status} = False</msg>
<status endtime="20170816 05:18:23.012" status="PASS" starttime="20170816 05:18:23.011"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw library="BuiltIn" name="Continue For Loop">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170816 05:18:23.013" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170816 05:18:23.013" status="PASS" starttime="20170816 05:18:23.013"></status>
</kw>
<status endtime="20170816 05:18:23.013" status="PASS" starttime="20170816 05:18:23.012"></status>
</kw>
<status endtime="20170816 05:18:23.013" status="PASS" starttime="20170816 05:18:22.758"></status>
</kw>
<kw name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170816 05:18:23.014" level="INFO">${logpath} = /tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_inventory.txt</msg>
<status endtime="20170816 05:18:23.014" status="PASS" starttime="20170816 05:18:23.014"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:18:23.017" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:18:23.017" status="PASS" starttime="20170816 05:18:23.017"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:18:23.018" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:18:23.018" status="PASS" starttime="20170816 05:18:23.018"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:18:23.018" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:18:23.018" status="PASS" starttime="20170816 05:18:23.018"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:18:23.019" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:18:23.019" status="PASS" starttime="20170816 05:18:23.019"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:18:23.233" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:18:23.234" status="PASS" starttime="20170816 05:18:23.020"></status>
</kw>
<msg timestamp="20170816 05:18:23.234" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:18:23.234" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:18:23.234" status="PASS" starttime="20170816 05:18:23.019"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:18:23.234" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:18:23.235" status="PASS" starttime="20170816 05:18:23.234"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:18:23.235" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:18:23.235" status="PASS" starttime="20170816 05:18:23.235"></status>
</kw>
<status endtime="20170816 05:18:23.235" status="PASS" starttime="20170816 05:18:23.016"></status>
</kw>
<status endtime="20170816 05:18:23.235" status="PASS" starttime="20170816 05:18:23.016"></status>
</kw>
<status endtime="20170816 05:18:23.236" status="PASS" starttime="20170816 05:18:23.015"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:18:23.237" level="INFO">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status endtime="20170816 05:18:23.237" status="PASS" starttime="20170816 05:18:23.236"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170816 05:18:23.237" status="PASS" starttime="20170816 05:18:23.237"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:18:25.360" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg timestamp="20170816 05:18:25.360" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:18:25.360" status="PASS" starttime="20170816 05:18:23.237"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170816 05:18:25.361" status="PASS" starttime="20170816 05:18:25.361"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:18:25.362" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:18:25.362" status="PASS" starttime="20170816 05:18:25.362"></status>
</kw>
<msg timestamp="20170816 05:18:25.362" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:18:25.362" status="PASS" starttime="20170816 05:18:23.014"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:18:25.363" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:18:25.363" status="PASS" starttime="20170816 05:18:25.363"></status>
</kw>
<msg timestamp="20170816 05:18:25.364" level="INFO">${status} = True</msg>
<status endtime="20170816 05:18:25.364" status="PASS" starttime="20170816 05:18:25.363"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20170816 05:18:25.364" status="PASS" starttime="20170816 05:18:25.364"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170816 05:18:25.367" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 0, 
      "Manufacturer": "", 
      "Model": "0000000000000000", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "", 
      "SerialNumber": "0000000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 1
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 0, 
      "Manufacturer": "0000000000000000", 
      "Model": "", 
      "PartNumber": "00VK525         ", 
      "Present": 1, 
      "PrettyName": "SYSTEM PLANAR   ", 
      "SerialNumber": "Y230UF72R00C    "
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH051", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "00:00:00:00:00:00", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL982", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933815990", 
      "Version": "10"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core1": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core10": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core11": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core12": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core13": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core14": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core15": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core16": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core17": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core18": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core19": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core2": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core20": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core21": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core22": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core23": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core3": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core4": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core5": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core6": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core7": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core8": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core9": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL982", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933817514", 
      "Version": "10"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core10": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core11": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core12": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core13": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core14": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core15": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core16": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core17": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core18": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core19": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core2": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core20": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core21": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core22": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core23": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core3": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core4": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core5": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core6": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core7": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core8": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core9": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/fault": {
      "endpoints": [
        "/xyz/openbmc_project/logging/entry/6"
      ]
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0d83", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e72", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm10": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e9a", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm11": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e66", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm12": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e88", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm13": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0dad", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm14": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e8f", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm15": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e9d", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm2": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0daf", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm3": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0dc7", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm4": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e95", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm5": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0ec3", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm6": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0db6", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm7": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0ebf", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm8": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0da9", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm9": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e73", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan0": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan1": {
      "Functional": 0, 
      "Present": 1, 
      "PrettyName": "fan1"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan2"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan3"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply0": {
      "Present": 1, 
      "PrettyName": "power_supply0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply1": {
      "Present": 1, 
      "PrettyName": "power_supply1"
    }, 
    "/xyz/openbmc_project/inventory/system/fault": {
      "endpoints": [
        "/xyz/openbmc_project/logging/entry/7", 
        "/xyz/openbmc_project/logging/entry/5"
      ]
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:18:25.368" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170816 05:18:25.368" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system": {
            "BuildDate": "",
            "Cached": 0,
            "FieldReplaceable": 0,
            "Manufacturer": "",
            ...</msg>
<status endtime="20170816 05:18:25.368" status="PASS" starttime="20170816 05:18:25.364"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 05:18:25.370" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_inventory.txt"&gt;/tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status endtime="20170816 05:18:25.370" status="PASS" starttime="20170816 05:18:25.369"></status>
</kw>
<status endtime="20170816 05:18:25.370" status="PASS" starttime="20170816 05:18:25.368"></status>
</kw>
<status endtime="20170816 05:18:25.370" status="PASS" starttime="20170816 05:18:23.014"></status>
</kw>
<kw name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170816 05:18:25.371" level="INFO">${logpath} = /tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_sensor_list.txt</msg>
<status endtime="20170816 05:18:25.371" status="PASS" starttime="20170816 05:18:25.370"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:18:25.374" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:18:25.374" status="PASS" starttime="20170816 05:18:25.373"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:18:25.375" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:18:25.375" status="PASS" starttime="20170816 05:18:25.374"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:18:25.375" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:18:25.375" status="PASS" starttime="20170816 05:18:25.375"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:18:25.376" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:18:25.376" status="PASS" starttime="20170816 05:18:25.376"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:18:25.626" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:18:25.626" status="PASS" starttime="20170816 05:18:25.377"></status>
</kw>
<msg timestamp="20170816 05:18:25.626" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:18:25.626" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:18:25.626" status="PASS" starttime="20170816 05:18:25.376"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:18:25.627" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:18:25.627" status="PASS" starttime="20170816 05:18:25.627"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:18:25.628" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:18:25.628" status="PASS" starttime="20170816 05:18:25.627"></status>
</kw>
<status endtime="20170816 05:18:25.628" status="PASS" starttime="20170816 05:18:25.373"></status>
</kw>
<status endtime="20170816 05:18:25.628" status="PASS" starttime="20170816 05:18:25.372"></status>
</kw>
<status endtime="20170816 05:18:25.628" status="PASS" starttime="20170816 05:18:25.372"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:18:25.629" level="INFO">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status endtime="20170816 05:18:25.629" status="PASS" starttime="20170816 05:18:25.628"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170816 05:18:25.629" status="PASS" starttime="20170816 05:18:25.629"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:18:25.820" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None json=None</msg>
<msg timestamp="20170816 05:18:25.820" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:18:25.820" status="PASS" starttime="20170816 05:18:25.630"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170816 05:18:25.821" status="PASS" starttime="20170816 05:18:25.821"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:18:25.821" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:18:25.821" status="PASS" starttime="20170816 05:18:25.821"></status>
</kw>
<msg timestamp="20170816 05:18:25.822" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:18:25.822" status="PASS" starttime="20170816 05:18:25.371"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:18:25.823" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:18:25.823" status="PASS" starttime="20170816 05:18:25.822"></status>
</kw>
<msg timestamp="20170816 05:18:25.823" level="INFO">${status} = True</msg>
<status endtime="20170816 05:18:25.823" status="PASS" starttime="20170816 05:18:25.822"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20170816 05:18:25.823" status="PASS" starttime="20170816 05:18:25.823"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170816 05:18:25.824" level="INFO">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 3
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/PowerSupplyDerating": {
      "error": 0, 
      "units": "", 
      "value": 10
    }, 
    "/org/openbmc/sensors/host/PowerSupplyRedundancy": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/TurboAllowed": {
      "error": 0, 
      "units": "", 
      "value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:18:25.824" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170816 05:18:25.824" level="INFO">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/host/BootCount": {
            "error": 0,
            "units": "",
            "value": 3
        },
        "/org/openbmc/sensors/host/BootProgress": {
...</msg>
<status endtime="20170816 05:18:25.824" status="PASS" starttime="20170816 05:18:25.824"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 05:18:25.826" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_sensor_list.txt"&gt;/tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status endtime="20170816 05:18:25.826" status="PASS" starttime="20170816 05:18:25.825"></status>
</kw>
<status endtime="20170816 05:18:25.826" status="PASS" starttime="20170816 05:18:25.825"></status>
</kw>
<status endtime="20170816 05:18:25.826" status="PASS" starttime="20170816 05:18:25.370"></status>
</kw>
<kw name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170816 05:18:25.827" level="INFO">${logpath} = /tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_elog.txt</msg>
<status endtime="20170816 05:18:25.827" status="PASS" starttime="20170816 05:18:25.826"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:18:25.830" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:18:25.830" status="PASS" starttime="20170816 05:18:25.829"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:18:25.831" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:18:25.831" status="PASS" starttime="20170816 05:18:25.830"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:18:25.832" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:18:25.832" status="PASS" starttime="20170816 05:18:25.831"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:18:25.832" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:18:25.833" status="PASS" starttime="20170816 05:18:25.832"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:18:26.016" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:18:26.016" status="PASS" starttime="20170816 05:18:25.833"></status>
</kw>
<msg timestamp="20170816 05:18:26.016" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:18:26.016" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:18:26.016" status="PASS" starttime="20170816 05:18:25.833"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:18:26.017" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:18:26.017" status="PASS" starttime="20170816 05:18:26.016"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:18:26.017" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:18:26.017" status="PASS" starttime="20170816 05:18:26.017"></status>
</kw>
<status endtime="20170816 05:18:26.018" status="PASS" starttime="20170816 05:18:25.829"></status>
</kw>
<status endtime="20170816 05:18:26.018" status="PASS" starttime="20170816 05:18:25.828"></status>
</kw>
<status endtime="20170816 05:18:26.018" status="PASS" starttime="20170816 05:18:25.828"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:18:26.018" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status endtime="20170816 05:18:26.018" status="PASS" starttime="20170816 05:18:26.018"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170816 05:18:26.019" status="PASS" starttime="20170816 05:18:26.019"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:18:26.334" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg timestamp="20170816 05:18:26.334" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:18:26.334" status="PASS" starttime="20170816 05:18:26.019"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170816 05:18:26.334" status="PASS" starttime="20170816 05:18:26.334"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:18:26.335" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:18:26.335" status="PASS" starttime="20170816 05:18:26.335"></status>
</kw>
<msg timestamp="20170816 05:18:26.335" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:18:26.335" status="PASS" starttime="20170816 05:18:25.827"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:18:26.336" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:18:26.336" status="PASS" starttime="20170816 05:18:26.336"></status>
</kw>
<msg timestamp="20170816 05:18:26.336" level="INFO">${status} = True</msg>
<status endtime="20170816 05:18:26.336" status="PASS" starttime="20170816 05:18:26.335"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20170816 05:18:26.337" status="PASS" starttime="20170816 05:18:26.337"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170816 05:18:26.338" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/1": {
      "AdditionalData": [], 
      "Id": 1, 
      "Message": "xyz.openbmc_project.Software.Version.Error.ManifestFileFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775109224, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/2": {
      "AdditionalData": [], 
      "Id": 2, 
      "Message": "org.open_power.Host.Error.Checkstop", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775420890, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/3": {
      "AdditionalData": [], 
      "Id": 3, 
      "Message": "org.open_power.Host.Error.Checkstop", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775517321, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/4": {
      "AdditionalData": [], 
      "Id": 4, 
      "Message": "org.open_power.Host.Error.Checkstop", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775612836, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/5": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 25 00 00 00 00 10 1f 15 c3 ae 00 00 00 10 1f 16 9b 7f 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 09 90 00 00 09 55 48 00 18 01 00 22 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 25 07 00 48 00 00 00 e0 00 00 03 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 00 cb 00 00 00 07 00 00 00 00 42 43 38 41 32 35 30 37 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 04 a7 2c 00 00 00 00 55 44 00 50 01 03 01 00 00 00 00 00 00 04 e8 44 00 00 00 00 00 04 a7 2c 00 00 00 00 40 4e c3 4c 00 00 00 00 40 4e c5 4c 00 00 00 00 40 4e ce d0 00 00 00 00 40 3f 1f 38 00 00 00 00 40 3f 2d 7c 00 00 00 00 40 0b 65 b0 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 61 61 63 36 31 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 e4 01 15 31 00 01 28 00 42 49 50 4d 49 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 dc 00 00 00 00 00 00 03 dc 00 00 00 11 00 00 00 00 00 00 00 51 0c 77 9e bf 00 00 00 84 00 10 43 4f 8d 9a 22 cc 00 00 00 96 00 00 00 00 00 00 00 38 00 00 00 00 00 00 00 a8 00 00 00 2c 00 00 00 51 0c 77 eb e1 00 00 00 84 00 10 43 4f 13 70 70 70 00 00 03 de 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 12 00 00 00 2c 00 00 00 51 0c 79 a6 16 00 00 00 45 00 24 43 4f 52 bf 9a e7 00 00 01 58 6f 6b 00 00 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 12 00 00 00 00 00 00 00 8a 00 00 00 00 00 00 00 3b 00 00 00 00 00 00 00 44 00 00 00 51 12 6d 7a 6e 00 00 00 45 00 2c 43 4f 3c d7 f3 d7 00 00 01 a9 6f 6b 00 00 00 00 00 00 00 00 00 2c 00 00 00 00 00 00 00 12 00 00 00 00 00 00 00 8a 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 4c 00 00 00 51 12 6d a8 27 00 00 00 84 00 10 43 4f 8d 9a 22 cc 00 00 00 96 00 00 00 00 00 00 00 20 00 00 00 00 00 00 00 e0 00 00 00 2c 00 00 00 51 12 6d f6 cc 00 00 00 84 00 10 43 4f 13 70 70 70 00 00 03 de 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 12 00 00 00 2c 00 00 00 51 12 6f 16 e0 00 00 00 45 00 24 43 4f 52 bf 9a e7 00 00 01 58 6f 6b 00 00 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 12 00 00 00 00 00 00 00 8b 00 00 00 00 00 00 00 23 00 00 00 00 00 00 00 44 00 00 00 51 18 63 e3 b5 00 00 00 45 00 2c 43 4f 3c d7 f3 d7 00 00 01 a9 6f 6b 00 00 00 00 00 00 00 00 00 2c 00 00 00 00 00 00 00 12 00 00 00 00 00 00 00 8b 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 4c 00 00 00 87 02 c7 d2 55 00 00 00 c7 00 10 43 4f 44 ff d1 f1 00 00 04 1d 00 00 00 00 00 00 00 18 00 00 00 00 00 00 00 22 00 00 00 2c 00 00 00 87 02 e7 30 7e 00 00 00 45 00 24 43 4f 52 bf 9a e7 00 00 01 58 6f 6b 00 00 00 00 00 00 00 00 00 18 00 00 00 00 00 00 00 22 00 00 00 00 00 00 00 8c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 44 00 00 00 87 03 0e 8f 36 00 00 00 c7 00 10 43 4f 13 70 70 70 00 00 03 de 00 00 00 00 00 00 00 10 00 00 00 00 00 00 00 2d 00 00 00 2c 00 00 00 87 08 1f 97 92 00 00 00 45 00 2c 43 4f 3c d7 f3 d7 00 00 01 a9 6f 6b 00 00 00 00 00 00 00 00 00 1c 00 00 00 00 00 00 00 22 00 00 00 00 00 00 00 8c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 4c 00 00 00 87 08 1f f9 d0 00 00 00 45 00 24 43 4f 52 bf 9a e7 00 00 01 58 6f 6b 00 00 00 00 00 00 00 00 00 10 00 00 00 00 00 00 00 2d 00 00 00 00 00 00 00 8d 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 44 00 00 00 87 0e 15 a3 32 00 00 00 45 00 2c 43 4f 3c d7 f3 d7 00 00 01 a9 6f 6b 00 00 00 00 00 00 00 00 00 14 00 00 00 00 00 00 00 2d 00 00 00 00 00 00 00 8d 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 cb 00 00 00 00 00 00 00 4c 00 00 00 87 0e 15 cd 11 00 00 00 c7 00 08 43 4f f8 d7 6e 14 00 00 00 52 00 00 00 00 00 00 00 cb 00 00 00 24 00 00 00 87 0e 15 da 15 00 00 00 c7 00 00 43 4f 91 46 a7 43 00 00 00 96 00 00 00 1c 00 00 00 87 0e 15 eb 05 00 00 00 c7 00 10 43 4f 48 93 e8 7c 00 00 00 b2 00 00 00 00 00 00 00 07 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 41 00 00 00 00 00 2e a4 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 08 00 00 00 00 00 83 99 00 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02"
      ], 
      "Id": 5, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775776205, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/5/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system"
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/6": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 04 aa 00 00 50 48 00 30 01 00 e5 00 00 00 00 02 ec 01 77 64 00 00 00 02 ed 3d ae 8c 42 00 00 0a 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 11 90 00 00 11 55 48 00 18 01 00 e5 00 14 03 20 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 e5 04 00 48 00 00 00 e0 00 00 0b 00 00 00 00 00 03 20 00 00 00 28 00 07 00 00 03 03 c5 1e 00 3d 00 00 00 00 42 43 31 34 45 35 30 34 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 28 01 06 01 00 01 54 41 4b 00 00 00 05 00 00 00 02 00 00 00 e6 00 00 00 05 24 01 00 02 00 05 01 28 03 00 00 00 55 44 00 38 01 33 e5 00 4d 53 20 20 44 55 4d 50 40 00 00 00 00 28 00 07 00 03 20 01 9e 82 91 70 00 01 00 01 03 03 e6 01 00 00 00 01 00 28 00 07 01 05 e6 00 00 00 00 00 55 44 02 08 02 01 e5 00 00 00 00 02 d4 00 05 00 01 00 00 00 00 31 d1 13 00 08 32 00 08 02 00 02 00 dd b6 03 80 02 10 04 00 80 02 00 51 3a 00 08 00 0f ff bc 2b fc 40 00 00 04 0f 0c 00 08 f0 04 83 00 09 44 82 04 01 03 e0 00 01 80 ac c5 04 00 08 ff ff ff 13 00 ff ff 30 06 5a 09 81 13 00 c0 00 00 7f 00 90 00 08 11 07 00 63 c2 80 0d 00 29 4f 00 08 30 82 10 24 7e 40 17 00 06 61 15 87 1d 60 09 00 08 0c 30 04 83 1d 64 21 87 20 26 b9 03 80 20 01 02 00 0d 08 7c 00 06 68 15 87 f1 25 00 25 08 fe 0d 44 06 6f 15 83 1f 17 40 32 80 2d 04 01 16 c2 00 f6 33 40 11 c9 32 01 02 00 02 11 03 80 ff 1f 34 c2 04 a5 00 00 08 04 0d 44 ee e1 08 00 08 0e 1c 04 83 f8 bf 00 24 08 f1 37 83 00 a8 42 40 70 82 00 44 80 62 fc 00 00 d6 28 02 00 08 3f 02 06 f8 04 81 7d 60 e7 12 82 04 82 60 de 00 08 18 92 0d 04 ca e3 3c 80 04 7c 04 82 6f c2 12 40 04 83 04 00 bb 5b 04 01 fa 01 f8 00 ff 04 00 99 2b 54 87 55 99 33 40 91 56 00 0f 56 40 31 4b 40 80 02 00 40 04 02 80 00 88 fc c8 1b 80 0d 44 c4 db 12 80 6d f0 30 52 3f 31 80 16 66 42 b0 00 16 01 4c 59 d8 15 87 cd 3c 40 04 44 00 26 3f 41 52 38 04 83 30 42 48 e4 71 04 05 00 11 01 a2 55 04 05 08 00 b5 15 40 52 03 02 00 3a 02 00 39 5d 7e 80 e0 24 04 4c 04 81 d9 cc 03 80 3b 00 48 3b 04 81 d8 99 3c 87 f5 7d 00 2d 08 f7 0d 44 60 2d 40 04 81 03 0d 00 00 3c bd 00 08 9f c0 20 00 02 f0 00 40 00 2c cd 78 86 0f 09 00 28 00 07 02 00 0a b5 84 40 52 20 0d 44 0d 6c 48 61 b2 78 86 04 00 84 33 00 08 fc fc 3f ff 02 fc ff 00 f3 62 05 7e 80 03 00 c0 00 03 00 ff 0c 83 f7 11 00 08 df 13 02 c0 00 a0 6f 48 52 e7 72 48 f1 42 48 aa 97 04 04 80 00 00 00 00 00 55 44 00 78 01 03 01 00 00 00 00 00 00 04 e8 44 00 00 00 00 00 04 a7 2c 00 00 00 00 40 33 5b 40 00 00 00 00 40 33 bf b4 00 00 00 00 40 33 9f b0 00 00 00 00 40 32 85 e8 00 00 00 00 40 32 8b 70 00 00 00 00 40 32 9a 10 00 00 00 00 40 32 3a b8 00 00 00 00 40 2b 99 4c 00 00 00 00 40 2b 9f 10 00 00 00 00 40 2b ae 30 00 00 00 00 40 2b b1 2c 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 61 61 63 36 31 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 00 14 01 08 01 00 00 00 00 02 00 00 00 a4 00 00 00 05 55 44 02 d4 01 15 31 00 01 28 00 42 50 52 44 46 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 cc 00 00 00 00 00 00 02 cc 00 00 00 11 00 00 00 00 00 00 00 18 10 10 ad d5 00 00 00 77 00 08 43 4f c7 f4 90 bf 00 00 00 b3 00 00 00 00 00 00 00 03 00 00 00 24 00 00 00 18 10 83 c1 3c 00 00 00 77 00 00 43 4f 51 c3 5a c9 00 00 00 61 00 00 00 1c 00 00 00 18 11 35 18 d7 00 00 00 77 00 00 43 4f 78 eb bb 9a 00 00 00 47 00 00 00 1c 00 00 00 18 1e 17 02 7f 00 00 00 77 00 00 43 4f f3 b4 26 d6 00 00 00 ce 00 00 00 1c 00 00 00 18 1e 36 50 bf 00 00 00 77 00 00 43 4f 25 99 2d 85 00 00 00 96 00 00 00 1c 00 00 00 18 1f 1e 4c 9c 00 00 00 77 00 10 43 4f 50 15 d6 2e 00 00 00 b9 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 18 1f 39 54 d2 00 00 00 77 00 10 43 4f 50 15 d6 2e 00 00 00 b9 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 18 20 07 66 0b 00 00 00 77 00 10 43 4f 50 15 d6 2e 00 00 00 b9 00 00 00 00 00 05 00 01 00 00 00 00 c7 7e 00 00 00 00 00 2c 00 00 00 18 20 07 c7 d2 00 00 00 77 00 10 43 4f 50 15 d6 2e 00 00 00 b9 00 00 00 00 00 05 00 01 00 00 00 00 c7 7e 00 0c 00 00 00 2c 00 00 00 18 20 08 04 50 00 00 00 77 00 10 43 4f 50 15 d6 2e 00 00 00 b9 00 00 00 00 00 05 00 01 00 00 00 00 c7 7e 00 0c 00 00 00 2c 00 00 00 18 20 48 5a d5 00 00 00 77 00 10 43 4f 50 15 d6 2e 00 00 00 b9 00 00 00 00 00 28 00 07 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 18 20 54 4d f6 00 00 00 77 00 10 43 4f 50 15 d6 2e 00 00 00 b9 00 00 00 00 00 28 00 07 00 00 00 00 3c 39 00 00 00 00 00 2c 00 00 00 18 20 55 05 a7 00 00 00 77 00 10 43 4f 50 15 d6 2e 00 00 00 b9 00 00 00 00 00 28 00 07 00 00 00 00 3c 39 00 04 00 00 00 2c 00 00 00 18 20 55 4b 96 00 00 00 77 00 10 43 4f 50 15 d6 2e 00 00 00 b9 00 00 00 00 00 28 00 07 00 00 00 00 3c 39 00 04 00 00 00 2c 00 00 00 18 20 58 cb 3b 00 00 00 77 00 10 43 4f 50 15 d6 2e 00 00 00 b9 00 00 00 00 00 28 00 07 00 00 00 00 c5 1e 00 00 00 00 00 2c 00 00 00 18 20 59 d0 3d 00 00 00 77 00 10 43 4f 50 15 d6 2e 00 00 00 b9 00 00 00 00 00 28 00 07 00 00 00 00 c5 1e 00 3d 00 00 00 2c 00 00 00 18 20 5a 1b 46 00 00 00 77 00 10 43 4f 50 15 d6 2e 00 00 00 b9 00 00 00 00 00 28 00 07 00 00 00 00 c5 1e 00 3d 00 00 00 2c"
      ], 
      "Id": 6, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775891879, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/6/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1"
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/7": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 25 00 00 00 00 09 83 58 79 6e 00 00 00 09 83 75 e6 5e 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 12 90 00 00 12 55 48 00 18 01 00 05 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 25 07 00 48 00 00 00 e0 00 00 03 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 00 cb 00 00 00 07 00 00 00 00 42 43 38 41 32 35 30 37 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 04 a7 2c 00 00 00 00 55 44 00 2c 01 01 01 00 6c 69 62 69 73 74 65 70 64 69 73 70 2e 73 6f 00 6c 69 62 65 78 74 69 6e 69 74 73 76 63 2e 73 6f 00 00 00 00 55 44 00 50 01 03 01 00 00 00 00 00 00 04 e8 44 00 00 00 00 00 04 a7 2c 00 00 00 00 40 4e c3 4c 00 00 00 00 40 4e c5 4c 00 00 00 00 40 4e ce d0 00 00 00 00 40 2b a1 70 00 00 00 00 40 2b ae 30 00 00 00 00 40 2b b1 2c 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 61 61 63 36 31 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 cc 01 15 31 00 01 28 00 42 49 50 4d 49 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 c4 00 00 00 00 00 00 03 c4 00 00 00 0f 00 00 00 00 00 00 00 4f 11 f6 46 5b 00 00 00 45 00 24 43 4f 52 bf 9a e7 00 00 01 58 6f 6b 00 00 00 00 00 00 00 00 00 18 00 00 00 00 00 00 00 22 00 00 00 00 00 00 00 79 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 44 00 00 00 4f 17 eb f0 31 00 00 00 45 00 2c 43 4f 3c d7 f3 d7 00 00 01 a9 6f 6b 00 00 00 00 00 00 00 00 00 1c 00 00 00 00 00 00 00 22 00 00 00 00 00 00 00 79 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 4c 00 00 00 4f 17 ec 4b 11 00 00 00 45 00 24 43 4f 52 bf 9a e7 00 00 01 58 6f 6b 00 00 00 00 00 00 00 00 00 18 00 00 00 00 00 00 00 22 00 00 00 00 00 00 00 7a 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 44 00 00 00 4f 1d e1 fc 1c 00 00 00 45 00 2c 43 4f 3c d7 f3 d7 00 00 01 a9 6f 6b 00 00 00 00 00 00 00 00 00 1c 00 00 00 00 00 00 00 22 00 00 00 00 00 00 00 7a 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 4c 00 00 00 4f 1d e2 59 70 00 00 00 45 00 24 43 4f 52 bf 9a e7 00 00 01 58 6f 6b 00 00 00 00 00 00 00 00 00 18 00 00 00 00 00 00 00 22 00 00 00 00 00 00 00 7b 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 44 00 00 00 4f 23 d8 05 9f 00 00 00 45 00 2c 43 4f 3c d7 f3 d7 00 00 01 a9 6f 6b 00 00 00 00 00 00 00 00 00 1c 00 00 00 00 00 00 00 22 00 00 00 00 00 00 00 7b 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 4c 00 00 00 4f 23 d8 65 91 00 00 00 45 00 24 43 4f 52 bf 9a e7 00 00 01 58 6f 6b 00 00 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 42 00 00 00 00 00 00 00 7c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 44 00 00 00 4f 29 ce 26 3a 00 00 00 45 00 2c 43 4f 3c d7 f3 d7 00 00 01 a9 6f 6b 00 00 00 00 00 00 00 00 00 2c 00 00 00 00 00 00 00 42 00 00 00 00 00 00 00 7c 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 4c 00 00 00 4f 29 ce 55 a1 00 00 01 04 00 17 46 44 dc 59 91 db 00 00 01 37 02 00 00 00 00 00 00 00 00 df 00 00 00 00 20 00 04 07 a4 04 aa 00 00 00 00 00 00 34 00 00 00 4f 29 ce c6 35 00 00 00 45 00 24 43 4f 52 bf 9a e7 00 00 01 58 6f 6b 00 00 00 00 00 00 00 00 00 10 00 00 00 00 00 00 00 2d 00 00 00 00 00 00 00 7d 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 44 00 00 00 4f 29 cf 01 6b 00 00 01 04 00 10 43 4f 13 70 70 70 00 00 03 de 00 00 00 00 00 00 00 c8 00 00 00 00 00 00 00 f0 00 00 00 2c 00 00 00 4f 2f c4 1d 70 00 00 00 45 00 2c 43 4f 3c d7 f3 d7 00 00 01 a9 6f 6b 00 00 00 00 00 00 00 00 00 14 00 00 00 00 00 00 00 2d 00 00 00 00 00 00 00 7d 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 cb 00 00 00 00 00 00 00 4c 00 00 00 4f 2f c4 45 e9 00 00 00 77 00 08 43 4f f8 d7 6e 14 00 00 00 52 00 00 00 00 00 00 00 cb 00 00 00 24 00 00 00 4f 2f c4 54 3d 00 00 00 77 00 00 43 4f 91 46 a7 43 00 00 00 96 00 00 00 1c 00 00 00 4f 2f c4 65 3e 00 00 00 77 00 10 43 4f 48 93 e8 7c 00 00 00 b2 00 00 00 00 00 00 00 07 00 00 00 00 00 00 00 00 00 00 00 2c"
      ], 
      "Id": 7, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775894524, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/7/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system"
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/8": {
      "AdditionalData": [], 
      "Id": 8, 
      "Message": "org.open_power.Host.Error.Checkstop", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775900678, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:18:26.339" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170816 05:18:26.339" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/logging/entry/1": {
            "AdditionalData": [],
            "Id": 1,
            "Message": "xyz.openbmc_project.Software.Version.Error.ManifestFile...</msg>
<status endtime="20170816 05:18:26.339" status="PASS" starttime="20170816 05:18:26.337"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 05:18:26.341" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_elog.txt"&gt;/tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_elog.txt&lt;/a&gt;'.</msg>
<status endtime="20170816 05:18:26.341" status="PASS" starttime="20170816 05:18:26.341"></status>
</kw>
<status endtime="20170816 05:18:26.342" status="PASS" starttime="20170816 05:18:26.340"></status>
</kw>
<status endtime="20170816 05:18:26.342" status="PASS" starttime="20170816 05:18:25.826"></status>
</kw>
<kw name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170816 05:18:26.342" level="INFO">${logpath} = /tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_record_log.txt</msg>
<status endtime="20170816 05:18:26.342" status="PASS" starttime="20170816 05:18:26.342"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:18:26.345" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:18:26.346" status="PASS" starttime="20170816 05:18:26.345"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:18:26.346" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:18:26.346" status="PASS" starttime="20170816 05:18:26.346"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:18:26.347" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:18:26.347" status="PASS" starttime="20170816 05:18:26.347"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:18:26.348" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:18:26.348" status="PASS" starttime="20170816 05:18:26.347"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:18:26.574" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:18:26.574" status="PASS" starttime="20170816 05:18:26.348"></status>
</kw>
<msg timestamp="20170816 05:18:26.574" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:18:26.574" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:18:26.574" status="PASS" starttime="20170816 05:18:26.348"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:18:26.575" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:18:26.575" status="PASS" starttime="20170816 05:18:26.574"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:18:26.575" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:18:26.575" status="PASS" starttime="20170816 05:18:26.575"></status>
</kw>
<status endtime="20170816 05:18:26.576" status="PASS" starttime="20170816 05:18:26.344"></status>
</kw>
<status endtime="20170816 05:18:26.576" status="PASS" starttime="20170816 05:18:26.344"></status>
</kw>
<status endtime="20170816 05:18:26.576" status="PASS" starttime="20170816 05:18:26.343"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:18:26.576" level="INFO">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status endtime="20170816 05:18:26.576" status="PASS" starttime="20170816 05:18:26.576"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170816 05:18:26.577" status="PASS" starttime="20170816 05:18:26.577"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:18:26.691" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None json=None</msg>
<msg timestamp="20170816 05:18:26.691" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status endtime="20170816 05:18:26.691" status="PASS" starttime="20170816 05:18:26.577"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170816 05:18:26.692" status="PASS" starttime="20170816 05:18:26.691"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:18:26.692" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:18:26.692" status="PASS" starttime="20170816 05:18:26.692"></status>
</kw>
<msg timestamp="20170816 05:18:26.692" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status endtime="20170816 05:18:26.692" status="PASS" starttime="20170816 05:18:26.343"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:18:26.694" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170816 05:18:26.694" level="FAIL">404 != 200</msg>
<status endtime="20170816 05:18:26.694" status="FAIL" starttime="20170816 05:18:26.693"></status>
</kw>
<msg timestamp="20170816 05:18:26.694" level="INFO">${status} = False</msg>
<status endtime="20170816 05:18:26.694" status="PASS" starttime="20170816 05:18:26.693"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw library="BuiltIn" name="Continue For Loop">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170816 05:18:26.695" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170816 05:18:26.695" status="PASS" starttime="20170816 05:18:26.695"></status>
</kw>
<status endtime="20170816 05:18:26.695" status="PASS" starttime="20170816 05:18:26.694"></status>
</kw>
<status endtime="20170816 05:18:26.695" status="PASS" starttime="20170816 05:18:26.342"></status>
</kw>
<status endtime="20170816 05:18:26.695" status="PASS" starttime="20170816 05:18:22.758"></status>
</kw>
<status endtime="20170816 05:18:26.695" status="PASS" starttime="20170816 05:18:22.757"></status>
</kw>
<status endtime="20170816 05:18:26.695" status="PASS" starttime="20170816 05:18:22.757"></status>
</kw>
<status endtime="20170816 05:18:26.695" status="PASS" starttime="20170816 05:18:22.757"></status>
</kw>
<status endtime="20170816 05:18:26.696" status="PASS" starttime="20170816 05:18:22.756"></status>
</kw>
<status endtime="20170816 05:18:26.696" status="PASS" starttime="20170816 05:18:22.730"></status>
</kw>
<status endtime="20170816 05:18:26.696" status="PASS" starttime="20170816 05:18:22.727"></status>
</kw>
<status endtime="20170816 05:18:26.696" status="PASS" starttime="20170816 05:18:22.727"></status>
</kw>
<kw name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170816 05:18:26.698" status="PASS" starttime="20170816 05:18:26.697"></status>
</kw>
<msg timestamp="20170816 05:18:26.698" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:18:26.698" level="INFO">${ret_values} = None</msg>
<status endtime="20170816 05:18:26.698" status="PASS" starttime="20170816 05:18:26.697"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170816 05:18:26.699" status="PASS" starttime="20170816 05:18:26.698"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Manifest">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw library="openbmc_ffdc_list" name="Get Ffdc Cmd Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170816 05:18:26.725" level="INFO">@{entries} = [ BMC DATA | DRIVER INFO | APPLICATION DATA ]</msg>
<status endtime="20170816 05:18:26.725" status="PASS" starttime="20170816 05:18:26.724"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC DATA" type="foritem">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170816 05:18:26.726" level="INFO">@{cmd_list} = [ ('BMC OS', 'uname -a') | ('BMC File System Disk Space Usage', 'df -hT') | ('BMC Uptime', 'uptime') ]</msg>
<status endtime="20170816 05:18:26.726" status="PASS" starttime="20170816 05:18:26.726"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170816 05:18:26.731" level="INFO">${ENTRY_INDEX} = BMC DATA</msg>
<status endtime="20170816 05:18:26.731" status="PASS" starttime="20170816 05:18:26.726"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC OS', 'uname -a')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 05:18:26.735" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_general.txt"&gt;/tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170816 05:18:26.735" status="PASS" starttime="20170816 05:18:26.735"></status>
</kw>
<status endtime="20170816 05:18:26.735" status="PASS" starttime="20170816 05:18:26.734"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 05:18:26.737" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_general.txt"&gt;/tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170816 05:18:26.737" status="PASS" starttime="20170816 05:18:26.736"></status>
</kw>
<status endtime="20170816 05:18:26.737" status="PASS" starttime="20170816 05:18:26.735"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 05:18:26.738" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_general.txt"&gt;/tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170816 05:18:26.738" status="PASS" starttime="20170816 05:18:26.738"></status>
</kw>
<status endtime="20170816 05:18:26.738" status="PASS" starttime="20170816 05:18:26.737"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 05:18:26.739" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_general.txt"&gt;/tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170816 05:18:26.739" status="PASS" starttime="20170816 05:18:26.739"></status>
</kw>
<status endtime="20170816 05:18:26.739" status="PASS" starttime="20170816 05:18:26.738"></status>
</kw>
<status endtime="20170816 05:18:26.739" status="PASS" starttime="20170816 05:18:26.733"></status>
</kw>
<status endtime="20170816 05:18:26.740" status="PASS" starttime="20170816 05:18:26.733"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170816 05:18:26.740" level="INFO">${cmd_buf} = BMC Execute Command  uname -a  ignore_err=1</msg>
<status endtime="20170816 05:18:26.740" status="PASS" starttime="20170816 05:18:26.740"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uname -a</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170816 05:18:26.814" level="INFO">host=9.41.166.169
width=80
timeout=25 seconds
path_separator=/
alias=bmc_connection
port=22
term_type=vt100
index=1
prompt=# 
newline=

encoding=UTF-8
height=24</msg>
<msg timestamp="20170816 05:18:26.814" level="INFO">Executing command 'uname -a'.</msg>
<msg timestamp="20170816 05:18:26.871" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170816 05:18:26.872" status="PASS" starttime="20170816 05:18:26.772"></status>
</kw>
<msg timestamp="20170816 05:18:26.872" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:18:26.872" level="INFO">${ret_values} = (u'Linux witherspoon 4.10.17-1a4df30c39cf5ee0e3d2528c409787ccbb4a672a #1 Wed Aug 16 01:23:05 UTC 2017 armv6l GNU/Linux', u'', 0)</msg>
<status endtime="20170816 05:18:26.872" status="PASS" starttime="20170816 05:18:26.741"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170816 05:18:26.873" level="INFO">${stdout} = Linux witherspoon 4.10.17-1a4df30c39cf5ee0e3d2528c409787ccbb4a672a #1 Wed Aug 16 01:23:05 UTC 2017 armv6l GNU/Linux</msg>
<status endtime="20170816 05:18:26.873" status="PASS" starttime="20170816 05:18:26.872"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170816 05:18:26.873" level="INFO">${stderr} = </msg>
<status endtime="20170816 05:18:26.873" status="PASS" starttime="20170816 05:18:26.873"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 05:18:26.880" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_general.txt"&gt;/tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170816 05:18:26.880" status="PASS" starttime="20170816 05:18:26.879"></status>
</kw>
<status endtime="20170816 05:18:26.880" status="PASS" starttime="20170816 05:18:26.879"></status>
</kw>
<status endtime="20170816 05:18:26.880" status="PASS" starttime="20170816 05:18:26.874"></status>
</kw>
<status endtime="20170816 05:18:26.880" status="PASS" starttime="20170816 05:18:26.732"></status>
</kw>
<status endtime="20170816 05:18:26.881" status="PASS" starttime="20170816 05:18:26.731"></status>
</kw>
<kw name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 05:18:26.883" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_general.txt"&gt;/tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170816 05:18:26.883" status="PASS" starttime="20170816 05:18:26.883"></status>
</kw>
<status endtime="20170816 05:18:26.884" status="PASS" starttime="20170816 05:18:26.882"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 05:18:26.885" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_general.txt"&gt;/tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170816 05:18:26.885" status="PASS" starttime="20170816 05:18:26.884"></status>
</kw>
<status endtime="20170816 05:18:26.885" status="PASS" starttime="20170816 05:18:26.884"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 05:18:26.886" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_general.txt"&gt;/tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170816 05:18:26.887" status="PASS" starttime="20170816 05:18:26.886"></status>
</kw>
<status endtime="20170816 05:18:26.887" status="PASS" starttime="20170816 05:18:26.885"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 05:18:26.888" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_general.txt"&gt;/tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170816 05:18:26.888" status="PASS" starttime="20170816 05:18:26.887"></status>
</kw>
<status endtime="20170816 05:18:26.888" status="PASS" starttime="20170816 05:18:26.887"></status>
</kw>
<status endtime="20170816 05:18:26.888" status="PASS" starttime="20170816 05:18:26.882"></status>
</kw>
<status endtime="20170816 05:18:26.888" status="PASS" starttime="20170816 05:18:26.882"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170816 05:18:26.889" level="INFO">${cmd_buf} = BMC Execute Command  df -hT  ignore_err=1</msg>
<status endtime="20170816 05:18:26.889" status="PASS" starttime="20170816 05:18:26.888"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>df -hT</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170816 05:18:26.960" level="INFO">host=9.41.166.169
width=80
timeout=25 seconds
path_separator=/
alias=bmc_connection
port=22
term_type=vt100
index=1
prompt=# 
newline=

encoding=UTF-8
height=24</msg>
<msg timestamp="20170816 05:18:26.961" level="INFO">Executing command 'df -hT'.</msg>
<msg timestamp="20170816 05:18:27.017" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170816 05:18:27.018" status="PASS" starttime="20170816 05:18:26.924"></status>
</kw>
<msg timestamp="20170816 05:18:27.018" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:18:27.018" level="INFO">${ret_values} = (u'Filesystem           Type            Size      Used Available Use% Mounted on\ndev                  devtmpfs      210.2M         0    210.2M   0% /dev\ntmpfs                tmpfs         211.1M    ...</msg>
<status endtime="20170816 05:18:27.018" status="PASS" starttime="20170816 05:18:26.889"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170816 05:18:27.019" level="INFO">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.2M         0    210.2M   0% /dev
tmpfs                tmpfs         211.1M     14.1...</msg>
<status endtime="20170816 05:18:27.019" status="PASS" starttime="20170816 05:18:27.018"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170816 05:18:27.019" level="INFO">${stderr} = </msg>
<status endtime="20170816 05:18:27.019" status="PASS" starttime="20170816 05:18:27.019"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 05:18:27.027" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_general.txt"&gt;/tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170816 05:18:27.027" status="PASS" starttime="20170816 05:18:27.026"></status>
</kw>
<status endtime="20170816 05:18:27.027" status="PASS" starttime="20170816 05:18:27.025"></status>
</kw>
<status endtime="20170816 05:18:27.027" status="PASS" starttime="20170816 05:18:27.019"></status>
</kw>
<status endtime="20170816 05:18:27.027" status="PASS" starttime="20170816 05:18:26.881"></status>
</kw>
<status endtime="20170816 05:18:27.027" status="PASS" starttime="20170816 05:18:26.881"></status>
</kw>
<kw name="${cmd} = ('BMC Uptime', 'uptime')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 05:18:27.030" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_general.txt"&gt;/tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170816 05:18:27.030" status="PASS" starttime="20170816 05:18:27.030"></status>
</kw>
<status endtime="20170816 05:18:27.030" status="PASS" starttime="20170816 05:18:27.029"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 05:18:27.031" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_general.txt"&gt;/tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170816 05:18:27.032" status="PASS" starttime="20170816 05:18:27.031"></status>
</kw>
<status endtime="20170816 05:18:27.032" status="PASS" starttime="20170816 05:18:27.030"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 05:18:27.033" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_general.txt"&gt;/tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170816 05:18:27.033" status="PASS" starttime="20170816 05:18:27.032"></status>
</kw>
<status endtime="20170816 05:18:27.033" status="PASS" starttime="20170816 05:18:27.032"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 05:18:27.034" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_general.txt"&gt;/tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170816 05:18:27.034" status="PASS" starttime="20170816 05:18:27.034"></status>
</kw>
<status endtime="20170816 05:18:27.034" status="PASS" starttime="20170816 05:18:27.033"></status>
</kw>
<status endtime="20170816 05:18:27.034" status="PASS" starttime="20170816 05:18:27.029"></status>
</kw>
<status endtime="20170816 05:18:27.035" status="PASS" starttime="20170816 05:18:27.028"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170816 05:18:27.036" level="INFO">${cmd_buf} = BMC Execute Command  uptime  ignore_err=1</msg>
<status endtime="20170816 05:18:27.036" status="PASS" starttime="20170816 05:18:27.035"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uptime</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170816 05:18:27.104" level="INFO">host=9.41.166.169
width=80
timeout=25 seconds
path_separator=/
alias=bmc_connection
port=22
term_type=vt100
index=1
prompt=# 
newline=

encoding=UTF-8
height=24</msg>
<msg timestamp="20170816 05:18:27.104" level="INFO">Executing command 'uptime'.</msg>
<msg timestamp="20170816 05:18:27.161" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170816 05:18:27.161" status="PASS" starttime="20170816 05:18:27.068"></status>
</kw>
<msg timestamp="20170816 05:18:27.161" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:18:27.161" level="INFO">${ret_values} = (u' 15:59:21 up 16 min,  load average: 0.97, 1.30, 0.95', u'', 0)</msg>
<status endtime="20170816 05:18:27.161" status="PASS" starttime="20170816 05:18:27.036"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170816 05:18:27.162" level="INFO">${stdout} =  15:59:21 up 16 min,  load average: 0.97, 1.30, 0.95</msg>
<status endtime="20170816 05:18:27.162" status="PASS" starttime="20170816 05:18:27.161"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170816 05:18:27.162" level="INFO">${stderr} = </msg>
<status endtime="20170816 05:18:27.162" status="PASS" starttime="20170816 05:18:27.162"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 05:18:27.169" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_general.txt"&gt;/tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170816 05:18:27.169" status="PASS" starttime="20170816 05:18:27.169"></status>
</kw>
<status endtime="20170816 05:18:27.169" status="PASS" starttime="20170816 05:18:27.168"></status>
</kw>
<status endtime="20170816 05:18:27.169" status="PASS" starttime="20170816 05:18:27.163"></status>
</kw>
<status endtime="20170816 05:18:27.169" status="PASS" starttime="20170816 05:18:27.027"></status>
</kw>
<status endtime="20170816 05:18:27.169" status="PASS" starttime="20170816 05:18:27.027"></status>
</kw>
<status endtime="20170816 05:18:27.169" status="PASS" starttime="20170816 05:18:26.731"></status>
</kw>
<status endtime="20170816 05:18:27.170" status="PASS" starttime="20170816 05:18:26.725"></status>
</kw>
<status endtime="20170816 05:18:27.170" status="PASS" starttime="20170816 05:18:26.725"></status>
</kw>
<kw name="${index} = DRIVER INFO" type="foritem">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170816 05:18:27.171" level="INFO">@{cmd_list} = [ ('FW Level', 'cat /etc/os-release') ]</msg>
<status endtime="20170816 05:18:27.171" status="PASS" starttime="20170816 05:18:27.170"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170816 05:18:27.171" level="INFO">${ENTRY_INDEX} = DRIVER INFO</msg>
<status endtime="20170816 05:18:27.171" status="PASS" starttime="20170816 05:18:27.171"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('FW Level', 'cat /etc/os-release')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 05:18:27.175" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_general.txt"&gt;/tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170816 05:18:27.175" status="PASS" starttime="20170816 05:18:27.174"></status>
</kw>
<status endtime="20170816 05:18:27.175" status="PASS" starttime="20170816 05:18:27.174"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 05:18:27.176" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_general.txt"&gt;/tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170816 05:18:27.176" status="PASS" starttime="20170816 05:18:27.176"></status>
</kw>
<status endtime="20170816 05:18:27.176" status="PASS" starttime="20170816 05:18:27.175"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 05:18:27.177" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_general.txt"&gt;/tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170816 05:18:27.177" status="PASS" starttime="20170816 05:18:27.177"></status>
</kw>
<status endtime="20170816 05:18:27.177" status="PASS" starttime="20170816 05:18:27.176"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 05:18:27.178" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_general.txt"&gt;/tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170816 05:18:27.179" status="PASS" starttime="20170816 05:18:27.178"></status>
</kw>
<status endtime="20170816 05:18:27.179" status="PASS" starttime="20170816 05:18:27.178"></status>
</kw>
<status endtime="20170816 05:18:27.179" status="PASS" starttime="20170816 05:18:27.173"></status>
</kw>
<status endtime="20170816 05:18:27.179" status="PASS" starttime="20170816 05:18:27.173"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170816 05:18:27.180" level="INFO">${cmd_buf} = BMC Execute Command  cat /etc/os-release  ignore_err=1</msg>
<status endtime="20170816 05:18:27.180" status="PASS" starttime="20170816 05:18:27.179"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/os-release</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170816 05:18:27.254" level="INFO">host=9.41.166.169
width=80
timeout=25 seconds
path_separator=/
alias=bmc_connection
port=22
term_type=vt100
index=1
prompt=# 
newline=

encoding=UTF-8
height=24</msg>
<msg timestamp="20170816 05:18:27.255" level="INFO">Executing command 'cat /etc/os-release'.</msg>
<msg timestamp="20170816 05:18:27.311" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170816 05:18:27.311" status="PASS" starttime="20170816 05:18:27.211"></status>
</kw>
<msg timestamp="20170816 05:18:27.311" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:18:27.311" level="INFO">${ret_values} = (u'ID="openbmc-phosphor"\nNAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"\nVERSION="v1.99.8-260"\nVERSION_ID="v1.99.8-260-g520e8be"\nPRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC...</msg>
<status endtime="20170816 05:18:27.311" status="PASS" starttime="20170816 05:18:27.180"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170816 05:18:27.312" level="INFO">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.8-260"
VERSION_ID="v1.99.8-260-g520e8be"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Projec...</msg>
<status endtime="20170816 05:18:27.312" status="PASS" starttime="20170816 05:18:27.312"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170816 05:18:27.313" level="INFO">${stderr} = </msg>
<status endtime="20170816 05:18:27.313" status="PASS" starttime="20170816 05:18:27.312"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 05:18:27.319" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_general.txt"&gt;/tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170816 05:18:27.319" status="PASS" starttime="20170816 05:18:27.319"></status>
</kw>
<status endtime="20170816 05:18:27.319" status="PASS" starttime="20170816 05:18:27.318"></status>
</kw>
<status endtime="20170816 05:18:27.319" status="PASS" starttime="20170816 05:18:27.313"></status>
</kw>
<status endtime="20170816 05:18:27.319" status="PASS" starttime="20170816 05:18:27.172"></status>
</kw>
<status endtime="20170816 05:18:27.320" status="PASS" starttime="20170816 05:18:27.172"></status>
</kw>
<status endtime="20170816 05:18:27.320" status="PASS" starttime="20170816 05:18:27.172"></status>
</kw>
<status endtime="20170816 05:18:27.320" status="PASS" starttime="20170816 05:18:27.170"></status>
</kw>
<status endtime="20170816 05:18:27.320" status="PASS" starttime="20170816 05:18:27.170"></status>
</kw>
<kw name="${index} = APPLICATION DATA" type="foritem">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170816 05:18:27.321" level="INFO">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil state') ]</msg>
<status endtime="20170816 05:18:27.321" status="PASS" starttime="20170816 05:18:27.320"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170816 05:18:27.321" level="INFO">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status endtime="20170816 05:18:27.322" status="PASS" starttime="20170816 05:18:27.321"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC state', '/usr/sbin/obmcutil state')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 05:18:27.325" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_general.txt"&gt;/tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170816 05:18:27.325" status="PASS" starttime="20170816 05:18:27.324"></status>
</kw>
<status endtime="20170816 05:18:27.325" status="PASS" starttime="20170816 05:18:27.324"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 05:18:27.326" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_general.txt"&gt;/tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170816 05:18:27.326" status="PASS" starttime="20170816 05:18:27.326"></status>
</kw>
<status endtime="20170816 05:18:27.326" status="PASS" starttime="20170816 05:18:27.325"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 05:18:27.327" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_general.txt"&gt;/tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170816 05:18:27.328" status="PASS" starttime="20170816 05:18:27.327"></status>
</kw>
<status endtime="20170816 05:18:27.328" status="PASS" starttime="20170816 05:18:27.326"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 05:18:27.329" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_general.txt"&gt;/tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170816 05:18:27.329" status="PASS" starttime="20170816 05:18:27.328"></status>
</kw>
<status endtime="20170816 05:18:27.329" status="PASS" starttime="20170816 05:18:27.328"></status>
</kw>
<status endtime="20170816 05:18:27.329" status="PASS" starttime="20170816 05:18:27.323"></status>
</kw>
<status endtime="20170816 05:18:27.329" status="PASS" starttime="20170816 05:18:27.323"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170816 05:18:27.330" level="INFO">${cmd_buf} = BMC Execute Command  /usr/sbin/obmcutil state  ignore_err=1</msg>
<status endtime="20170816 05:18:27.330" status="PASS" starttime="20170816 05:18:27.329"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>/usr/sbin/obmcutil state</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170816 05:18:27.405" level="INFO">host=9.41.166.169
width=80
timeout=25 seconds
path_separator=/
alias=bmc_connection
port=22
term_type=vt100
index=1
prompt=# 
newline=

encoding=UTF-8
height=24</msg>
<msg timestamp="20170816 05:18:27.406" level="INFO">Executing command '/usr/sbin/obmcutil state'.</msg>
<msg timestamp="20170816 05:18:28.865" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170816 05:18:28.865" status="PASS" starttime="20170816 05:18:27.367"></status>
</kw>
<msg timestamp="20170816 05:18:28.865" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:18:28.866" level="INFO">${ret_values} = (u'CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready\nCurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.On\nCurrentHostState:   xyz.openbmc_project.State.Host.HostState.Q...</msg>
<status endtime="20170816 05:18:28.866" status="PASS" starttime="20170816 05:18:27.330"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170816 05:18:28.866" level="INFO">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.On
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Quiesc...</msg>
<status endtime="20170816 05:18:28.866" status="PASS" starttime="20170816 05:18:28.866"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170816 05:18:28.867" level="INFO">${stderr} = </msg>
<status endtime="20170816 05:18:28.867" status="PASS" starttime="20170816 05:18:28.867"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 05:18:28.876" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_general.txt"&gt;/tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170816 05:18:28.876" status="PASS" starttime="20170816 05:18:28.875"></status>
</kw>
<status endtime="20170816 05:18:28.876" status="PASS" starttime="20170816 05:18:28.874"></status>
</kw>
<status endtime="20170816 05:18:28.876" status="PASS" starttime="20170816 05:18:28.867"></status>
</kw>
<status endtime="20170816 05:18:28.876" status="PASS" starttime="20170816 05:18:27.322"></status>
</kw>
<status endtime="20170816 05:18:28.876" status="PASS" starttime="20170816 05:18:27.322"></status>
</kw>
<status endtime="20170816 05:18:28.876" status="PASS" starttime="20170816 05:18:27.322"></status>
</kw>
<status endtime="20170816 05:18:28.876" status="PASS" starttime="20170816 05:18:27.320"></status>
</kw>
<status endtime="20170816 05:18:28.876" status="PASS" starttime="20170816 05:18:27.320"></status>
</kw>
<status endtime="20170816 05:18:28.876" status="PASS" starttime="20170816 05:18:26.725"></status>
</kw>
<status endtime="20170816 05:18:28.877" status="PASS" starttime="20170816 05:18:26.724"></status>
</kw>
<status endtime="20170816 05:18:28.877" status="PASS" starttime="20170816 05:18:26.699"></status>
</kw>
<status endtime="20170816 05:18:28.877" status="PASS" starttime="20170816 05:18:26.696"></status>
</kw>
<status endtime="20170816 05:18:28.877" status="PASS" starttime="20170816 05:18:26.696"></status>
</kw>
<kw name="${method} = ('SEL Log', 'Collect eSEL Log')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170816 05:18:28.879" status="PASS" starttime="20170816 05:18:28.878"></status>
</kw>
<msg timestamp="20170816 05:18:28.879" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:18:28.879" level="INFO">${ret_values} = None</msg>
<status endtime="20170816 05:18:28.879" status="PASS" starttime="20170816 05:18:28.878"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170816 05:18:28.879" status="PASS" starttime="20170816 05:18:28.879"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="Collect eSEL Log">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:18:28.908" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:18:28.908" status="PASS" starttime="20170816 05:18:28.908"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:18:28.909" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:18:28.909" status="PASS" starttime="20170816 05:18:28.909"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:18:28.910" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:18:28.910" status="PASS" starttime="20170816 05:18:28.909"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:18:28.910" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:18:28.910" status="PASS" starttime="20170816 05:18:28.910"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:18:29.138" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:18:29.139" status="PASS" starttime="20170816 05:18:28.911"></status>
</kw>
<msg timestamp="20170816 05:18:29.139" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:18:29.139" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:18:29.139" status="PASS" starttime="20170816 05:18:28.910"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:18:29.139" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:18:29.140" status="PASS" starttime="20170816 05:18:29.139"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:18:29.140" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:18:29.140" status="PASS" starttime="20170816 05:18:29.140"></status>
</kw>
<status endtime="20170816 05:18:29.140" status="PASS" starttime="20170816 05:18:28.907"></status>
</kw>
<status endtime="20170816 05:18:29.140" status="PASS" starttime="20170816 05:18:28.907"></status>
</kw>
<status endtime="20170816 05:18:29.141" status="PASS" starttime="20170816 05:18:28.906"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:18:29.141" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status endtime="20170816 05:18:29.141" status="PASS" starttime="20170816 05:18:29.141"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170816 05:18:29.142" status="PASS" starttime="20170816 05:18:29.141"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:18:29.539" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg timestamp="20170816 05:18:29.539" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:18:29.539" status="PASS" starttime="20170816 05:18:29.142"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170816 05:18:29.540" status="PASS" starttime="20170816 05:18:29.540"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:18:29.540" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:18:29.540" status="PASS" starttime="20170816 05:18:29.540"></status>
</kw>
<msg timestamp="20170816 05:18:29.541" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:18:29.541" status="PASS" starttime="20170816 05:18:28.905"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:18:29.542" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:18:29.542" status="PASS" starttime="20170816 05:18:29.541"></status>
</kw>
<msg timestamp="20170816 05:18:29.542" level="INFO">${status} = True</msg>
<status endtime="20170816 05:18:29.542" status="PASS" starttime="20170816 05:18:29.541"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<status endtime="20170816 05:18:29.542" status="PASS" starttime="20170816 05:18:29.542"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:18:29.544" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/1": {
      "AdditionalData": [], 
      "Id": 1, 
      "Message": "xyz.openbmc_project.Software.Version.Error.ManifestFileFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775109224, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/2": {
      "AdditionalData": [], 
      "Id": 2, 
      "Message": "org.open_power.Host.Error.Checkstop", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775420890, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/3": {
      "AdditionalData": [], 
      "Id": 3, 
      "Message": "org.open_power.Host.Error.Checkstop", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775517321, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/4": {
      "AdditionalData": [], 
      "Id": 4, 
      "Message": "org.open_power.Host.Error.Checkstop", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775612836, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/5": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 25 00 00 00 00 10 1f 15 c3 ae 00 00 00 10 1f 16 9b 7f 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 09 90 00 00 09 55 48 00 18 01 00 22 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 25 07 00 48 00 00 00 e0 00 00 03 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 00 cb 00 00 00 07 00 00 00 00 42 43 38 41 32 35 30 37 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 04 a7 2c 00 00 00 00 55 44 00 50 01 03 01 00 00 00 00 00 00 04 e8 44 00 00 00 00 00 04 a7 2c 00 00 00 00 40 4e c3 4c 00 00 00 00 40 4e c5 4c 00 00 00 00 40 4e ce d0 00 00 00 00 40 3f 1f 38 00 00 00 00 40 3f 2d 7c 00 00 00 00 40 0b 65 b0 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 61 61 63 36 31 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 e4 01 15 31 00 01 28 00 42 49 50 4d 49 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 dc 00 00 00 00 00 00 03 dc 00 00 00 11 00 00 00 00 00 00 00 51 0c 77 9e bf 00 00 00 84 00 10 43 4f 8d 9a 22 cc 00 00 00 96 00 00 00 00 00 00 00 38 00 00 00 00 00 00 00 a8 00 00 00 2c 00 00 00 51 0c 77 eb e1 00 00 00 84 00 10 43 4f 13 70 70 70 00 00 03 de 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 12 00 00 00 2c 00 00 00 51 0c 79 a6 16 00 00 00 45 00 24 43 4f 52 bf 9a e7 00 00 01 58 6f 6b 00 00 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 12 00 00 00 00 00 00 00 8a 00 00 00 00 00 00 00 3b 00 00 00 00 00 00 00 44 00 00 00 51 12 6d 7a 6e 00 00 00 45 00 2c 43 4f 3c d7 f3 d7 00 00 01 a9 6f 6b 00 00 00 00 00 00 00 00 00 2c 00 00 00 00 00 00 00 12 00 00 00 00 00 00 00 8a 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 4c 00 00 00 51 12 6d a8 27 00 00 00 84 00 10 43 4f 8d 9a 22 cc 00 00 00 96 00 00 00 00 00 00 00 20 00 00 00 00 00 00 00 e0 00 00 00 2c 00 00 00 51 12 6d f6 cc 00 00 00 84 00 10 43 4f 13 70 70 70 00 00 03 de 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 12 00 00 00 2c 00 00 00 51 12 6f 16 e0 00 00 00 45 00 24 43 4f 52 bf 9a e7 00 00 01 58 6f 6b 00 00 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 12 00 00 00 00 00 00 00 8b 00 00 00 00 00 00 00 23 00 00 00 00 00 00 00 44 00 00 00 51 18 63 e3 b5 00 00 00 45 00 2c 43 4f 3c d7 f3 d7 00 00 01 a9 6f 6b 00 00 00 00 00 00 00 00 00 2c 00 00 00 00 00 00 00 12 00 00 00 00 00 00 00 8b 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 4c 00 00 00 87 02 c7 d2 55 00 00 00 c7 00 10 43 4f 44 ff d1 f1 00 00 04 1d 00 00 00 00 00 00 00 18 00 00 00 00 00 00 00 22 00 00 00 2c 00 00 00 87 02 e7 30 7e 00 00 00 45 00 24 43 4f 52 bf 9a e7 00 00 01 58 6f 6b 00 00 00 00 00 00 00 00 00 18 00 00 00 00 00 00 00 22 00 00 00 00 00 00 00 8c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 44 00 00 00 87 03 0e 8f 36 00 00 00 c7 00 10 43 4f 13 70 70 70 00 00 03 de 00 00 00 00 00 00 00 10 00 00 00 00 00 00 00 2d 00 00 00 2c 00 00 00 87 08 1f 97 92 00 00 00 45 00 2c 43 4f 3c d7 f3 d7 00 00 01 a9 6f 6b 00 00 00 00 00 00 00 00 00 1c 00 00 00 00 00 00 00 22 00 00 00 00 00 00 00 8c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 4c 00 00 00 87 08 1f f9 d0 00 00 00 45 00 24 43 4f 52 bf 9a e7 00 00 01 58 6f 6b 00 00 00 00 00 00 00 00 00 10 00 00 00 00 00 00 00 2d 00 00 00 00 00 00 00 8d 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 44 00 00 00 87 0e 15 a3 32 00 00 00 45 00 2c 43 4f 3c d7 f3 d7 00 00 01 a9 6f 6b 00 00 00 00 00 00 00 00 00 14 00 00 00 00 00 00 00 2d 00 00 00 00 00 00 00 8d 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 cb 00 00 00 00 00 00 00 4c 00 00 00 87 0e 15 cd 11 00 00 00 c7 00 08 43 4f f8 d7 6e 14 00 00 00 52 00 00 00 00 00 00 00 cb 00 00 00 24 00 00 00 87 0e 15 da 15 00 00 00 c7 00 00 43 4f 91 46 a7 43 00 00 00 96 00 00 00 1c 00 00 00 87 0e 15 eb 05 00 00 00 c7 00 10 43 4f 48 93 e8 7c 00 00 00 b2 00 00 00 00 00 00 00 07 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 41 00 00 00 00 00 2e a4 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 08 00 00 00 00 00 83 99 00 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02"
      ], 
      "Id": 5, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775776205, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/5/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system"
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/6": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 04 aa 00 00 50 48 00 30 01 00 e5 00 00 00 00 02 ec 01 77 64 00 00 00 02 ed 3d ae 8c 42 00 00 0a 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 11 90 00 00 11 55 48 00 18 01 00 e5 00 14 03 20 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 e5 04 00 48 00 00 00 e0 00 00 0b 00 00 00 00 00 03 20 00 00 00 28 00 07 00 00 03 03 c5 1e 00 3d 00 00 00 00 42 43 31 34 45 35 30 34 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 28 01 06 01 00 01 54 41 4b 00 00 00 05 00 00 00 02 00 00 00 e6 00 00 00 05 24 01 00 02 00 05 01 28 03 00 00 00 55 44 00 38 01 33 e5 00 4d 53 20 20 44 55 4d 50 40 00 00 00 00 28 00 07 00 03 20 01 9e 82 91 70 00 01 00 01 03 03 e6 01 00 00 00 01 00 28 00 07 01 05 e6 00 00 00 00 00 55 44 02 08 02 01 e5 00 00 00 00 02 d4 00 05 00 01 00 00 00 00 31 d1 13 00 08 32 00 08 02 00 02 00 dd b6 03 80 02 10 04 00 80 02 00 51 3a 00 08 00 0f ff bc 2b fc 40 00 00 04 0f 0c 00 08 f0 04 83 00 09 44 82 04 01 03 e0 00 01 80 ac c5 04 00 08 ff ff ff 13 00 ff ff 30 06 5a 09 81 13 00 c0 00 00 7f 00 90 00 08 11 07 00 63 c2 80 0d 00 29 4f 00 08 30 82 10 24 7e 40 17 00 06 61 15 87 1d 60 09 00 08 0c 30 04 83 1d 64 21 87 20 26 b9 03 80 20 01 02 00 0d 08 7c 00 06 68 15 87 f1 25 00 25 08 fe 0d 44 06 6f 15 83 1f 17 40 32 80 2d 04 01 16 c2 00 f6 33 40 11 c9 32 01 02 00 02 11 03 80 ff 1f 34 c2 04 a5 00 00 08 04 0d 44 ee e1 08 00 08 0e 1c 04 83 f8 bf 00 24 08 f1 37 83 00 a8 42 40 70 82 00 44 80 62 fc 00 00 d6 28 02 00 08 3f 02 06 f8 04 81 7d 60 e7 12 82 04 82 60 de 00 08 18 92 0d 04 ca e3 3c 80 04 7c 04 82 6f c2 12 40 04 83 04 00 bb 5b 04 01 fa 01 f8 00 ff 04 00 99 2b 54 87 55 99 33 40 91 56 00 0f 56 40 31 4b 40 80 02 00 40 04 02 80 00 88 fc c8 1b 80 0d 44 c4 db 12 80 6d f0 30 52 3f 31 80 16 66 42 b0 00 16 01 4c 59 d8 15 87 cd 3c 40 04 44 00 26 3f 41 52 38 04 83 30 42 48 e4 71 04 05 00 11 01 a2 55 04 05 08 00 b5 15 40 52 03 02 00 3a 02 00 39 5d 7e 80 e0 24 04 4c 04 81 d9 cc 03 80 3b 00 48 3b 04 81 d8 99 3c 87 f5 7d 00 2d 08 f7 0d 44 60 2d 40 04 81 03 0d 00 00 3c bd 00 08 9f c0 20 00 02 f0 00 40 00 2c cd 78 86 0f 09 00 28 00 07 02 00 0a b5 84 40 52 20 0d 44 0d 6c 48 61 b2 78 86 04 00 84 33 00 08 fc fc 3f ff 02 fc ff 00 f3 62 05 7e 80 03 00 c0 00 03 00 ff 0c 83 f7 11 00 08 df 13 02 c0 00 a0 6f 48 52 e7 72 48 f1 42 48 aa 97 04 04 80 00 00 00 00 00 55 44 00 78 01 03 01 00 00 00 00 00 00 04 e8 44 00 00 00 00 00 04 a7 2c 00 00 00 00 40 33 5b 40 00 00 00 00 40 33 bf b4 00 00 00 00 40 33 9f b0 00 00 00 00 40 32 85 e8 00 00 00 00 40 32 8b 70 00 00 00 00 40 32 9a 10 00 00 00 00 40 32 3a b8 00 00 00 00 40 2b 99 4c 00 00 00 00 40 2b 9f 10 00 00 00 00 40 2b ae 30 00 00 00 00 40 2b b1 2c 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 61 61 63 36 31 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 00 14 01 08 01 00 00 00 00 02 00 00 00 a4 00 00 00 05 55 44 02 d4 01 15 31 00 01 28 00 42 50 52 44 46 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 cc 00 00 00 00 00 00 02 cc 00 00 00 11 00 00 00 00 00 00 00 18 10 10 ad d5 00 00 00 77 00 08 43 4f c7 f4 90 bf 00 00 00 b3 00 00 00 00 00 00 00 03 00 00 00 24 00 00 00 18 10 83 c1 3c 00 00 00 77 00 00 43 4f 51 c3 5a c9 00 00 00 61 00 00 00 1c 00 00 00 18 11 35 18 d7 00 00 00 77 00 00 43 4f 78 eb bb 9a 00 00 00 47 00 00 00 1c 00 00 00 18 1e 17 02 7f 00 00 00 77 00 00 43 4f f3 b4 26 d6 00 00 00 ce 00 00 00 1c 00 00 00 18 1e 36 50 bf 00 00 00 77 00 00 43 4f 25 99 2d 85 00 00 00 96 00 00 00 1c 00 00 00 18 1f 1e 4c 9c 00 00 00 77 00 10 43 4f 50 15 d6 2e 00 00 00 b9 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 18 1f 39 54 d2 00 00 00 77 00 10 43 4f 50 15 d6 2e 00 00 00 b9 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 18 20 07 66 0b 00 00 00 77 00 10 43 4f 50 15 d6 2e 00 00 00 b9 00 00 00 00 00 05 00 01 00 00 00 00 c7 7e 00 00 00 00 00 2c 00 00 00 18 20 07 c7 d2 00 00 00 77 00 10 43 4f 50 15 d6 2e 00 00 00 b9 00 00 00 00 00 05 00 01 00 00 00 00 c7 7e 00 0c 00 00 00 2c 00 00 00 18 20 08 04 50 00 00 00 77 00 10 43 4f 50 15 d6 2e 00 00 00 b9 00 00 00 00 00 05 00 01 00 00 00 00 c7 7e 00 0c 00 00 00 2c 00 00 00 18 20 48 5a d5 00 00 00 77 00 10 43 4f 50 15 d6 2e 00 00 00 b9 00 00 00 00 00 28 00 07 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 18 20 54 4d f6 00 00 00 77 00 10 43 4f 50 15 d6 2e 00 00 00 b9 00 00 00 00 00 28 00 07 00 00 00 00 3c 39 00 00 00 00 00 2c 00 00 00 18 20 55 05 a7 00 00 00 77 00 10 43 4f 50 15 d6 2e 00 00 00 b9 00 00 00 00 00 28 00 07 00 00 00 00 3c 39 00 04 00 00 00 2c 00 00 00 18 20 55 4b 96 00 00 00 77 00 10 43 4f 50 15 d6 2e 00 00 00 b9 00 00 00 00 00 28 00 07 00 00 00 00 3c 39 00 04 00 00 00 2c 00 00 00 18 20 58 cb 3b 00 00 00 77 00 10 43 4f 50 15 d6 2e 00 00 00 b9 00 00 00 00 00 28 00 07 00 00 00 00 c5 1e 00 00 00 00 00 2c 00 00 00 18 20 59 d0 3d 00 00 00 77 00 10 43 4f 50 15 d6 2e 00 00 00 b9 00 00 00 00 00 28 00 07 00 00 00 00 c5 1e 00 3d 00 00 00 2c 00 00 00 18 20 5a 1b 46 00 00 00 77 00 10 43 4f 50 15 d6 2e 00 00 00 b9 00 00 00 00 00 28 00 07 00 00 00 00 c5 1e 00 3d 00 00 00 2c"
      ], 
      "Id": 6, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775891879, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/6/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1"
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/7": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 25 00 00 00 00 09 83 58 79 6e 00 00 00 09 83 75 e6 5e 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 12 90 00 00 12 55 48 00 18 01 00 05 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 25 07 00 48 00 00 00 e0 00 00 03 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 00 cb 00 00 00 07 00 00 00 00 42 43 38 41 32 35 30 37 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 04 a7 2c 00 00 00 00 55 44 00 2c 01 01 01 00 6c 69 62 69 73 74 65 70 64 69 73 70 2e 73 6f 00 6c 69 62 65 78 74 69 6e 69 74 73 76 63 2e 73 6f 00 00 00 00 55 44 00 50 01 03 01 00 00 00 00 00 00 04 e8 44 00 00 00 00 00 04 a7 2c 00 00 00 00 40 4e c3 4c 00 00 00 00 40 4e c5 4c 00 00 00 00 40 4e ce d0 00 00 00 00 40 2b a1 70 00 00 00 00 40 2b ae 30 00 00 00 00 40 2b b1 2c 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 61 61 63 36 31 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 cc 01 15 31 00 01 28 00 42 49 50 4d 49 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 c4 00 00 00 00 00 00 03 c4 00 00 00 0f 00 00 00 00 00 00 00 4f 11 f6 46 5b 00 00 00 45 00 24 43 4f 52 bf 9a e7 00 00 01 58 6f 6b 00 00 00 00 00 00 00 00 00 18 00 00 00 00 00 00 00 22 00 00 00 00 00 00 00 79 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 44 00 00 00 4f 17 eb f0 31 00 00 00 45 00 2c 43 4f 3c d7 f3 d7 00 00 01 a9 6f 6b 00 00 00 00 00 00 00 00 00 1c 00 00 00 00 00 00 00 22 00 00 00 00 00 00 00 79 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 4c 00 00 00 4f 17 ec 4b 11 00 00 00 45 00 24 43 4f 52 bf 9a e7 00 00 01 58 6f 6b 00 00 00 00 00 00 00 00 00 18 00 00 00 00 00 00 00 22 00 00 00 00 00 00 00 7a 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 44 00 00 00 4f 1d e1 fc 1c 00 00 00 45 00 2c 43 4f 3c d7 f3 d7 00 00 01 a9 6f 6b 00 00 00 00 00 00 00 00 00 1c 00 00 00 00 00 00 00 22 00 00 00 00 00 00 00 7a 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 4c 00 00 00 4f 1d e2 59 70 00 00 00 45 00 24 43 4f 52 bf 9a e7 00 00 01 58 6f 6b 00 00 00 00 00 00 00 00 00 18 00 00 00 00 00 00 00 22 00 00 00 00 00 00 00 7b 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 44 00 00 00 4f 23 d8 05 9f 00 00 00 45 00 2c 43 4f 3c d7 f3 d7 00 00 01 a9 6f 6b 00 00 00 00 00 00 00 00 00 1c 00 00 00 00 00 00 00 22 00 00 00 00 00 00 00 7b 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 4c 00 00 00 4f 23 d8 65 91 00 00 00 45 00 24 43 4f 52 bf 9a e7 00 00 01 58 6f 6b 00 00 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 42 00 00 00 00 00 00 00 7c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 44 00 00 00 4f 29 ce 26 3a 00 00 00 45 00 2c 43 4f 3c d7 f3 d7 00 00 01 a9 6f 6b 00 00 00 00 00 00 00 00 00 2c 00 00 00 00 00 00 00 42 00 00 00 00 00 00 00 7c 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 4c 00 00 00 4f 29 ce 55 a1 00 00 01 04 00 17 46 44 dc 59 91 db 00 00 01 37 02 00 00 00 00 00 00 00 00 df 00 00 00 00 20 00 04 07 a4 04 aa 00 00 00 00 00 00 34 00 00 00 4f 29 ce c6 35 00 00 00 45 00 24 43 4f 52 bf 9a e7 00 00 01 58 6f 6b 00 00 00 00 00 00 00 00 00 10 00 00 00 00 00 00 00 2d 00 00 00 00 00 00 00 7d 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 44 00 00 00 4f 29 cf 01 6b 00 00 01 04 00 10 43 4f 13 70 70 70 00 00 03 de 00 00 00 00 00 00 00 c8 00 00 00 00 00 00 00 f0 00 00 00 2c 00 00 00 4f 2f c4 1d 70 00 00 00 45 00 2c 43 4f 3c d7 f3 d7 00 00 01 a9 6f 6b 00 00 00 00 00 00 00 00 00 14 00 00 00 00 00 00 00 2d 00 00 00 00 00 00 00 7d 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 cb 00 00 00 00 00 00 00 4c 00 00 00 4f 2f c4 45 e9 00 00 00 77 00 08 43 4f f8 d7 6e 14 00 00 00 52 00 00 00 00 00 00 00 cb 00 00 00 24 00 00 00 4f 2f c4 54 3d 00 00 00 77 00 00 43 4f 91 46 a7 43 00 00 00 96 00 00 00 1c 00 00 00 4f 2f c4 65 3e 00 00 00 77 00 10 43 4f 48 93 e8 7c 00 00 00 b2 00 00 00 00 00 00 00 07 00 00 00 00 00 00 00 00 00 00 00 2c"
      ], 
      "Id": 7, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775894524, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/7/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system"
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/8": {
      "AdditionalData": [], 
      "Id": 8, 
      "Message": "org.open_power.Host.Error.Checkstop", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775900678, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:18:29.544" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:18:29.545" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': {u'/xyz/openbmc_project/logging/entry/6/callout': {u'endpoints': [u'/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1']}, u'/xyz/openbmc...</msg>
<status endtime="20170816 05:18:29.545" status="PASS" starttime="20170816 05:18:29.543"></status>
</kw>
<kw library="Collections" name="Get Dictionary Keys">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${content['data']}</arg>
</arguments>
<assign>
<var>${esel_list}</var>
</assign>
<msg timestamp="20170816 05:18:29.545" level="INFO">${esel_list} = [u'/xyz/openbmc_project/logging/entry/1', u'/xyz/openbmc_project/logging/entry/2', u'/xyz/openbmc_project/logging/entry/3', u'/xyz/openbmc_project/logging/entry/4', u'/xyz/openbmc_project/logging/entr...</msg>
<status endtime="20170816 05:18:29.546" status="PASS" starttime="20170816 05:18:29.545"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>esel</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170816 05:18:29.546" level="INFO">${logpath} = /tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_esel</msg>
<status endtime="20170816 05:18:29.546" status="PASS" starttime="20170816 05:18:29.546"></status>
</kw>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${logpath}</arg>
</arguments>
<msg html="yes" timestamp="20170816 05:18:29.547" level="INFO">Created file '&lt;a href="file:///tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_esel"&gt;/tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_esel&lt;/a&gt;'.</msg>
<status endtime="20170816 05:18:29.547" status="PASS" starttime="20170816 05:18:29.547"></status>
</kw>
<kw name="${entry_path} IN [ @{esel_list} ]" type="for">
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/1" type="foritem">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170816 05:18:29.548" status="PASS" starttime="20170816 05:18:29.548"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:18:29.552" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:18:29.552" status="PASS" starttime="20170816 05:18:29.551"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:18:29.553" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:18:29.553" status="PASS" starttime="20170816 05:18:29.552"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:18:29.554" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:18:29.554" status="PASS" starttime="20170816 05:18:29.553"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:18:29.554" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:18:29.554" status="PASS" starttime="20170816 05:18:29.554"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:18:29.744" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:18:29.744" status="PASS" starttime="20170816 05:18:29.555"></status>
</kw>
<msg timestamp="20170816 05:18:29.744" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:18:29.744" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:18:29.744" status="PASS" starttime="20170816 05:18:29.555"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:18:29.745" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:18:29.745" status="PASS" starttime="20170816 05:18:29.745"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:18:29.746" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:18:29.746" status="PASS" starttime="20170816 05:18:29.745"></status>
</kw>
<status endtime="20170816 05:18:29.746" status="PASS" starttime="20170816 05:18:29.551"></status>
</kw>
<status endtime="20170816 05:18:29.746" status="PASS" starttime="20170816 05:18:29.550"></status>
</kw>
<status endtime="20170816 05:18:29.746" status="PASS" starttime="20170816 05:18:29.550"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:18:29.747" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/1/attr/AdditionalData</msg>
<status endtime="20170816 05:18:29.747" status="PASS" starttime="20170816 05:18:29.746"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170816 05:18:29.747" status="PASS" starttime="20170816 05:18:29.747"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:18:29.829" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/1/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170816 05:18:29.829" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:18:29.829" status="PASS" starttime="20170816 05:18:29.748"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170816 05:18:29.830" status="PASS" starttime="20170816 05:18:29.829"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:18:29.830" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:18:29.830" status="PASS" starttime="20170816 05:18:29.830"></status>
</kw>
<msg timestamp="20170816 05:18:29.830" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:18:29.830" status="PASS" starttime="20170816 05:18:29.549"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:18:29.831" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:18:29.831" status="PASS" starttime="20170816 05:18:29.831"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:18:29.832" level="INFO">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:18:29.832" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:18:29.832" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': []}</msg>
<status endtime="20170816 05:18:29.832" status="PASS" starttime="20170816 05:18:29.831"></status>
</kw>
<msg timestamp="20170816 05:18:29.832" level="INFO">${esel_data} = []</msg>
<status endtime="20170816 05:18:29.832" status="PASS" starttime="20170816 05:18:29.549"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170816 05:18:29.833" level="INFO">Length is 0</msg>
<msg timestamp="20170816 05:18:29.833" level="INFO">${length} = 0</msg>
<status endtime="20170816 05:18:29.833" status="PASS" starttime="20170816 05:18:29.832"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg timestamp="20170816 05:18:29.833" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170816 05:18:29.834" status="PASS" starttime="20170816 05:18:29.833"></status>
</kw>
<status endtime="20170816 05:18:29.834" status="PASS" starttime="20170816 05:18:29.548"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/2" type="foritem">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170816 05:18:29.834" status="PASS" starttime="20170816 05:18:29.834"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:18:29.838" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:18:29.838" status="PASS" starttime="20170816 05:18:29.837"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:18:29.839" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:18:29.839" status="PASS" starttime="20170816 05:18:29.839"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:18:29.840" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:18:29.840" status="PASS" starttime="20170816 05:18:29.839"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:18:29.840" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:18:29.840" status="PASS" starttime="20170816 05:18:29.840"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:18:30.036" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:18:30.037" status="PASS" starttime="20170816 05:18:29.841"></status>
</kw>
<msg timestamp="20170816 05:18:30.037" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:18:30.037" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:18:30.037" status="PASS" starttime="20170816 05:18:29.841"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:18:30.038" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:18:30.038" status="PASS" starttime="20170816 05:18:30.037"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:18:30.038" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:18:30.038" status="PASS" starttime="20170816 05:18:30.038"></status>
</kw>
<status endtime="20170816 05:18:30.038" status="PASS" starttime="20170816 05:18:29.837"></status>
</kw>
<status endtime="20170816 05:18:30.038" status="PASS" starttime="20170816 05:18:29.836"></status>
</kw>
<status endtime="20170816 05:18:30.039" status="PASS" starttime="20170816 05:18:29.836"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:18:30.039" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/2/attr/AdditionalData</msg>
<status endtime="20170816 05:18:30.039" status="PASS" starttime="20170816 05:18:30.039"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170816 05:18:30.040" status="PASS" starttime="20170816 05:18:30.039"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:18:30.130" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/2/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170816 05:18:30.130" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:18:30.130" status="PASS" starttime="20170816 05:18:30.040"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170816 05:18:30.131" status="PASS" starttime="20170816 05:18:30.131"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:18:30.131" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:18:30.131" status="PASS" starttime="20170816 05:18:30.131"></status>
</kw>
<msg timestamp="20170816 05:18:30.132" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:18:30.132" status="PASS" starttime="20170816 05:18:29.835"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:18:30.133" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:18:30.133" status="PASS" starttime="20170816 05:18:30.132"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:18:30.133" level="INFO">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:18:30.134" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:18:30.134" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': []}</msg>
<status endtime="20170816 05:18:30.134" status="PASS" starttime="20170816 05:18:30.133"></status>
</kw>
<msg timestamp="20170816 05:18:30.134" level="INFO">${esel_data} = []</msg>
<status endtime="20170816 05:18:30.134" status="PASS" starttime="20170816 05:18:29.835"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170816 05:18:30.135" level="INFO">Length is 0</msg>
<msg timestamp="20170816 05:18:30.135" level="INFO">${length} = 0</msg>
<status endtime="20170816 05:18:30.135" status="PASS" starttime="20170816 05:18:30.135"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg timestamp="20170816 05:18:30.136" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170816 05:18:30.136" status="PASS" starttime="20170816 05:18:30.135"></status>
</kw>
<status endtime="20170816 05:18:30.136" status="PASS" starttime="20170816 05:18:29.834"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/3" type="foritem">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170816 05:18:30.138" status="PASS" starttime="20170816 05:18:30.137"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:18:30.142" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:18:30.146" status="PASS" starttime="20170816 05:18:30.142"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:18:30.147" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:18:30.147" status="PASS" starttime="20170816 05:18:30.146"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:18:30.147" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:18:30.147" status="PASS" starttime="20170816 05:18:30.147"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:18:30.148" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:18:30.148" status="PASS" starttime="20170816 05:18:30.148"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:18:30.439" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:18:30.439" status="PASS" starttime="20170816 05:18:30.149"></status>
</kw>
<msg timestamp="20170816 05:18:30.439" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:18:30.439" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:18:30.439" status="PASS" starttime="20170816 05:18:30.148"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:18:30.440" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:18:30.440" status="PASS" starttime="20170816 05:18:30.439"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:18:30.440" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:18:30.440" status="PASS" starttime="20170816 05:18:30.440"></status>
</kw>
<status endtime="20170816 05:18:30.440" status="PASS" starttime="20170816 05:18:30.141"></status>
</kw>
<status endtime="20170816 05:18:30.441" status="PASS" starttime="20170816 05:18:30.140"></status>
</kw>
<status endtime="20170816 05:18:30.441" status="PASS" starttime="20170816 05:18:30.140"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:18:30.441" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/3/attr/AdditionalData</msg>
<status endtime="20170816 05:18:30.441" status="PASS" starttime="20170816 05:18:30.441"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170816 05:18:30.442" status="PASS" starttime="20170816 05:18:30.442"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:18:30.532" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/3/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170816 05:18:30.532" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:18:30.533" status="PASS" starttime="20170816 05:18:30.442"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170816 05:18:30.533" status="PASS" starttime="20170816 05:18:30.533"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:18:30.534" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:18:30.534" status="PASS" starttime="20170816 05:18:30.533"></status>
</kw>
<msg timestamp="20170816 05:18:30.534" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:18:30.534" status="PASS" starttime="20170816 05:18:30.139"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:18:30.535" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:18:30.535" status="PASS" starttime="20170816 05:18:30.534"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:18:30.535" level="INFO">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:18:30.535" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:18:30.535" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': []}</msg>
<status endtime="20170816 05:18:30.535" status="PASS" starttime="20170816 05:18:30.535"></status>
</kw>
<msg timestamp="20170816 05:18:30.536" level="INFO">${esel_data} = []</msg>
<status endtime="20170816 05:18:30.536" status="PASS" starttime="20170816 05:18:30.138"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170816 05:18:30.536" level="INFO">Length is 0</msg>
<msg timestamp="20170816 05:18:30.536" level="INFO">${length} = 0</msg>
<status endtime="20170816 05:18:30.536" status="PASS" starttime="20170816 05:18:30.536"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg timestamp="20170816 05:18:30.537" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170816 05:18:30.537" status="PASS" starttime="20170816 05:18:30.537"></status>
</kw>
<status endtime="20170816 05:18:30.537" status="PASS" starttime="20170816 05:18:30.137"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/4" type="foritem">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170816 05:18:30.538" status="PASS" starttime="20170816 05:18:30.537"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:18:30.542" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:18:30.542" status="PASS" starttime="20170816 05:18:30.541"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:18:30.543" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:18:30.543" status="PASS" starttime="20170816 05:18:30.542"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:18:30.544" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:18:30.544" status="PASS" starttime="20170816 05:18:30.543"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:18:30.544" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:18:30.544" status="PASS" starttime="20170816 05:18:30.544"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:18:30.734" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:18:30.734" status="PASS" starttime="20170816 05:18:30.545"></status>
</kw>
<msg timestamp="20170816 05:18:30.734" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:18:30.734" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:18:30.734" status="PASS" starttime="20170816 05:18:30.545"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:18:30.735" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:18:30.735" status="PASS" starttime="20170816 05:18:30.735"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:18:30.736" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:18:30.736" status="PASS" starttime="20170816 05:18:30.736"></status>
</kw>
<status endtime="20170816 05:18:30.736" status="PASS" starttime="20170816 05:18:30.541"></status>
</kw>
<status endtime="20170816 05:18:30.736" status="PASS" starttime="20170816 05:18:30.540"></status>
</kw>
<status endtime="20170816 05:18:30.736" status="PASS" starttime="20170816 05:18:30.539"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:18:30.737" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/4/attr/AdditionalData</msg>
<status endtime="20170816 05:18:30.737" status="PASS" starttime="20170816 05:18:30.736"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170816 05:18:30.737" status="PASS" starttime="20170816 05:18:30.737"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:18:30.833" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/4/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170816 05:18:30.833" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:18:30.833" status="PASS" starttime="20170816 05:18:30.738"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170816 05:18:30.834" status="PASS" starttime="20170816 05:18:30.833"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:18:30.834" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:18:30.834" status="PASS" starttime="20170816 05:18:30.834"></status>
</kw>
<msg timestamp="20170816 05:18:30.834" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:18:30.835" status="PASS" starttime="20170816 05:18:30.539"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:18:30.835" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:18:30.835" status="PASS" starttime="20170816 05:18:30.835"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:18:30.836" level="INFO">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:18:30.836" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:18:30.836" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': []}</msg>
<status endtime="20170816 05:18:30.836" status="PASS" starttime="20170816 05:18:30.836"></status>
</kw>
<msg timestamp="20170816 05:18:30.836" level="INFO">${esel_data} = []</msg>
<status endtime="20170816 05:18:30.836" status="PASS" starttime="20170816 05:18:30.538"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170816 05:18:30.837" level="INFO">Length is 0</msg>
<msg timestamp="20170816 05:18:30.837" level="INFO">${length} = 0</msg>
<status endtime="20170816 05:18:30.837" status="PASS" starttime="20170816 05:18:30.837"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg timestamp="20170816 05:18:30.837" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170816 05:18:30.838" status="PASS" starttime="20170816 05:18:30.837"></status>
</kw>
<status endtime="20170816 05:18:30.838" status="PASS" starttime="20170816 05:18:30.537"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/5" type="foritem">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170816 05:18:30.839" status="PASS" starttime="20170816 05:18:30.838"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:18:30.842" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:18:30.842" status="PASS" starttime="20170816 05:18:30.841"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:18:30.843" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:18:30.843" status="PASS" starttime="20170816 05:18:30.843"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:18:30.844" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:18:30.844" status="PASS" starttime="20170816 05:18:30.843"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:18:30.844" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:18:30.845" status="PASS" starttime="20170816 05:18:30.844"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:18:31.030" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:18:31.030" status="PASS" starttime="20170816 05:18:30.845"></status>
</kw>
<msg timestamp="20170816 05:18:31.030" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:18:31.030" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:18:31.030" status="PASS" starttime="20170816 05:18:30.845"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:18:31.031" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:18:31.031" status="PASS" starttime="20170816 05:18:31.031"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:18:31.032" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:18:31.032" status="PASS" starttime="20170816 05:18:31.031"></status>
</kw>
<status endtime="20170816 05:18:31.032" status="PASS" starttime="20170816 05:18:30.841"></status>
</kw>
<status endtime="20170816 05:18:31.032" status="PASS" starttime="20170816 05:18:30.841"></status>
</kw>
<status endtime="20170816 05:18:31.032" status="PASS" starttime="20170816 05:18:30.840"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:18:31.033" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/5/attr/AdditionalData</msg>
<status endtime="20170816 05:18:31.033" status="PASS" starttime="20170816 05:18:31.032"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170816 05:18:31.033" status="PASS" starttime="20170816 05:18:31.033"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:18:31.122" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/5/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170816 05:18:31.122" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:18:31.122" status="PASS" starttime="20170816 05:18:31.034"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170816 05:18:31.123" status="PASS" starttime="20170816 05:18:31.122"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:18:31.123" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:18:31.123" status="PASS" starttime="20170816 05:18:31.123"></status>
</kw>
<msg timestamp="20170816 05:18:31.123" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:18:31.123" status="PASS" starttime="20170816 05:18:30.839"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:18:31.124" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:18:31.124" status="PASS" starttime="20170816 05:18:31.124"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:18:31.125" level="INFO">To JSON using : content={
  "data": [
    "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
    "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 25 00 00 00 00 10 1f 15 c3 ae 00 00 00 10 1f 16 9b 7f 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 09 90 00 00 09 55 48 00 18 01 00 22 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 25 07 00 48 00 00 00 e0 00 00 03 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 00 cb 00 00 00 07 00 00 00 00 42 43 38 41 32 35 30 37 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 04 a7 2c 00 00 00 00 55 44 00 50 01 03 01 00 00 00 00 00 00 04 e8 44 00 00 00 00 00 04 a7 2c 00 00 00 00 40 4e c3 4c 00 00 00 00 40 4e c5 4c 00 00 00 00 40 4e ce d0 00 00 00 00 40 3f 1f 38 00 00 00 00 40 3f 2d 7c 00 00 00 00 40 0b 65 b0 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 61 61 63 36 31 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 e4 01 15 31 00 01 28 00 42 49 50 4d 49 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 dc 00 00 00 00 00 00 03 dc 00 00 00 11 00 00 00 00 00 00 00 51 0c 77 9e bf 00 00 00 84 00 10 43 4f 8d 9a 22 cc 00 00 00 96 00 00 00 00 00 00 00 38 00 00 00 00 00 00 00 a8 00 00 00 2c 00 00 00 51 0c 77 eb e1 00 00 00 84 00 10 43 4f 13 70 70 70 00 00 03 de 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 12 00 00 00 2c 00 00 00 51 0c 79 a6 16 00 00 00 45 00 24 43 4f 52 bf 9a e7 00 00 01 58 6f 6b 00 00 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 12 00 00 00 00 00 00 00 8a 00 00 00 00 00 00 00 3b 00 00 00 00 00 00 00 44 00 00 00 51 12 6d 7a 6e 00 00 00 45 00 2c 43 4f 3c d7 f3 d7 00 00 01 a9 6f 6b 00 00 00 00 00 00 00 00 00 2c 00 00 00 00 00 00 00 12 00 00 00 00 00 00 00 8a 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 4c 00 00 00 51 12 6d a8 27 00 00 00 84 00 10 43 4f 8d 9a 22 cc 00 00 00 96 00 00 00 00 00 00 00 20 00 00 00 00 00 00 00 e0 00 00 00 2c 00 00 00 51 12 6d f6 cc 00 00 00 84 00 10 43 4f 13 70 70 70 00 00 03 de 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 12 00 00 00 2c 00 00 00 51 12 6f 16 e0 00 00 00 45 00 24 43 4f 52 bf 9a e7 00 00 01 58 6f 6b 00 00 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 12 00 00 00 00 00 00 00 8b 00 00 00 00 00 00 00 23 00 00 00 00 00 00 00 44 00 00 00 51 18 63 e3 b5 00 00 00 45 00 2c 43 4f 3c d7 f3 d7 00 00 01 a9 6f 6b 00 00 00 00 00 00 00 00 00 2c 00 00 00 00 00 00 00 12 00 00 00 00 00 00 00 8b 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 4c 00 00 00 87 02 c7 d2 55 00 00 00 c7 00 10 43 4f 44 ff d1 f1 00 00 04 1d 00 00 00 00 00 00 00 18 00 00 00 00 00 00 00 22 00 00 00 2c 00 00 00 87 02 e7 30 7e 00 00 00 45 00 24 43 4f 52 bf 9a e7 00 00 01 58 6f 6b 00 00 00 00 00 00 00 00 00 18 00 00 00 00 00 00 00 22 00 00 00 00 00 00 00 8c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 44 00 00 00 87 03 0e 8f 36 00 00 00 c7 00 10 43 4f 13 70 70 70 00 00 03 de 00 00 00 00 00 00 00 10 00 00 00 00 00 00 00 2d 00 00 00 2c 00 00 00 87 08 1f 97 92 00 00 00 45 00 2c 43 4f 3c d7 f3 d7 00 00 01 a9 6f 6b 00 00 00 00 00 00 00 00 00 1c 00 00 00 00 00 00 00 22 00 00 00 00 00 00 00 8c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 4c 00 00 00 87 08 1f f9 d0 00 00 00 45 00 24 43 4f 52 bf 9a e7 00 00 01 58 6f 6b 00 00 00 00 00 00 00 00 00 10 00 00 00 00 00 00 00 2d 00 00 00 00 00 00 00 8d 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 44 00 00 00 87 0e 15 a3 32 00 00 00 45 00 2c 43 4f 3c d7 f3 d7 00 00 01 a9 6f 6b 00 00 00 00 00 00 00 00 00 14 00 00 00 00 00 00 00 2d 00 00 00 00 00 00 00 8d 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 cb 00 00 00 00 00 00 00 4c 00 00 00 87 0e 15 cd 11 00 00 00 c7 00 08 43 4f f8 d7 6e 14 00 00 00 52 00 00 00 00 00 00 00 cb 00 00 00 24 00 00 00 87 0e 15 da 15 00 00 00 c7 00 00 43 4f 91 46 a7 43 00 00 00 96 00 00 00 1c 00 00 00 87 0e 15 eb 05 00 00 00 c7 00 10 43 4f 48 93 e8 7c 00 00 00 b2 00 00 00 00 00 00 00 07 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 41 00 00 00 00 00 2e a4 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 08 00 00 00 00 00 83 99 00 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02 ff ff f8 00 00 00 08 02"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:18:31.125" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:18:31.125" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system', u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 25 00 00 0...</msg>
<status endtime="20170816 05:18:31.125" status="PASS" starttime="20170816 05:18:31.124"></status>
</kw>
<msg timestamp="20170816 05:18:31.126" level="INFO">${esel_data} = [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system', u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 25 00 00 00 00 10 1f 15 c3 ae 00 00 00 10 1f 16 9b 7f 42 00 0...</msg>
<status endtime="20170816 05:18:31.126" status="PASS" starttime="20170816 05:18:30.839"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170816 05:18:31.126" level="INFO">Length is 2</msg>
<msg timestamp="20170816 05:18:31.126" level="INFO">${length} = 2</msg>
<status endtime="20170816 05:18:31.126" status="PASS" starttime="20170816 05:18:31.126"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status endtime="20170816 05:18:31.127" status="PASS" starttime="20170816 05:18:31.126"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Esel Index">
<doc>#######################################################################</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${index}</var>
</assign>
<msg timestamp="20170816 05:18:31.127" level="INFO">${index} = 1</msg>
<status endtime="20170816 05:18:31.127" status="PASS" starttime="20170816 05:18:31.127"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[${index}]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 05:18:31.129" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_esel"&gt;/tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_esel&lt;/a&gt;'.</msg>
<status endtime="20170816 05:18:31.129" status="PASS" starttime="20170816 05:18:31.128"></status>
</kw>
<status endtime="20170816 05:18:31.129" status="PASS" starttime="20170816 05:18:31.127"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 05:18:31.130" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_esel"&gt;/tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_esel&lt;/a&gt;'.</msg>
<status endtime="20170816 05:18:31.130" status="PASS" starttime="20170816 05:18:31.130"></status>
</kw>
<status endtime="20170816 05:18:31.130" status="PASS" starttime="20170816 05:18:31.129"></status>
</kw>
<status endtime="20170816 05:18:31.130" status="PASS" starttime="20170816 05:18:30.838"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/5/callout" type="foritem">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<msg timestamp="20170816 05:18:31.131" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170816 05:18:31.131" status="PASS" starttime="20170816 05:18:31.131"></status>
</kw>
<status endtime="20170816 05:18:31.131" status="PASS" starttime="20170816 05:18:31.130"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/6" type="foritem">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170816 05:18:31.132" status="PASS" starttime="20170816 05:18:31.132"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:18:31.136" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:18:31.136" status="PASS" starttime="20170816 05:18:31.135"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:18:31.137" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:18:31.137" status="PASS" starttime="20170816 05:18:31.136"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:18:31.137" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:18:31.137" status="PASS" starttime="20170816 05:18:31.137"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:18:31.138" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:18:31.138" status="PASS" starttime="20170816 05:18:31.137"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:18:31.314" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:18:31.314" status="PASS" starttime="20170816 05:18:31.139"></status>
</kw>
<msg timestamp="20170816 05:18:31.314" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:18:31.314" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:18:31.314" status="PASS" starttime="20170816 05:18:31.138"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:18:31.315" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:18:31.315" status="PASS" starttime="20170816 05:18:31.314"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:18:31.315" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:18:31.315" status="PASS" starttime="20170816 05:18:31.315"></status>
</kw>
<status endtime="20170816 05:18:31.316" status="PASS" starttime="20170816 05:18:31.135"></status>
</kw>
<status endtime="20170816 05:18:31.316" status="PASS" starttime="20170816 05:18:31.134"></status>
</kw>
<status endtime="20170816 05:18:31.316" status="PASS" starttime="20170816 05:18:31.133"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:18:31.316" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/6/attr/AdditionalData</msg>
<status endtime="20170816 05:18:31.316" status="PASS" starttime="20170816 05:18:31.316"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170816 05:18:31.317" status="PASS" starttime="20170816 05:18:31.317"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:18:31.414" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/6/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170816 05:18:31.414" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:18:31.415" status="PASS" starttime="20170816 05:18:31.317"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170816 05:18:31.415" status="PASS" starttime="20170816 05:18:31.415"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:18:31.416" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:18:31.416" status="PASS" starttime="20170816 05:18:31.415"></status>
</kw>
<msg timestamp="20170816 05:18:31.416" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:18:31.416" status="PASS" starttime="20170816 05:18:31.133"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:18:31.416" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:18:31.417" status="PASS" starttime="20170816 05:18:31.416"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:18:31.417" level="INFO">To JSON using : content={
  "data": [
    "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1", 
    "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 04 aa 00 00 50 48 00 30 01 00 e5 00 00 00 00 02 ec 01 77 64 00 00 00 02 ed 3d ae 8c 42 00 00 0a 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 11 90 00 00 11 55 48 00 18 01 00 e5 00 14 03 20 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 e5 04 00 48 00 00 00 e0 00 00 0b 00 00 00 00 00 03 20 00 00 00 28 00 07 00 00 03 03 c5 1e 00 3d 00 00 00 00 42 43 31 34 45 35 30 34 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 28 01 06 01 00 01 54 41 4b 00 00 00 05 00 00 00 02 00 00 00 e6 00 00 00 05 24 01 00 02 00 05 01 28 03 00 00 00 55 44 00 38 01 33 e5 00 4d 53 20 20 44 55 4d 50 40 00 00 00 00 28 00 07 00 03 20 01 9e 82 91 70 00 01 00 01 03 03 e6 01 00 00 00 01 00 28 00 07 01 05 e6 00 00 00 00 00 55 44 02 08 02 01 e5 00 00 00 00 02 d4 00 05 00 01 00 00 00 00 31 d1 13 00 08 32 00 08 02 00 02 00 dd b6 03 80 02 10 04 00 80 02 00 51 3a 00 08 00 0f ff bc 2b fc 40 00 00 04 0f 0c 00 08 f0 04 83 00 09 44 82 04 01 03 e0 00 01 80 ac c5 04 00 08 ff ff ff 13 00 ff ff 30 06 5a 09 81 13 00 c0 00 00 7f 00 90 00 08 11 07 00 63 c2 80 0d 00 29 4f 00 08 30 82 10 24 7e 40 17 00 06 61 15 87 1d 60 09 00 08 0c 30 04 83 1d 64 21 87 20 26 b9 03 80 20 01 02 00 0d 08 7c 00 06 68 15 87 f1 25 00 25 08 fe 0d 44 06 6f 15 83 1f 17 40 32 80 2d 04 01 16 c2 00 f6 33 40 11 c9 32 01 02 00 02 11 03 80 ff 1f 34 c2 04 a5 00 00 08 04 0d 44 ee e1 08 00 08 0e 1c 04 83 f8 bf 00 24 08 f1 37 83 00 a8 42 40 70 82 00 44 80 62 fc 00 00 d6 28 02 00 08 3f 02 06 f8 04 81 7d 60 e7 12 82 04 82 60 de 00 08 18 92 0d 04 ca e3 3c 80 04 7c 04 82 6f c2 12 40 04 83 04 00 bb 5b 04 01 fa 01 f8 00 ff 04 00 99 2b 54 87 55 99 33 40 91 56 00 0f 56 40 31 4b 40 80 02 00 40 04 02 80 00 88 fc c8 1b 80 0d 44 c4 db 12 80 6d f0 30 52 3f 31 80 16 66 42 b0 00 16 01 4c 59 d8 15 87 cd 3c 40 04 44 00 26 3f 41 52 38 04 83 30 42 48 e4 71 04 05 00 11 01 a2 55 04 05 08 00 b5 15 40 52 03 02 00 3a 02 00 39 5d 7e 80 e0 24 04 4c 04 81 d9 cc 03 80 3b 00 48 3b 04 81 d8 99 3c 87 f5 7d 00 2d 08 f7 0d 44 60 2d 40 04 81 03 0d 00 00 3c bd 00 08 9f c0 20 00 02 f0 00 40 00 2c cd 78 86 0f 09 00 28 00 07 02 00 0a b5 84 40 52 20 0d 44 0d 6c 48 61 b2 78 86 04 00 84 33 00 08 fc fc 3f ff 02 fc ff 00 f3 62 05 7e 80 03 00 c0 00 03 00 ff 0c 83 f7 11 00 08 df 13 02 c0 00 a0 6f 48 52 e7 72 48 f1 42 48 aa 97 04 04 80 00 00 00 00 00 55 44 00 78 01 03 01 00 00 00 00 00 00 04 e8 44 00 00 00 00 00 04 a7 2c 00 00 00 00 40 33 5b 40 00 00 00 00 40 33 bf b4 00 00 00 00 40 33 9f b0 00 00 00 00 40 32 85 e8 00 00 00 00 40 32 8b 70 00 00 00 00 40 32 9a 10 00 00 00 00 40 32 3a b8 00 00 00 00 40 2b 99 4c 00 00 00 00 40 2b 9f 10 00 00 00 00 40 2b ae 30 00 00 00 00 40 2b b1 2c 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 61 61 63 36 31 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 00 14 01 08 01 00 00 00 00 02 00 00 00 a4 00 00 00 05 55 44 02 d4 01 15 31 00 01 28 00 42 50 52 44 46 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 cc 00 00 00 00 00 00 02 cc 00 00 00 11 00 00 00 00 00 00 00 18 10 10 ad d5 00 00 00 77 00 08 43 4f c7 f4 90 bf 00 00 00 b3 00 00 00 00 00 00 00 03 00 00 00 24 00 00 00 18 10 83 c1 3c 00 00 00 77 00 00 43 4f 51 c3 5a c9 00 00 00 61 00 00 00 1c 00 00 00 18 11 35 18 d7 00 00 00 77 00 00 43 4f 78 eb bb 9a 00 00 00 47 00 00 00 1c 00 00 00 18 1e 17 02 7f 00 00 00 77 00 00 43 4f f3 b4 26 d6 00 00 00 ce 00 00 00 1c 00 00 00 18 1e 36 50 bf 00 00 00 77 00 00 43 4f 25 99 2d 85 00 00 00 96 00 00 00 1c 00 00 00 18 1f 1e 4c 9c 00 00 00 77 00 10 43 4f 50 15 d6 2e 00 00 00 b9 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 18 1f 39 54 d2 00 00 00 77 00 10 43 4f 50 15 d6 2e 00 00 00 b9 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 18 20 07 66 0b 00 00 00 77 00 10 43 4f 50 15 d6 2e 00 00 00 b9 00 00 00 00 00 05 00 01 00 00 00 00 c7 7e 00 00 00 00 00 2c 00 00 00 18 20 07 c7 d2 00 00 00 77 00 10 43 4f 50 15 d6 2e 00 00 00 b9 00 00 00 00 00 05 00 01 00 00 00 00 c7 7e 00 0c 00 00 00 2c 00 00 00 18 20 08 04 50 00 00 00 77 00 10 43 4f 50 15 d6 2e 00 00 00 b9 00 00 00 00 00 05 00 01 00 00 00 00 c7 7e 00 0c 00 00 00 2c 00 00 00 18 20 48 5a d5 00 00 00 77 00 10 43 4f 50 15 d6 2e 00 00 00 b9 00 00 00 00 00 28 00 07 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 18 20 54 4d f6 00 00 00 77 00 10 43 4f 50 15 d6 2e 00 00 00 b9 00 00 00 00 00 28 00 07 00 00 00 00 3c 39 00 00 00 00 00 2c 00 00 00 18 20 55 05 a7 00 00 00 77 00 10 43 4f 50 15 d6 2e 00 00 00 b9 00 00 00 00 00 28 00 07 00 00 00 00 3c 39 00 04 00 00 00 2c 00 00 00 18 20 55 4b 96 00 00 00 77 00 10 43 4f 50 15 d6 2e 00 00 00 b9 00 00 00 00 00 28 00 07 00 00 00 00 3c 39 00 04 00 00 00 2c 00 00 00 18 20 58 cb 3b 00 00 00 77 00 10 43 4f 50 15 d6 2e 00 00 00 b9 00 00 00 00 00 28 00 07 00 00 00 00 c5 1e 00 00 00 00 00 2c 00 00 00 18 20 59 d0 3d 00 00 00 77 00 10 43 4f 50 15 d6 2e 00 00 00 b9 00 00 00 00 00 28 00 07 00 00 00 00 c5 1e 00 3d 00 00 00 2c 00 00 00 18 20 5a 1b 46 00 00 00 77 00 10 43 4f 50 15 d6 2e 00 00 00 b9 00 00 00 00 00 28 00 07 00 00 00 00 c5 1e 00 3d 00 00 00 2c"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:18:31.418" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:18:31.418" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1', u'ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 04 aa 00 00 50 ...</msg>
<status endtime="20170816 05:18:31.418" status="PASS" starttime="20170816 05:18:31.417"></status>
</kw>
<msg timestamp="20170816 05:18:31.418" level="INFO">${esel_data} = [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1', u'ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 04 aa 00 00 50 48 00 30 01 00 e5 00 00 00 00 02 ec 01 77 64 00 00 ...</msg>
<status endtime="20170816 05:18:31.418" status="PASS" starttime="20170816 05:18:31.132"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170816 05:18:31.419" level="INFO">Length is 2</msg>
<msg timestamp="20170816 05:18:31.419" level="INFO">${length} = 2</msg>
<status endtime="20170816 05:18:31.419" status="PASS" starttime="20170816 05:18:31.418"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status endtime="20170816 05:18:31.419" status="PASS" starttime="20170816 05:18:31.419"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Esel Index">
<doc>#######################################################################</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${index}</var>
</assign>
<msg timestamp="20170816 05:18:31.420" level="INFO">${index} = 1</msg>
<status endtime="20170816 05:18:31.420" status="PASS" starttime="20170816 05:18:31.420"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[${index}]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 05:18:31.421" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_esel"&gt;/tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_esel&lt;/a&gt;'.</msg>
<status endtime="20170816 05:18:31.421" status="PASS" starttime="20170816 05:18:31.421"></status>
</kw>
<status endtime="20170816 05:18:31.421" status="PASS" starttime="20170816 05:18:31.420"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 05:18:31.423" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_esel"&gt;/tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_esel&lt;/a&gt;'.</msg>
<status endtime="20170816 05:18:31.423" status="PASS" starttime="20170816 05:18:31.422"></status>
</kw>
<status endtime="20170816 05:18:31.423" status="PASS" starttime="20170816 05:18:31.422"></status>
</kw>
<status endtime="20170816 05:18:31.423" status="PASS" starttime="20170816 05:18:31.131"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/6/callout" type="foritem">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<msg timestamp="20170816 05:18:31.424" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170816 05:18:31.424" status="PASS" starttime="20170816 05:18:31.424"></status>
</kw>
<status endtime="20170816 05:18:31.424" status="PASS" starttime="20170816 05:18:31.423"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/7" type="foritem">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170816 05:18:31.425" status="PASS" starttime="20170816 05:18:31.425"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:18:31.428" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:18:31.429" status="PASS" starttime="20170816 05:18:31.428"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:18:31.429" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:18:31.429" status="PASS" starttime="20170816 05:18:31.429"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:18:31.430" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:18:31.430" status="PASS" starttime="20170816 05:18:31.430"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:18:31.431" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:18:31.431" status="PASS" starttime="20170816 05:18:31.430"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:18:31.707" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:18:31.707" status="PASS" starttime="20170816 05:18:31.431"></status>
</kw>
<msg timestamp="20170816 05:18:31.708" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:18:31.708" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:18:31.708" status="PASS" starttime="20170816 05:18:31.431"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:18:31.708" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:18:31.708" status="PASS" starttime="20170816 05:18:31.708"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:18:31.709" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:18:31.709" status="PASS" starttime="20170816 05:18:31.709"></status>
</kw>
<status endtime="20170816 05:18:31.709" status="PASS" starttime="20170816 05:18:31.427"></status>
</kw>
<status endtime="20170816 05:18:31.709" status="PASS" starttime="20170816 05:18:31.427"></status>
</kw>
<status endtime="20170816 05:18:31.709" status="PASS" starttime="20170816 05:18:31.426"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:18:31.710" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/7/attr/AdditionalData</msg>
<status endtime="20170816 05:18:31.710" status="PASS" starttime="20170816 05:18:31.710"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170816 05:18:31.711" status="PASS" starttime="20170816 05:18:31.710"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:18:31.796" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/7/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170816 05:18:31.796" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:18:31.796" status="PASS" starttime="20170816 05:18:31.711"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170816 05:18:31.797" status="PASS" starttime="20170816 05:18:31.797"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:18:31.797" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:18:31.798" status="PASS" starttime="20170816 05:18:31.797"></status>
</kw>
<msg timestamp="20170816 05:18:31.798" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:18:31.798" status="PASS" starttime="20170816 05:18:31.426"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:18:31.798" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:18:31.798" status="PASS" starttime="20170816 05:18:31.798"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:18:31.799" level="INFO">To JSON using : content={
  "data": [
    "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
    "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 25 00 00 00 00 09 83 58 79 6e 00 00 00 09 83 75 e6 5e 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 12 90 00 00 12 55 48 00 18 01 00 05 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 25 07 00 48 00 00 00 e0 00 00 03 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 00 cb 00 00 00 07 00 00 00 00 42 43 38 41 32 35 30 37 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 04 a7 2c 00 00 00 00 55 44 00 2c 01 01 01 00 6c 69 62 69 73 74 65 70 64 69 73 70 2e 73 6f 00 6c 69 62 65 78 74 69 6e 69 74 73 76 63 2e 73 6f 00 00 00 00 55 44 00 50 01 03 01 00 00 00 00 00 00 04 e8 44 00 00 00 00 00 04 a7 2c 00 00 00 00 40 4e c3 4c 00 00 00 00 40 4e c5 4c 00 00 00 00 40 4e ce d0 00 00 00 00 40 2b a1 70 00 00 00 00 40 2b ae 30 00 00 00 00 40 2b b1 2c 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 61 61 63 36 31 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 cc 01 15 31 00 01 28 00 42 49 50 4d 49 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 c4 00 00 00 00 00 00 03 c4 00 00 00 0f 00 00 00 00 00 00 00 4f 11 f6 46 5b 00 00 00 45 00 24 43 4f 52 bf 9a e7 00 00 01 58 6f 6b 00 00 00 00 00 00 00 00 00 18 00 00 00 00 00 00 00 22 00 00 00 00 00 00 00 79 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 44 00 00 00 4f 17 eb f0 31 00 00 00 45 00 2c 43 4f 3c d7 f3 d7 00 00 01 a9 6f 6b 00 00 00 00 00 00 00 00 00 1c 00 00 00 00 00 00 00 22 00 00 00 00 00 00 00 79 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 4c 00 00 00 4f 17 ec 4b 11 00 00 00 45 00 24 43 4f 52 bf 9a e7 00 00 01 58 6f 6b 00 00 00 00 00 00 00 00 00 18 00 00 00 00 00 00 00 22 00 00 00 00 00 00 00 7a 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 44 00 00 00 4f 1d e1 fc 1c 00 00 00 45 00 2c 43 4f 3c d7 f3 d7 00 00 01 a9 6f 6b 00 00 00 00 00 00 00 00 00 1c 00 00 00 00 00 00 00 22 00 00 00 00 00 00 00 7a 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 4c 00 00 00 4f 1d e2 59 70 00 00 00 45 00 24 43 4f 52 bf 9a e7 00 00 01 58 6f 6b 00 00 00 00 00 00 00 00 00 18 00 00 00 00 00 00 00 22 00 00 00 00 00 00 00 7b 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 44 00 00 00 4f 23 d8 05 9f 00 00 00 45 00 2c 43 4f 3c d7 f3 d7 00 00 01 a9 6f 6b 00 00 00 00 00 00 00 00 00 1c 00 00 00 00 00 00 00 22 00 00 00 00 00 00 00 7b 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 4c 00 00 00 4f 23 d8 65 91 00 00 00 45 00 24 43 4f 52 bf 9a e7 00 00 01 58 6f 6b 00 00 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 42 00 00 00 00 00 00 00 7c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 44 00 00 00 4f 29 ce 26 3a 00 00 00 45 00 2c 43 4f 3c d7 f3 d7 00 00 01 a9 6f 6b 00 00 00 00 00 00 00 00 00 2c 00 00 00 00 00 00 00 42 00 00 00 00 00 00 00 7c 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 4c 00 00 00 4f 29 ce 55 a1 00 00 01 04 00 17 46 44 dc 59 91 db 00 00 01 37 02 00 00 00 00 00 00 00 00 df 00 00 00 00 20 00 04 07 a4 04 aa 00 00 00 00 00 00 34 00 00 00 4f 29 ce c6 35 00 00 00 45 00 24 43 4f 52 bf 9a e7 00 00 01 58 6f 6b 00 00 00 00 00 00 00 00 00 10 00 00 00 00 00 00 00 2d 00 00 00 00 00 00 00 7d 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 44 00 00 00 4f 29 cf 01 6b 00 00 01 04 00 10 43 4f 13 70 70 70 00 00 03 de 00 00 00 00 00 00 00 c8 00 00 00 00 00 00 00 f0 00 00 00 2c 00 00 00 4f 2f c4 1d 70 00 00 00 45 00 2c 43 4f 3c d7 f3 d7 00 00 01 a9 6f 6b 00 00 00 00 00 00 00 00 00 14 00 00 00 00 00 00 00 2d 00 00 00 00 00 00 00 7d 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 cb 00 00 00 00 00 00 00 4c 00 00 00 4f 2f c4 45 e9 00 00 00 77 00 08 43 4f f8 d7 6e 14 00 00 00 52 00 00 00 00 00 00 00 cb 00 00 00 24 00 00 00 4f 2f c4 54 3d 00 00 00 77 00 00 43 4f 91 46 a7 43 00 00 00 96 00 00 00 1c 00 00 00 4f 2f c4 65 3e 00 00 00 77 00 10 43 4f 48 93 e8 7c 00 00 00 b2 00 00 00 00 00 00 00 07 00 00 00 00 00 00 00 00 00 00 00 2c"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:18:31.799" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:18:31.800" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system', u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 25 00 00 0...</msg>
<status endtime="20170816 05:18:31.800" status="PASS" starttime="20170816 05:18:31.799"></status>
</kw>
<msg timestamp="20170816 05:18:31.800" level="INFO">${esel_data} = [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system', u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 25 00 00 00 00 09 83 58 79 6e 00 00 00 09 83 75 e6 5e 42 00 0...</msg>
<status endtime="20170816 05:18:31.800" status="PASS" starttime="20170816 05:18:31.425"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170816 05:18:31.800" level="INFO">Length is 2</msg>
<msg timestamp="20170816 05:18:31.801" level="INFO">${length} = 2</msg>
<status endtime="20170816 05:18:31.801" status="PASS" starttime="20170816 05:18:31.800"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status endtime="20170816 05:18:31.801" status="PASS" starttime="20170816 05:18:31.801"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Esel Index">
<doc>#######################################################################</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${index}</var>
</assign>
<msg timestamp="20170816 05:18:31.802" level="INFO">${index} = 1</msg>
<status endtime="20170816 05:18:31.802" status="PASS" starttime="20170816 05:18:31.801"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[${index}]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 05:18:31.803" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_esel"&gt;/tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_esel&lt;/a&gt;'.</msg>
<status endtime="20170816 05:18:31.803" status="PASS" starttime="20170816 05:18:31.803"></status>
</kw>
<status endtime="20170816 05:18:31.803" status="PASS" starttime="20170816 05:18:31.802"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 05:18:31.804" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_esel"&gt;/tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/20170816051816321351_esel&lt;/a&gt;'.</msg>
<status endtime="20170816 05:18:31.805" status="PASS" starttime="20170816 05:18:31.804"></status>
</kw>
<status endtime="20170816 05:18:31.805" status="PASS" starttime="20170816 05:18:31.804"></status>
</kw>
<status endtime="20170816 05:18:31.805" status="PASS" starttime="20170816 05:18:31.424"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/7/callout" type="foritem">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<msg timestamp="20170816 05:18:31.806" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170816 05:18:31.806" status="PASS" starttime="20170816 05:18:31.805"></status>
</kw>
<status endtime="20170816 05:18:31.806" status="PASS" starttime="20170816 05:18:31.805"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/8" type="foritem">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170816 05:18:31.807" status="PASS" starttime="20170816 05:18:31.806"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:18:31.810" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:18:31.810" status="PASS" starttime="20170816 05:18:31.809"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:18:31.811" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:18:31.811" status="PASS" starttime="20170816 05:18:31.810"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:18:31.811" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:18:31.811" status="PASS" starttime="20170816 05:18:31.811"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:18:31.812" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:18:31.812" status="PASS" starttime="20170816 05:18:31.812"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:18:32.006" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:18:32.006" status="PASS" starttime="20170816 05:18:31.813"></status>
</kw>
<msg timestamp="20170816 05:18:32.006" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:18:32.006" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:18:32.006" status="PASS" starttime="20170816 05:18:31.812"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:18:32.007" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:18:32.007" status="PASS" starttime="20170816 05:18:32.007"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:18:32.008" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:18:32.008" status="PASS" starttime="20170816 05:18:32.008"></status>
</kw>
<status endtime="20170816 05:18:32.008" status="PASS" starttime="20170816 05:18:31.809"></status>
</kw>
<status endtime="20170816 05:18:32.008" status="PASS" starttime="20170816 05:18:31.809"></status>
</kw>
<status endtime="20170816 05:18:32.008" status="PASS" starttime="20170816 05:18:31.808"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:18:32.009" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/8/attr/AdditionalData</msg>
<status endtime="20170816 05:18:32.009" status="PASS" starttime="20170816 05:18:32.009"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170816 05:18:32.010" status="PASS" starttime="20170816 05:18:32.009"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:18:32.105" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/8/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170816 05:18:32.106" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:18:32.106" status="PASS" starttime="20170816 05:18:32.010"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170816 05:18:32.106" status="PASS" starttime="20170816 05:18:32.106"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:18:32.107" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:18:32.107" status="PASS" starttime="20170816 05:18:32.107"></status>
</kw>
<msg timestamp="20170816 05:18:32.107" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:18:32.107" status="PASS" starttime="20170816 05:18:31.807"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:18:32.108" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:18:32.108" status="PASS" starttime="20170816 05:18:32.107"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:18:32.108" level="INFO">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:18:32.108" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:18:32.109" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': []}</msg>
<status endtime="20170816 05:18:32.109" status="PASS" starttime="20170816 05:18:32.108"></status>
</kw>
<msg timestamp="20170816 05:18:32.109" level="INFO">${esel_data} = []</msg>
<status endtime="20170816 05:18:32.109" status="PASS" starttime="20170816 05:18:31.807"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170816 05:18:32.109" level="INFO">Length is 0</msg>
<msg timestamp="20170816 05:18:32.109" level="INFO">${length} = 0</msg>
<status endtime="20170816 05:18:32.109" status="PASS" starttime="20170816 05:18:32.109"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg timestamp="20170816 05:18:32.110" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170816 05:18:32.110" status="PASS" starttime="20170816 05:18:32.110"></status>
</kw>
<status endtime="20170816 05:18:32.110" status="PASS" starttime="20170816 05:18:31.806"></status>
</kw>
<status endtime="20170816 05:18:32.110" status="PASS" starttime="20170816 05:18:29.547"></status>
</kw>
<kw library="OperatingSystem" name="Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>which eSEL.pl</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20170816 05:18:32.115" level="INFO">Running command 'which eSEL.pl 2&gt;&amp;1'.</msg>
<msg timestamp="20170816 05:18:32.118" level="INFO">${out} = </msg>
<status endtime="20170816 05:18:32.119" status="PASS" starttime="20170816 05:18:32.111"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<msg timestamp="20170816 05:18:32.122" level="FAIL">'' does not contain 'eSEL.pl'</msg>
<status endtime="20170816 05:18:32.122" status="FAIL" starttime="20170816 05:18:32.122"></status>
</kw>
<msg timestamp="20170816 05:18:32.123" level="INFO">${status} = False</msg>
<status endtime="20170816 05:18:32.123" status="PASS" starttime="20170816 05:18:32.121"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg timestamp="20170816 05:18:32.123" level="INFO">Returning from the enclosing user keyword.</msg>
<status endtime="20170816 05:18:32.124" status="PASS" starttime="20170816 05:18:32.123"></status>
</kw>
<status endtime="20170816 05:18:32.124" status="PASS" starttime="20170816 05:18:28.905"></status>
</kw>
<status endtime="20170816 05:18:32.124" status="PASS" starttime="20170816 05:18:28.880"></status>
</kw>
<status endtime="20170816 05:18:32.125" status="PASS" starttime="20170816 05:18:28.877"></status>
</kw>
<status endtime="20170816 05:18:32.125" status="PASS" starttime="20170816 05:18:28.877"></status>
</kw>
<kw name="${method} = ('OS FFDC', 'OS FFDC Files')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170816 05:18:32.127" status="PASS" starttime="20170816 05:18:32.127"></status>
</kw>
<msg timestamp="20170816 05:18:32.127" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:18:32.127" level="INFO">${ret_values} = None</msg>
<status endtime="20170816 05:18:32.127" status="PASS" starttime="20170816 05:18:32.126"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170816 05:18:32.128" status="PASS" starttime="20170816 05:18:32.128"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="OS FFDC Files">
<doc>Get the command list and iterate</doc>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg timestamp="20170816 05:18:32.159" level="INFO">Returning from the enclosing user keyword.</msg>
<status endtime="20170816 05:18:32.159" status="PASS" starttime="20170816 05:18:32.159"></status>
</kw>
<status endtime="20170816 05:18:32.160" status="PASS" starttime="20170816 05:18:32.158"></status>
</kw>
<status endtime="20170816 05:18:32.160" status="PASS" starttime="20170816 05:18:32.128"></status>
</kw>
<status endtime="20170816 05:18:32.160" status="PASS" starttime="20170816 05:18:32.125"></status>
</kw>
<status endtime="20170816 05:18:32.160" status="PASS" starttime="20170816 05:18:32.125"></status>
</kw>
<status endtime="20170816 05:18:32.160" status="PASS" starttime="20170816 05:18:16.577"></status>
</kw>
<status endtime="20170816 05:18:32.160" status="PASS" starttime="20170816 05:18:16.575"></status>
</kw>
<status endtime="20170816 05:18:32.160" status="PASS" starttime="20170816 05:18:16.575"></status>
</kw>
<status endtime="20170816 05:18:32.160" status="PASS" starttime="20170816 05:18:16.574"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key U">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>SSHLibrary.Close All Connections</arg>
</arguments>
<kw library="SSHLibrary" name="Close All Connections">
<doc>Closes all open connections.</doc>
<status endtime="20170816 05:18:32.168" status="PASS" starttime="20170816 05:18:32.167"></status>
</kw>
<status endtime="20170816 05:18:32.168" status="PASS" starttime="20170816 05:18:32.160"></status>
</kw>
<status endtime="20170816 05:18:32.168" status="PASS" starttime="20170816 05:18:16.574"></status>
</kw>
<status endtime="20170816 05:18:32.168" status="PASS" starttime="20170816 05:18:13.266"></status>
</kw>
<status endtime="20170816 05:18:32.168" status="PASS" starttime="20170816 05:18:13.266"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<kw library="state_manager" name="Recover Quiesced Host">
<doc>Recover host from quisced state.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is Host Quiesced</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="state_manager" name="Is Host Quiesced">
<doc>Check if host state is quiesced.</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:18:32.175" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:18:32.175" status="PASS" starttime="20170816 05:18:32.174"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:18:32.176" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:18:32.176" status="PASS" starttime="20170816 05:18:32.175"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:18:32.176" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:18:32.177" status="PASS" starttime="20170816 05:18:32.176"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:18:32.177" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:18:32.177" status="PASS" starttime="20170816 05:18:32.177"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:18:32.364" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:18:32.365" status="PASS" starttime="20170816 05:18:32.178"></status>
</kw>
<msg timestamp="20170816 05:18:32.365" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:18:32.365" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:18:32.365" status="PASS" starttime="20170816 05:18:32.177"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:18:32.365" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:18:32.366" status="PASS" starttime="20170816 05:18:32.365"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:18:32.366" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:18:32.366" status="PASS" starttime="20170816 05:18:32.366"></status>
</kw>
<status endtime="20170816 05:18:32.366" status="PASS" starttime="20170816 05:18:32.174"></status>
</kw>
<status endtime="20170816 05:18:32.366" status="PASS" starttime="20170816 05:18:32.173"></status>
</kw>
<status endtime="20170816 05:18:32.367" status="PASS" starttime="20170816 05:18:32.172"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:18:32.367" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170816 05:18:32.367" status="PASS" starttime="20170816 05:18:32.367"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:18:32.369" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170816 05:18:32.369" status="PASS" starttime="20170816 05:18:32.369"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:18:32.370" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170816 05:18:32.370" status="PASS" starttime="20170816 05:18:32.370"></status>
</kw>
<status endtime="20170816 05:18:32.370" status="PASS" starttime="20170816 05:18:32.369"></status>
</kw>
<status endtime="20170816 05:18:32.371" status="PASS" starttime="20170816 05:18:32.368"></status>
</kw>
<status endtime="20170816 05:18:32.371" status="PASS" starttime="20170816 05:18:32.367"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:18:32.460" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 05:18:32.460" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:18:32.460" status="PASS" starttime="20170816 05:18:32.371"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:18:32.463" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:18:32.463" status="PASS" starttime="20170816 05:18:32.462"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:18:32.464" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:18:32.464" status="PASS" starttime="20170816 05:18:32.464"></status>
</kw>
<status endtime="20170816 05:18:32.464" status="PASS" starttime="20170816 05:18:32.463"></status>
</kw>
<status endtime="20170816 05:18:32.465" status="PASS" starttime="20170816 05:18:32.461"></status>
</kw>
<status endtime="20170816 05:18:32.465" status="PASS" starttime="20170816 05:18:32.461"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:18:32.465" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:18:32.465" status="PASS" starttime="20170816 05:18:32.465"></status>
</kw>
<msg timestamp="20170816 05:18:32.465" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:18:32.465" status="PASS" starttime="20170816 05:18:32.171"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:18:32.466" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:18:32.466" status="PASS" starttime="20170816 05:18:32.466"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:18:32.467" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:18:32.467" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:18:32.467" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170816 05:18:32.467" status="PASS" starttime="20170816 05:18:32.466"></status>
</kw>
<msg timestamp="20170816 05:18:32.467" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170816 05:18:32.467" status="PASS" starttime="20170816 05:18:32.170"></status>
</kw>
<msg timestamp="20170816 05:18:32.467" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170816 05:18:32.467" status="PASS" starttime="20170816 05:18:32.170"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<status endtime="20170816 05:18:32.468" status="PASS" starttime="20170816 05:18:32.468"></status>
</kw>
<msg timestamp="20170816 05:18:32.468" level="INFO">${status} = True</msg>
<status endtime="20170816 05:18:32.468" status="PASS" starttime="20170816 05:18:32.468"></status>
</kw>
<status endtime="20170816 05:18:32.469" status="PASS" starttime="20170816 05:18:32.170"></status>
</kw>
<msg timestamp="20170816 05:18:32.469" level="INFO">${resp} = True</msg>
<status endtime="20170816 05:18:32.469" status="PASS" starttime="20170816 05:18:32.169"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${resp}' == 'True'</arg>
<arg>Run Keywords</arg>
<arg>Initiate Host PowerOff</arg>
<arg>AND</arg>
<arg>Log</arg>
<arg>HOST is recovered from quiesced state</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Initiate Host PowerOff</arg>
<arg>AND</arg>
<arg>Log</arg>
<arg>HOST is recovered from quiesced state</arg>
</arguments>
<kw library="state_manager" name="Initiate Host PowerOff">
<doc>Initiate host power off.</doc>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170816 05:18:32.471" level="INFO">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status endtime="20170816 05:18:32.471" status="PASS" starttime="20170816 05:18:32.470"></status>
</kw>
<kw library="rest_client" name="Write Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:18:32.472" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status endtime="20170816 05:18:32.472" status="PASS" starttime="20170816 05:18:32.472"></status>
</kw>
<kw library="rest_client" name="OpenBMC Put Request">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:18:32.475" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:18:32.475" status="PASS" starttime="20170816 05:18:32.474"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:18:32.476" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:18:32.476" status="PASS" starttime="20170816 05:18:32.475"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:18:32.476" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:18:32.476" status="PASS" starttime="20170816 05:18:32.476"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:18:32.477" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:18:32.477" status="PASS" starttime="20170816 05:18:32.477"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:18:32.687" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:18:32.687" status="PASS" starttime="20170816 05:18:32.478"></status>
</kw>
<msg timestamp="20170816 05:18:32.688" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:18:32.688" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:18:32.688" status="PASS" starttime="20170816 05:18:32.477"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:18:32.688" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:18:32.688" status="PASS" starttime="20170816 05:18:32.688"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:18:32.689" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:18:32.689" status="PASS" starttime="20170816 05:18:32.689"></status>
</kw>
<status endtime="20170816 05:18:32.689" status="PASS" starttime="20170816 05:18:32.474"></status>
</kw>
<status endtime="20170816 05:18:32.689" status="PASS" starttime="20170816 05:18:32.473"></status>
</kw>
<status endtime="20170816 05:18:32.689" status="PASS" starttime="20170816 05:18:32.473"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:18:32.690" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status endtime="20170816 05:18:32.690" status="PASS" starttime="20170816 05:18:32.690"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:18:32.691" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:18:32.691" status="PASS" starttime="20170816 05:18:32.690"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20170816 05:18:32.691" status="PASS" starttime="20170816 05:18:32.691"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:18:32.693" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Conten...</msg>
<status endtime="20170816 05:18:32.693" status="PASS" starttime="20170816 05:18:32.692"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:18:32.694" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20170816 05:18:32.694" status="PASS" starttime="20170816 05:18:32.694"></status>
</kw>
<status endtime="20170816 05:18:32.694" status="PASS" starttime="20170816 05:18:32.693"></status>
</kw>
<status endtime="20170816 05:18:32.694" status="PASS" starttime="20170816 05:18:32.691"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Put Request">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:18:33.063" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170816 05:18:33.063" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:18:33.063" status="PASS" starttime="20170816 05:18:32.694"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:18:33.064" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:18:33.064" status="PASS" starttime="20170816 05:18:33.064"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:18:33.065" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:18:33.066" status="PASS" starttime="20170816 05:18:33.065"></status>
</kw>
<status endtime="20170816 05:18:33.066" status="PASS" starttime="20170816 05:18:33.065"></status>
</kw>
<status endtime="20170816 05:18:33.066" status="PASS" starttime="20170816 05:18:33.063"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:18:33.066" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:18:33.066" status="PASS" starttime="20170816 05:18:33.066"></status>
</kw>
<msg timestamp="20170816 05:18:33.066" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:18:33.067" status="PASS" starttime="20170816 05:18:32.472"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:18:33.067" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:18:33.067" status="PASS" starttime="20170816 05:18:33.067"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170816 05:18:33.068" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:18:33.068" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:18:33.068" level="INFO">${json} = {u'message': u'200 OK', u'status': u'ok', u'data': None}</msg>
<status endtime="20170816 05:18:33.068" status="PASS" starttime="20170816 05:18:33.067"></status>
</kw>
<status endtime="20170816 05:18:33.068" status="PASS" starttime="20170816 05:18:32.471"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status endtime="20170816 05:18:33.069" status="PASS" starttime="20170816 05:18:33.068"></status>
</kw>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>6 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Is Chassis Off">
<doc>Check if chassis state is "Off".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:18:33.074" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:18:33.074" status="PASS" starttime="20170816 05:18:33.074"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:18:33.075" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:18:33.075" status="PASS" starttime="20170816 05:18:33.075"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:18:33.075" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:18:33.076" status="PASS" starttime="20170816 05:18:33.075"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:18:33.076" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:18:33.076" status="PASS" starttime="20170816 05:18:33.076"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:18:34.221" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:18:34.221" status="PASS" starttime="20170816 05:18:33.077"></status>
</kw>
<msg timestamp="20170816 05:18:34.222" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:18:34.222" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:18:34.222" status="PASS" starttime="20170816 05:18:33.076"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:18:34.222" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:18:34.222" status="PASS" starttime="20170816 05:18:34.222"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:18:34.223" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:18:34.223" status="PASS" starttime="20170816 05:18:34.223"></status>
</kw>
<status endtime="20170816 05:18:34.223" status="PASS" starttime="20170816 05:18:33.073"></status>
</kw>
<status endtime="20170816 05:18:34.223" status="PASS" starttime="20170816 05:18:33.073"></status>
</kw>
<status endtime="20170816 05:18:34.224" status="PASS" starttime="20170816 05:18:33.072"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:18:34.224" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170816 05:18:34.224" status="PASS" starttime="20170816 05:18:34.224"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:18:34.226" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170816 05:18:34.226" status="PASS" starttime="20170816 05:18:34.226"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:18:34.227" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170816 05:18:34.227" status="PASS" starttime="20170816 05:18:34.227"></status>
</kw>
<status endtime="20170816 05:18:34.227" status="PASS" starttime="20170816 05:18:34.226"></status>
</kw>
<status endtime="20170816 05:18:34.227" status="PASS" starttime="20170816 05:18:34.225"></status>
</kw>
<status endtime="20170816 05:18:34.228" status="PASS" starttime="20170816 05:18:34.224"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:18:40.337" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 05:18:40.338" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:18:40.338" status="PASS" starttime="20170816 05:18:34.228"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:18:40.340" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:18:40.340" status="PASS" starttime="20170816 05:18:40.340"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:18:40.341" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:18:40.341" status="PASS" starttime="20170816 05:18:40.341"></status>
</kw>
<status endtime="20170816 05:18:40.342" status="PASS" starttime="20170816 05:18:40.341"></status>
</kw>
<status endtime="20170816 05:18:40.342" status="PASS" starttime="20170816 05:18:40.339"></status>
</kw>
<status endtime="20170816 05:18:40.342" status="PASS" starttime="20170816 05:18:40.338"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:18:40.342" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:18:40.342" status="PASS" starttime="20170816 05:18:40.342"></status>
</kw>
<msg timestamp="20170816 05:18:40.343" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:18:40.343" status="PASS" starttime="20170816 05:18:33.071"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:18:40.343" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:18:40.344" status="PASS" starttime="20170816 05:18:40.343"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:18:40.344" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:18:40.344" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:18:40.344" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170816 05:18:40.344" status="PASS" starttime="20170816 05:18:40.344"></status>
</kw>
<msg timestamp="20170816 05:18:40.345" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170816 05:18:40.345" status="PASS" starttime="20170816 05:18:33.070"></status>
</kw>
<msg timestamp="20170816 05:18:40.345" level="INFO">${power_state} = On</msg>
<status endtime="20170816 05:18:40.345" status="PASS" starttime="20170816 05:18:33.070"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170816 05:18:40.346" level="FAIL">Off != On</msg>
<status endtime="20170816 05:18:40.346" status="FAIL" starttime="20170816 05:18:40.345"></status>
</kw>
<status endtime="20170816 05:18:40.346" status="FAIL" starttime="20170816 05:18:33.070"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:18:40.350" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:18:40.350" status="PASS" starttime="20170816 05:18:40.349"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:18:40.351" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:18:40.351" status="PASS" starttime="20170816 05:18:40.350"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:18:40.351" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:18:40.351" status="PASS" starttime="20170816 05:18:40.351"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:18:40.352" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:18:40.352" status="PASS" starttime="20170816 05:18:40.352"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:18:40.823" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:18:40.823" status="PASS" starttime="20170816 05:18:40.353"></status>
</kw>
<msg timestamp="20170816 05:18:40.823" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:18:40.823" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:18:40.823" status="PASS" starttime="20170816 05:18:40.352"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:18:40.824" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:18:40.824" status="PASS" starttime="20170816 05:18:40.824"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:18:40.825" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:18:40.825" status="PASS" starttime="20170816 05:18:40.824"></status>
</kw>
<status endtime="20170816 05:18:40.825" status="PASS" starttime="20170816 05:18:40.349"></status>
</kw>
<status endtime="20170816 05:18:40.825" status="PASS" starttime="20170816 05:18:40.348"></status>
</kw>
<status endtime="20170816 05:18:40.825" status="PASS" starttime="20170816 05:18:40.348"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:18:40.826" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170816 05:18:40.826" status="PASS" starttime="20170816 05:18:40.825"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:18:40.832" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170816 05:18:40.832" status="PASS" starttime="20170816 05:18:40.831"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:18:40.833" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170816 05:18:40.833" status="PASS" starttime="20170816 05:18:40.833"></status>
</kw>
<status endtime="20170816 05:18:40.833" status="PASS" starttime="20170816 05:18:40.832"></status>
</kw>
<status endtime="20170816 05:18:40.833" status="PASS" starttime="20170816 05:18:40.826"></status>
</kw>
<status endtime="20170816 05:18:40.833" status="PASS" starttime="20170816 05:18:40.826"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:18:42.588" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 05:18:42.588" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:18:42.588" status="PASS" starttime="20170816 05:18:40.834"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:18:42.590" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:18:42.590" status="PASS" starttime="20170816 05:18:42.590"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:18:42.591" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:18:42.591" status="PASS" starttime="20170816 05:18:42.591"></status>
</kw>
<status endtime="20170816 05:18:42.591" status="PASS" starttime="20170816 05:18:42.590"></status>
</kw>
<status endtime="20170816 05:18:42.591" status="PASS" starttime="20170816 05:18:42.589"></status>
</kw>
<status endtime="20170816 05:18:42.591" status="PASS" starttime="20170816 05:18:42.588"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:18:42.592" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:18:42.592" status="PASS" starttime="20170816 05:18:42.592"></status>
</kw>
<msg timestamp="20170816 05:18:42.592" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:18:42.592" status="PASS" starttime="20170816 05:18:40.347"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:18:42.593" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:18:42.593" status="PASS" starttime="20170816 05:18:42.592"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:18:42.594" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:18:42.594" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:18:42.594" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170816 05:18:42.594" status="PASS" starttime="20170816 05:18:42.593"></status>
</kw>
<msg timestamp="20170816 05:18:42.594" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170816 05:18:42.594" status="PASS" starttime="20170816 05:18:40.347"></status>
</kw>
<msg timestamp="20170816 05:18:42.595" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170816 05:18:42.595" status="PASS" starttime="20170816 05:18:40.346"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170816 05:18:42.595" level="FAIL">Off != Quiesced</msg>
<status endtime="20170816 05:18:42.595" status="FAIL" starttime="20170816 05:18:42.595"></status>
</kw>
<status endtime="20170816 05:18:42.596" status="FAIL" starttime="20170816 05:18:33.069"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Is Chassis Off">
<doc>Check if chassis state is "Off".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:18:52.601" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:18:52.601" status="PASS" starttime="20170816 05:18:52.601"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:18:52.602" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:18:52.602" status="PASS" starttime="20170816 05:18:52.602"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:18:52.603" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:18:52.603" status="PASS" starttime="20170816 05:18:52.603"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:18:52.604" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:18:52.604" status="PASS" starttime="20170816 05:18:52.603"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:18:53.235" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:18:53.235" status="PASS" starttime="20170816 05:18:52.604"></status>
</kw>
<msg timestamp="20170816 05:18:53.236" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:18:53.236" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:18:53.236" status="PASS" starttime="20170816 05:18:52.604"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:18:53.236" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:18:53.236" status="PASS" starttime="20170816 05:18:53.236"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:18:53.237" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:18:53.237" status="PASS" starttime="20170816 05:18:53.237"></status>
</kw>
<status endtime="20170816 05:18:53.237" status="PASS" starttime="20170816 05:18:52.600"></status>
</kw>
<status endtime="20170816 05:18:53.237" status="PASS" starttime="20170816 05:18:52.600"></status>
</kw>
<status endtime="20170816 05:18:53.237" status="PASS" starttime="20170816 05:18:52.599"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:18:53.238" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170816 05:18:53.238" status="PASS" starttime="20170816 05:18:53.238"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:18:53.240" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170816 05:18:53.240" status="PASS" starttime="20170816 05:18:53.239"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:18:53.241" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170816 05:18:53.241" status="PASS" starttime="20170816 05:18:53.241"></status>
</kw>
<status endtime="20170816 05:18:53.241" status="PASS" starttime="20170816 05:18:53.240"></status>
</kw>
<status endtime="20170816 05:18:53.242" status="PASS" starttime="20170816 05:18:53.239"></status>
</kw>
<status endtime="20170816 05:18:53.242" status="PASS" starttime="20170816 05:18:53.238"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:18:53.676" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 05:18:53.676" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:18:53.676" status="PASS" starttime="20170816 05:18:53.242"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:18:53.678" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:18:53.678" status="PASS" starttime="20170816 05:18:53.678"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:18:53.679" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:18:53.679" status="PASS" starttime="20170816 05:18:53.679"></status>
</kw>
<status endtime="20170816 05:18:53.680" status="PASS" starttime="20170816 05:18:53.679"></status>
</kw>
<status endtime="20170816 05:18:53.680" status="PASS" starttime="20170816 05:18:53.677"></status>
</kw>
<status endtime="20170816 05:18:53.680" status="PASS" starttime="20170816 05:18:53.677"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:18:53.680" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:18:53.680" status="PASS" starttime="20170816 05:18:53.680"></status>
</kw>
<msg timestamp="20170816 05:18:53.680" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:18:53.680" status="PASS" starttime="20170816 05:18:52.598"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:18:53.681" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:18:53.681" status="PASS" starttime="20170816 05:18:53.681"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:18:53.682" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:18:53.682" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:18:53.682" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170816 05:18:53.682" status="PASS" starttime="20170816 05:18:53.681"></status>
</kw>
<msg timestamp="20170816 05:18:53.682" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170816 05:18:53.682" status="PASS" starttime="20170816 05:18:52.598"></status>
</kw>
<msg timestamp="20170816 05:18:53.682" level="INFO">${power_state} = Off</msg>
<status endtime="20170816 05:18:53.682" status="PASS" starttime="20170816 05:18:52.597"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170816 05:18:53.683" status="PASS" starttime="20170816 05:18:53.683"></status>
</kw>
<status endtime="20170816 05:18:53.683" status="PASS" starttime="20170816 05:18:52.597"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 05:18:53.688" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170816 05:18:53.688" status="PASS" starttime="20170816 05:18:53.687"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 05:18:53.689" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170816 05:18:53.689" status="PASS" starttime="20170816 05:18:53.689"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 05:18:53.690" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170816 05:18:53.690" status="PASS" starttime="20170816 05:18:53.689"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 05:18:53.691" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170816 05:18:53.691" status="PASS" starttime="20170816 05:18:53.690"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 05:18:54.057" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170816 05:18:54.057" status="PASS" starttime="20170816 05:18:53.692"></status>
</kw>
<msg timestamp="20170816 05:18:54.057" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 05:18:54.057" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:18:54.057" status="PASS" starttime="20170816 05:18:53.691"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 05:18:54.058" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:18:54.058" status="PASS" starttime="20170816 05:18:54.058"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:18:54.059" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:18:54.059" status="PASS" starttime="20170816 05:18:54.058"></status>
</kw>
<status endtime="20170816 05:18:54.059" status="PASS" starttime="20170816 05:18:53.686"></status>
</kw>
<status endtime="20170816 05:18:54.059" status="PASS" starttime="20170816 05:18:53.686"></status>
</kw>
<status endtime="20170816 05:18:54.059" status="PASS" starttime="20170816 05:18:53.685"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 05:18:54.060" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170816 05:18:54.060" status="PASS" starttime="20170816 05:18:54.059"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:18:54.062" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170816 05:18:54.062" status="PASS" starttime="20170816 05:18:54.061"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:18:54.063" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170816 05:18:54.063" status="PASS" starttime="20170816 05:18:54.062"></status>
</kw>
<status endtime="20170816 05:18:54.063" status="PASS" starttime="20170816 05:18:54.062"></status>
</kw>
<status endtime="20170816 05:18:54.063" status="PASS" starttime="20170816 05:18:54.060"></status>
</kw>
<status endtime="20170816 05:18:54.063" status="PASS" starttime="20170816 05:18:54.060"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 05:18:54.590" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 05:18:54.590" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:18:54.590" status="PASS" starttime="20170816 05:18:54.063"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 05:18:54.592" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:18:54.592" status="PASS" starttime="20170816 05:18:54.591"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 05:18:54.593" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170816 05:18:54.593" status="PASS" starttime="20170816 05:18:54.593"></status>
</kw>
<status endtime="20170816 05:18:54.593" status="PASS" starttime="20170816 05:18:54.592"></status>
</kw>
<status endtime="20170816 05:18:54.594" status="PASS" starttime="20170816 05:18:54.591"></status>
</kw>
<status endtime="20170816 05:18:54.594" status="PASS" starttime="20170816 05:18:54.590"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 05:18:54.594" level="INFO">Delete All Sessions</msg>
<status endtime="20170816 05:18:54.594" status="PASS" starttime="20170816 05:18:54.594"></status>
</kw>
<msg timestamp="20170816 05:18:54.595" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170816 05:18:54.595" status="PASS" starttime="20170816 05:18:53.684"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 05:18:54.595" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170816 05:18:54.596" status="PASS" starttime="20170816 05:18:54.595"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 05:18:54.596" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 05:18:54.596" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 05:18:54.596" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status endtime="20170816 05:18:54.596" status="PASS" starttime="20170816 05:18:54.596"></status>
</kw>
<msg timestamp="20170816 05:18:54.597" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status endtime="20170816 05:18:54.597" status="PASS" starttime="20170816 05:18:53.684"></status>
</kw>
<msg timestamp="20170816 05:18:54.597" level="INFO">${host_state} = Off</msg>
<status endtime="20170816 05:18:54.597" status="PASS" starttime="20170816 05:18:53.683"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170816 05:18:54.598" status="PASS" starttime="20170816 05:18:54.597"></status>
</kw>
<status endtime="20170816 05:18:54.598" status="PASS" starttime="20170816 05:18:52.596"></status>
</kw>
<status endtime="20170816 05:18:54.598" status="PASS" starttime="20170816 05:18:33.069"></status>
</kw>
<status endtime="20170816 05:18:54.598" status="PASS" starttime="20170816 05:18:32.470"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>HOST is recovered from quiesced state</arg>
</arguments>
<msg timestamp="20170816 05:18:54.598" level="INFO">HOST is recovered from quiesced state</msg>
<status endtime="20170816 05:18:54.598" status="PASS" starttime="20170816 05:18:54.598"></status>
</kw>
<status endtime="20170816 05:18:54.598" status="PASS" starttime="20170816 05:18:32.470"></status>
</kw>
<status endtime="20170816 05:18:54.599" status="PASS" starttime="20170816 05:18:32.469"></status>
</kw>
<status endtime="20170816 05:18:54.599" status="PASS" starttime="20170816 05:18:32.169"></status>
</kw>
<status endtime="20170816 05:18:54.599" status="PASS" starttime="20170816 05:18:32.168"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170816 05:18:54.609" level="INFO">${FFDC_DIR_PATH_STYLE} = </msg>
<status endtime="20170816 05:18:54.609" status="PASS" starttime="20170816 05:18:54.599"></status>
</kw>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170816 05:18:54.609" level="INFO">${FFDC_DIR_PATH} = /tmp/fspcibld/30956/obmc-robot/logs/20170816051816321351_TestsTestBasicPoweron/20170816051816321351_PowerOnTest/</msg>
<status endtime="20170816 05:18:54.609" status="PASS" starttime="20170816 05:18:54.609"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status endtime="20170816 05:18:54.610" status="PASS" starttime="20170816 05:18:54.610"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status endtime="20170816 05:18:54.611" status="PASS" starttime="20170816 05:18:54.610"></status>
</kw>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg html="yes" timestamp="20170816 05:18:54.612" level="INFO">Directory '&lt;a href="file:///tmp/fspcibld/30956/obmc-robot/logs"&gt;/tmp/fspcibld/30956/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status endtime="20170816 05:18:54.612" status="PASS" starttime="20170816 05:18:54.611"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg html="yes" timestamp="20170816 05:18:54.613" level="INFO">File '&lt;a href="file:///tmp/fspcibld/30956/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/30956/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status endtime="20170816 05:18:54.613" status="PASS" starttime="20170816 05:18:54.613"></status>
</kw>
<msg timestamp="20170816 05:18:54.613" level="INFO">${exist} = True</msg>
<status endtime="20170816 05:18:54.613" status="PASS" starttime="20170816 05:18:54.612"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status endtime="20170816 05:18:54.614" status="PASS" starttime="20170816 05:18:54.613"></status>
</kw>
<kw library="gen_robot_print" name="Rpvars">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status endtime="20170816 05:18:54.614" status="PASS" starttime="20170816 05:18:54.614"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170816 05:18:54.615" level="INFO">${cur_time} = 2017-08-16 05:18:54:615085</msg>
<status endtime="20170816 05:18:54.615" status="PASS" starttime="20170816 05:18:54.615"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170816 05:18:54.616" level="INFO">${cur_time} = 20170816051854615085</msg>
<status endtime="20170816 05:18:54.616" status="PASS" starttime="20170816 05:18:54.616"></status>
</kw>
<msg timestamp="20170816 05:18:54.616" level="INFO">${cur_time} = 20170816051854615085</msg>
<status endtime="20170816 05:18:54.616" status="PASS" starttime="20170816 05:18:54.614"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg html="yes" timestamp="20170816 05:18:54.617" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/30956/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/30956/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20170816 05:18:54.617" status="PASS" starttime="20170816 05:18:54.616"></status>
</kw>
<status endtime="20170816 05:18:54.617" status="PASS" starttime="20170816 05:18:54.599"></status>
</kw>
<status endtime="20170816 05:18:54.617" status="PASS" starttime="20170816 05:18:12.962"></status>
</kw>
<kw library="utils" name="Stop SOL Console Logging">
<doc>Stop system console logging and return log output.</doc>
<assign>
<var>${sol_log}</var>
</assign>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20170816 05:18:54.619" level="INFO">${default_file_path} = /tmp/9.41.166.169_os_console</msg>
<status endtime="20170816 05:18:54.619" status="PASS" starttime="20170816 05:18:54.619"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20170816 05:18:54.620" level="INFO">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status endtime="20170816 05:18:54.620" status="PASS" starttime="20170816 05:18:54.619"></status>
</kw>
<msg timestamp="20170816 05:18:54.620" level="INFO">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status endtime="20170816 05:18:54.620" status="PASS" starttime="20170816 05:18:54.618"></status>
</kw>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170816 05:18:54.621" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status endtime="20170816 05:18:54.621" status="PASS" starttime="20170816 05:18:54.621"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170816 05:18:54.621" status="PASS" starttime="20170816 05:18:54.621"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170816 05:18:54.626" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20170816 05:18:54.630" level="INFO">${rc} = 0</msg>
<msg timestamp="20170816 05:18:54.630" level="INFO">${output} = /tmp/fspcibld/30956/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20170816 05:18:54.630" status="PASS" starttime="20170816 05:18:54.622"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170816 05:18:54.633" status="PASS" starttime="20170816 05:18:54.632"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status endtime="20170816 05:18:54.634" status="PASS" starttime="20170816 05:18:54.633"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170816 05:18:54.635" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169</msg>
<status endtime="20170816 05:18:54.635" status="PASS" starttime="20170816 05:18:54.634"></status>
</kw>
<msg timestamp="20170816 05:18:54.635" level="INFO">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169</msg>
<status endtime="20170816 05:18:54.635" status="PASS" starttime="20170816 05:18:54.620"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170816 05:18:54.636" level="INFO">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169' | egrep -v grep | cut -c10-14)</msg>
<status endtime="20170816 05:18:54.636" status="PASS" starttime="20170816 05:18:54.636"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170816 05:18:54.637" status="PASS" starttime="20170816 05:18:54.636"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg timestamp="20170816 05:18:54.641" level="INFO">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg timestamp="20170816 05:18:54.657" level="INFO">${rc} = 0</msg>
<msg timestamp="20170816 05:18:54.657" level="INFO">${os_con_pid} = </msg>
<status endtime="20170816 05:18:54.658" status="PASS" starttime="20170816 05:18:54.637"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status endtime="20170816 05:18:54.670" status="PASS" starttime="20170816 05:18:54.667"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170816 05:18:54.670" level="INFO">${cmd_buf} = kill -9 </msg>
<status endtime="20170816 05:18:54.670" status="PASS" starttime="20170816 05:18:54.670"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170816 05:18:54.677" status="PASS" starttime="20170816 05:18:54.673"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170816 05:18:54.684" level="INFO">${rc} = None</msg>
<msg timestamp="20170816 05:18:54.684" level="INFO">${output} = None</msg>
<status endtime="20170816 05:18:54.684" status="PASS" starttime="20170816 05:18:54.677"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170816 05:18:54.686" status="PASS" starttime="20170816 05:18:54.685"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="OperatingSystem" name="Copy File">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg html="yes" timestamp="20170816 05:18:54.694" level="INFO">Copied file from '&lt;a href="file:///tmp/9.41.166.169_os_console"&gt;/tmp/9.41.166.169_os_console&lt;/a&gt;' to '&lt;a href="file:///tmp/fspcibld/30956/obmc-robot/logs/9.41.166.169_os_console"&gt;/tmp/fspcibld/30956/obmc-robot/logs/9.41.166.169_os_console&lt;/a&gt;'.</msg>
<status endtime="20170816 05:18:54.694" status="PASS" starttime="20170816 05:18:54.688"></status>
</kw>
<status endtime="20170816 05:18:54.694" status="PASS" starttime="20170816 05:18:54.687"></status>
</kw>
<status endtime="20170816 05:18:54.694" status="PASS" starttime="20170816 05:18:54.686"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20170816 05:18:54.695" level="INFO">${output} = </msg>
<status endtime="20170816 05:18:54.695" status="PASS" starttime="20170816 05:18:54.695"></status>
</kw>
<kw library="BuiltIn" name="Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg timestamp="20170816 05:18:54.696" level="INFO">${loc_quiet} = 1</msg>
<status endtime="20170816 05:18:54.696" status="PASS" starttime="20170816 05:18:54.695"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw library="gen_cmd" name="Cmd Fnc">
<doc>Run the given command in a shell and return the shell return code.</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status endtime="20170816 05:18:54.742" status="PASS" starttime="20170816 05:18:54.697"></status>
</kw>
<msg timestamp="20170816 05:18:54.744" level="INFO">${rc} = 0</msg>
<msg timestamp="20170816 05:18:54.744" level="INFO">${output} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.41.166.169
Warning: Permanently added '[9.41.166.169]:2200' (RSA) to the list of known hosts.
root@9.41.166.169's password: 


--== Welcome t...</msg>
<status endtime="20170816 05:18:54.744" status="PASS" starttime="20170816 05:18:54.696"></status>
</kw>
<msg timestamp="20170816 05:18:54.745" level="INFO">${sol_log} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.41.166.169
Warning: Permanently added '[9.41.166.169]:2200' (RSA) to the list of known hosts.
root@9.41.166.169's password: 


--== Welcome t...</msg>
<status endtime="20170816 05:18:54.745" status="PASS" starttime="20170816 05:18:54.618"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${sol_log}</arg>
</arguments>
<msg timestamp="20170816 05:18:54.748" level="INFO">spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.41.166.169
Warning: Permanently added '[9.41.166.169]:2200' (RSA) to the list of known hosts.
root@9.41.166.169's password: 


--== Welcome to Hostboot hostboot-faac61e/hbicore.bin ==--

  4.09320|secure|Booting in non-secure mode.
  4.09322|secure|SecureROM valid - enabling functionality
  7.21333|ISTEP  6. 5 - host_init_fsi
  7.33689|ISTEP  6. 6 - host_set_ipl_parms
  7.36756|ISTEP  6. 7 - host_discover_targets
 12.93303|HWAS|PRESENT&gt; DIMM[03]=FFFF000000000000
 12.93305|HWAS|PRESENT&gt; Proc[05]=C000000000000000
 12.98246|ISTEP  6. 8 - host_update_master_tpm
 12.99164|SECURE|Security Access Bit&gt; 0x0000000000000000
 12.99165|SECURE|Secure Mode Disable (via Jumper)&gt; 0xC000000000000000
 12.99183|ISTEP  6. 9 - host_gard
 13.03208|ISTEP  6.10 - host_revert_sbe_mcs_setup
 13.04473|ISTEP  6.11 - host_start_occ_xstop_handler
 13.04569|ISTEP  6.12 - host_voltage_config
 13.08077|ISTEP  7. 2 - mss_volt
 13.64499|ISTEP  7. 3 - mss_freq
 13.93319|ISTEP  7. 4 - mss_eff_config
 17.21908|ISTEP  7. 5 - mss_attr_update
 17.23142|ISTEP  8. 1 - host_slave_sbe_config
 17.26809|ISTEP  8. 2 - host_setup_sbe
 17.27477|ISTEP  8. 3 - host_cbs_start
 17.29144|ISTEP  8. 4 - proc_check_slave_sbe_seeprom_complete
 26.90761|ISTEP  8. 5 - host_attnlisten_proc
 26.90902|ISTEP  8. 6 - host_p9_fbc_eff_config
 26.91574|ISTEP  8. 7 - host_p9_eff_config_links
 26.92545|ISTEP  8. 8 - proc_attr_update
 26.92917|ISTEP  8. 9 - proc_chiplet_fabric_scominit
 26.98242|ISTEP  8.10 - proc_xbus_scominit
 30.21188|ISTEP  8.11 - proc_xbus_enable_ridi
 30.21676|ISTEP  9. 1 - fabric_erepair
 30.22700|ISTEP  9. 2 - fabric_io_dccal
 31.08731|ISTEP  9. 3 - fabric_pre_trainadv
 31.09391|ISTEP  9. 4 - fabric_io_run_training
 31.30752|ISTEP  9. 5 - fabric_post_trainadv
 31.31193|ISTEP  9. 6 - proc_smp_link_layer
 31.31909|ISTEP  9. 7 - proc_fab_iovalid
 31.34488|ISTEP  9. 8 - host_fbc_eff_config_aggregate
 31.35522|ISTEP 10. 1 - proc_build_smp
 31.75737|ISTEP 10. 2 - host_slave_sbe_update


--== Welcome to Hostboot hostboot-faac61e/hbicore.bin ==--

  4.09324|secure|Booting in non-secure mode.
  4.09326|secure|SecureROM valid - enabling functionality
  5.29913|ISTEP  6. 5 - host_init_fsi
  5.38912|ISTEP  6. 6 - host_set_ipl_parms
  5.39814|ISTEP  6. 7 - host_discover_targets
  5.86486|HWAS|PRESENT&gt; DIMM[03]=FFFF000000000000
  5.86487|HWAS|PRESENT&gt; Proc[05]=C000000000000000
  5.89197|ISTEP  6. 8 - host_update_master_tpm
  5.90050|SECURE|Security Access Bit&gt; 0x0000000000000000
  5.90051|SECURE|Secure Mode Disable (via Jumper)&gt; 0xC000000000000000
  5.90070|ISTEP  6. 9 - host_gard
  5.94796|ISTEP  6.10 - host_revert_sbe_mcs_setup
  5.95847|ISTEP  6.11 - host_start_occ_xstop_handler
  5.95937|ISTEP  6.12 - host_voltage_config
  5.99383|ISTEP  7. 2 - mss_volt
  6.38040|ISTEP  7. 3 - mss_freq
  6.52599|ISTEP  7. 4 - mss_eff_config
  9.83864|ISTEP  7. 5 - mss_attr_update
  9.85201|ISTEP  8. 1 - host_slave_sbe_config
  9.88802|ISTEP  8. 2 - host_setup_sbe
  9.89599|ISTEP  8. 3 - host_cbs_start
  9.90403|ISTEP  8. 4 - proc_check_slave_sbe_seeprom_complete
 19.51862|ISTEP  8. 5 - host_attnlisten_proc
 19.52005|ISTEP  8. 6 - host_p9_fbc_eff_config
 19.52654|ISTEP  8. 7 - host_p9_eff_config_links
 19.53721|ISTEP  8. 8 - proc_attr_update
 19.54130|ISTEP  8. 9 - proc_chiplet_fabric_scominit
 19.59443|ISTEP  8.10 - proc_xbus_scominit
 22.84528|ISTEP  8.11 - proc_xbus_enable_ridi
 22.85064|ISTEP  9. 1 - fabric_erepair
 22.85923|ISTEP  9. 2 - fabric_io_dccal
 23.71487|ISTEP  9. 3 - fabric_pre_trainadv
 23.72214|ISTEP  9. 4 - fabric_io_run_training
 23.93672|ISTEP  9. 5 - fabric_post_trainadv
 23.94118|ISTEP  9. 6 - proc_smp_link_layer
 23.94634|ISTEP  9. 7 - proc_fab_iovalid
 23.97156|ISTEP  9. 8 - host_fbc_eff_config_aggregate
 23.98275|ISTEP 10. 1 - proc_build_smp
 24.21621|ISTEP 10. 2 - host_slave_sbe_update


--== Welcome to Hostboot hostboot-faac61e/hbicore.bin ==--

  4.09445|secure|Booting in non-secure mode.
  4.09447|secure|SecureROM valid - enabling functionality
  5.49847|ISTEP  6. 5 - host_init_fsi
  5.63463|ISTEP  6. 6 - host_set_ipl_parms
  5.65626|ISTEP  6. 7 - host_discover_targets
  6.13233|HWAS|PRESENT&gt; DIMM[03]=FFFF000000000000
  6.13235|HWAS|PRESENT&gt; Proc[05]=C000000000000000
  6.16689|ISTEP  6. 8 - host_update_master_tpm
  6.17547|SECURE|Security Access Bit&gt; 0x0000000000000000
  6.17548|SECURE|Secure Mode Disable (via Jumper)&gt; 0xC000000000000000
  6.17567|ISTEP  6. 9 - host_gard
  6.22553|ISTEP  6.10 - host_revert_sbe_mcs_setup
  6.23497|ISTEP  6.11 - host_start_occ_xstop_handler
  6.23606|ISTEP  6.12 - host_voltage_config
  6.27225|ISTEP  7. 2 - mss_volt
  6.57073|ISTEP  7. 3 - mss_freq
  6.71708|ISTEP  7. 4 - mss_eff_config
 10.00159|ISTEP  7. 5 - mss_attr_update
 10.01618|ISTEP  8. 1 - host_slave_sbe_config
 10.05299|ISTEP  8. 2 - host_setup_sbe
 10.05967|ISTEP  8. 3 - host_cbs_start
 10.07614|ISTEP  8. 4 - proc_check_slave_sbe_seeprom_complete
 19.69558|ISTEP  8. 5 - host_attnlisten_proc
 19.69709|ISTEP  8. 6 - host_p9_fbc_eff_config
 19.70347|ISTEP  8. 7 - host_p9_eff_config_links
 19.71314|ISTEP  8. 8 - proc_attr_update
 19.71490|ISTEP  8. 9 - proc_chiplet_fabric_scominit
 19.76795|ISTEP  8.10 - proc_xbus_scominit
 23.02731|ISTEP  8.11 - proc_xbus_enable_ridi
 23.03259|ISTEP  9. 1 - fabric_erepair
 23.04080|ISTEP  9. 2 - fabric_io_dccal
 23.89737|ISTEP  9. 3 - fabric_pre_trainadv
 23.90379|ISTEP  9. 4 - fabric_io_run_training
 24.11777|ISTEP  9. 5 - fabric_post_trainadv
 24.12211|ISTEP  9. 6 - proc_smp_link_layer
 24.12733|ISTEP  9. 7 - proc_fab_iovalid
 24.15250|ISTEP  9. 8 - host_fbc_eff_config_aggregate
 24.16318|ISTEP 10. 1 - proc_build_smp
 24.40904|ISTEP 10. 2 - host_slave_sbe_update


--== Welcome to Hostboot hostboot-faac61e/hbicore.bin ==--

  4.09426|secure|Booting in non-secure mode.
  4.09428|secure|SecureROM valid - enabling functionality
  5.25653|ISTEP  6. 5 - host_init_fsi
  5.35435|ISTEP  6. 6 - host_set_ipl_parms
  5.36356|ISTEP  6. 7 - host_discover_targets
  5.86014|HWAS|PRESENT&gt; DIMM[03]=FFFF000000000000
  5.86015|HWAS|PRESENT&gt; Proc[05]=C000000000000000
  5.88755|ISTEP  6. 8 - host_update_master_tpm
  5.89621|SECURE|Security Access Bit&gt; 0x0000000000000000
  5.89622|SECURE|Secure Mode Disable (via Jumper)&gt; 0xC000000000000000
  5.89643|ISTEP  6. 9 - host_gard
  6.01394|ISTEP  6.10 - host_revert_sbe_mcs_setup
  6.02588|ISTEP  6.11 - host_start_occ_xstop_handler
  6.02689|ISTEP  6.12 - host_voltage_config
  6.06231|ISTEP  7. 2 - mss_volt
  6.29500|ISTEP  7. 3 - mss_freq
  6.56275|ISTEP  7. 4 - mss_eff_config
  9.83699|ISTEP  7. 5 - mss_attr_update
  9.84891|ISTEP  8. 1 - host_slave_sbe_config
  9.88979|ISTEP  8. 2 - host_setup_sbe
  9.89590|ISTEP  8. 3 - host_cbs_start
  9.90390|ISTEP  8. 4 - proc_check_slave_sbe_seeprom_complete
 19.51875|ISTEP  8. 5 - host_attnlisten_proc
 19.52001|ISTEP  8. 6 - host_p9_fbc_eff_config
 19.52852|ISTEP  8. 7 - host_p9_eff_config_links
 19.53843|ISTEP  8. 8 - proc_attr_update
 19.54043|ISTEP  8. 9 - proc_chiplet_fabric_scominit
 19.59376|ISTEP  8.10 - proc_xbus_scominit
 22.83525|ISTEP  8.11 - proc_xbus_enable_ridi
 22.84049|ISTEP  9. 1 - fabric_erepair
 22.84860|ISTEP  9. 2 - fabric_io_dccal
 23.70472|ISTEP  9. 3 - fabric_pre_trainadv
 23.71108|ISTEP  9. 4 - fabric_io_run_training
 23.92551|ISTEP  9. 5 - fabric_post_trainadv
 23.93162|ISTEP  9. 6 - proc_smp_link_layer
 23.93715|ISTEP  9. 7 - proc_fab_iovalid
 23.96270|ISTEP  9. 8 - host_fbc_eff_config_aggregate
 23.97339|ISTEP 10. 1 - proc_build_smp
 24.14477|ISTEP 10. 2 - host_slave_sbe_update
135.23641|sbe|System Rebooting To Perform SBE Update

135.24734|================================================
135.25087|Error reported by ipmi (0x2500) PLID 0x90000009
135.25264|  Requested sensor is not present.
135.25264|  ModuleId   0x03 IPMI::MOD_IPMISENSOR
135.25265|  ReasonCode 0x2507 IPMI::RC_SENSOR_NOT_PRESENT
135.25266|  UserData1  BMC IPMI Completion code. : 0x00000000000000cb
135.25268|  UserData2  bytes [0-3]sensor number bytes [4-7]HUID of target. : 0x0000000700000000
135.25269|------------------------------------------------
135.25270|  Callout type             : Procedure Callout
135.25270|  Procedure                : EPUB_PRC_HB_CODE
135.25271|  Priority                 : SRCI_PRIORITY_HIGH
135.25272|------------------------------------------------
135.25273|  Hostboot Build ID: hostboot-faac61e/hbicore.bin
135.25273|================================================
135.25784|IPMI: Initiate power cycle
135.36110|Stopping istep dispatcher
140.86837|IPMI: shutdown complete



--== Welcome to Hostboot hostboot-faac61e/hbicore.bin ==--

  4.02251|secure|Booting in non-secure mode.
  4.02252|secure|SecureROM invalid - skipping functionality
  4.91942|ERRL|Dumping errors reported prior to registration
  5.57150|ISTEP  6. 5 - host_init_fsi
  5.66937|ISTEP  6. 6 - host_set_ipl_parms
  5.67839|ISTEP  6. 7 - host_discover_targets
  6.16057|HWAS|PRESENT&gt; DIMM[03]=FFFF000000000000
  6.16058|HWAS|PRESENT&gt; Proc[05]=C000000000000000
  6.18852|ISTEP  6. 8 - host_update_master_tpm
  6.19832|SECURE|Security Access Bit&gt; 0x0000000000000000
  6.19833|SECURE|Secure Mode Disable (via Jumper)&gt; 0xC000000000000000
  6.19853|ISTEP  6. 9 - host_gard
  6.24980|ISTEP  6.10 - host_revert_sbe_mcs_setup
  6.25912|ISTEP  6.11 - host_start_occ_xstop_handler
  6.26044|ISTEP  6.12 - host_voltage_config
  6.29454|ISTEP  7. 2 - mss_volt
  6.52782|ISTEP  7. 3 - mss_freq
  6.67469|ISTEP  7. 4 - mss_eff_config
  9.95830|ISTEP  7. 5 - mss_attr_update
  9.97251|ISTEP  8. 1 - host_slave_sbe_config
 10.00902|ISTEP  8. 2 - host_setup_sbe
 10.01507|ISTEP  8. 3 - host_cbs_start
 10.02324|ISTEP  8. 4 - proc_check_slave_sbe_seeprom_complete
 18.43799|ISTEP  8. 5 - host_attnlisten_proc
 18.44056|ISTEP  8. 6 - host_p9_fbc_eff_config
 18.44714|ISTEP  8. 7 - host_p9_eff_config_links
 18.45727|ISTEP  8. 8 - proc_attr_update
 18.45950|ISTEP  8. 9 - proc_chiplet_fabric_scominit
 18.51275|ISTEP  8.10 - proc_xbus_scominit
 21.74721|ISTEP  8.11 - proc_xbus_enable_ridi
 21.75305|ISTEP  9. 1 - fabric_erepair
 21.76107|ISTEP  9. 2 - fabric_io_dccal
 22.61726|ISTEP  9. 3 - fabric_pre_trainadv
 22.62375|ISTEP  9. 4 - fabric_io_run_training
 22.84006|ISTEP  9. 5 - fabric_post_trainadv
 22.84442|ISTEP  9. 6 - proc_smp_link_layer
 22.84975|ISTEP  9. 7 - proc_fab_iovalid
 22.87539|ISTEP  9. 8 - host_fbc_eff_config_aggregate
 22.88561|ISTEP 10. 1 - proc_build_smp
 23.12618|ISTEP 10. 2 - host_slave_sbe_update
 23.61996|ISTEP 10. 3 - host_set_voltages
 23.82989|ISTEP 10. 4 - proc_cen_ref_clk_enable
 23.85090|ISTEP 10. 5 - proc_enable_osclite
 23.85185|ISTEP 10. 6 - proc_chiplet_scominit
 23.90387|ISTEP 10. 7 - proc_abus_scominit
 23.91155|ISTEP 10. 8 - proc_obus_scominit
 24.07017|ISTEP 10. 9 - proc_npu_scominit
 24.09320|ISTEP 10.10 - proc_pcie_scominit
 24.15727|ISTEP 10.11 - proc_scomoverride_chiplets
 24.15965|ISTEP 10.12 - proc_chiplet_enable_ridi
 24.16325|ISTEP 10.13 - host_rng_bist
 24.16856|ISTEP 10.14 - host_update_redundant_tpm
 24.56750|================================================
 24.57100|Error reported by prdf (0xE500) PLID 0x90000011
 24.57101|  PRD Signature            : 0x280007 0xC51E003D
 24.57301|  Signature Description    : pu.obus:k0:n0:s0:p01:c3 (IOOLFIR[61]) link1 internal error
 24.57482|  UserData1   : 0x0028000700000303
 24.57483|  UserData2   : 0xc51e003d00000000
 24.57484|------------------------------------------------
 24.57485|  Callout type             : Hardware Callout
 24.57485|  CPU id                   : 5
 24.57487|  Target                   : Physical:/Sys0/Node0/Proc1/OBUS3
 24.57488|  Deconfig State           : DELAYED_DECONFIG
 24.57488|  GARD Error Type          : GARD_Predictive
 24.57489|  Priority                 : SRCI_PRIORITY_MED
 24.57490|------------------------------------------------
 24.57490|  
 24.57491|------------------------------------------------
 24.57492|  Hostboot Build ID: hostboot-faac61e/hbicore.bin
 24.57493|================================================
 79.80516|System shutting down with error status 0x90000012
 79.80934|================================================
 79.80935|Error reported by ipmi (0x2500) PLID 0x90000012
 79.81520|  Requested sensor is not present.
 79.81521|  ModuleId   0x03 IPMI::MOD_IPMISENSOR
 79.81522|  ReasonCode 0x2507 IPMI::RC_SENSOR_NOT_PRESENT
 79.81523|  UserData1  BMC IPMI Completion code. : 0x00000000000000cb
 79.81525|  UserData2  bytes [0-3]sensor number bytes [4-7]HUID of target. : 0x0000000700000000
 79.81526|------------------------------------------------
 79.81527|  Callout type             : Procedure Callout
 79.81527|  Procedure                : EPUB_PRC_HB_CODE
 79.81528|  Priority                 : SRCI_PRIORITY_HIGH
 79.81529|------------------------------------------------
 79.81530|  libistepdisp.so
 79.81530|------------------------------------------------
 79.81531|  Hostboot Build ID: hostboot-faac61e/hbicore.bin
 79.81532|================================================
</msg>
<status endtime="20170816 05:18:54.748" status="PASS" starttime="20170816 05:18:54.747"></status>
</kw>
<status endtime="20170816 05:18:54.748" status="PASS" starttime="20170816 05:18:12.962"></status>
</kw>
<doc>Power off and on.</doc>
<tags>
<tag>chassisboot</tag>
<tag>Power_On_Test</tag>
</tags>
<status endtime="20170816 05:18:54.749" critical="yes" status="FAIL" starttime="20170816 05:07:53.465">Keyword 'Is Host Running' failed after retrying for 10 minutes. The last error was: Running != Quiesced</status>
</test>
<doc>Test power on for HW CI.</doc>
<status endtime="20170816 05:18:54.750" status="FAIL" starttime="20170816 05:07:53.430"></status>
</suite>
<doc>Set metadata for test suite.</doc>
<status endtime="20170816 05:18:54.753" status="FAIL" starttime="20170816 05:07:47.536"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="1">Critical Tests</stat>
<stat fail="1" pass="1">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">chassisboot</stat>
<stat fail="1" pass="0">Power_On_Test</stat>
<stat fail="0" pass="1">Test_SSL_Connection</stat>
</tag>
<suite>
<stat fail="1" pass="1" id="s1" name="Tests">Tests</stat>
<stat fail="0" pass="1" id="s1-s1" name="Security">Tests.Security</stat>
<stat fail="0" pass="1" id="s1-s1-s1" name="Test Ssl">Tests.Security.Test Ssl</stat>
<stat fail="1" pass="0" id="s1-s2" name="Test Basic Poweron">Tests.Test Basic Poweron</stat>
</suite>
</statistics>
<errors>
<msg timestamp="20170816 05:15:35.504" level="WARN">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ReadTimeoutError("HTTPSConnectionPool(host='9.41.166.169', port=443): Read timed out. (read timeout=10.0)",)': /org/openbmc/sensors/host/BootProgress/attr/value</msg>
</errors>
</robot>
