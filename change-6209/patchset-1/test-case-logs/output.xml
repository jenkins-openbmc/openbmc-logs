<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.0.2 (Python 2.7.12 on linux2)" generated="20170823 13:41:46.799">
<suite id="s1" name="Tests" source="/tmp/fspcibld/30075/obmc-robot/tests">
<kw name="System Driver Data" type="setup">
<doc>System driver information.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170823 13:41:47.505">Dictionary does not contain key 'host'.</msg>
<status endtime="20170823 13:41:47.505" starttime="20170823 13:41:47.504" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:41:47.505">${has_host} = False</msg>
<status endtime="20170823 13:41:47.505" starttime="20170823 13:41:47.504" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170823 13:41:47.506" starttime="20170823 13:41:47.506" status="PASS"></status>
</kw>
<status endtime="20170823 13:41:47.506" starttime="20170823 13:41:47.505" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:41:47.508">${port_num} = 22</msg>
<status endtime="20170823 13:41:47.508" starttime="20170823 13:41:47.507" status="PASS"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:41:47.508">${SSH_PORT} = 22</msg>
<status endtime="20170823 13:41:47.508" starttime="20170823 13:41:47.508" status="PASS"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:41:47.509">${https_num} = 443</msg>
<status endtime="20170823 13:41:47.509" starttime="20170823 13:41:47.508" status="PASS"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:41:47.509">${AUTH_URI} = https://9.3.86.161:443</msg>
<status endtime="20170823 13:41:47.510" starttime="20170823 13:41:47.509" status="PASS"></status>
</kw>
<status endtime="20170823 13:41:47.510" starttime="20170823 13:41:47.507" status="PASS"></status>
</kw>
<status endtime="20170823 13:41:47.510" starttime="20170823 13:41:47.506" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170823 13:41:47.511">Dictionary does not contain key 'port'.</msg>
<status endtime="20170823 13:41:47.511" starttime="20170823 13:41:47.510" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:41:47.511">${has_port} = False</msg>
<status endtime="20170823 13:41:47.511" starttime="20170823 13:41:47.510" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170823 13:41:47.512" starttime="20170823 13:41:47.512" status="PASS"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170823 13:41:47.513" starttime="20170823 13:41:47.513" status="PASS"></status>
</kw>
<status endtime="20170823 13:41:47.513" starttime="20170823 13:41:47.512" status="PASS"></status>
</kw>
<status endtime="20170823 13:41:47.513" starttime="20170823 13:41:47.511" status="PASS"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:41:47.514">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170823 13:41:49.297">Read output: root@witherspoon:~#</msg>
<status endtime="20170823 13:41:49.297" starttime="20170823 13:41:47.513" status="PASS"></status>
</kw>
<status endtime="20170823 13:41:49.298" starttime="20170823 13:41:47.503" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Driver Details</arg>
</arguments>
<kw name="Log BMC Driver Details">
<doc>Get BMC driver details and log.</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DRIVER_CMD}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:41:49.299">Executing command 'cat /etc/os-release | grep ^VERSION_ID='.</msg>
<msg level="INFO" timestamp="20170823 13:41:49.376">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170823 13:41:49.376">${output} = VERSION_ID="v1.99.9-31-g6e1f963"</msg>
<msg level="INFO" timestamp="20170823 13:41:49.376">${stderr} = </msg>
<status endtime="20170823 13:41:49.376" starttime="20170823 13:41:49.299" status="PASS"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:41:49.377">Length is 0</msg>
<status endtime="20170823 13:41:49.377" starttime="20170823 13:41:49.377" status="PASS"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:41:49.377">VERSION_ID="v1.99.9-31-g6e1f963"</msg>
<status endtime="20170823 13:41:49.378" starttime="20170823 13:41:49.377" status="PASS"></status>
</kw>
<status endtime="20170823 13:41:49.378" starttime="20170823 13:41:49.298" status="PASS"></status>
</kw>
<status endtime="20170823 13:41:49.378" starttime="20170823 13:41:49.298" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log PNOR Driver Details</arg>
</arguments>
<kw name="Log PNOR Driver Details">
<doc>Get PNOR driver details and log.</doc>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>${PNOR_CMD}</arg>
</arguments>
<assign>
<var>${pnor_details}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:41:49.379">Executing command '/usr/sbin/pflash -r /tmp/out.txt -P VERSION; cat /tmp/out.txt'.</msg>
<msg level="INFO" timestamp="20170823 13:41:49.506">Command exited with return code 1.</msg>
<msg level="INFO" timestamp="20170823 13:41:49.506">${stdout} = </msg>
<msg level="INFO" timestamp="20170823 13:41:49.506">${stderr} = sh: /usr/sbin/pflash: No such file or directory
cat: can't open '/tmp/out.txt': No such file or directory</msg>
<status endtime="20170823 13:41:49.506" starttime="20170823 13:41:49.379" status="PASS"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:41:49.507">Length is 105</msg>
<msg level="FAIL" timestamp="20170823 13:41:49.507">'sh: /usr/sbin/pflash: No such file or directory
cat: can't open '/tmp/out.txt': No such file or directory' should be empty.</msg>
<status endtime="20170823 13:41:49.507" starttime="20170823 13:41:49.507" status="FAIL"></status>
</kw>
<status endtime="20170823 13:41:49.507" starttime="20170823 13:41:49.379" status="FAIL"></status>
</kw>
<status endtime="20170823 13:41:49.507" starttime="20170823 13:41:49.378" status="FAIL"></status>
</kw>
<status endtime="20170823 13:41:49.508" starttime="20170823 13:41:49.378" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Model</arg>
</arguments>
<kw name="Log BMC Model">
<doc>Fetch BMC Model name from system and log.</doc>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${bmc_model}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:41:49.940">term_type=vt100
path_separator=/
host=9.3.86.161
height=24
width=80
port=22
index=1
prompt=# 
timeout=25 seconds
newline=

alias=bmc_connection
encoding=UTF-8</msg>
<msg level="INFO" timestamp="20170823 13:41:49.941">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170823 13:41:50.730">Read output: root@witherspoon:~#</msg>
<msg level="INFO" timestamp="20170823 13:41:50.731">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg level="INFO" timestamp="20170823 13:41:50.807">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170823 13:41:50.818">${bmc_model} = Witherspoon</msg>
<msg level="INFO" timestamp="20170823 13:41:50.819">${stderr} = </msg>
<msg level="INFO" timestamp="20170823 13:41:50.819">${rc} = 0</msg>
<status endtime="20170823 13:41:50.819" starttime="20170823 13:41:49.509" status="PASS"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:41:50.820">Length is 0</msg>
<status endtime="20170823 13:41:50.820" starttime="20170823 13:41:50.819" status="PASS"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:41:50.820">Length is 11</msg>
<status endtime="20170823 13:41:50.820" starttime="20170823 13:41:50.820" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:41:50.820">${bmc_model} = Witherspoon</msg>
<status endtime="20170823 13:41:50.820" starttime="20170823 13:41:49.508" status="PASS"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>BMC Model=${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:41:50.821">BMC Model=Witherspoon</msg>
<status endtime="20170823 13:41:50.821" starttime="20170823 13:41:50.821" status="PASS"></status>
</kw>
<status endtime="20170823 13:41:50.821" starttime="20170823 13:41:49.508" status="PASS"></status>
</kw>
<status endtime="20170823 13:41:50.821" starttime="20170823 13:41:49.508" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Enable Core Dump On BMC</arg>
</arguments>
<kw name="Enable Core Dump On BMC" library="utils">
<doc>Enable core dump collection.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170823 13:41:50.823">Dictionary does not contain key 'host'.</msg>
<status endtime="20170823 13:41:50.823" starttime="20170823 13:41:50.823" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:41:50.824">${has_host} = False</msg>
<status endtime="20170823 13:41:50.824" starttime="20170823 13:41:50.823" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170823 13:41:50.825" starttime="20170823 13:41:50.824" status="PASS"></status>
</kw>
<status endtime="20170823 13:41:50.825" starttime="20170823 13:41:50.824" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:41:50.826">${port_num} = 22</msg>
<status endtime="20170823 13:41:50.826" starttime="20170823 13:41:50.826" status="PASS"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:41:50.827">${SSH_PORT} = 22</msg>
<status endtime="20170823 13:41:50.827" starttime="20170823 13:41:50.827" status="PASS"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:41:50.827">${https_num} = 443</msg>
<status endtime="20170823 13:41:50.827" starttime="20170823 13:41:50.827" status="PASS"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:41:50.828">${AUTH_URI} = https://9.3.86.161:443</msg>
<status endtime="20170823 13:41:50.828" starttime="20170823 13:41:50.828" status="PASS"></status>
</kw>
<status endtime="20170823 13:41:50.828" starttime="20170823 13:41:50.826" status="PASS"></status>
</kw>
<status endtime="20170823 13:41:50.828" starttime="20170823 13:41:50.825" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170823 13:41:50.829">Dictionary does not contain key 'port'.</msg>
<status endtime="20170823 13:41:50.829" starttime="20170823 13:41:50.829" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:41:50.829">${has_port} = False</msg>
<status endtime="20170823 13:41:50.829" starttime="20170823 13:41:50.829" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170823 13:41:50.831" starttime="20170823 13:41:50.831" status="PASS"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170823 13:41:50.832" starttime="20170823 13:41:50.831" status="PASS"></status>
</kw>
<status endtime="20170823 13:41:50.832" starttime="20170823 13:41:50.830" status="PASS"></status>
</kw>
<status endtime="20170823 13:41:50.832" starttime="20170823 13:41:50.830" status="PASS"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:41:50.834">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170823 13:41:52.529">Read output: root@witherspoon:~#</msg>
<status endtime="20170823 13:41:52.529" starttime="20170823 13:41:50.834" status="PASS"></status>
</kw>
<status endtime="20170823 13:41:52.530" starttime="20170823 13:41:50.822" status="PASS"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern</arg>
</arguments>
<assign>
<var>${core_pattern}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:41:52.531">Executing command 'echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern'.</msg>
<msg level="INFO" timestamp="20170823 13:41:52.638">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170823 13:41:52.638">${stdout} = /tmp/core_%e.%p</msg>
<msg level="INFO" timestamp="20170823 13:41:52.638">${stderr} = </msg>
<status endtime="20170823 13:41:52.638" starttime="20170823 13:41:52.530" status="PASS"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:41:52.638">Length is 0</msg>
<status endtime="20170823 13:41:52.638" starttime="20170823 13:41:52.638" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:41:52.639">${core_pattern} = /tmp/core_%e.%p</msg>
<status endtime="20170823 13:41:52.639" starttime="20170823 13:41:52.530" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${core_pattern}</arg>
<arg>/tmp/core_%e.%p</arg>
</arguments>
<status endtime="20170823 13:41:52.639" starttime="20170823 13:41:52.639" status="PASS"></status>
</kw>
<status endtime="20170823 13:41:52.639" starttime="20170823 13:41:50.822" status="PASS"></status>
</kw>
<status endtime="20170823 13:41:52.639" starttime="20170823 13:41:50.821" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${DEBUG_TARBALL_PATH}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Install Debug Tarball On BMC</arg>
<arg>${DEBUG_TARBALL_PATH}</arg>
</arguments>
<status endtime="20170823 13:41:52.640" starttime="20170823 13:41:52.640" status="PASS"></status>
</kw>
<status endtime="20170823 13:41:52.640" starttime="20170823 13:41:47.503" status="PASS"></status>
</kw>
<suite id="s1-s1" name="Security" source="/tmp/fspcibld/30075/obmc-robot/tests/security">
<suite id="s1-s1-s1" name="Test Ssl" source="/tmp/fspcibld/30075/obmc-robot/tests/security/test_ssl.robot">
<test id="s1-s1-s1-t1" name="Test SSL Connection">
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:41:52.731">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 13:41:52.731" starttime="20170823 13:41:52.731" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:41:52.732">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 13:41:52.732" starttime="20170823 13:41:52.732" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:41:52.733">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 13:41:52.733" starttime="20170823 13:41:52.732" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:41:52.733">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 13:41:52.733" starttime="20170823 13:41:52.733" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:41:52.935">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 13:41:52.935" starttime="20170823 13:41:52.734" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:41:52.935">${status} = PASS</msg>
<msg level="INFO" timestamp="20170823 13:41:52.935">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:41:52.935" starttime="20170823 13:41:52.734" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:41:52.936">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:41:52.936" starttime="20170823 13:41:52.935" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:41:52.936">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:41:52.936" starttime="20170823 13:41:52.936" status="PASS"></status>
</kw>
<status endtime="20170823 13:41:52.937" starttime="20170823 13:41:52.730" status="PASS"></status>
</kw>
<status endtime="20170823 13:41:52.937" starttime="20170823 13:41:52.730" status="PASS"></status>
</kw>
<status endtime="20170823 13:41:52.937" starttime="20170823 13:41:52.729" status="PASS"></status>
</kw>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc" type="teardown">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:41:52.945">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 13:41:52.946" starttime="20170823 13:41:52.945" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:41:52.947">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 13:41:52.947" starttime="20170823 13:41:52.946" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:41:52.948">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 13:41:52.948" starttime="20170823 13:41:52.947" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:41:52.949">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 13:41:52.949" starttime="20170823 13:41:52.948" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:41:53.139">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 13:41:53.139" starttime="20170823 13:41:52.950" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:41:53.139">${status} = PASS</msg>
<msg level="INFO" timestamp="20170823 13:41:53.139">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:41:53.139" starttime="20170823 13:41:52.949" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:41:53.140">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:41:53.140" starttime="20170823 13:41:53.139" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:41:53.140">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:41:53.140" starttime="20170823 13:41:53.140" status="PASS"></status>
</kw>
<status endtime="20170823 13:41:53.141" starttime="20170823 13:41:52.944" status="PASS"></status>
</kw>
<status endtime="20170823 13:41:53.141" starttime="20170823 13:41:52.943" status="PASS"></status>
</kw>
<status endtime="20170823 13:41:53.141" starttime="20170823 13:41:52.941" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:41:53.141">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170823 13:41:53.141" starttime="20170823 13:41:53.141" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:41:53.143">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170823 13:41:53.143" starttime="20170823 13:41:53.143" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:41:53.144">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170823 13:41:53.144" starttime="20170823 13:41:53.144" status="PASS"></status>
</kw>
<status endtime="20170823 13:41:53.145" starttime="20170823 13:41:53.144" status="PASS"></status>
</kw>
<status endtime="20170823 13:41:53.145" starttime="20170823 13:41:53.142" status="PASS"></status>
</kw>
<status endtime="20170823 13:41:53.145" starttime="20170823 13:41:53.142" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:41:53.235">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170823 13:41:53.235">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:41:53.235" starttime="20170823 13:41:53.145" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:41:53.237">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:41:53.237" starttime="20170823 13:41:53.237" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:41:53.238">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:41:53.238" starttime="20170823 13:41:53.238" status="PASS"></status>
</kw>
<status endtime="20170823 13:41:53.239" starttime="20170823 13:41:53.238" status="PASS"></status>
</kw>
<status endtime="20170823 13:41:53.239" starttime="20170823 13:41:53.236" status="PASS"></status>
</kw>
<status endtime="20170823 13:41:53.239" starttime="20170823 13:41:53.235" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170823 13:41:53.239">Delete All Sessions</msg>
<status endtime="20170823 13:41:53.239" starttime="20170823 13:41:53.239" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:41:53.240">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:41:53.240" starttime="20170823 13:41:52.940" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:41:53.240">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:41:53.240" starttime="20170823 13:41:53.240" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:41:53.241">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170823 13:41:53.241">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170823 13:41:53.241">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status endtime="20170823 13:41:53.241" starttime="20170823 13:41:53.241" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:41:53.241">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status endtime="20170823 13:41:53.241" starttime="20170823 13:41:52.939" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:41:53.242">${host_state} = Off</msg>
<status endtime="20170823 13:41:53.242" starttime="20170823 13:41:52.938" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg level="FAIL" timestamp="20170823 13:41:53.243">Off != Quiesced</msg>
<status endtime="20170823 13:41:53.243" starttime="20170823 13:41:53.242" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:41:53.243">${status} = False</msg>
<status endtime="20170823 13:41:53.243" starttime="20170823 13:41:53.242" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:41:53.243">${status} = False</msg>
<status endtime="20170823 13:41:53.243" starttime="20170823 13:41:52.938" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<status endtime="20170823 13:41:53.244" starttime="20170823 13:41:53.243" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status endtime="20170823 13:41:53.244" starttime="20170823 13:41:53.244" status="PASS"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:41:53.258">${FFDC_DIR_PATH_STYLE} = </msg>
<status endtime="20170823 13:41:53.258" starttime="20170823 13:41:53.245" status="PASS"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:41:53.273">${FFDC_DIR_PATH} = </msg>
<status endtime="20170823 13:41:53.273" starttime="20170823 13:41:53.259" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<kw name="Set Ffdc Defaults" library="openbmc_ffdc">
<doc>Set a default value for ffdc_dir_path and ffdc_prefix if they don't</doc>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:41:53.276">${cur_time} = 2017-08-23 13:41:53:275920</msg>
<status endtime="20170823 13:41:53.276" starttime="20170823 13:41:53.276" status="PASS"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:41:53.277">${cur_time} = 20170823134153275920</msg>
<status endtime="20170823 13:41:53.277" starttime="20170823 13:41:53.277" status="PASS"></status>
</kw>
<status endtime="20170823 13:41:53.277" starttime="20170823 13:41:53.275" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:41:53.285">${FFDC_TIME} = 20170823134153275920</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:41:53.286">${suite_name} = TestsSecurityTestSsl</msg>
<status endtime="20170823 13:41:53.286" starttime="20170823 13:41:53.286" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:41:53.287">${suite_name} = 20170823134153275920_TestsSecurityTestSsl</msg>
<status endtime="20170823 13:41:53.287" starttime="20170823 13:41:53.286" status="PASS"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:41:53.287">${test_name} = TestSSLConnection</msg>
<status endtime="20170823 13:41:53.287" starttime="20170823 13:41:53.287" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:41:53.288">${test_name} = 20170823134153275920_TestSSLConnection</msg>
<status endtime="20170823 13:41:53.288" starttime="20170823 13:41:53.287" status="PASS"></status>
</kw>
<status endtime="20170823 13:41:53.288" starttime="20170823 13:41:53.285" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:41:53.288">${FFDC_DIR_PATH} = /tmp/fspcibld/30075/obmc-robot/logs/20170823134153275920_TestsSecurityTestSsl/20170823134153275920_TestSSLConnection/</msg>
<msg level="INFO" timestamp="20170823 13:41:53.293">${FFDC_PREFIX} = 20170823134153275920_</msg>
<status endtime="20170823 13:41:53.293" starttime="20170823 13:41:53.275" status="PASS"></status>
</kw>
<status endtime="20170823 13:41:53.293" starttime="20170823 13:41:53.274" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status endtime="20170823 13:41:53.294" starttime="20170823 13:41:53.294" status="PASS"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:41:53.295" html="yes">Created directory '&lt;a href="file:///tmp/fspcibld/30075/obmc-robot/logs"&gt;/tmp/fspcibld/30075/obmc-robot/logs&lt;/a&gt;'.</msg>
<status endtime="20170823 13:41:53.295" starttime="20170823 13:41:53.294" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="FAIL" timestamp="20170823 13:41:53.296">File '/tmp/fspcibld/30075/obmc-robot/logs/test_history.txt' does not exist.</msg>
<status endtime="20170823 13:41:53.296" starttime="20170823 13:41:53.296" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:41:53.296">${exist} = False</msg>
<status endtime="20170823 13:41:53.296" starttime="20170823 13:41:53.295" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:41:53.298" html="yes">Created file '&lt;a href="file:///tmp/fspcibld/30075/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/30075/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 13:41:53.298" starttime="20170823 13:41:53.297" status="PASS"></status>
</kw>
<status endtime="20170823 13:41:53.298" starttime="20170823 13:41:53.297" status="PASS"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status endtime="20170823 13:41:53.298" starttime="20170823 13:41:53.298" status="PASS"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:41:53.299">${cur_time} = 2017-08-23 13:41:53:299109</msg>
<status endtime="20170823 13:41:53.299" starttime="20170823 13:41:53.299" status="PASS"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:41:53.300">${cur_time} = 20170823134153299109</msg>
<status endtime="20170823 13:41:53.300" starttime="20170823 13:41:53.300" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:41:53.300">${cur_time} = 20170823134153299109</msg>
<status endtime="20170823 13:41:53.300" starttime="20170823 13:41:53.298" status="PASS"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:41:53.301" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/30075/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/30075/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 13:41:53.301" starttime="20170823 13:41:53.300" status="PASS"></status>
</kw>
<status endtime="20170823 13:41:53.301" starttime="20170823 13:41:53.245" status="PASS"></status>
</kw>
<status endtime="20170823 13:41:53.301" starttime="20170823 13:41:52.937" status="PASS"></status>
</kw>
<doc>This testcase is for testing the SSL connection to the
OpenBMC machine.</doc>
<tags>
<tag>Test_SSL_Connection</tag>
</tags>
<status endtime="20170823 13:41:53.301" critical="yes" starttime="20170823 13:41:52.728" status="PASS"></status>
</test>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords" type="teardown">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170823 13:41:53.303">Delete All Sessions</msg>
<status endtime="20170823 13:41:53.303" starttime="20170823 13:41:53.302" status="PASS"></status>
</kw>
<doc>This testsuite is for testing SSL connection to OpenBMC</doc>
<status endtime="20170823 13:41:53.303" starttime="20170823 13:41:52.642" status="PASS"></status>
</suite>
<status endtime="20170823 13:41:53.305" starttime="20170823 13:41:52.640" status="PASS"></status>
</suite>
<suite id="s1-s2" name="Test Basic Poweron" source="/tmp/fspcibld/30075/obmc-robot/tests/test_basic_poweron.robot">
<test id="s1-s2-t1" name="Power On Test">
<kw name="Start SOL Console Logging" library="utils" type="setup">
<doc>Start system console log to file.</doc>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:41:53.347">${default_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170823 13:41:53.347" starttime="20170823 13:41:53.346" status="PASS"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:41:53.347">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170823 13:41:53.347" starttime="20170823 13:41:53.347" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:41:53.348">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170823 13:41:53.348" starttime="20170823 13:41:53.346" status="PASS"></status>
</kw>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Stop system console logging and return log output.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>return_data=${return_data}</arg>
</arguments>
<assign>
<var>${log_output}</var>
</assign>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:41:53.350">${default_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170823 13:41:53.350" starttime="20170823 13:41:53.350" status="PASS"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:41:53.351">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170823 13:41:53.351" starttime="20170823 13:41:53.350" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:41:53.351">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170823 13:41:53.351" starttime="20170823 13:41:53.349" status="PASS"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:41:53.352">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status endtime="20170823 13:41:53.352" starttime="20170823 13:41:53.352" status="PASS"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170823 13:41:53.353" starttime="20170823 13:41:53.352" status="PASS"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:41:53.357">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170823 13:41:53.360">${rc} = 0</msg>
<msg level="INFO" timestamp="20170823 13:41:53.360">${output} = /tmp/fspcibld/30075/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20170823 13:41:53.360" starttime="20170823 13:41:53.353" status="PASS"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170823 13:41:53.363" starttime="20170823 13:41:53.362" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status endtime="20170823 13:41:53.365" starttime="20170823 13:41:53.364" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:41:53.365">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status endtime="20170823 13:41:53.366" starttime="20170823 13:41:53.365" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:41:53.366">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status endtime="20170823 13:41:53.366" starttime="20170823 13:41:53.351" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:41:53.367">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161' | egrep -v grep | cut -c10-14)</msg>
<status endtime="20170823 13:41:53.367" starttime="20170823 13:41:53.366" status="PASS"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170823 13:41:53.367" starttime="20170823 13:41:53.367" status="PASS"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:41:53.371">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170823 13:41:53.383">${rc} = 0</msg>
<msg level="INFO" timestamp="20170823 13:41:53.383">${os_con_pid} = </msg>
<status endtime="20170823 13:41:53.384" starttime="20170823 13:41:53.367" status="PASS"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status endtime="20170823 13:41:53.387" starttime="20170823 13:41:53.385" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:41:53.387">${cmd_buf} = kill -9 </msg>
<status endtime="20170823 13:41:53.387" starttime="20170823 13:41:53.387" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170823 13:41:53.389" starttime="20170823 13:41:53.388" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:41:53.389">${rc} = None</msg>
<msg level="INFO" timestamp="20170823 13:41:53.389">${output} = None</msg>
<status endtime="20170823 13:41:53.389" starttime="20170823 13:41:53.389" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170823 13:41:53.390" starttime="20170823 13:41:53.390" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg level="FAIL" timestamp="20170823 13:41:53.393">Source file '/tmp/9.3.86.161_os_console' does not exist.</msg>
<status endtime="20170823 13:41:53.393" starttime="20170823 13:41:53.393" status="FAIL"></status>
</kw>
<status endtime="20170823 13:41:53.393" starttime="20170823 13:41:53.391" status="PASS"></status>
</kw>
<status endtime="20170823 13:41:53.394" starttime="20170823 13:41:53.390" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:41:53.394">${output} = </msg>
<status endtime="20170823 13:41:53.394" starttime="20170823 13:41:53.394" status="PASS"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:41:53.395">${loc_quiet} = 1</msg>
<status endtime="20170823 13:41:53.395" starttime="20170823 13:41:53.394" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw name="Cmd Fnc" library="gen_cmd">
<doc>Run the given command in a shell and return the shell return code.</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status endtime="20170823 13:41:53.451" starttime="20170823 13:41:53.396" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:41:53.452">${rc} = 1</msg>
<msg level="INFO" timestamp="20170823 13:41:53.452">${output} = cat: /tmp/9.3.86.161_os_console: No such file or directory
</msg>
<status endtime="20170823 13:41:53.452" starttime="20170823 13:41:53.395" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:41:53.453">${log_output} = cat: /tmp/9.3.86.161_os_console: No such file or directory
</msg>
<status endtime="20170823 13:41:53.453" starttime="20170823 13:41:53.348" status="PASS"></status>
</kw>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:41:53.455" html="yes">Created file '&lt;a href="file:///tmp/9.3.86.161_os_console"&gt;/tmp/9.3.86.161_os_console&lt;/a&gt;'.</msg>
<status endtime="20170823 13:41:53.455" starttime="20170823 13:41:53.454" status="PASS"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${sub_cmd_buf}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:41:53.456">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status endtime="20170823 13:41:53.456" starttime="20170823 13:41:53.456" status="PASS"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170823 13:41:53.457" starttime="20170823 13:41:53.456" status="PASS"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:41:53.460">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170823 13:41:53.463">${rc} = 0</msg>
<msg level="INFO" timestamp="20170823 13:41:53.463">${output} = /tmp/fspcibld/30075/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20170823 13:41:53.463" starttime="20170823 13:41:53.457" status="PASS"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170823 13:41:53.466" starttime="20170823 13:41:53.465" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status endtime="20170823 13:41:53.467" starttime="20170823 13:41:53.466" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:41:53.468">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status endtime="20170823 13:41:53.468" starttime="20170823 13:41:53.467" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:41:53.468">${sub_cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status endtime="20170823 13:41:53.468" starttime="20170823 13:41:53.455" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${sub_cmd_buf} &gt; ${log_file_path} 2&gt;&amp;1 &amp;</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:41:53.469">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161 &gt; /tmp/9.3.86.161_os_console 2&gt;&amp;1 &amp;</msg>
<status endtime="20170823 13:41:53.469" starttime="20170823 13:41:53.469" status="PASS"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170823 13:41:53.470" starttime="20170823 13:41:53.469" status="PASS"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:41:53.474">Running command 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161 &gt; /tmp/9.3.86.161_os_console 2&gt;&amp;1 &amp;'.</msg>
<msg level="INFO" timestamp="20170823 13:41:53.477">${rc} = 0</msg>
<msg level="INFO" timestamp="20170823 13:41:53.477">${output} = </msg>
<status endtime="20170823 13:41:53.477" starttime="20170823 13:41:53.470" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
</arguments>
<status endtime="20170823 13:41:53.480" starttime="20170823 13:41:53.479" status="PASS"></status>
</kw>
<status endtime="20170823 13:41:53.480" starttime="20170823 13:41:53.345" status="PASS"></status>
</kw>
<kw name="Repeat Keyword" library="BuiltIn">
<doc>Executes the specified keyword multiple times.</doc>
<arguments>
<arg>${LOOP_COUNT} times</arg>
<arg>Host Off And On</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:41:53.481">Repeating keyword, round 1/2.</msg>
<kw name="Host Off And On">
<doc>Verify power off and on.</doc>
<kw name="Initiate Host PowerOff" library="state_manager">
<doc>Initiate host power off.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:41:53.483">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status endtime="20170823 13:41:53.483" starttime="20170823 13:41:53.483" status="PASS"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:41:53.485">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status endtime="20170823 13:41:53.485" starttime="20170823 13:41:53.484" status="PASS"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:41:53.489">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 13:41:53.490" starttime="20170823 13:41:53.489" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:41:53.491">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 13:41:53.491" starttime="20170823 13:41:53.491" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:41:53.492">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 13:41:53.492" starttime="20170823 13:41:53.491" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:41:53.492">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 13:41:53.492" starttime="20170823 13:41:53.492" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:41:54.039">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 13:41:54.039" starttime="20170823 13:41:53.493" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:41:54.039">${status} = PASS</msg>
<msg level="INFO" timestamp="20170823 13:41:54.039">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:41:54.039" starttime="20170823 13:41:53.493" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:41:54.040">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:41:54.040" starttime="20170823 13:41:54.040" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:41:54.041">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:41:54.041" starttime="20170823 13:41:54.040" status="PASS"></status>
</kw>
<status endtime="20170823 13:41:54.041" starttime="20170823 13:41:53.488" status="PASS"></status>
</kw>
<status endtime="20170823 13:41:54.041" starttime="20170823 13:41:53.487" status="PASS"></status>
</kw>
<status endtime="20170823 13:41:54.041" starttime="20170823 13:41:53.486" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:41:54.042">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status endtime="20170823 13:41:54.042" starttime="20170823 13:41:54.041" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:41:54.042">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 13:41:54.042" starttime="20170823 13:41:54.042" status="PASS"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20170823 13:41:54.043" starttime="20170823 13:41:54.043" status="PASS"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:41:54.044">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-...</msg>
<status endtime="20170823 13:41:54.045" starttime="20170823 13:41:54.044" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:41:54.045">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20170823 13:41:54.046" starttime="20170823 13:41:54.045" status="PASS"></status>
</kw>
<status endtime="20170823 13:41:54.046" starttime="20170823 13:41:54.045" status="PASS"></status>
</kw>
<status endtime="20170823 13:41:54.046" starttime="20170823 13:41:54.043" status="PASS"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:41:55.647">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20170823 13:41:55.647">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:41:55.647" starttime="20170823 13:41:54.046" status="PASS"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:41:55.648">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:41:55.648" starttime="20170823 13:41:55.648" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:41:55.649">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:41:55.649" starttime="20170823 13:41:55.649" status="PASS"></status>
</kw>
<status endtime="20170823 13:41:55.650" starttime="20170823 13:41:55.649" status="PASS"></status>
</kw>
<status endtime="20170823 13:41:55.650" starttime="20170823 13:41:55.647" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170823 13:41:55.650">Delete All Sessions</msg>
<status endtime="20170823 13:41:55.650" starttime="20170823 13:41:55.650" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:41:55.650">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:41:55.650" starttime="20170823 13:41:53.485" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:41:55.651">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:41:55.651" starttime="20170823 13:41:55.651" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:41:55.652">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170823 13:41:55.652">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170823 13:41:55.652">${json} = {u'message': u'200 OK', u'status': u'ok', u'data': None}</msg>
<status endtime="20170823 13:41:55.652" starttime="20170823 13:41:55.651" status="PASS"></status>
</kw>
<status endtime="20170823 13:41:55.652" starttime="20170823 13:41:53.483" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status endtime="20170823 13:41:55.653" starttime="20170823 13:41:55.652" status="PASS"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>6 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:41:55.657">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 13:41:55.658" starttime="20170823 13:41:55.657" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:41:55.658">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 13:41:55.658" starttime="20170823 13:41:55.658" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:41:55.659">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 13:41:55.659" starttime="20170823 13:41:55.659" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:41:55.660">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 13:41:55.660" starttime="20170823 13:41:55.659" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:41:56.143">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 13:41:56.143" starttime="20170823 13:41:55.661" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:41:56.143">${status} = PASS</msg>
<msg level="INFO" timestamp="20170823 13:41:56.143">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:41:56.143" starttime="20170823 13:41:55.660" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:41:56.144">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:41:56.144" starttime="20170823 13:41:56.143" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:41:56.145">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:41:56.145" starttime="20170823 13:41:56.144" status="PASS"></status>
</kw>
<status endtime="20170823 13:41:56.145" starttime="20170823 13:41:55.656" status="PASS"></status>
</kw>
<status endtime="20170823 13:41:56.145" starttime="20170823 13:41:55.656" status="PASS"></status>
</kw>
<status endtime="20170823 13:41:56.145" starttime="20170823 13:41:55.655" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:41:56.146">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 13:41:56.146" starttime="20170823 13:41:56.146" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:41:56.148">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:41:56.148" starttime="20170823 13:41:56.148" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:41:56.149">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:41:56.149" starttime="20170823 13:41:56.149" status="PASS"></status>
</kw>
<status endtime="20170823 13:41:56.149" starttime="20170823 13:41:56.148" status="PASS"></status>
</kw>
<status endtime="20170823 13:41:56.149" starttime="20170823 13:41:56.147" status="PASS"></status>
</kw>
<status endtime="20170823 13:41:56.150" starttime="20170823 13:41:56.146" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:41:57.437">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170823 13:41:57.437">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:41:57.437" starttime="20170823 13:41:56.150" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:41:57.439">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:41:57.439" starttime="20170823 13:41:57.438" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:41:57.440">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:41:57.440" starttime="20170823 13:41:57.440" status="PASS"></status>
</kw>
<status endtime="20170823 13:41:57.440" starttime="20170823 13:41:57.439" status="PASS"></status>
</kw>
<status endtime="20170823 13:41:57.440" starttime="20170823 13:41:57.438" status="PASS"></status>
</kw>
<status endtime="20170823 13:41:57.440" starttime="20170823 13:41:57.437" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170823 13:41:57.441">Delete All Sessions</msg>
<status endtime="20170823 13:41:57.441" starttime="20170823 13:41:57.441" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:41:57.441">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:41:57.441" starttime="20170823 13:41:55.655" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:41:57.442">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:41:57.442" starttime="20170823 13:41:57.441" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:41:57.442">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170823 13:41:57.442">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170823 13:41:57.442">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170823 13:41:57.442" starttime="20170823 13:41:57.442" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:41:57.443">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170823 13:41:57.443" starttime="20170823 13:41:55.654" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:41:57.443">${power_state} = Off</msg>
<status endtime="20170823 13:41:57.443" starttime="20170823 13:41:55.654" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170823 13:41:57.444" starttime="20170823 13:41:57.444" status="PASS"></status>
</kw>
<status endtime="20170823 13:41:57.444" starttime="20170823 13:41:55.653" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:41:57.448">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 13:41:57.448" starttime="20170823 13:41:57.448" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:41:57.449">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 13:41:57.449" starttime="20170823 13:41:57.449" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:41:57.450">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 13:41:57.450" starttime="20170823 13:41:57.449" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:41:57.450">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 13:41:57.450" starttime="20170823 13:41:57.450" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:41:57.834">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 13:41:57.834" starttime="20170823 13:41:57.451" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:41:57.834">${status} = PASS</msg>
<msg level="INFO" timestamp="20170823 13:41:57.834">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:41:57.834" starttime="20170823 13:41:57.450" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:41:57.835">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:41:57.835" starttime="20170823 13:41:57.834" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:41:57.835">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:41:57.835" starttime="20170823 13:41:57.835" status="PASS"></status>
</kw>
<status endtime="20170823 13:41:57.836" starttime="20170823 13:41:57.447" status="PASS"></status>
</kw>
<status endtime="20170823 13:41:57.836" starttime="20170823 13:41:57.446" status="PASS"></status>
</kw>
<status endtime="20170823 13:41:57.836" starttime="20170823 13:41:57.446" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:41:57.836">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170823 13:41:57.836" starttime="20170823 13:41:57.836" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:41:57.838">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170823 13:41:57.838" starttime="20170823 13:41:57.838" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:41:57.839">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170823 13:41:57.839" starttime="20170823 13:41:57.839" status="PASS"></status>
</kw>
<status endtime="20170823 13:41:57.840" starttime="20170823 13:41:57.839" status="PASS"></status>
</kw>
<status endtime="20170823 13:41:57.840" starttime="20170823 13:41:57.837" status="PASS"></status>
</kw>
<status endtime="20170823 13:41:57.840" starttime="20170823 13:41:57.837" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:41:58.308">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170823 13:41:58.308">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:41:58.309" starttime="20170823 13:41:57.840" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:41:58.313">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:41:58.313" starttime="20170823 13:41:58.310" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:41:58.314">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:41:58.314" starttime="20170823 13:41:58.313" status="PASS"></status>
</kw>
<status endtime="20170823 13:41:58.314" starttime="20170823 13:41:58.313" status="PASS"></status>
</kw>
<status endtime="20170823 13:41:58.314" starttime="20170823 13:41:58.309" status="PASS"></status>
</kw>
<status endtime="20170823 13:41:58.314" starttime="20170823 13:41:58.309" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170823 13:41:58.314">Delete All Sessions</msg>
<status endtime="20170823 13:41:58.315" starttime="20170823 13:41:58.314" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:41:58.315">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:41:58.315" starttime="20170823 13:41:57.445" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:41:58.315">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:41:58.315" starttime="20170823 13:41:58.315" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:41:58.316">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170823 13:41:58.316">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170823 13:41:58.316">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status endtime="20170823 13:41:58.316" starttime="20170823 13:41:58.316" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:41:58.316">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status endtime="20170823 13:41:58.316" starttime="20170823 13:41:57.445" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:41:58.317">${host_state} = Off</msg>
<status endtime="20170823 13:41:58.317" starttime="20170823 13:41:57.444" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170823 13:41:58.317" starttime="20170823 13:41:58.317" status="PASS"></status>
</kw>
<status endtime="20170823 13:41:58.317" starttime="20170823 13:41:55.653" status="PASS"></status>
</kw>
<status endtime="20170823 13:41:58.318" starttime="20170823 13:41:55.653" status="PASS"></status>
</kw>
<status endtime="20170823 13:41:58.318" starttime="20170823 13:41:53.482" status="PASS"></status>
</kw>
<kw name="Initiate Host Boot" library="state_manager">
<doc>Initiate host power on.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWERON_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:41:58.319">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}</msg>
<status endtime="20170823 13:41:58.319" starttime="20170823 13:41:58.319" status="PASS"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:41:58.320">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status endtime="20170823 13:41:58.320" starttime="20170823 13:41:58.320" status="PASS"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:41:58.323">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 13:41:58.324" starttime="20170823 13:41:58.323" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:41:58.325">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 13:41:58.325" starttime="20170823 13:41:58.324" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:41:58.326">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 13:41:58.326" starttime="20170823 13:41:58.325" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:41:58.327">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 13:41:58.327" starttime="20170823 13:41:58.326" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:41:58.827">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 13:41:58.827" starttime="20170823 13:41:58.328" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:41:58.827">${status} = PASS</msg>
<msg level="INFO" timestamp="20170823 13:41:58.827">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:41:58.827" starttime="20170823 13:41:58.327" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:41:58.828">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:41:58.828" starttime="20170823 13:41:58.828" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:41:58.829">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:41:58.829" starttime="20170823 13:41:58.829" status="PASS"></status>
</kw>
<status endtime="20170823 13:41:58.829" starttime="20170823 13:41:58.322" status="PASS"></status>
</kw>
<status endtime="20170823 13:41:58.829" starttime="20170823 13:41:58.322" status="PASS"></status>
</kw>
<status endtime="20170823 13:41:58.830" starttime="20170823 13:41:58.321" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:41:58.830">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status endtime="20170823 13:41:58.831" starttime="20170823 13:41:58.830" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:41:58.831">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 13:41:58.831" starttime="20170823 13:41:58.831" status="PASS"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20170823 13:41:58.832" starttime="20170823 13:41:58.832" status="PASS"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:41:58.835">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-T...</msg>
<status endtime="20170823 13:41:58.835" starttime="20170823 13:41:58.834" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:41:58.836">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20170823 13:41:58.837" starttime="20170823 13:41:58.836" status="PASS"></status>
</kw>
<status endtime="20170823 13:41:58.837" starttime="20170823 13:41:58.835" status="PASS"></status>
</kw>
<status endtime="20170823 13:41:58.837" starttime="20170823 13:41:58.833" status="PASS"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:42:02.063">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.On"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20170823 13:42:02.063">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:42:02.063" starttime="20170823 13:41:58.837" status="PASS"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:42:02.065">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:42:02.065" starttime="20170823 13:42:02.064" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:42:02.066">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:42:02.066" starttime="20170823 13:42:02.066" status="PASS"></status>
</kw>
<status endtime="20170823 13:42:02.066" starttime="20170823 13:42:02.065" status="PASS"></status>
</kw>
<status endtime="20170823 13:42:02.066" starttime="20170823 13:42:02.064" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170823 13:42:02.066">Delete All Sessions</msg>
<status endtime="20170823 13:42:02.067" starttime="20170823 13:42:02.066" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:42:02.067">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:42:02.067" starttime="20170823 13:41:58.320" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:42:02.068">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:42:02.068" starttime="20170823 13:42:02.067" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:42:02.068">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170823 13:42:02.068">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170823 13:42:02.068">${json} = {u'message': u'200 OK', u'status': u'ok', u'data': None}</msg>
<status endtime="20170823 13:42:02.068" starttime="20170823 13:42:02.068" status="PASS"></status>
</kw>
<status endtime="20170823 13:42:02.069" starttime="20170823 13:41:58.319" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status endtime="20170823 13:42:02.069" starttime="20170823 13:42:02.069" status="PASS"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is Host Running</arg>
</arguments>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:42:02.074">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 13:42:02.074" starttime="20170823 13:42:02.073" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:42:02.075">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 13:42:02.075" starttime="20170823 13:42:02.075" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:42:02.076">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 13:42:02.076" starttime="20170823 13:42:02.075" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:42:02.076">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 13:42:02.076" starttime="20170823 13:42:02.076" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:42:03.119">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 13:42:03.119" starttime="20170823 13:42:02.077" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:42:03.120">${status} = PASS</msg>
<msg level="INFO" timestamp="20170823 13:42:03.120">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:42:03.120" starttime="20170823 13:42:02.077" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:42:03.120">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:42:03.120" starttime="20170823 13:42:03.120" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:42:03.121">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:42:03.121" starttime="20170823 13:42:03.121" status="PASS"></status>
</kw>
<status endtime="20170823 13:42:03.121" starttime="20170823 13:42:02.073" status="PASS"></status>
</kw>
<status endtime="20170823 13:42:03.121" starttime="20170823 13:42:02.073" status="PASS"></status>
</kw>
<status endtime="20170823 13:42:03.121" starttime="20170823 13:42:02.072" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:42:03.122">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 13:42:03.122" starttime="20170823 13:42:03.122" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:42:03.124">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:42:03.124" starttime="20170823 13:42:03.123" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:42:03.125">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:42:03.125" starttime="20170823 13:42:03.125" status="PASS"></status>
</kw>
<status endtime="20170823 13:42:03.125" starttime="20170823 13:42:03.124" status="PASS"></status>
</kw>
<status endtime="20170823 13:42:03.126" starttime="20170823 13:42:03.123" status="PASS"></status>
</kw>
<status endtime="20170823 13:42:03.126" starttime="20170823 13:42:03.122" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:42:12.233">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170823 13:42:12.233">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:42:12.233" starttime="20170823 13:42:03.126" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:42:12.235">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:42:12.235" starttime="20170823 13:42:12.234" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:42:12.236">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:42:12.236" starttime="20170823 13:42:12.236" status="PASS"></status>
</kw>
<status endtime="20170823 13:42:12.236" starttime="20170823 13:42:12.235" status="PASS"></status>
</kw>
<status endtime="20170823 13:42:12.236" starttime="20170823 13:42:12.234" status="PASS"></status>
</kw>
<status endtime="20170823 13:42:12.236" starttime="20170823 13:42:12.233" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170823 13:42:12.237">Delete All Sessions</msg>
<status endtime="20170823 13:42:12.237" starttime="20170823 13:42:12.237" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:42:12.237">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:42:12.237" starttime="20170823 13:42:02.071" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:42:12.238">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:42:12.238" starttime="20170823 13:42:12.238" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:42:12.238">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170823 13:42:12.239">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170823 13:42:12.239">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170823 13:42:12.239" starttime="20170823 13:42:12.238" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:42:12.239">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170823 13:42:12.239" starttime="20170823 13:42:02.071" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:42:12.239">${power_state} = Off</msg>
<status endtime="20170823 13:42:12.239" starttime="20170823 13:42:02.070" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170823 13:42:12.240">On != Off</msg>
<status endtime="20170823 13:42:12.240" starttime="20170823 13:42:12.240" status="FAIL"></status>
</kw>
<status endtime="20170823 13:42:12.240" starttime="20170823 13:42:02.070" status="FAIL"></status>
</kw>
<status endtime="20170823 13:42:12.240" starttime="20170823 13:42:02.070" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:42:22.246">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 13:42:22.247" starttime="20170823 13:42:22.246" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:42:22.247">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 13:42:22.247" starttime="20170823 13:42:22.247" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:42:22.248">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 13:42:22.248" starttime="20170823 13:42:22.248" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:42:22.249">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 13:42:22.249" starttime="20170823 13:42:22.248" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:42:22.453">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 13:42:22.453" starttime="20170823 13:42:22.249" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:42:22.453">${status} = PASS</msg>
<msg level="INFO" timestamp="20170823 13:42:22.453">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:42:22.453" starttime="20170823 13:42:22.249" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:42:22.454">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:42:22.454" starttime="20170823 13:42:22.454" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:42:22.455">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:42:22.455" starttime="20170823 13:42:22.454" status="PASS"></status>
</kw>
<status endtime="20170823 13:42:22.455" starttime="20170823 13:42:22.245" status="PASS"></status>
</kw>
<status endtime="20170823 13:42:22.455" starttime="20170823 13:42:22.245" status="PASS"></status>
</kw>
<status endtime="20170823 13:42:22.455" starttime="20170823 13:42:22.244" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:42:22.456">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 13:42:22.456" starttime="20170823 13:42:22.455" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:42:22.458">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:42:22.458" starttime="20170823 13:42:22.457" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:42:22.459">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:42:22.459" starttime="20170823 13:42:22.459" status="PASS"></status>
</kw>
<status endtime="20170823 13:42:22.459" starttime="20170823 13:42:22.458" status="PASS"></status>
</kw>
<status endtime="20170823 13:42:22.459" starttime="20170823 13:42:22.456" status="PASS"></status>
</kw>
<status endtime="20170823 13:42:22.459" starttime="20170823 13:42:22.456" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:42:22.523">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170823 13:42:22.523">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:42:22.524" starttime="20170823 13:42:22.460" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:42:22.525">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:42:22.525" starttime="20170823 13:42:22.525" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:42:22.526">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:42:22.526" starttime="20170823 13:42:22.526" status="PASS"></status>
</kw>
<status endtime="20170823 13:42:22.527" starttime="20170823 13:42:22.526" status="PASS"></status>
</kw>
<status endtime="20170823 13:42:22.527" starttime="20170823 13:42:22.524" status="PASS"></status>
</kw>
<status endtime="20170823 13:42:22.527" starttime="20170823 13:42:22.524" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170823 13:42:22.527">Delete All Sessions</msg>
<status endtime="20170823 13:42:22.527" starttime="20170823 13:42:22.527" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:42:22.527">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:42:22.528" starttime="20170823 13:42:22.243" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:42:22.528">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:42:22.528" starttime="20170823 13:42:22.528" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:42:22.529">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170823 13:42:22.529">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170823 13:42:22.529">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170823 13:42:22.529" starttime="20170823 13:42:22.528" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:42:22.529">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170823 13:42:22.529" starttime="20170823 13:42:22.243" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:42:22.530">${power_state} = Off</msg>
<status endtime="20170823 13:42:22.530" starttime="20170823 13:42:22.242" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170823 13:42:22.530">On != Off</msg>
<status endtime="20170823 13:42:22.530" starttime="20170823 13:42:22.530" status="FAIL"></status>
</kw>
<status endtime="20170823 13:42:22.530" starttime="20170823 13:42:22.242" status="FAIL"></status>
</kw>
<status endtime="20170823 13:42:22.531" starttime="20170823 13:42:22.241" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:42:32.536">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 13:42:32.536" starttime="20170823 13:42:32.535" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:42:32.537">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 13:42:32.537" starttime="20170823 13:42:32.536" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:42:32.537">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 13:42:32.538" starttime="20170823 13:42:32.537" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:42:32.538">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 13:42:32.538" starttime="20170823 13:42:32.538" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:42:32.719">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 13:42:32.719" starttime="20170823 13:42:32.540" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:42:32.720">${status} = PASS</msg>
<msg level="INFO" timestamp="20170823 13:42:32.720">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:42:32.720" starttime="20170823 13:42:32.538" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:42:32.720">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:42:32.721" starttime="20170823 13:42:32.720" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:42:32.721">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:42:32.721" starttime="20170823 13:42:32.721" status="PASS"></status>
</kw>
<status endtime="20170823 13:42:32.722" starttime="20170823 13:42:32.535" status="PASS"></status>
</kw>
<status endtime="20170823 13:42:32.722" starttime="20170823 13:42:32.534" status="PASS"></status>
</kw>
<status endtime="20170823 13:42:32.722" starttime="20170823 13:42:32.534" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:42:32.722">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 13:42:32.722" starttime="20170823 13:42:32.722" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:42:32.724">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:42:32.724" starttime="20170823 13:42:32.724" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:42:32.725">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:42:32.725" starttime="20170823 13:42:32.725" status="PASS"></status>
</kw>
<status endtime="20170823 13:42:32.726" starttime="20170823 13:42:32.725" status="PASS"></status>
</kw>
<status endtime="20170823 13:42:32.726" starttime="20170823 13:42:32.723" status="PASS"></status>
</kw>
<status endtime="20170823 13:42:32.726" starttime="20170823 13:42:32.723" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:42:33.744">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170823 13:42:33.744">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:42:33.744" starttime="20170823 13:42:32.726" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:42:33.746">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:42:33.746" starttime="20170823 13:42:33.745" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:42:33.748">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:42:33.748" starttime="20170823 13:42:33.747" status="PASS"></status>
</kw>
<status endtime="20170823 13:42:33.748" starttime="20170823 13:42:33.746" status="PASS"></status>
</kw>
<status endtime="20170823 13:42:33.748" starttime="20170823 13:42:33.745" status="PASS"></status>
</kw>
<status endtime="20170823 13:42:33.748" starttime="20170823 13:42:33.744" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170823 13:42:33.749">Delete All Sessions</msg>
<status endtime="20170823 13:42:33.749" starttime="20170823 13:42:33.748" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:42:33.749">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:42:33.749" starttime="20170823 13:42:32.533" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:42:33.749">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:42:33.750" starttime="20170823 13:42:33.749" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:42:33.750">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170823 13:42:33.750">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170823 13:42:33.750">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170823 13:42:33.750" starttime="20170823 13:42:33.750" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:42:33.751">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170823 13:42:33.751" starttime="20170823 13:42:32.532" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:42:33.751">${power_state} = Off</msg>
<status endtime="20170823 13:42:33.751" starttime="20170823 13:42:32.532" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170823 13:42:33.752">On != Off</msg>
<status endtime="20170823 13:42:33.752" starttime="20170823 13:42:33.751" status="FAIL"></status>
</kw>
<status endtime="20170823 13:42:33.752" starttime="20170823 13:42:32.532" status="FAIL"></status>
</kw>
<status endtime="20170823 13:42:33.752" starttime="20170823 13:42:32.531" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:42:43.758">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 13:42:43.758" starttime="20170823 13:42:43.757" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:42:43.759">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 13:42:43.759" starttime="20170823 13:42:43.759" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:42:43.760">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 13:42:43.760" starttime="20170823 13:42:43.759" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:42:43.760">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 13:42:43.760" starttime="20170823 13:42:43.760" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:42:43.935">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 13:42:43.935" starttime="20170823 13:42:43.761" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:42:43.935">${status} = PASS</msg>
<msg level="INFO" timestamp="20170823 13:42:43.935">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:42:43.935" starttime="20170823 13:42:43.761" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:42:43.936">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:42:43.936" starttime="20170823 13:42:43.936" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:42:43.937">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:42:43.937" starttime="20170823 13:42:43.936" status="PASS"></status>
</kw>
<status endtime="20170823 13:42:43.937" starttime="20170823 13:42:43.757" status="PASS"></status>
</kw>
<status endtime="20170823 13:42:43.937" starttime="20170823 13:42:43.756" status="PASS"></status>
</kw>
<status endtime="20170823 13:42:43.937" starttime="20170823 13:42:43.755" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:42:43.938">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 13:42:43.938" starttime="20170823 13:42:43.938" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:42:43.940">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:42:43.940" starttime="20170823 13:42:43.940" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:42:43.941">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:42:43.941" starttime="20170823 13:42:43.941" status="PASS"></status>
</kw>
<status endtime="20170823 13:42:43.941" starttime="20170823 13:42:43.940" status="PASS"></status>
</kw>
<status endtime="20170823 13:42:43.942" starttime="20170823 13:42:43.939" status="PASS"></status>
</kw>
<status endtime="20170823 13:42:43.942" starttime="20170823 13:42:43.938" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:42:44.004">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170823 13:42:44.004">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:42:44.004" starttime="20170823 13:42:43.942" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:42:44.007">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:42:44.007" starttime="20170823 13:42:44.006" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:42:44.008">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:42:44.008" starttime="20170823 13:42:44.007" status="PASS"></status>
</kw>
<status endtime="20170823 13:42:44.008" starttime="20170823 13:42:44.007" status="PASS"></status>
</kw>
<status endtime="20170823 13:42:44.008" starttime="20170823 13:42:44.005" status="PASS"></status>
</kw>
<status endtime="20170823 13:42:44.008" starttime="20170823 13:42:44.005" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170823 13:42:44.009">Delete All Sessions</msg>
<status endtime="20170823 13:42:44.009" starttime="20170823 13:42:44.008" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:42:44.009">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:42:44.009" starttime="20170823 13:42:43.755" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:42:44.009">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:42:44.010" starttime="20170823 13:42:44.009" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:42:44.010">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170823 13:42:44.010">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170823 13:42:44.010">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170823 13:42:44.010" starttime="20170823 13:42:44.010" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:42:44.010">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170823 13:42:44.011" starttime="20170823 13:42:43.754" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:42:44.011">${power_state} = Off</msg>
<status endtime="20170823 13:42:44.011" starttime="20170823 13:42:43.754" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170823 13:42:44.011">On != Off</msg>
<status endtime="20170823 13:42:44.012" starttime="20170823 13:42:44.011" status="FAIL"></status>
</kw>
<status endtime="20170823 13:42:44.012" starttime="20170823 13:42:43.753" status="FAIL"></status>
</kw>
<status endtime="20170823 13:42:44.012" starttime="20170823 13:42:43.753" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:42:54.018">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 13:42:54.019" starttime="20170823 13:42:54.018" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:42:54.020">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 13:42:54.020" starttime="20170823 13:42:54.019" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:42:54.021">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 13:42:54.021" starttime="20170823 13:42:54.020" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:42:54.022">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 13:42:54.022" starttime="20170823 13:42:54.021" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:42:54.199">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 13:42:54.199" starttime="20170823 13:42:54.023" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:42:54.199">${status} = PASS</msg>
<msg level="INFO" timestamp="20170823 13:42:54.199">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:42:54.199" starttime="20170823 13:42:54.022" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:42:54.200">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:42:54.200" starttime="20170823 13:42:54.200" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:42:54.201">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:42:54.201" starttime="20170823 13:42:54.201" status="PASS"></status>
</kw>
<status endtime="20170823 13:42:54.201" starttime="20170823 13:42:54.017" status="PASS"></status>
</kw>
<status endtime="20170823 13:42:54.201" starttime="20170823 13:42:54.016" status="PASS"></status>
</kw>
<status endtime="20170823 13:42:54.201" starttime="20170823 13:42:54.015" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:42:54.202">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 13:42:54.202" starttime="20170823 13:42:54.202" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:42:54.204">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:42:54.204" starttime="20170823 13:42:54.203" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:42:54.205">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:42:54.205" starttime="20170823 13:42:54.205" status="PASS"></status>
</kw>
<status endtime="20170823 13:42:54.205" starttime="20170823 13:42:54.204" status="PASS"></status>
</kw>
<status endtime="20170823 13:42:54.205" starttime="20170823 13:42:54.203" status="PASS"></status>
</kw>
<status endtime="20170823 13:42:54.205" starttime="20170823 13:42:54.202" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:42:54.269">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170823 13:42:54.269">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:42:54.269" starttime="20170823 13:42:54.206" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:42:54.271">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:42:54.271" starttime="20170823 13:42:54.270" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:42:54.271">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:42:54.272" starttime="20170823 13:42:54.271" status="PASS"></status>
</kw>
<status endtime="20170823 13:42:54.272" starttime="20170823 13:42:54.271" status="PASS"></status>
</kw>
<status endtime="20170823 13:42:54.272" starttime="20170823 13:42:54.270" status="PASS"></status>
</kw>
<status endtime="20170823 13:42:54.272" starttime="20170823 13:42:54.269" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170823 13:42:54.272">Delete All Sessions</msg>
<status endtime="20170823 13:42:54.272" starttime="20170823 13:42:54.272" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:42:54.273">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:42:54.273" starttime="20170823 13:42:54.014" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:42:54.273">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:42:54.273" starttime="20170823 13:42:54.273" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:42:54.274">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170823 13:42:54.274">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170823 13:42:54.274">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170823 13:42:54.274" starttime="20170823 13:42:54.274" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:42:54.274">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170823 13:42:54.274" starttime="20170823 13:42:54.014" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:42:54.275">${power_state} = Off</msg>
<status endtime="20170823 13:42:54.275" starttime="20170823 13:42:54.013" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170823 13:42:54.275">On != Off</msg>
<status endtime="20170823 13:42:54.275" starttime="20170823 13:42:54.275" status="FAIL"></status>
</kw>
<status endtime="20170823 13:42:54.276" starttime="20170823 13:42:54.013" status="FAIL"></status>
</kw>
<status endtime="20170823 13:42:54.276" starttime="20170823 13:42:54.012" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:43:04.281">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 13:43:04.282" starttime="20170823 13:43:04.281" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:43:04.282">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 13:43:04.282" starttime="20170823 13:43:04.282" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:43:04.283">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 13:43:04.283" starttime="20170823 13:43:04.283" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:43:04.284">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 13:43:04.284" starttime="20170823 13:43:04.283" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:43:04.460">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 13:43:04.460" starttime="20170823 13:43:04.285" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:43:04.460">${status} = PASS</msg>
<msg level="INFO" timestamp="20170823 13:43:04.460">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:43:04.460" starttime="20170823 13:43:04.284" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:43:04.461">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:43:04.461" starttime="20170823 13:43:04.461" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:43:04.462">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:43:04.462" starttime="20170823 13:43:04.461" status="PASS"></status>
</kw>
<status endtime="20170823 13:43:04.462" starttime="20170823 13:43:04.280" status="PASS"></status>
</kw>
<status endtime="20170823 13:43:04.462" starttime="20170823 13:43:04.280" status="PASS"></status>
</kw>
<status endtime="20170823 13:43:04.462" starttime="20170823 13:43:04.279" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:43:04.463">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 13:43:04.463" starttime="20170823 13:43:04.462" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:43:04.465">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:43:04.465" starttime="20170823 13:43:04.464" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:43:04.466">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:43:04.466" starttime="20170823 13:43:04.466" status="PASS"></status>
</kw>
<status endtime="20170823 13:43:04.466" starttime="20170823 13:43:04.465" status="PASS"></status>
</kw>
<status endtime="20170823 13:43:04.466" starttime="20170823 13:43:04.463" status="PASS"></status>
</kw>
<status endtime="20170823 13:43:04.466" starttime="20170823 13:43:04.463" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:43:04.530">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170823 13:43:04.531">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:43:04.531" starttime="20170823 13:43:04.466" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:43:04.532">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:43:04.532" starttime="20170823 13:43:04.532" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:43:04.534">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:43:04.534" starttime="20170823 13:43:04.533" status="PASS"></status>
</kw>
<status endtime="20170823 13:43:04.534" starttime="20170823 13:43:04.533" status="PASS"></status>
</kw>
<status endtime="20170823 13:43:04.534" starttime="20170823 13:43:04.531" status="PASS"></status>
</kw>
<status endtime="20170823 13:43:04.534" starttime="20170823 13:43:04.531" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170823 13:43:04.534">Delete All Sessions</msg>
<status endtime="20170823 13:43:04.535" starttime="20170823 13:43:04.534" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:43:04.535">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:43:04.535" starttime="20170823 13:43:04.278" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:43:04.535">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:43:04.535" starttime="20170823 13:43:04.535" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:43:04.536">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170823 13:43:04.536">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170823 13:43:04.536">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170823 13:43:04.536" starttime="20170823 13:43:04.536" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:43:04.536">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170823 13:43:04.536" starttime="20170823 13:43:04.278" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:43:04.537">${power_state} = Off</msg>
<status endtime="20170823 13:43:04.537" starttime="20170823 13:43:04.277" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170823 13:43:04.537">On != Off</msg>
<status endtime="20170823 13:43:04.538" starttime="20170823 13:43:04.537" status="FAIL"></status>
</kw>
<status endtime="20170823 13:43:04.538" starttime="20170823 13:43:04.277" status="FAIL"></status>
</kw>
<status endtime="20170823 13:43:04.538" starttime="20170823 13:43:04.276" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:43:14.543">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 13:43:14.544" starttime="20170823 13:43:14.543" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:43:14.544">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 13:43:14.545" starttime="20170823 13:43:14.544" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:43:14.545">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 13:43:14.545" starttime="20170823 13:43:14.545" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:43:14.546">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 13:43:14.546" starttime="20170823 13:43:14.546" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:43:14.725">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 13:43:14.725" starttime="20170823 13:43:14.547" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:43:14.725">${status} = PASS</msg>
<msg level="INFO" timestamp="20170823 13:43:14.725">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:43:14.725" starttime="20170823 13:43:14.546" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:43:14.726">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:43:14.726" starttime="20170823 13:43:14.726" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:43:14.727">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:43:14.727" starttime="20170823 13:43:14.726" status="PASS"></status>
</kw>
<status endtime="20170823 13:43:14.727" starttime="20170823 13:43:14.542" status="PASS"></status>
</kw>
<status endtime="20170823 13:43:14.727" starttime="20170823 13:43:14.542" status="PASS"></status>
</kw>
<status endtime="20170823 13:43:14.727" starttime="20170823 13:43:14.541" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:43:14.728">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 13:43:14.728" starttime="20170823 13:43:14.727" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:43:14.730">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:43:14.730" starttime="20170823 13:43:14.729" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:43:14.731">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:43:14.731" starttime="20170823 13:43:14.731" status="PASS"></status>
</kw>
<status endtime="20170823 13:43:14.731" starttime="20170823 13:43:14.730" status="PASS"></status>
</kw>
<status endtime="20170823 13:43:14.731" starttime="20170823 13:43:14.728" status="PASS"></status>
</kw>
<status endtime="20170823 13:43:14.731" starttime="20170823 13:43:14.728" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:43:14.815">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170823 13:43:14.815">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:43:14.815" starttime="20170823 13:43:14.731" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:43:14.817">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:43:14.817" starttime="20170823 13:43:14.817" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:43:14.818">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:43:14.818" starttime="20170823 13:43:14.818" status="PASS"></status>
</kw>
<status endtime="20170823 13:43:14.818" starttime="20170823 13:43:14.817" status="PASS"></status>
</kw>
<status endtime="20170823 13:43:14.819" starttime="20170823 13:43:14.816" status="PASS"></status>
</kw>
<status endtime="20170823 13:43:14.819" starttime="20170823 13:43:14.816" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170823 13:43:14.819">Delete All Sessions</msg>
<status endtime="20170823 13:43:14.819" starttime="20170823 13:43:14.819" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:43:14.819">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:43:14.819" starttime="20170823 13:43:14.541" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:43:14.820">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:43:14.820" starttime="20170823 13:43:14.820" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:43:14.821">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170823 13:43:14.821">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170823 13:43:14.821">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170823 13:43:14.821" starttime="20170823 13:43:14.820" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:43:14.821">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170823 13:43:14.821" starttime="20170823 13:43:14.540" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:43:14.821">${power_state} = Off</msg>
<status endtime="20170823 13:43:14.821" starttime="20170823 13:43:14.540" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170823 13:43:14.822">On != Off</msg>
<status endtime="20170823 13:43:14.822" starttime="20170823 13:43:14.822" status="FAIL"></status>
</kw>
<status endtime="20170823 13:43:14.822" starttime="20170823 13:43:14.539" status="FAIL"></status>
</kw>
<status endtime="20170823 13:43:14.822" starttime="20170823 13:43:14.539" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:43:24.833">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 13:43:24.834" starttime="20170823 13:43:24.833" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:43:24.835">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 13:43:24.835" starttime="20170823 13:43:24.834" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:43:24.836">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 13:43:24.836" starttime="20170823 13:43:24.835" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:43:24.837">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 13:43:24.837" starttime="20170823 13:43:24.836" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:43:25.041">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 13:43:25.041" starttime="20170823 13:43:24.838" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:43:25.041">${status} = PASS</msg>
<msg level="INFO" timestamp="20170823 13:43:25.041">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:43:25.041" starttime="20170823 13:43:24.837" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:43:25.042">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:43:25.042" starttime="20170823 13:43:25.041" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:43:25.042">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:43:25.043" starttime="20170823 13:43:25.042" status="PASS"></status>
</kw>
<status endtime="20170823 13:43:25.043" starttime="20170823 13:43:24.829" status="PASS"></status>
</kw>
<status endtime="20170823 13:43:25.043" starttime="20170823 13:43:24.828" status="PASS"></status>
</kw>
<status endtime="20170823 13:43:25.043" starttime="20170823 13:43:24.827" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:43:25.044">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 13:43:25.044" starttime="20170823 13:43:25.043" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:43:25.046">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:43:25.046" starttime="20170823 13:43:25.045" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:43:25.047">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:43:25.047" starttime="20170823 13:43:25.046" status="PASS"></status>
</kw>
<status endtime="20170823 13:43:25.047" starttime="20170823 13:43:25.046" status="PASS"></status>
</kw>
<status endtime="20170823 13:43:25.047" starttime="20170823 13:43:25.044" status="PASS"></status>
</kw>
<status endtime="20170823 13:43:25.047" starttime="20170823 13:43:25.044" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:43:25.119">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170823 13:43:25.119">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:43:25.119" starttime="20170823 13:43:25.047" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:43:25.121">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:43:25.121" starttime="20170823 13:43:25.120" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:43:25.122">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:43:25.122" starttime="20170823 13:43:25.122" status="PASS"></status>
</kw>
<status endtime="20170823 13:43:25.122" starttime="20170823 13:43:25.121" status="PASS"></status>
</kw>
<status endtime="20170823 13:43:25.122" starttime="20170823 13:43:25.120" status="PASS"></status>
</kw>
<status endtime="20170823 13:43:25.122" starttime="20170823 13:43:25.119" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170823 13:43:25.123">Delete All Sessions</msg>
<status endtime="20170823 13:43:25.123" starttime="20170823 13:43:25.123" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:43:25.123">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:43:25.123" starttime="20170823 13:43:24.826" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:43:25.124">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:43:25.124" starttime="20170823 13:43:25.123" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:43:25.124">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170823 13:43:25.124">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170823 13:43:25.124">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170823 13:43:25.124" starttime="20170823 13:43:25.124" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:43:25.125">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170823 13:43:25.125" starttime="20170823 13:43:24.825" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:43:25.125">${power_state} = Off</msg>
<status endtime="20170823 13:43:25.125" starttime="20170823 13:43:24.825" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170823 13:43:25.126">On != Off</msg>
<status endtime="20170823 13:43:25.126" starttime="20170823 13:43:25.125" status="FAIL"></status>
</kw>
<status endtime="20170823 13:43:25.126" starttime="20170823 13:43:24.824" status="FAIL"></status>
</kw>
<status endtime="20170823 13:43:25.126" starttime="20170823 13:43:24.823" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:43:35.131">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 13:43:35.132" starttime="20170823 13:43:35.131" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:43:35.132">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 13:43:35.132" starttime="20170823 13:43:35.132" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:43:35.133">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 13:43:35.133" starttime="20170823 13:43:35.133" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:43:35.134">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 13:43:35.134" starttime="20170823 13:43:35.133" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:43:35.325">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 13:43:35.325" starttime="20170823 13:43:35.134" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:43:35.325">${status} = PASS</msg>
<msg level="INFO" timestamp="20170823 13:43:35.325">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:43:35.326" starttime="20170823 13:43:35.134" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:43:35.326">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:43:35.326" starttime="20170823 13:43:35.326" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:43:35.327">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:43:35.327" starttime="20170823 13:43:35.326" status="PASS"></status>
</kw>
<status endtime="20170823 13:43:35.327" starttime="20170823 13:43:35.130" status="PASS"></status>
</kw>
<status endtime="20170823 13:43:35.327" starttime="20170823 13:43:35.130" status="PASS"></status>
</kw>
<status endtime="20170823 13:43:35.327" starttime="20170823 13:43:35.129" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:43:35.328">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 13:43:35.328" starttime="20170823 13:43:35.327" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:43:35.330">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:43:35.330" starttime="20170823 13:43:35.329" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:43:35.331">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:43:35.331" starttime="20170823 13:43:35.331" status="PASS"></status>
</kw>
<status endtime="20170823 13:43:35.331" starttime="20170823 13:43:35.330" status="PASS"></status>
</kw>
<status endtime="20170823 13:43:35.331" starttime="20170823 13:43:35.329" status="PASS"></status>
</kw>
<status endtime="20170823 13:43:35.331" starttime="20170823 13:43:35.328" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:43:35.399">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170823 13:43:35.399">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:43:35.399" starttime="20170823 13:43:35.332" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:43:35.401">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:43:35.401" starttime="20170823 13:43:35.401" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:43:35.402">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:43:35.402" starttime="20170823 13:43:35.402" status="PASS"></status>
</kw>
<status endtime="20170823 13:43:35.402" starttime="20170823 13:43:35.401" status="PASS"></status>
</kw>
<status endtime="20170823 13:43:35.402" starttime="20170823 13:43:35.400" status="PASS"></status>
</kw>
<status endtime="20170823 13:43:35.402" starttime="20170823 13:43:35.400" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170823 13:43:35.403">Delete All Sessions</msg>
<status endtime="20170823 13:43:35.403" starttime="20170823 13:43:35.403" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:43:35.403">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:43:35.403" starttime="20170823 13:43:35.129" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:43:35.404">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:43:35.404" starttime="20170823 13:43:35.403" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:43:35.404">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170823 13:43:35.404">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170823 13:43:35.404">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170823 13:43:35.405" starttime="20170823 13:43:35.404" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:43:35.405">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170823 13:43:35.405" starttime="20170823 13:43:35.128" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:43:35.405">${power_state} = Off</msg>
<status endtime="20170823 13:43:35.405" starttime="20170823 13:43:35.128" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170823 13:43:35.406">On != Off</msg>
<status endtime="20170823 13:43:35.406" starttime="20170823 13:43:35.405" status="FAIL"></status>
</kw>
<status endtime="20170823 13:43:35.406" starttime="20170823 13:43:35.127" status="FAIL"></status>
</kw>
<status endtime="20170823 13:43:35.406" starttime="20170823 13:43:35.127" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:43:45.412">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 13:43:45.412" starttime="20170823 13:43:45.411" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:43:45.413">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 13:43:45.413" starttime="20170823 13:43:45.412" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:43:45.413">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 13:43:45.413" starttime="20170823 13:43:45.413" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:43:45.414">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 13:43:45.414" starttime="20170823 13:43:45.414" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:43:45.604">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 13:43:45.605" starttime="20170823 13:43:45.415" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:43:45.605">${status} = PASS</msg>
<msg level="INFO" timestamp="20170823 13:43:45.605">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:43:45.605" starttime="20170823 13:43:45.414" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:43:45.606">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:43:45.606" starttime="20170823 13:43:45.605" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:43:45.606">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:43:45.606" starttime="20170823 13:43:45.606" status="PASS"></status>
</kw>
<status endtime="20170823 13:43:45.607" starttime="20170823 13:43:45.410" status="PASS"></status>
</kw>
<status endtime="20170823 13:43:45.607" starttime="20170823 13:43:45.410" status="PASS"></status>
</kw>
<status endtime="20170823 13:43:45.607" starttime="20170823 13:43:45.409" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:43:45.607">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 13:43:45.607" starttime="20170823 13:43:45.607" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:43:45.609">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:43:45.609" starttime="20170823 13:43:45.609" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:43:45.610">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:43:45.610" starttime="20170823 13:43:45.610" status="PASS"></status>
</kw>
<status endtime="20170823 13:43:45.611" starttime="20170823 13:43:45.610" status="PASS"></status>
</kw>
<status endtime="20170823 13:43:45.611" starttime="20170823 13:43:45.608" status="PASS"></status>
</kw>
<status endtime="20170823 13:43:45.611" starttime="20170823 13:43:45.608" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:43:45.674">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170823 13:43:45.674">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:43:45.674" starttime="20170823 13:43:45.611" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:43:45.676">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:43:45.676" starttime="20170823 13:43:45.675" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:43:45.677">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:43:45.677" starttime="20170823 13:43:45.677" status="PASS"></status>
</kw>
<status endtime="20170823 13:43:45.677" starttime="20170823 13:43:45.676" status="PASS"></status>
</kw>
<status endtime="20170823 13:43:45.678" starttime="20170823 13:43:45.675" status="PASS"></status>
</kw>
<status endtime="20170823 13:43:45.678" starttime="20170823 13:43:45.674" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170823 13:43:45.678">Delete All Sessions</msg>
<status endtime="20170823 13:43:45.678" starttime="20170823 13:43:45.678" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:43:45.678">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:43:45.678" starttime="20170823 13:43:45.409" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:43:45.679">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:43:45.679" starttime="20170823 13:43:45.679" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:43:45.680">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170823 13:43:45.680">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170823 13:43:45.680">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170823 13:43:45.680" starttime="20170823 13:43:45.679" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:43:45.680">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170823 13:43:45.680" starttime="20170823 13:43:45.408" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:43:45.680">${power_state} = Off</msg>
<status endtime="20170823 13:43:45.680" starttime="20170823 13:43:45.408" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170823 13:43:45.681">On != Off</msg>
<status endtime="20170823 13:43:45.681" starttime="20170823 13:43:45.681" status="FAIL"></status>
</kw>
<status endtime="20170823 13:43:45.681" starttime="20170823 13:43:45.407" status="FAIL"></status>
</kw>
<status endtime="20170823 13:43:45.682" starttime="20170823 13:43:45.407" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:43:55.687">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 13:43:55.687" starttime="20170823 13:43:55.686" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:43:55.688">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 13:43:55.688" starttime="20170823 13:43:55.687" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:43:55.688">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 13:43:55.688" starttime="20170823 13:43:55.688" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:43:55.689">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 13:43:55.689" starttime="20170823 13:43:55.689" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:43:55.885">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 13:43:55.885" starttime="20170823 13:43:55.690" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:43:55.885">${status} = PASS</msg>
<msg level="INFO" timestamp="20170823 13:43:55.885">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:43:55.885" starttime="20170823 13:43:55.689" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:43:55.886">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:43:55.886" starttime="20170823 13:43:55.885" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:43:55.886">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:43:55.887" starttime="20170823 13:43:55.886" status="PASS"></status>
</kw>
<status endtime="20170823 13:43:55.887" starttime="20170823 13:43:55.686" status="PASS"></status>
</kw>
<status endtime="20170823 13:43:55.887" starttime="20170823 13:43:55.685" status="PASS"></status>
</kw>
<status endtime="20170823 13:43:55.887" starttime="20170823 13:43:55.685" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:43:55.887">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 13:43:55.887" starttime="20170823 13:43:55.887" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:43:55.890">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:43:55.890" starttime="20170823 13:43:55.889" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:43:55.891">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:43:55.891" starttime="20170823 13:43:55.890" status="PASS"></status>
</kw>
<status endtime="20170823 13:43:55.891" starttime="20170823 13:43:55.890" status="PASS"></status>
</kw>
<status endtime="20170823 13:43:55.891" starttime="20170823 13:43:55.888" status="PASS"></status>
</kw>
<status endtime="20170823 13:43:55.891" starttime="20170823 13:43:55.888" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:43:55.954">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170823 13:43:55.954">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:43:55.954" starttime="20170823 13:43:55.891" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:43:55.956">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:43:55.956" starttime="20170823 13:43:55.955" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:43:55.957">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:43:55.957" starttime="20170823 13:43:55.957" status="PASS"></status>
</kw>
<status endtime="20170823 13:43:55.957" starttime="20170823 13:43:55.956" status="PASS"></status>
</kw>
<status endtime="20170823 13:43:55.957" starttime="20170823 13:43:55.955" status="PASS"></status>
</kw>
<status endtime="20170823 13:43:55.957" starttime="20170823 13:43:55.954" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170823 13:43:55.958">Delete All Sessions</msg>
<status endtime="20170823 13:43:55.958" starttime="20170823 13:43:55.957" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:43:55.958">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:43:55.958" starttime="20170823 13:43:55.684" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:43:55.958">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:43:55.959" starttime="20170823 13:43:55.958" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:43:55.959">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170823 13:43:55.959">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170823 13:43:55.959">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170823 13:43:55.959" starttime="20170823 13:43:55.959" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:43:55.960">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170823 13:43:55.960" starttime="20170823 13:43:55.684" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:43:55.960">${power_state} = Off</msg>
<status endtime="20170823 13:43:55.960" starttime="20170823 13:43:55.683" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170823 13:43:55.961">On != Off</msg>
<status endtime="20170823 13:43:55.961" starttime="20170823 13:43:55.960" status="FAIL"></status>
</kw>
<status endtime="20170823 13:43:55.961" starttime="20170823 13:43:55.683" status="FAIL"></status>
</kw>
<status endtime="20170823 13:43:55.961" starttime="20170823 13:43:55.682" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:44:05.967">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 13:44:05.967" starttime="20170823 13:44:05.966" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:44:05.968">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 13:44:05.968" starttime="20170823 13:44:05.967" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:44:05.968">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 13:44:05.968" starttime="20170823 13:44:05.968" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:44:05.969">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 13:44:05.969" starttime="20170823 13:44:05.969" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:44:06.155">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 13:44:06.156" starttime="20170823 13:44:05.970" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:44:06.156">${status} = PASS</msg>
<msg level="INFO" timestamp="20170823 13:44:06.156">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:44:06.156" starttime="20170823 13:44:05.969" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:44:06.156">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:44:06.157" starttime="20170823 13:44:06.156" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:44:06.157">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:44:06.157" starttime="20170823 13:44:06.157" status="PASS"></status>
</kw>
<status endtime="20170823 13:44:06.157" starttime="20170823 13:44:05.965" status="PASS"></status>
</kw>
<status endtime="20170823 13:44:06.157" starttime="20170823 13:44:05.965" status="PASS"></status>
</kw>
<status endtime="20170823 13:44:06.158" starttime="20170823 13:44:05.964" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:44:06.158">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 13:44:06.158" starttime="20170823 13:44:06.158" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:44:06.160">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:44:06.160" starttime="20170823 13:44:06.160" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:44:06.161">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:44:06.161" starttime="20170823 13:44:06.161" status="PASS"></status>
</kw>
<status endtime="20170823 13:44:06.161" starttime="20170823 13:44:06.161" status="PASS"></status>
</kw>
<status endtime="20170823 13:44:06.162" starttime="20170823 13:44:06.159" status="PASS"></status>
</kw>
<status endtime="20170823 13:44:06.162" starttime="20170823 13:44:06.158" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:44:06.226">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170823 13:44:06.226">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:44:06.226" starttime="20170823 13:44:06.162" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:44:06.228">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:44:06.228" starttime="20170823 13:44:06.227" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:44:06.230">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:44:06.230" starttime="20170823 13:44:06.229" status="PASS"></status>
</kw>
<status endtime="20170823 13:44:06.230" starttime="20170823 13:44:06.228" status="PASS"></status>
</kw>
<status endtime="20170823 13:44:06.230" starttime="20170823 13:44:06.227" status="PASS"></status>
</kw>
<status endtime="20170823 13:44:06.231" starttime="20170823 13:44:06.226" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170823 13:44:06.231">Delete All Sessions</msg>
<status endtime="20170823 13:44:06.231" starttime="20170823 13:44:06.231" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:44:06.232">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:44:06.232" starttime="20170823 13:44:05.963" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:44:06.233">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:44:06.233" starttime="20170823 13:44:06.232" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:44:06.233">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170823 13:44:06.233">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170823 13:44:06.234">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170823 13:44:06.234" starttime="20170823 13:44:06.233" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:44:06.234">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170823 13:44:06.234" starttime="20170823 13:44:05.963" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:44:06.234">${power_state} = Off</msg>
<status endtime="20170823 13:44:06.234" starttime="20170823 13:44:05.962" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170823 13:44:06.235">On != Off</msg>
<status endtime="20170823 13:44:06.235" starttime="20170823 13:44:06.235" status="FAIL"></status>
</kw>
<status endtime="20170823 13:44:06.235" starttime="20170823 13:44:05.962" status="FAIL"></status>
</kw>
<status endtime="20170823 13:44:06.235" starttime="20170823 13:44:05.961" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:44:16.240">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 13:44:16.241" starttime="20170823 13:44:16.240" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:44:16.241">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 13:44:16.242" starttime="20170823 13:44:16.241" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:44:16.242">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 13:44:16.242" starttime="20170823 13:44:16.242" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:44:16.243">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 13:44:16.243" starttime="20170823 13:44:16.242" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:44:16.422">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 13:44:16.422" starttime="20170823 13:44:16.244" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:44:16.422">${status} = PASS</msg>
<msg level="INFO" timestamp="20170823 13:44:16.422">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:44:16.422" starttime="20170823 13:44:16.243" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:44:16.423">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:44:16.423" starttime="20170823 13:44:16.422" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:44:16.423">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:44:16.424" starttime="20170823 13:44:16.423" status="PASS"></status>
</kw>
<status endtime="20170823 13:44:16.424" starttime="20170823 13:44:16.240" status="PASS"></status>
</kw>
<status endtime="20170823 13:44:16.424" starttime="20170823 13:44:16.239" status="PASS"></status>
</kw>
<status endtime="20170823 13:44:16.424" starttime="20170823 13:44:16.238" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:44:16.424">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 13:44:16.425" starttime="20170823 13:44:16.424" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:44:16.427">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:44:16.427" starttime="20170823 13:44:16.426" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:44:16.428">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:44:16.428" starttime="20170823 13:44:16.427" status="PASS"></status>
</kw>
<status endtime="20170823 13:44:16.428" starttime="20170823 13:44:16.427" status="PASS"></status>
</kw>
<status endtime="20170823 13:44:16.428" starttime="20170823 13:44:16.425" status="PASS"></status>
</kw>
<status endtime="20170823 13:44:16.428" starttime="20170823 13:44:16.425" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:44:16.492">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170823 13:44:16.492">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:44:16.492" starttime="20170823 13:44:16.428" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:44:16.494">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:44:16.494" starttime="20170823 13:44:16.494" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:44:16.495">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:44:16.495" starttime="20170823 13:44:16.495" status="PASS"></status>
</kw>
<status endtime="20170823 13:44:16.495" starttime="20170823 13:44:16.494" status="PASS"></status>
</kw>
<status endtime="20170823 13:44:16.495" starttime="20170823 13:44:16.493" status="PASS"></status>
</kw>
<status endtime="20170823 13:44:16.495" starttime="20170823 13:44:16.493" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170823 13:44:16.496">Delete All Sessions</msg>
<status endtime="20170823 13:44:16.496" starttime="20170823 13:44:16.496" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:44:16.496">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:44:16.496" starttime="20170823 13:44:16.238" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:44:16.497">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:44:16.497" starttime="20170823 13:44:16.496" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:44:16.497">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170823 13:44:16.497">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170823 13:44:16.497">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170823 13:44:16.497" starttime="20170823 13:44:16.497" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:44:16.498">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170823 13:44:16.498" starttime="20170823 13:44:16.237" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:44:16.498">${power_state} = Off</msg>
<status endtime="20170823 13:44:16.498" starttime="20170823 13:44:16.237" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170823 13:44:16.499">On != Off</msg>
<status endtime="20170823 13:44:16.499" starttime="20170823 13:44:16.498" status="FAIL"></status>
</kw>
<status endtime="20170823 13:44:16.499" starttime="20170823 13:44:16.236" status="FAIL"></status>
</kw>
<status endtime="20170823 13:44:16.499" starttime="20170823 13:44:16.236" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:44:26.505">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 13:44:26.505" starttime="20170823 13:44:26.504" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:44:26.506">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 13:44:26.506" starttime="20170823 13:44:26.506" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:44:26.506">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 13:44:26.507" starttime="20170823 13:44:26.506" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:44:26.507">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 13:44:26.507" starttime="20170823 13:44:26.507" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:44:26.693">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 13:44:26.693" starttime="20170823 13:44:26.508" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:44:26.694">${status} = PASS</msg>
<msg level="INFO" timestamp="20170823 13:44:26.694">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:44:26.694" starttime="20170823 13:44:26.507" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:44:26.694">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:44:26.694" starttime="20170823 13:44:26.694" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:44:26.695">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:44:26.695" starttime="20170823 13:44:26.695" status="PASS"></status>
</kw>
<status endtime="20170823 13:44:26.695" starttime="20170823 13:44:26.503" status="PASS"></status>
</kw>
<status endtime="20170823 13:44:26.695" starttime="20170823 13:44:26.503" status="PASS"></status>
</kw>
<status endtime="20170823 13:44:26.695" starttime="20170823 13:44:26.502" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:44:26.696">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 13:44:26.696" starttime="20170823 13:44:26.696" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:44:26.698">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:44:26.698" starttime="20170823 13:44:26.697" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:44:26.699">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:44:26.699" starttime="20170823 13:44:26.699" status="PASS"></status>
</kw>
<status endtime="20170823 13:44:26.700" starttime="20170823 13:44:26.698" status="PASS"></status>
</kw>
<status endtime="20170823 13:44:26.700" starttime="20170823 13:44:26.697" status="PASS"></status>
</kw>
<status endtime="20170823 13:44:26.700" starttime="20170823 13:44:26.696" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:44:26.764">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170823 13:44:26.764">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:44:26.764" starttime="20170823 13:44:26.700" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:44:26.766">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:44:26.766" starttime="20170823 13:44:26.765" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:44:26.767">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:44:26.767" starttime="20170823 13:44:26.766" status="PASS"></status>
</kw>
<status endtime="20170823 13:44:26.767" starttime="20170823 13:44:26.766" status="PASS"></status>
</kw>
<status endtime="20170823 13:44:26.767" starttime="20170823 13:44:26.765" status="PASS"></status>
</kw>
<status endtime="20170823 13:44:26.767" starttime="20170823 13:44:26.764" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170823 13:44:26.768">Delete All Sessions</msg>
<status endtime="20170823 13:44:26.768" starttime="20170823 13:44:26.768" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:44:26.768">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:44:26.768" starttime="20170823 13:44:26.502" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:44:26.769">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:44:26.769" starttime="20170823 13:44:26.768" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:44:26.769">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170823 13:44:26.769">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170823 13:44:26.769">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170823 13:44:26.770" starttime="20170823 13:44:26.769" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:44:26.770">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170823 13:44:26.770" starttime="20170823 13:44:26.501" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:44:26.770">${power_state} = Off</msg>
<status endtime="20170823 13:44:26.770" starttime="20170823 13:44:26.501" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170823 13:44:26.771">On != Off</msg>
<status endtime="20170823 13:44:26.771" starttime="20170823 13:44:26.770" status="FAIL"></status>
</kw>
<status endtime="20170823 13:44:26.771" starttime="20170823 13:44:26.500" status="FAIL"></status>
</kw>
<status endtime="20170823 13:44:26.771" starttime="20170823 13:44:26.500" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:44:36.776">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 13:44:36.777" starttime="20170823 13:44:36.776" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:44:36.777">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 13:44:36.777" starttime="20170823 13:44:36.777" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:44:36.778">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 13:44:36.778" starttime="20170823 13:44:36.778" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:44:36.779">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 13:44:36.779" starttime="20170823 13:44:36.778" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:44:36.984">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 13:44:36.984" starttime="20170823 13:44:36.779" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:44:36.984">${status} = PASS</msg>
<msg level="INFO" timestamp="20170823 13:44:36.984">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:44:36.984" starttime="20170823 13:44:36.779" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:44:36.985">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:44:36.985" starttime="20170823 13:44:36.985" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:44:36.986">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:44:36.986" starttime="20170823 13:44:36.985" status="PASS"></status>
</kw>
<status endtime="20170823 13:44:36.986" starttime="20170823 13:44:36.775" status="PASS"></status>
</kw>
<status endtime="20170823 13:44:36.986" starttime="20170823 13:44:36.775" status="PASS"></status>
</kw>
<status endtime="20170823 13:44:36.986" starttime="20170823 13:44:36.774" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:44:36.987">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 13:44:36.987" starttime="20170823 13:44:36.986" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:44:36.989">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:44:36.989" starttime="20170823 13:44:36.988" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:44:36.990">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:44:36.990" starttime="20170823 13:44:36.989" status="PASS"></status>
</kw>
<status endtime="20170823 13:44:36.990" starttime="20170823 13:44:36.989" status="PASS"></status>
</kw>
<status endtime="20170823 13:44:36.990" starttime="20170823 13:44:36.987" status="PASS"></status>
</kw>
<status endtime="20170823 13:44:36.990" starttime="20170823 13:44:36.987" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:44:37.054">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170823 13:44:37.054">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:44:37.054" starttime="20170823 13:44:36.990" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:44:37.056">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:44:37.056" starttime="20170823 13:44:37.055" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:44:37.056">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:44:37.057" starttime="20170823 13:44:37.056" status="PASS"></status>
</kw>
<status endtime="20170823 13:44:37.057" starttime="20170823 13:44:37.056" status="PASS"></status>
</kw>
<status endtime="20170823 13:44:37.057" starttime="20170823 13:44:37.055" status="PASS"></status>
</kw>
<status endtime="20170823 13:44:37.057" starttime="20170823 13:44:37.054" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170823 13:44:37.057">Delete All Sessions</msg>
<status endtime="20170823 13:44:37.057" starttime="20170823 13:44:37.057" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:44:37.058">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:44:37.058" starttime="20170823 13:44:36.774" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:44:37.058">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:44:37.058" starttime="20170823 13:44:37.058" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:44:37.059">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170823 13:44:37.059">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170823 13:44:37.059">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170823 13:44:37.059" starttime="20170823 13:44:37.059" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:44:37.059">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170823 13:44:37.059" starttime="20170823 13:44:36.773" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:44:37.060">${power_state} = Off</msg>
<status endtime="20170823 13:44:37.060" starttime="20170823 13:44:36.773" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170823 13:44:37.060">On != Off</msg>
<status endtime="20170823 13:44:37.060" starttime="20170823 13:44:37.060" status="FAIL"></status>
</kw>
<status endtime="20170823 13:44:37.061" starttime="20170823 13:44:36.772" status="FAIL"></status>
</kw>
<status endtime="20170823 13:44:37.061" starttime="20170823 13:44:36.772" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:44:47.069">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 13:44:47.070" starttime="20170823 13:44:47.069" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:44:47.070">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 13:44:47.071" starttime="20170823 13:44:47.070" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:44:47.071">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 13:44:47.071" starttime="20170823 13:44:47.071" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:44:47.072">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 13:44:47.072" starttime="20170823 13:44:47.071" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:44:47.275">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 13:44:47.275" starttime="20170823 13:44:47.072" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:44:47.275">${status} = PASS</msg>
<msg level="INFO" timestamp="20170823 13:44:47.275">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:44:47.275" starttime="20170823 13:44:47.072" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:44:47.276">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:44:47.276" starttime="20170823 13:44:47.275" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:44:47.277">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:44:47.277" starttime="20170823 13:44:47.276" status="PASS"></status>
</kw>
<status endtime="20170823 13:44:47.277" starttime="20170823 13:44:47.065" status="PASS"></status>
</kw>
<status endtime="20170823 13:44:47.277" starttime="20170823 13:44:47.065" status="PASS"></status>
</kw>
<status endtime="20170823 13:44:47.277" starttime="20170823 13:44:47.064" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:44:47.278">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 13:44:47.278" starttime="20170823 13:44:47.277" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:44:47.280">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:44:47.280" starttime="20170823 13:44:47.279" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:44:47.281">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:44:47.281" starttime="20170823 13:44:47.281" status="PASS"></status>
</kw>
<status endtime="20170823 13:44:47.281" starttime="20170823 13:44:47.280" status="PASS"></status>
</kw>
<status endtime="20170823 13:44:47.281" starttime="20170823 13:44:47.278" status="PASS"></status>
</kw>
<status endtime="20170823 13:44:47.281" starttime="20170823 13:44:47.278" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:44:47.345">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170823 13:44:47.345">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:44:47.345" starttime="20170823 13:44:47.282" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:44:47.347">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:44:47.347" starttime="20170823 13:44:47.347" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:44:47.382">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:44:47.382" starttime="20170823 13:44:47.381" status="PASS"></status>
</kw>
<status endtime="20170823 13:44:47.382" starttime="20170823 13:44:47.347" status="PASS"></status>
</kw>
<status endtime="20170823 13:44:47.383" starttime="20170823 13:44:47.346" status="PASS"></status>
</kw>
<status endtime="20170823 13:44:47.383" starttime="20170823 13:44:47.346" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170823 13:44:47.383">Delete All Sessions</msg>
<status endtime="20170823 13:44:47.383" starttime="20170823 13:44:47.383" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:44:47.383">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:44:47.383" starttime="20170823 13:44:47.063" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:44:47.384">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:44:47.384" starttime="20170823 13:44:47.384" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:44:47.385">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170823 13:44:47.385">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170823 13:44:47.386">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170823 13:44:47.386" starttime="20170823 13:44:47.385" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:44:47.386">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170823 13:44:47.386" starttime="20170823 13:44:47.063" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:44:47.387">${power_state} = Off</msg>
<status endtime="20170823 13:44:47.387" starttime="20170823 13:44:47.062" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170823 13:44:47.388">On != Off</msg>
<status endtime="20170823 13:44:47.388" starttime="20170823 13:44:47.387" status="FAIL"></status>
</kw>
<status endtime="20170823 13:44:47.388" starttime="20170823 13:44:47.062" status="FAIL"></status>
</kw>
<status endtime="20170823 13:44:47.388" starttime="20170823 13:44:47.061" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:44:57.393">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 13:44:57.394" starttime="20170823 13:44:57.393" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:44:57.394">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 13:44:57.394" starttime="20170823 13:44:57.394" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:44:57.395">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 13:44:57.395" starttime="20170823 13:44:57.395" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:44:57.396">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 13:44:57.396" starttime="20170823 13:44:57.395" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:44:57.607">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 13:44:57.607" starttime="20170823 13:44:57.397" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:44:57.607">${status} = PASS</msg>
<msg level="INFO" timestamp="20170823 13:44:57.607">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:44:57.607" starttime="20170823 13:44:57.396" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:44:57.608">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:44:57.608" starttime="20170823 13:44:57.608" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:44:57.609">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:44:57.609" starttime="20170823 13:44:57.608" status="PASS"></status>
</kw>
<status endtime="20170823 13:44:57.609" starttime="20170823 13:44:57.392" status="PASS"></status>
</kw>
<status endtime="20170823 13:44:57.609" starttime="20170823 13:44:57.392" status="PASS"></status>
</kw>
<status endtime="20170823 13:44:57.609" starttime="20170823 13:44:57.391" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:44:57.610">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 13:44:57.610" starttime="20170823 13:44:57.609" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:44:57.612">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:44:57.612" starttime="20170823 13:44:57.611" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:44:57.613">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:44:57.613" starttime="20170823 13:44:57.613" status="PASS"></status>
</kw>
<status endtime="20170823 13:44:57.613" starttime="20170823 13:44:57.612" status="PASS"></status>
</kw>
<status endtime="20170823 13:44:57.613" starttime="20170823 13:44:57.611" status="PASS"></status>
</kw>
<status endtime="20170823 13:44:57.613" starttime="20170823 13:44:57.610" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:44:57.703">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170823 13:44:57.703">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:44:57.703" starttime="20170823 13:44:57.614" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:44:57.705">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:44:57.705" starttime="20170823 13:44:57.704" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:44:57.706">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:44:57.706" starttime="20170823 13:44:57.705" status="PASS"></status>
</kw>
<status endtime="20170823 13:44:57.706" starttime="20170823 13:44:57.705" status="PASS"></status>
</kw>
<status endtime="20170823 13:44:57.706" starttime="20170823 13:44:57.704" status="PASS"></status>
</kw>
<status endtime="20170823 13:44:57.706" starttime="20170823 13:44:57.703" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170823 13:44:57.706">Delete All Sessions</msg>
<status endtime="20170823 13:44:57.706" starttime="20170823 13:44:57.706" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:44:57.707">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:44:57.707" starttime="20170823 13:44:57.391" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:44:57.707">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:44:57.707" starttime="20170823 13:44:57.707" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:44:57.708">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170823 13:44:57.708">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170823 13:44:57.708">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170823 13:44:57.708" starttime="20170823 13:44:57.708" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:44:57.708">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170823 13:44:57.708" starttime="20170823 13:44:57.390" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:44:57.709">${power_state} = Off</msg>
<status endtime="20170823 13:44:57.709" starttime="20170823 13:44:57.390" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170823 13:44:57.709">On != Off</msg>
<status endtime="20170823 13:44:57.709" starttime="20170823 13:44:57.709" status="FAIL"></status>
</kw>
<status endtime="20170823 13:44:57.710" starttime="20170823 13:44:57.389" status="FAIL"></status>
</kw>
<status endtime="20170823 13:44:57.710" starttime="20170823 13:44:57.389" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:45:07.717">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 13:45:07.717" starttime="20170823 13:45:07.716" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:45:07.718">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 13:45:07.718" starttime="20170823 13:45:07.717" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:45:07.721">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 13:45:07.721" starttime="20170823 13:45:07.718" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:45:07.722">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 13:45:07.722" starttime="20170823 13:45:07.721" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:45:07.898">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 13:45:07.899" starttime="20170823 13:45:07.722" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:45:07.899">${status} = PASS</msg>
<msg level="INFO" timestamp="20170823 13:45:07.899">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:45:07.899" starttime="20170823 13:45:07.722" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:45:07.899">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:45:07.899" starttime="20170823 13:45:07.899" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:45:07.900">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:45:07.900" starttime="20170823 13:45:07.900" status="PASS"></status>
</kw>
<status endtime="20170823 13:45:07.900" starttime="20170823 13:45:07.716" status="PASS"></status>
</kw>
<status endtime="20170823 13:45:07.900" starttime="20170823 13:45:07.715" status="PASS"></status>
</kw>
<status endtime="20170823 13:45:07.901" starttime="20170823 13:45:07.714" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:45:07.901">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 13:45:07.901" starttime="20170823 13:45:07.901" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:45:07.903">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:45:07.903" starttime="20170823 13:45:07.903" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:45:07.904">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:45:07.904" starttime="20170823 13:45:07.904" status="PASS"></status>
</kw>
<status endtime="20170823 13:45:07.905" starttime="20170823 13:45:07.904" status="PASS"></status>
</kw>
<status endtime="20170823 13:45:07.905" starttime="20170823 13:45:07.902" status="PASS"></status>
</kw>
<status endtime="20170823 13:45:07.905" starttime="20170823 13:45:07.901" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:45:07.977">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170823 13:45:07.977">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:45:07.977" starttime="20170823 13:45:07.905" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:45:07.979">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:45:07.979" starttime="20170823 13:45:07.978" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:45:07.980">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:45:07.980" starttime="20170823 13:45:07.980" status="PASS"></status>
</kw>
<status endtime="20170823 13:45:07.980" starttime="20170823 13:45:07.979" status="PASS"></status>
</kw>
<status endtime="20170823 13:45:07.981" starttime="20170823 13:45:07.978" status="PASS"></status>
</kw>
<status endtime="20170823 13:45:07.981" starttime="20170823 13:45:07.977" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170823 13:45:07.981">Delete All Sessions</msg>
<status endtime="20170823 13:45:07.981" starttime="20170823 13:45:07.981" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:45:07.981">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:45:07.981" starttime="20170823 13:45:07.713" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:45:07.982">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:45:07.982" starttime="20170823 13:45:07.982" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:45:07.983">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170823 13:45:07.983">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170823 13:45:07.983">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170823 13:45:07.983" starttime="20170823 13:45:07.982" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:45:07.983">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170823 13:45:07.983" starttime="20170823 13:45:07.712" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:45:07.983">${power_state} = Off</msg>
<status endtime="20170823 13:45:07.983" starttime="20170823 13:45:07.711" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170823 13:45:07.984">On != Off</msg>
<status endtime="20170823 13:45:07.984" starttime="20170823 13:45:07.984" status="FAIL"></status>
</kw>
<status endtime="20170823 13:45:07.984" starttime="20170823 13:45:07.711" status="FAIL"></status>
</kw>
<status endtime="20170823 13:45:07.984" starttime="20170823 13:45:07.710" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:45:17.989">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 13:45:17.990" starttime="20170823 13:45:17.989" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:45:17.991">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 13:45:17.991" starttime="20170823 13:45:17.990" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:45:17.991">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 13:45:17.991" starttime="20170823 13:45:17.991" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:45:17.992">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 13:45:17.992" starttime="20170823 13:45:17.992" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:45:18.169">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 13:45:18.169" starttime="20170823 13:45:17.993" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:45:18.170">${status} = PASS</msg>
<msg level="INFO" timestamp="20170823 13:45:18.170">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:45:18.170" starttime="20170823 13:45:17.992" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:45:18.170">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:45:18.170" starttime="20170823 13:45:18.170" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:45:18.171">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:45:18.171" starttime="20170823 13:45:18.171" status="PASS"></status>
</kw>
<status endtime="20170823 13:45:18.171" starttime="20170823 13:45:17.989" status="PASS"></status>
</kw>
<status endtime="20170823 13:45:18.171" starttime="20170823 13:45:17.988" status="PASS"></status>
</kw>
<status endtime="20170823 13:45:18.171" starttime="20170823 13:45:17.987" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:45:18.172">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 13:45:18.172" starttime="20170823 13:45:18.172" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:45:18.174">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:45:18.174" starttime="20170823 13:45:18.173" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:45:18.175">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:45:18.175" starttime="20170823 13:45:18.175" status="PASS"></status>
</kw>
<status endtime="20170823 13:45:18.175" starttime="20170823 13:45:18.174" status="PASS"></status>
</kw>
<status endtime="20170823 13:45:18.175" starttime="20170823 13:45:18.173" status="PASS"></status>
</kw>
<status endtime="20170823 13:45:18.175" starttime="20170823 13:45:18.172" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:45:18.240">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170823 13:45:18.240">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:45:18.240" starttime="20170823 13:45:18.176" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:45:18.242">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:45:18.242" starttime="20170823 13:45:18.241" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:45:18.243">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:45:18.243" starttime="20170823 13:45:18.243" status="PASS"></status>
</kw>
<status endtime="20170823 13:45:18.243" starttime="20170823 13:45:18.242" status="PASS"></status>
</kw>
<status endtime="20170823 13:45:18.243" starttime="20170823 13:45:18.241" status="PASS"></status>
</kw>
<status endtime="20170823 13:45:18.243" starttime="20170823 13:45:18.240" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170823 13:45:18.244">Delete All Sessions</msg>
<status endtime="20170823 13:45:18.244" starttime="20170823 13:45:18.244" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:45:18.244">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:45:18.244" starttime="20170823 13:45:17.987" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:45:18.245">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:45:18.245" starttime="20170823 13:45:18.244" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:45:18.245">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170823 13:45:18.245">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170823 13:45:18.245">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170823 13:45:18.246" starttime="20170823 13:45:18.245" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:45:18.246">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170823 13:45:18.246" starttime="20170823 13:45:17.986" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:45:18.246">${power_state} = Off</msg>
<status endtime="20170823 13:45:18.246" starttime="20170823 13:45:17.986" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170823 13:45:18.247">On != Off</msg>
<status endtime="20170823 13:45:18.247" starttime="20170823 13:45:18.246" status="FAIL"></status>
</kw>
<status endtime="20170823 13:45:18.247" starttime="20170823 13:45:17.985" status="FAIL"></status>
</kw>
<status endtime="20170823 13:45:18.247" starttime="20170823 13:45:17.985" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:45:28.253">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 13:45:28.253" starttime="20170823 13:45:28.253" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:45:28.254">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 13:45:28.254" starttime="20170823 13:45:28.254" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:45:28.255">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 13:45:28.255" starttime="20170823 13:45:28.254" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:45:28.255">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 13:45:28.255" starttime="20170823 13:45:28.255" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:45:28.432">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 13:45:28.432" starttime="20170823 13:45:28.256" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:45:28.432">${status} = PASS</msg>
<msg level="INFO" timestamp="20170823 13:45:28.433">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:45:28.433" starttime="20170823 13:45:28.256" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:45:28.433">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:45:28.433" starttime="20170823 13:45:28.433" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:45:28.434">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:45:28.434" starttime="20170823 13:45:28.434" status="PASS"></status>
</kw>
<status endtime="20170823 13:45:28.434" starttime="20170823 13:45:28.252" status="PASS"></status>
</kw>
<status endtime="20170823 13:45:28.434" starttime="20170823 13:45:28.251" status="PASS"></status>
</kw>
<status endtime="20170823 13:45:28.434" starttime="20170823 13:45:28.251" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:45:28.435">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 13:45:28.435" starttime="20170823 13:45:28.435" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:45:28.437">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:45:28.437" starttime="20170823 13:45:28.436" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:45:28.438">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:45:28.438" starttime="20170823 13:45:28.438" status="PASS"></status>
</kw>
<status endtime="20170823 13:45:28.438" starttime="20170823 13:45:28.437" status="PASS"></status>
</kw>
<status endtime="20170823 13:45:28.438" starttime="20170823 13:45:28.436" status="PASS"></status>
</kw>
<status endtime="20170823 13:45:28.438" starttime="20170823 13:45:28.435" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:45:28.502">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170823 13:45:28.502">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:45:28.502" starttime="20170823 13:45:28.439" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:45:28.504">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:45:28.504" starttime="20170823 13:45:28.504" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:45:28.505">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:45:28.505" starttime="20170823 13:45:28.505" status="PASS"></status>
</kw>
<status endtime="20170823 13:45:28.506" starttime="20170823 13:45:28.504" status="PASS"></status>
</kw>
<status endtime="20170823 13:45:28.506" starttime="20170823 13:45:28.503" status="PASS"></status>
</kw>
<status endtime="20170823 13:45:28.506" starttime="20170823 13:45:28.503" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170823 13:45:28.506">Delete All Sessions</msg>
<status endtime="20170823 13:45:28.506" starttime="20170823 13:45:28.506" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:45:28.506">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:45:28.506" starttime="20170823 13:45:28.250" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:45:28.507">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:45:28.507" starttime="20170823 13:45:28.507" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:45:28.508">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170823 13:45:28.508">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170823 13:45:28.508">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170823 13:45:28.508" starttime="20170823 13:45:28.507" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:45:28.508">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170823 13:45:28.508" starttime="20170823 13:45:28.249" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:45:28.508">${power_state} = Off</msg>
<status endtime="20170823 13:45:28.508" starttime="20170823 13:45:28.249" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170823 13:45:28.509">On != Off</msg>
<status endtime="20170823 13:45:28.509" starttime="20170823 13:45:28.509" status="FAIL"></status>
</kw>
<status endtime="20170823 13:45:28.509" starttime="20170823 13:45:28.248" status="FAIL"></status>
</kw>
<status endtime="20170823 13:45:28.509" starttime="20170823 13:45:28.248" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:45:38.515">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 13:45:38.515" starttime="20170823 13:45:38.515" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:45:38.516">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 13:45:38.516" starttime="20170823 13:45:38.516" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:45:38.517">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 13:45:38.517" starttime="20170823 13:45:38.516" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:45:38.517">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 13:45:38.517" starttime="20170823 13:45:38.517" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:45:38.729">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 13:45:38.729" starttime="20170823 13:45:38.518" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:45:38.729">${status} = PASS</msg>
<msg level="INFO" timestamp="20170823 13:45:38.729">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:45:38.729" starttime="20170823 13:45:38.518" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:45:38.730">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:45:38.730" starttime="20170823 13:45:38.730" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:45:38.731">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:45:38.731" starttime="20170823 13:45:38.730" status="PASS"></status>
</kw>
<status endtime="20170823 13:45:38.731" starttime="20170823 13:45:38.514" status="PASS"></status>
</kw>
<status endtime="20170823 13:45:38.731" starttime="20170823 13:45:38.514" status="PASS"></status>
</kw>
<status endtime="20170823 13:45:38.731" starttime="20170823 13:45:38.513" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:45:38.732">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 13:45:38.732" starttime="20170823 13:45:38.731" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:45:38.734">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:45:38.734" starttime="20170823 13:45:38.733" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:45:38.735">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:45:38.735" starttime="20170823 13:45:38.735" status="PASS"></status>
</kw>
<status endtime="20170823 13:45:38.735" starttime="20170823 13:45:38.734" status="PASS"></status>
</kw>
<status endtime="20170823 13:45:38.735" starttime="20170823 13:45:38.733" status="PASS"></status>
</kw>
<status endtime="20170823 13:45:38.735" starttime="20170823 13:45:38.732" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:45:38.822">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170823 13:45:38.822">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:45:38.822" starttime="20170823 13:45:38.736" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:45:38.824">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:45:38.824" starttime="20170823 13:45:38.824" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:45:38.825">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:45:38.825" starttime="20170823 13:45:38.825" status="PASS"></status>
</kw>
<status endtime="20170823 13:45:38.825" starttime="20170823 13:45:38.824" status="PASS"></status>
</kw>
<status endtime="20170823 13:45:38.825" starttime="20170823 13:45:38.823" status="PASS"></status>
</kw>
<status endtime="20170823 13:45:38.826" starttime="20170823 13:45:38.823" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170823 13:45:38.826">Delete All Sessions</msg>
<status endtime="20170823 13:45:38.826" starttime="20170823 13:45:38.826" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:45:38.826">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:45:38.826" starttime="20170823 13:45:38.512" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:45:38.827">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:45:38.827" starttime="20170823 13:45:38.827" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:45:38.827">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170823 13:45:38.827">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170823 13:45:38.828">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170823 13:45:38.828" starttime="20170823 13:45:38.827" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:45:38.828">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170823 13:45:38.828" starttime="20170823 13:45:38.511" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:45:38.828">${power_state} = Off</msg>
<status endtime="20170823 13:45:38.828" starttime="20170823 13:45:38.511" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170823 13:45:38.829">On != Off</msg>
<status endtime="20170823 13:45:38.829" starttime="20170823 13:45:38.829" status="FAIL"></status>
</kw>
<status endtime="20170823 13:45:38.829" starttime="20170823 13:45:38.511" status="FAIL"></status>
</kw>
<status endtime="20170823 13:45:38.829" starttime="20170823 13:45:38.510" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:45:48.835">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 13:45:48.836" starttime="20170823 13:45:48.835" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:45:48.836">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 13:45:48.836" starttime="20170823 13:45:48.836" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:45:48.837">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 13:45:48.837" starttime="20170823 13:45:48.836" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:45:48.837">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 13:45:48.837" starttime="20170823 13:45:48.837" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:45:49.039">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 13:45:49.040" starttime="20170823 13:45:48.838" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:45:49.040">${status} = PASS</msg>
<msg level="INFO" timestamp="20170823 13:45:49.040">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:45:49.040" starttime="20170823 13:45:48.838" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:45:49.040">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:45:49.041" starttime="20170823 13:45:49.040" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:45:49.041">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:45:49.041" starttime="20170823 13:45:49.041" status="PASS"></status>
</kw>
<status endtime="20170823 13:45:49.042" starttime="20170823 13:45:48.834" status="PASS"></status>
</kw>
<status endtime="20170823 13:45:49.042" starttime="20170823 13:45:48.833" status="PASS"></status>
</kw>
<status endtime="20170823 13:45:49.042" starttime="20170823 13:45:48.833" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:45:49.042">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 13:45:49.042" starttime="20170823 13:45:49.042" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:45:49.044">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:45:49.044" starttime="20170823 13:45:49.044" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:45:49.045">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:45:49.045" starttime="20170823 13:45:49.045" status="PASS"></status>
</kw>
<status endtime="20170823 13:45:49.046" starttime="20170823 13:45:49.045" status="PASS"></status>
</kw>
<status endtime="20170823 13:45:49.046" starttime="20170823 13:45:49.043" status="PASS"></status>
</kw>
<status endtime="20170823 13:45:49.046" starttime="20170823 13:45:49.043" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:45:49.109">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170823 13:45:49.110">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:45:49.110" starttime="20170823 13:45:49.046" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:45:49.112">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:45:49.112" starttime="20170823 13:45:49.111" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:45:49.113">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:45:49.113" starttime="20170823 13:45:49.113" status="PASS"></status>
</kw>
<status endtime="20170823 13:45:49.113" starttime="20170823 13:45:49.112" status="PASS"></status>
</kw>
<status endtime="20170823 13:45:49.113" starttime="20170823 13:45:49.110" status="PASS"></status>
</kw>
<status endtime="20170823 13:45:49.113" starttime="20170823 13:45:49.110" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170823 13:45:49.114">Delete All Sessions</msg>
<status endtime="20170823 13:45:49.114" starttime="20170823 13:45:49.113" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:45:49.114">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:45:49.114" starttime="20170823 13:45:48.832" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:45:49.115">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:45:49.115" starttime="20170823 13:45:49.114" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:45:49.115">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170823 13:45:49.115">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170823 13:45:49.115">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170823 13:45:49.115" starttime="20170823 13:45:49.115" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:45:49.116">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170823 13:45:49.116" starttime="20170823 13:45:48.831" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:45:49.116">${power_state} = Off</msg>
<status endtime="20170823 13:45:49.116" starttime="20170823 13:45:48.831" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170823 13:45:49.117">On != Off</msg>
<status endtime="20170823 13:45:49.117" starttime="20170823 13:45:49.116" status="FAIL"></status>
</kw>
<status endtime="20170823 13:45:49.117" starttime="20170823 13:45:48.831" status="FAIL"></status>
</kw>
<status endtime="20170823 13:45:49.117" starttime="20170823 13:45:48.830" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:45:59.122">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 13:45:59.123" starttime="20170823 13:45:59.122" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:45:59.123">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 13:45:59.123" starttime="20170823 13:45:59.123" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:45:59.124">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 13:45:59.124" starttime="20170823 13:45:59.124" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:45:59.125">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 13:45:59.125" starttime="20170823 13:45:59.124" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:45:59.313">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 13:45:59.313" starttime="20170823 13:45:59.125" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:45:59.313">${status} = PASS</msg>
<msg level="INFO" timestamp="20170823 13:45:59.313">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:45:59.313" starttime="20170823 13:45:59.125" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:45:59.314">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:45:59.314" starttime="20170823 13:45:59.313" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:45:59.314">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:45:59.314" starttime="20170823 13:45:59.314" status="PASS"></status>
</kw>
<status endtime="20170823 13:45:59.315" starttime="20170823 13:45:59.121" status="PASS"></status>
</kw>
<status endtime="20170823 13:45:59.315" starttime="20170823 13:45:59.121" status="PASS"></status>
</kw>
<status endtime="20170823 13:45:59.315" starttime="20170823 13:45:59.120" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:45:59.315">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 13:45:59.315" starttime="20170823 13:45:59.315" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:45:59.317">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:45:59.318" starttime="20170823 13:45:59.317" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:45:59.318">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:45:59.319" starttime="20170823 13:45:59.318" status="PASS"></status>
</kw>
<status endtime="20170823 13:45:59.319" starttime="20170823 13:45:59.318" status="PASS"></status>
</kw>
<status endtime="20170823 13:45:59.319" starttime="20170823 13:45:59.316" status="PASS"></status>
</kw>
<status endtime="20170823 13:45:59.319" starttime="20170823 13:45:59.316" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:45:59.383">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170823 13:45:59.383">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:45:59.383" starttime="20170823 13:45:59.319" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:45:59.385">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:45:59.385" starttime="20170823 13:45:59.385" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:45:59.386">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:45:59.386" starttime="20170823 13:45:59.386" status="PASS"></status>
</kw>
<status endtime="20170823 13:45:59.386" starttime="20170823 13:45:59.385" status="PASS"></status>
</kw>
<status endtime="20170823 13:45:59.386" starttime="20170823 13:45:59.384" status="PASS"></status>
</kw>
<status endtime="20170823 13:45:59.386" starttime="20170823 13:45:59.384" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170823 13:45:59.387">Delete All Sessions</msg>
<status endtime="20170823 13:45:59.387" starttime="20170823 13:45:59.387" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:45:59.387">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:45:59.387" starttime="20170823 13:45:59.120" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:45:59.388">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:45:59.388" starttime="20170823 13:45:59.387" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:45:59.388">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170823 13:45:59.388">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170823 13:45:59.388">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170823 13:45:59.388" starttime="20170823 13:45:59.388" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:45:59.389">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170823 13:45:59.389" starttime="20170823 13:45:59.119" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:45:59.389">${power_state} = Off</msg>
<status endtime="20170823 13:45:59.389" starttime="20170823 13:45:59.119" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170823 13:45:59.390">On != Off</msg>
<status endtime="20170823 13:45:59.390" starttime="20170823 13:45:59.389" status="FAIL"></status>
</kw>
<status endtime="20170823 13:45:59.390" starttime="20170823 13:45:59.118" status="FAIL"></status>
</kw>
<status endtime="20170823 13:45:59.390" starttime="20170823 13:45:59.118" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:46:09.396">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 13:46:09.396" starttime="20170823 13:46:09.395" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:46:09.397">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 13:46:09.397" starttime="20170823 13:46:09.396" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:46:09.397">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 13:46:09.397" starttime="20170823 13:46:09.397" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:46:09.398">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 13:46:09.398" starttime="20170823 13:46:09.398" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:46:09.579">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 13:46:09.579" starttime="20170823 13:46:09.399" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:46:09.579">${status} = PASS</msg>
<msg level="INFO" timestamp="20170823 13:46:09.579">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:46:09.579" starttime="20170823 13:46:09.398" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:46:09.580">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:46:09.580" starttime="20170823 13:46:09.580" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:46:09.581">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:46:09.581" starttime="20170823 13:46:09.580" status="PASS"></status>
</kw>
<status endtime="20170823 13:46:09.581" starttime="20170823 13:46:09.394" status="PASS"></status>
</kw>
<status endtime="20170823 13:46:09.581" starttime="20170823 13:46:09.394" status="PASS"></status>
</kw>
<status endtime="20170823 13:46:09.581" starttime="20170823 13:46:09.393" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:46:09.582">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 13:46:09.582" starttime="20170823 13:46:09.582" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:46:09.584">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:46:09.584" starttime="20170823 13:46:09.583" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:46:09.585">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:46:09.585" starttime="20170823 13:46:09.585" status="PASS"></status>
</kw>
<status endtime="20170823 13:46:09.585" starttime="20170823 13:46:09.584" status="PASS"></status>
</kw>
<status endtime="20170823 13:46:09.585" starttime="20170823 13:46:09.583" status="PASS"></status>
</kw>
<status endtime="20170823 13:46:09.585" starttime="20170823 13:46:09.582" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:46:09.649">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170823 13:46:09.649">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:46:09.649" starttime="20170823 13:46:09.586" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:46:09.651">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:46:09.651" starttime="20170823 13:46:09.650" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:46:09.655">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:46:09.655" starttime="20170823 13:46:09.655" status="PASS"></status>
</kw>
<status endtime="20170823 13:46:09.655" starttime="20170823 13:46:09.651" status="PASS"></status>
</kw>
<status endtime="20170823 13:46:09.655" starttime="20170823 13:46:09.650" status="PASS"></status>
</kw>
<status endtime="20170823 13:46:09.655" starttime="20170823 13:46:09.649" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170823 13:46:09.656">Delete All Sessions</msg>
<status endtime="20170823 13:46:09.656" starttime="20170823 13:46:09.656" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:46:09.656">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:46:09.656" starttime="20170823 13:46:09.393" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:46:09.657">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:46:09.657" starttime="20170823 13:46:09.656" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:46:09.657">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170823 13:46:09.657">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170823 13:46:09.657">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170823 13:46:09.658" starttime="20170823 13:46:09.657" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:46:09.658">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170823 13:46:09.658" starttime="20170823 13:46:09.392" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:46:09.658">${power_state} = Off</msg>
<status endtime="20170823 13:46:09.658" starttime="20170823 13:46:09.392" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170823 13:46:09.659">On != Off</msg>
<status endtime="20170823 13:46:09.659" starttime="20170823 13:46:09.658" status="FAIL"></status>
</kw>
<status endtime="20170823 13:46:09.659" starttime="20170823 13:46:09.391" status="FAIL"></status>
</kw>
<status endtime="20170823 13:46:09.659" starttime="20170823 13:46:09.391" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:46:19.665">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 13:46:19.665" starttime="20170823 13:46:19.664" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:46:19.666">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 13:46:19.666" starttime="20170823 13:46:19.665" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:46:19.666">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 13:46:19.666" starttime="20170823 13:46:19.666" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:46:19.667">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 13:46:19.667" starttime="20170823 13:46:19.667" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:46:19.858">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 13:46:19.858" starttime="20170823 13:46:19.668" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:46:19.858">${status} = PASS</msg>
<msg level="INFO" timestamp="20170823 13:46:19.858">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:46:19.858" starttime="20170823 13:46:19.667" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:46:19.859">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:46:19.859" starttime="20170823 13:46:19.858" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:46:19.860">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:46:19.860" starttime="20170823 13:46:19.859" status="PASS"></status>
</kw>
<status endtime="20170823 13:46:19.860" starttime="20170823 13:46:19.664" status="PASS"></status>
</kw>
<status endtime="20170823 13:46:19.860" starttime="20170823 13:46:19.663" status="PASS"></status>
</kw>
<status endtime="20170823 13:46:19.860" starttime="20170823 13:46:19.663" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:46:19.861">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 13:46:19.861" starttime="20170823 13:46:19.860" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:46:19.863">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:46:19.863" starttime="20170823 13:46:19.862" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:46:19.864">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:46:19.864" starttime="20170823 13:46:19.863" status="PASS"></status>
</kw>
<status endtime="20170823 13:46:19.864" starttime="20170823 13:46:19.863" status="PASS"></status>
</kw>
<status endtime="20170823 13:46:19.864" starttime="20170823 13:46:19.861" status="PASS"></status>
</kw>
<status endtime="20170823 13:46:19.864" starttime="20170823 13:46:19.861" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:46:19.930">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170823 13:46:19.930">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:46:19.930" starttime="20170823 13:46:19.864" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:46:19.932">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:46:19.932" starttime="20170823 13:46:19.931" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:46:19.932">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:46:19.933" starttime="20170823 13:46:19.932" status="PASS"></status>
</kw>
<status endtime="20170823 13:46:19.933" starttime="20170823 13:46:19.932" status="PASS"></status>
</kw>
<status endtime="20170823 13:46:19.933" starttime="20170823 13:46:19.931" status="PASS"></status>
</kw>
<status endtime="20170823 13:46:19.933" starttime="20170823 13:46:19.930" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170823 13:46:19.933">Delete All Sessions</msg>
<status endtime="20170823 13:46:19.933" starttime="20170823 13:46:19.933" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:46:19.934">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:46:19.934" starttime="20170823 13:46:19.662" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:46:19.934">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:46:19.934" starttime="20170823 13:46:19.934" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:46:19.935">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170823 13:46:19.935">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170823 13:46:19.935">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170823 13:46:19.935" starttime="20170823 13:46:19.935" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:46:19.935">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170823 13:46:19.935" starttime="20170823 13:46:19.661" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:46:19.936">${power_state} = Off</msg>
<status endtime="20170823 13:46:19.936" starttime="20170823 13:46:19.661" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170823 13:46:19.936">On != Off</msg>
<status endtime="20170823 13:46:19.936" starttime="20170823 13:46:19.936" status="FAIL"></status>
</kw>
<status endtime="20170823 13:46:19.936" starttime="20170823 13:46:19.661" status="FAIL"></status>
</kw>
<status endtime="20170823 13:46:19.937" starttime="20170823 13:46:19.660" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:46:29.942">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 13:46:29.943" starttime="20170823 13:46:29.942" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:46:29.943">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 13:46:29.943" starttime="20170823 13:46:29.943" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:46:29.944">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 13:46:29.944" starttime="20170823 13:46:29.944" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:46:29.945">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 13:46:29.945" starttime="20170823 13:46:29.944" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:46:30.138">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 13:46:30.138" starttime="20170823 13:46:29.945" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:46:30.138">${status} = PASS</msg>
<msg level="INFO" timestamp="20170823 13:46:30.138">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:46:30.138" starttime="20170823 13:46:29.945" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:46:30.139">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:46:30.139" starttime="20170823 13:46:30.139" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:46:30.140">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:46:30.140" starttime="20170823 13:46:30.139" status="PASS"></status>
</kw>
<status endtime="20170823 13:46:30.140" starttime="20170823 13:46:29.941" status="PASS"></status>
</kw>
<status endtime="20170823 13:46:30.140" starttime="20170823 13:46:29.941" status="PASS"></status>
</kw>
<status endtime="20170823 13:46:30.140" starttime="20170823 13:46:29.940" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:46:30.141">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 13:46:30.141" starttime="20170823 13:46:30.140" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:46:30.143">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:46:30.143" starttime="20170823 13:46:30.142" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:46:30.144">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:46:30.144" starttime="20170823 13:46:30.144" status="PASS"></status>
</kw>
<status endtime="20170823 13:46:30.144" starttime="20170823 13:46:30.143" status="PASS"></status>
</kw>
<status endtime="20170823 13:46:30.144" starttime="20170823 13:46:30.142" status="PASS"></status>
</kw>
<status endtime="20170823 13:46:30.144" starttime="20170823 13:46:30.141" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:46:30.209">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170823 13:46:30.209">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:46:30.209" starttime="20170823 13:46:30.145" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:46:30.211">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:46:30.211" starttime="20170823 13:46:30.210" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:46:30.213">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:46:30.213" starttime="20170823 13:46:30.212" status="PASS"></status>
</kw>
<status endtime="20170823 13:46:30.213" starttime="20170823 13:46:30.211" status="PASS"></status>
</kw>
<status endtime="20170823 13:46:30.213" starttime="20170823 13:46:30.210" status="PASS"></status>
</kw>
<status endtime="20170823 13:46:30.213" starttime="20170823 13:46:30.209" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170823 13:46:30.213">Delete All Sessions</msg>
<status endtime="20170823 13:46:30.213" starttime="20170823 13:46:30.213" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:46:30.214">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:46:30.214" starttime="20170823 13:46:29.939" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:46:30.214">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:46:30.214" starttime="20170823 13:46:30.214" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:46:30.215">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170823 13:46:30.215">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170823 13:46:30.215">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170823 13:46:30.215" starttime="20170823 13:46:30.215" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:46:30.215">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170823 13:46:30.215" starttime="20170823 13:46:29.939" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:46:30.216">${power_state} = Off</msg>
<status endtime="20170823 13:46:30.216" starttime="20170823 13:46:29.938" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170823 13:46:30.216">On != Off</msg>
<status endtime="20170823 13:46:30.216" starttime="20170823 13:46:30.216" status="FAIL"></status>
</kw>
<status endtime="20170823 13:46:30.217" starttime="20170823 13:46:29.938" status="FAIL"></status>
</kw>
<status endtime="20170823 13:46:30.217" starttime="20170823 13:46:29.937" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:46:40.222">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 13:46:40.222" starttime="20170823 13:46:40.222" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:46:40.223">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 13:46:40.223" starttime="20170823 13:46:40.223" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:46:40.224">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 13:46:40.224" starttime="20170823 13:46:40.223" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:46:40.224">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 13:46:40.224" starttime="20170823 13:46:40.224" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:46:40.404">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 13:46:40.404" starttime="20170823 13:46:40.225" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:46:40.404">${status} = PASS</msg>
<msg level="INFO" timestamp="20170823 13:46:40.404">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:46:40.404" starttime="20170823 13:46:40.225" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:46:40.405">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:46:40.405" starttime="20170823 13:46:40.405" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:46:40.406">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:46:40.406" starttime="20170823 13:46:40.405" status="PASS"></status>
</kw>
<status endtime="20170823 13:46:40.406" starttime="20170823 13:46:40.221" status="PASS"></status>
</kw>
<status endtime="20170823 13:46:40.406" starttime="20170823 13:46:40.221" status="PASS"></status>
</kw>
<status endtime="20170823 13:46:40.406" starttime="20170823 13:46:40.220" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:46:40.407">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 13:46:40.407" starttime="20170823 13:46:40.406" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:46:40.409">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:46:40.409" starttime="20170823 13:46:40.408" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:46:40.410">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:46:40.410" starttime="20170823 13:46:40.409" status="PASS"></status>
</kw>
<status endtime="20170823 13:46:40.410" starttime="20170823 13:46:40.409" status="PASS"></status>
</kw>
<status endtime="20170823 13:46:40.410" starttime="20170823 13:46:40.407" status="PASS"></status>
</kw>
<status endtime="20170823 13:46:40.410" starttime="20170823 13:46:40.407" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:46:40.493">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170823 13:46:40.493">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:46:40.493" starttime="20170823 13:46:40.410" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:46:40.495">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:46:40.495" starttime="20170823 13:46:40.495" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:46:40.496">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:46:40.496" starttime="20170823 13:46:40.496" status="PASS"></status>
</kw>
<status endtime="20170823 13:46:40.496" starttime="20170823 13:46:40.495" status="PASS"></status>
</kw>
<status endtime="20170823 13:46:40.496" starttime="20170823 13:46:40.494" status="PASS"></status>
</kw>
<status endtime="20170823 13:46:40.496" starttime="20170823 13:46:40.493" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170823 13:46:40.497">Delete All Sessions</msg>
<status endtime="20170823 13:46:40.497" starttime="20170823 13:46:40.497" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:46:40.497">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:46:40.497" starttime="20170823 13:46:40.219" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:46:40.498">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:46:40.498" starttime="20170823 13:46:40.497" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:46:40.498">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170823 13:46:40.498">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170823 13:46:40.498">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170823 13:46:40.498" starttime="20170823 13:46:40.498" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:46:40.499">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170823 13:46:40.499" starttime="20170823 13:46:40.219" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:46:40.499">${power_state} = Off</msg>
<status endtime="20170823 13:46:40.499" starttime="20170823 13:46:40.218" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170823 13:46:40.500">On != Off</msg>
<status endtime="20170823 13:46:40.500" starttime="20170823 13:46:40.499" status="FAIL"></status>
</kw>
<status endtime="20170823 13:46:40.500" starttime="20170823 13:46:40.218" status="FAIL"></status>
</kw>
<status endtime="20170823 13:46:40.500" starttime="20170823 13:46:40.217" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:46:50.506">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 13:46:50.506" starttime="20170823 13:46:50.506" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:46:50.507">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 13:46:50.507" starttime="20170823 13:46:50.507" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:46:50.508">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 13:46:50.508" starttime="20170823 13:46:50.507" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:46:50.508">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 13:46:50.508" starttime="20170823 13:46:50.508" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:46:50.687">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 13:46:50.688" starttime="20170823 13:46:50.509" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:46:50.688">${status} = PASS</msg>
<msg level="INFO" timestamp="20170823 13:46:50.688">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:46:50.688" starttime="20170823 13:46:50.509" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:46:50.688">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:46:50.689" starttime="20170823 13:46:50.688" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:46:50.689">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:46:50.689" starttime="20170823 13:46:50.689" status="PASS"></status>
</kw>
<status endtime="20170823 13:46:50.689" starttime="20170823 13:46:50.505" status="PASS"></status>
</kw>
<status endtime="20170823 13:46:50.689" starttime="20170823 13:46:50.504" status="PASS"></status>
</kw>
<status endtime="20170823 13:46:50.690" starttime="20170823 13:46:50.503" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:46:50.690">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 13:46:50.690" starttime="20170823 13:46:50.690" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:46:50.692">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:46:50.692" starttime="20170823 13:46:50.692" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:46:50.693">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:46:50.693" starttime="20170823 13:46:50.693" status="PASS"></status>
</kw>
<status endtime="20170823 13:46:50.694" starttime="20170823 13:46:50.693" status="PASS"></status>
</kw>
<status endtime="20170823 13:46:50.694" starttime="20170823 13:46:50.691" status="PASS"></status>
</kw>
<status endtime="20170823 13:46:50.694" starttime="20170823 13:46:50.690" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:46:50.769">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170823 13:46:50.770">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:46:50.770" starttime="20170823 13:46:50.694" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:46:50.773">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:46:50.773" starttime="20170823 13:46:50.772" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:46:50.774">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:46:50.774" starttime="20170823 13:46:50.774" status="PASS"></status>
</kw>
<status endtime="20170823 13:46:50.775" starttime="20170823 13:46:50.773" status="PASS"></status>
</kw>
<status endtime="20170823 13:46:50.775" starttime="20170823 13:46:50.771" status="PASS"></status>
</kw>
<status endtime="20170823 13:46:50.775" starttime="20170823 13:46:50.770" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170823 13:46:50.775">Delete All Sessions</msg>
<status endtime="20170823 13:46:50.775" starttime="20170823 13:46:50.775" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:46:50.775">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:46:50.775" starttime="20170823 13:46:50.503" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:46:50.776">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:46:50.776" starttime="20170823 13:46:50.776" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:46:50.777">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170823 13:46:50.777">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170823 13:46:50.777">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170823 13:46:50.777" starttime="20170823 13:46:50.776" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:46:50.777">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170823 13:46:50.777" starttime="20170823 13:46:50.502" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:46:50.777">${power_state} = Off</msg>
<status endtime="20170823 13:46:50.777" starttime="20170823 13:46:50.502" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170823 13:46:50.778">On != Off</msg>
<status endtime="20170823 13:46:50.778" starttime="20170823 13:46:50.778" status="FAIL"></status>
</kw>
<status endtime="20170823 13:46:50.778" starttime="20170823 13:46:50.501" status="FAIL"></status>
</kw>
<status endtime="20170823 13:46:50.778" starttime="20170823 13:46:50.501" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:47:00.784">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 13:47:00.784" starttime="20170823 13:47:00.783" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:47:00.785">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 13:47:00.785" starttime="20170823 13:47:00.784" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:47:00.785">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 13:47:00.785" starttime="20170823 13:47:00.785" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:47:00.786">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 13:47:00.786" starttime="20170823 13:47:00.786" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:47:00.983">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 13:47:00.983" starttime="20170823 13:47:00.787" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:47:00.983">${status} = PASS</msg>
<msg level="INFO" timestamp="20170823 13:47:00.983">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:47:00.983" starttime="20170823 13:47:00.786" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:47:00.984">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:47:00.984" starttime="20170823 13:47:00.984" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:47:00.985">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:47:00.985" starttime="20170823 13:47:00.985" status="PASS"></status>
</kw>
<status endtime="20170823 13:47:00.985" starttime="20170823 13:47:00.783" status="PASS"></status>
</kw>
<status endtime="20170823 13:47:00.986" starttime="20170823 13:47:00.782" status="PASS"></status>
</kw>
<status endtime="20170823 13:47:00.986" starttime="20170823 13:47:00.782" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:47:00.987">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 13:47:00.987" starttime="20170823 13:47:00.986" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:47:00.990">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:47:00.990" starttime="20170823 13:47:00.989" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:47:00.991">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:47:00.991" starttime="20170823 13:47:00.991" status="PASS"></status>
</kw>
<status endtime="20170823 13:47:00.991" starttime="20170823 13:47:00.990" status="PASS"></status>
</kw>
<status endtime="20170823 13:47:00.991" starttime="20170823 13:47:00.988" status="PASS"></status>
</kw>
<status endtime="20170823 13:47:00.992" starttime="20170823 13:47:00.987" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:47:01.056">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170823 13:47:01.056">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:47:01.056" starttime="20170823 13:47:00.992" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:47:01.058">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:47:01.058" starttime="20170823 13:47:01.058" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:47:01.059">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:47:01.059" starttime="20170823 13:47:01.059" status="PASS"></status>
</kw>
<status endtime="20170823 13:47:01.059" starttime="20170823 13:47:01.058" status="PASS"></status>
</kw>
<status endtime="20170823 13:47:01.059" starttime="20170823 13:47:01.057" status="PASS"></status>
</kw>
<status endtime="20170823 13:47:01.059" starttime="20170823 13:47:01.057" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170823 13:47:01.060">Delete All Sessions</msg>
<status endtime="20170823 13:47:01.060" starttime="20170823 13:47:01.060" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:47:01.060">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:47:01.060" starttime="20170823 13:47:00.781" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:47:01.061">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:47:01.061" starttime="20170823 13:47:01.060" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:47:01.062">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170823 13:47:01.062">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170823 13:47:01.062">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170823 13:47:01.062" starttime="20170823 13:47:01.061" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:47:01.062">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170823 13:47:01.062" starttime="20170823 13:47:00.780" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:47:01.062">${power_state} = Off</msg>
<status endtime="20170823 13:47:01.063" starttime="20170823 13:47:00.780" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170823 13:47:01.063">On != Off</msg>
<status endtime="20170823 13:47:01.063" starttime="20170823 13:47:01.063" status="FAIL"></status>
</kw>
<status endtime="20170823 13:47:01.063" starttime="20170823 13:47:00.780" status="FAIL"></status>
</kw>
<status endtime="20170823 13:47:01.064" starttime="20170823 13:47:00.779" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:47:11.069">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 13:47:11.070" starttime="20170823 13:47:11.069" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:47:11.070">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 13:47:11.070" starttime="20170823 13:47:11.070" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:47:11.071">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 13:47:11.071" starttime="20170823 13:47:11.071" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:47:11.072">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 13:47:11.072" starttime="20170823 13:47:11.071" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:47:11.276">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 13:47:11.276" starttime="20170823 13:47:11.073" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:47:11.276">${status} = PASS</msg>
<msg level="INFO" timestamp="20170823 13:47:11.276">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:47:11.276" starttime="20170823 13:47:11.072" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:47:11.277">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:47:11.277" starttime="20170823 13:47:11.276" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:47:11.278">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:47:11.278" starttime="20170823 13:47:11.277" status="PASS"></status>
</kw>
<status endtime="20170823 13:47:11.278" starttime="20170823 13:47:11.068" status="PASS"></status>
</kw>
<status endtime="20170823 13:47:11.278" starttime="20170823 13:47:11.067" status="PASS"></status>
</kw>
<status endtime="20170823 13:47:11.278" starttime="20170823 13:47:11.067" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:47:11.279">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 13:47:11.279" starttime="20170823 13:47:11.278" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:47:11.281">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:47:11.281" starttime="20170823 13:47:11.280" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:47:11.282">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:47:11.282" starttime="20170823 13:47:11.281" status="PASS"></status>
</kw>
<status endtime="20170823 13:47:11.282" starttime="20170823 13:47:11.281" status="PASS"></status>
</kw>
<status endtime="20170823 13:47:11.282" starttime="20170823 13:47:11.279" status="PASS"></status>
</kw>
<status endtime="20170823 13:47:11.283" starttime="20170823 13:47:11.279" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:47:11.362">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170823 13:47:11.362">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:47:11.363" starttime="20170823 13:47:11.283" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:47:11.364">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:47:11.364" starttime="20170823 13:47:11.364" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:47:11.366">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:47:11.366" starttime="20170823 13:47:11.365" status="PASS"></status>
</kw>
<status endtime="20170823 13:47:11.366" starttime="20170823 13:47:11.365" status="PASS"></status>
</kw>
<status endtime="20170823 13:47:11.366" starttime="20170823 13:47:11.363" status="PASS"></status>
</kw>
<status endtime="20170823 13:47:11.366" starttime="20170823 13:47:11.363" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170823 13:47:11.366">Delete All Sessions</msg>
<status endtime="20170823 13:47:11.367" starttime="20170823 13:47:11.366" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:47:11.367">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:47:11.367" starttime="20170823 13:47:11.066" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:47:11.367">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:47:11.367" starttime="20170823 13:47:11.367" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:47:11.368">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170823 13:47:11.368">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170823 13:47:11.368">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170823 13:47:11.368" starttime="20170823 13:47:11.368" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:47:11.369">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170823 13:47:11.369" starttime="20170823 13:47:11.065" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:47:11.369">${power_state} = Off</msg>
<status endtime="20170823 13:47:11.369" starttime="20170823 13:47:11.065" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170823 13:47:11.369">On != Off</msg>
<status endtime="20170823 13:47:11.370" starttime="20170823 13:47:11.369" status="FAIL"></status>
</kw>
<status endtime="20170823 13:47:11.370" starttime="20170823 13:47:11.065" status="FAIL"></status>
</kw>
<status endtime="20170823 13:47:11.370" starttime="20170823 13:47:11.064" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:47:21.376">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 13:47:21.376" starttime="20170823 13:47:21.375" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:47:21.377">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 13:47:21.377" starttime="20170823 13:47:21.376" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:47:21.377">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 13:47:21.377" starttime="20170823 13:47:21.377" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:47:21.378">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 13:47:21.378" starttime="20170823 13:47:21.378" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:47:21.577">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 13:47:21.577" starttime="20170823 13:47:21.379" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:47:21.577">${status} = PASS</msg>
<msg level="INFO" timestamp="20170823 13:47:21.577">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:47:21.577" starttime="20170823 13:47:21.378" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:47:21.578">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:47:21.578" starttime="20170823 13:47:21.577" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:47:21.578">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:47:21.579" starttime="20170823 13:47:21.578" status="PASS"></status>
</kw>
<status endtime="20170823 13:47:21.579" starttime="20170823 13:47:21.375" status="PASS"></status>
</kw>
<status endtime="20170823 13:47:21.579" starttime="20170823 13:47:21.374" status="PASS"></status>
</kw>
<status endtime="20170823 13:47:21.579" starttime="20170823 13:47:21.373" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:47:21.579">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 13:47:21.579" starttime="20170823 13:47:21.579" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:47:21.581">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:47:21.582" starttime="20170823 13:47:21.581" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:47:21.583">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:47:21.583" starttime="20170823 13:47:21.582" status="PASS"></status>
</kw>
<status endtime="20170823 13:47:21.583" starttime="20170823 13:47:21.582" status="PASS"></status>
</kw>
<status endtime="20170823 13:47:21.583" starttime="20170823 13:47:21.580" status="PASS"></status>
</kw>
<status endtime="20170823 13:47:21.583" starttime="20170823 13:47:21.580" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:47:21.673">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170823 13:47:21.673">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:47:21.673" starttime="20170823 13:47:21.583" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:47:21.675">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:47:21.675" starttime="20170823 13:47:21.674" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:47:21.676">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:47:21.676" starttime="20170823 13:47:21.675" status="PASS"></status>
</kw>
<status endtime="20170823 13:47:21.676" starttime="20170823 13:47:21.675" status="PASS"></status>
</kw>
<status endtime="20170823 13:47:21.676" starttime="20170823 13:47:21.674" status="PASS"></status>
</kw>
<status endtime="20170823 13:47:21.676" starttime="20170823 13:47:21.673" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170823 13:47:21.677">Delete All Sessions</msg>
<status endtime="20170823 13:47:21.677" starttime="20170823 13:47:21.676" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:47:21.677">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:47:21.677" starttime="20170823 13:47:21.373" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:47:21.677">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:47:21.678" starttime="20170823 13:47:21.677" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:47:21.678">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170823 13:47:21.678">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170823 13:47:21.678">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170823 13:47:21.678" starttime="20170823 13:47:21.678" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:47:21.679">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170823 13:47:21.679" starttime="20170823 13:47:21.372" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:47:21.679">${power_state} = Off</msg>
<status endtime="20170823 13:47:21.679" starttime="20170823 13:47:21.372" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170823 13:47:21.680">On != Off</msg>
<status endtime="20170823 13:47:21.680" starttime="20170823 13:47:21.679" status="FAIL"></status>
</kw>
<status endtime="20170823 13:47:21.680" starttime="20170823 13:47:21.371" status="FAIL"></status>
</kw>
<status endtime="20170823 13:47:21.680" starttime="20170823 13:47:21.371" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:47:31.686">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 13:47:31.686" starttime="20170823 13:47:31.685" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:47:31.687">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 13:47:31.687" starttime="20170823 13:47:31.686" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:47:31.687">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 13:47:31.687" starttime="20170823 13:47:31.687" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:47:31.688">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 13:47:31.688" starttime="20170823 13:47:31.687" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:47:31.871">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 13:47:31.871" starttime="20170823 13:47:31.689" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:47:31.871">${status} = PASS</msg>
<msg level="INFO" timestamp="20170823 13:47:31.871">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:47:31.871" starttime="20170823 13:47:31.688" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:47:31.872">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:47:31.872" starttime="20170823 13:47:31.872" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:47:31.873">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:47:31.873" starttime="20170823 13:47:31.873" status="PASS"></status>
</kw>
<status endtime="20170823 13:47:31.873" starttime="20170823 13:47:31.684" status="PASS"></status>
</kw>
<status endtime="20170823 13:47:31.873" starttime="20170823 13:47:31.684" status="PASS"></status>
</kw>
<status endtime="20170823 13:47:31.873" starttime="20170823 13:47:31.683" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:47:31.874">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 13:47:31.874" starttime="20170823 13:47:31.874" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:47:31.876">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:47:31.876" starttime="20170823 13:47:31.875" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:47:31.877">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:47:31.877" starttime="20170823 13:47:31.877" status="PASS"></status>
</kw>
<status endtime="20170823 13:47:31.877" starttime="20170823 13:47:31.876" status="PASS"></status>
</kw>
<status endtime="20170823 13:47:31.877" starttime="20170823 13:47:31.875" status="PASS"></status>
</kw>
<status endtime="20170823 13:47:31.877" starttime="20170823 13:47:31.874" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:47:31.950">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170823 13:47:31.950">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:47:31.950" starttime="20170823 13:47:31.878" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:47:31.952">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:47:31.952" starttime="20170823 13:47:31.952" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:47:31.956">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:47:31.956" starttime="20170823 13:47:31.956" status="PASS"></status>
</kw>
<status endtime="20170823 13:47:31.957" starttime="20170823 13:47:31.952" status="PASS"></status>
</kw>
<status endtime="20170823 13:47:31.957" starttime="20170823 13:47:31.951" status="PASS"></status>
</kw>
<status endtime="20170823 13:47:31.957" starttime="20170823 13:47:31.951" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170823 13:47:31.957">Delete All Sessions</msg>
<status endtime="20170823 13:47:31.957" starttime="20170823 13:47:31.957" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:47:31.957">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:47:31.957" starttime="20170823 13:47:31.682" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:47:31.958">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:47:31.958" starttime="20170823 13:47:31.958" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:47:31.959">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170823 13:47:31.959">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170823 13:47:31.959">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170823 13:47:31.959" starttime="20170823 13:47:31.958" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:47:31.959">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170823 13:47:31.959" starttime="20170823 13:47:31.682" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:47:31.959">${power_state} = Off</msg>
<status endtime="20170823 13:47:31.959" starttime="20170823 13:47:31.681" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170823 13:47:31.960">On != Off</msg>
<status endtime="20170823 13:47:31.960" starttime="20170823 13:47:31.960" status="FAIL"></status>
</kw>
<status endtime="20170823 13:47:31.960" starttime="20170823 13:47:31.681" status="FAIL"></status>
</kw>
<status endtime="20170823 13:47:31.961" starttime="20170823 13:47:31.680" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:47:41.966">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 13:47:41.966" starttime="20170823 13:47:41.965" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:47:41.967">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 13:47:41.967" starttime="20170823 13:47:41.966" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:47:41.967">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 13:47:41.968" starttime="20170823 13:47:41.967" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:47:41.968">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 13:47:41.968" starttime="20170823 13:47:41.968" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:47:42.164">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 13:47:42.164" starttime="20170823 13:47:41.969" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:47:42.164">${status} = PASS</msg>
<msg level="INFO" timestamp="20170823 13:47:42.164">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:47:42.164" starttime="20170823 13:47:41.968" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:47:42.165">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:47:42.165" starttime="20170823 13:47:42.164" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:47:42.165">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:47:42.165" starttime="20170823 13:47:42.165" status="PASS"></status>
</kw>
<status endtime="20170823 13:47:42.165" starttime="20170823 13:47:41.965" status="PASS"></status>
</kw>
<status endtime="20170823 13:47:42.166" starttime="20170823 13:47:41.964" status="PASS"></status>
</kw>
<status endtime="20170823 13:47:42.166" starttime="20170823 13:47:41.964" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:47:42.166">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 13:47:42.166" starttime="20170823 13:47:42.166" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:47:42.168">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:47:42.168" starttime="20170823 13:47:42.168" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:47:42.169">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:47:42.169" starttime="20170823 13:47:42.169" status="PASS"></status>
</kw>
<status endtime="20170823 13:47:42.169" starttime="20170823 13:47:42.169" status="PASS"></status>
</kw>
<status endtime="20170823 13:47:42.170" starttime="20170823 13:47:42.167" status="PASS"></status>
</kw>
<status endtime="20170823 13:47:42.170" starttime="20170823 13:47:42.167" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:47:42.234">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170823 13:47:42.235">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:47:42.235" starttime="20170823 13:47:42.170" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:47:42.236">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:47:42.236" starttime="20170823 13:47:42.236" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:47:42.237">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:47:42.237" starttime="20170823 13:47:42.237" status="PASS"></status>
</kw>
<status endtime="20170823 13:47:42.238" starttime="20170823 13:47:42.237" status="PASS"></status>
</kw>
<status endtime="20170823 13:47:42.238" starttime="20170823 13:47:42.235" status="PASS"></status>
</kw>
<status endtime="20170823 13:47:42.238" starttime="20170823 13:47:42.235" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170823 13:47:42.238">Delete All Sessions</msg>
<status endtime="20170823 13:47:42.238" starttime="20170823 13:47:42.238" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:47:42.239">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:47:42.239" starttime="20170823 13:47:41.963" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:47:42.239">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:47:42.239" starttime="20170823 13:47:42.239" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:47:42.240">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170823 13:47:42.240">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170823 13:47:42.240">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170823 13:47:42.240" starttime="20170823 13:47:42.239" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:47:42.240">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170823 13:47:42.240" starttime="20170823 13:47:41.963" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:47:42.241">${power_state} = Off</msg>
<status endtime="20170823 13:47:42.241" starttime="20170823 13:47:41.962" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170823 13:47:42.241">On != Off</msg>
<status endtime="20170823 13:47:42.241" starttime="20170823 13:47:42.241" status="FAIL"></status>
</kw>
<status endtime="20170823 13:47:42.242" starttime="20170823 13:47:41.962" status="FAIL"></status>
</kw>
<status endtime="20170823 13:47:42.242" starttime="20170823 13:47:41.961" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:47:52.247">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 13:47:52.248" starttime="20170823 13:47:52.247" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:47:52.248">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 13:47:52.248" starttime="20170823 13:47:52.248" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:47:52.249">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 13:47:52.249" starttime="20170823 13:47:52.249" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:47:52.250">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 13:47:52.250" starttime="20170823 13:47:52.249" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:47:52.430">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 13:47:52.430" starttime="20170823 13:47:52.250" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:47:52.431">${status} = PASS</msg>
<msg level="INFO" timestamp="20170823 13:47:52.431">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:47:52.431" starttime="20170823 13:47:52.250" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:47:52.431">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:47:52.431" starttime="20170823 13:47:52.431" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:47:52.432">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:47:52.432" starttime="20170823 13:47:52.432" status="PASS"></status>
</kw>
<status endtime="20170823 13:47:52.432" starttime="20170823 13:47:52.246" status="PASS"></status>
</kw>
<status endtime="20170823 13:47:52.432" starttime="20170823 13:47:52.246" status="PASS"></status>
</kw>
<status endtime="20170823 13:47:52.432" starttime="20170823 13:47:52.245" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:47:52.433">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 13:47:52.433" starttime="20170823 13:47:52.433" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:47:52.435">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:47:52.435" starttime="20170823 13:47:52.434" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:47:52.436">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:47:52.436" starttime="20170823 13:47:52.436" status="PASS"></status>
</kw>
<status endtime="20170823 13:47:52.436" starttime="20170823 13:47:52.435" status="PASS"></status>
</kw>
<status endtime="20170823 13:47:52.436" starttime="20170823 13:47:52.434" status="PASS"></status>
</kw>
<status endtime="20170823 13:47:52.437" starttime="20170823 13:47:52.433" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:47:52.500">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170823 13:47:52.501">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:47:52.501" starttime="20170823 13:47:52.437" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:47:52.502">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:47:52.502" starttime="20170823 13:47:52.502" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:47:52.504">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:47:52.504" starttime="20170823 13:47:52.503" status="PASS"></status>
</kw>
<status endtime="20170823 13:47:52.504" starttime="20170823 13:47:52.503" status="PASS"></status>
</kw>
<status endtime="20170823 13:47:52.504" starttime="20170823 13:47:52.501" status="PASS"></status>
</kw>
<status endtime="20170823 13:47:52.504" starttime="20170823 13:47:52.501" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170823 13:47:52.505">Delete All Sessions</msg>
<status endtime="20170823 13:47:52.505" starttime="20170823 13:47:52.504" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:47:52.505">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:47:52.505" starttime="20170823 13:47:52.244" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:47:52.505">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:47:52.506" starttime="20170823 13:47:52.505" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:47:52.506">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170823 13:47:52.506">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170823 13:47:52.506">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170823 13:47:52.506" starttime="20170823 13:47:52.506" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:47:52.507">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170823 13:47:52.507" starttime="20170823 13:47:52.244" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:47:52.507">${power_state} = Off</msg>
<status endtime="20170823 13:47:52.507" starttime="20170823 13:47:52.243" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170823 13:47:52.508">On != Off</msg>
<status endtime="20170823 13:47:52.508" starttime="20170823 13:47:52.507" status="FAIL"></status>
</kw>
<status endtime="20170823 13:47:52.508" starttime="20170823 13:47:52.243" status="FAIL"></status>
</kw>
<status endtime="20170823 13:47:52.508" starttime="20170823 13:47:52.242" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:48:02.513">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 13:48:02.514" starttime="20170823 13:48:02.513" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:48:02.514">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 13:48:02.514" starttime="20170823 13:48:02.514" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:48:02.515">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 13:48:02.515" starttime="20170823 13:48:02.515" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:48:02.516">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 13:48:02.516" starttime="20170823 13:48:02.515" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:48:02.695">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 13:48:02.695" starttime="20170823 13:48:02.516" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:48:02.695">${status} = PASS</msg>
<msg level="INFO" timestamp="20170823 13:48:02.695">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:48:02.695" starttime="20170823 13:48:02.516" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:48:02.696">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:48:02.696" starttime="20170823 13:48:02.696" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:48:02.697">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:48:02.697" starttime="20170823 13:48:02.696" status="PASS"></status>
</kw>
<status endtime="20170823 13:48:02.697" starttime="20170823 13:48:02.512" status="PASS"></status>
</kw>
<status endtime="20170823 13:48:02.697" starttime="20170823 13:48:02.512" status="PASS"></status>
</kw>
<status endtime="20170823 13:48:02.697" starttime="20170823 13:48:02.511" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:48:02.698">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 13:48:02.698" starttime="20170823 13:48:02.697" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:48:02.700">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:48:02.700" starttime="20170823 13:48:02.699" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:48:02.701">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:48:02.701" starttime="20170823 13:48:02.700" status="PASS"></status>
</kw>
<status endtime="20170823 13:48:02.701" starttime="20170823 13:48:02.700" status="PASS"></status>
</kw>
<status endtime="20170823 13:48:02.701" starttime="20170823 13:48:02.698" status="PASS"></status>
</kw>
<status endtime="20170823 13:48:02.701" starttime="20170823 13:48:02.698" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:48:02.790">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170823 13:48:02.790">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:48:02.790" starttime="20170823 13:48:02.701" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:48:02.792">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:48:02.792" starttime="20170823 13:48:02.792" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:48:02.793">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:48:02.793" starttime="20170823 13:48:02.793" status="PASS"></status>
</kw>
<status endtime="20170823 13:48:02.793" starttime="20170823 13:48:02.792" status="PASS"></status>
</kw>
<status endtime="20170823 13:48:02.793" starttime="20170823 13:48:02.791" status="PASS"></status>
</kw>
<status endtime="20170823 13:48:02.793" starttime="20170823 13:48:02.791" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170823 13:48:02.794">Delete All Sessions</msg>
<status endtime="20170823 13:48:02.794" starttime="20170823 13:48:02.794" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:48:02.794">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:48:02.794" starttime="20170823 13:48:02.511" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:48:02.795">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:48:02.795" starttime="20170823 13:48:02.794" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:48:02.795">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170823 13:48:02.795">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170823 13:48:02.796">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170823 13:48:02.796" starttime="20170823 13:48:02.795" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:48:02.796">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170823 13:48:02.796" starttime="20170823 13:48:02.510" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:48:02.796">${power_state} = Off</msg>
<status endtime="20170823 13:48:02.796" starttime="20170823 13:48:02.510" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170823 13:48:02.797">On != Off</msg>
<status endtime="20170823 13:48:02.797" starttime="20170823 13:48:02.797" status="FAIL"></status>
</kw>
<status endtime="20170823 13:48:02.797" starttime="20170823 13:48:02.509" status="FAIL"></status>
</kw>
<status endtime="20170823 13:48:02.797" starttime="20170823 13:48:02.509" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:48:12.805">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 13:48:12.805" starttime="20170823 13:48:12.804" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:48:12.806">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 13:48:12.806" starttime="20170823 13:48:12.806" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:48:12.807">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 13:48:12.807" starttime="20170823 13:48:12.806" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:48:12.807">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 13:48:12.807" starttime="20170823 13:48:12.807" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:48:13.004">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 13:48:13.004" starttime="20170823 13:48:12.808" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:48:13.004">${status} = PASS</msg>
<msg level="INFO" timestamp="20170823 13:48:13.004">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:48:13.005" starttime="20170823 13:48:12.808" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:48:13.005">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:48:13.005" starttime="20170823 13:48:13.005" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:48:13.006">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:48:13.006" starttime="20170823 13:48:13.006" status="PASS"></status>
</kw>
<status endtime="20170823 13:48:13.006" starttime="20170823 13:48:12.803" status="PASS"></status>
</kw>
<status endtime="20170823 13:48:13.006" starttime="20170823 13:48:12.802" status="PASS"></status>
</kw>
<status endtime="20170823 13:48:13.007" starttime="20170823 13:48:12.801" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:48:13.007">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 13:48:13.007" starttime="20170823 13:48:13.007" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:48:13.011">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:48:13.011" starttime="20170823 13:48:13.010" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:48:13.012">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:48:13.012" starttime="20170823 13:48:13.012" status="PASS"></status>
</kw>
<status endtime="20170823 13:48:13.012" starttime="20170823 13:48:13.011" status="PASS"></status>
</kw>
<status endtime="20170823 13:48:13.013" starttime="20170823 13:48:13.009" status="PASS"></status>
</kw>
<status endtime="20170823 13:48:13.013" starttime="20170823 13:48:13.008" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:48:13.077">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170823 13:48:13.077">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:48:13.077" starttime="20170823 13:48:13.013" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:48:13.079">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:48:13.079" starttime="20170823 13:48:13.079" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:48:13.080">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:48:13.081" starttime="20170823 13:48:13.080" status="PASS"></status>
</kw>
<status endtime="20170823 13:48:13.081" starttime="20170823 13:48:13.079" status="PASS"></status>
</kw>
<status endtime="20170823 13:48:13.081" starttime="20170823 13:48:13.078" status="PASS"></status>
</kw>
<status endtime="20170823 13:48:13.081" starttime="20170823 13:48:13.078" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170823 13:48:13.081">Delete All Sessions</msg>
<status endtime="20170823 13:48:13.081" starttime="20170823 13:48:13.081" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:48:13.082">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:48:13.082" starttime="20170823 13:48:12.800" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:48:13.082">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:48:13.083" starttime="20170823 13:48:13.082" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:48:13.083">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170823 13:48:13.083">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170823 13:48:13.083">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170823 13:48:13.083" starttime="20170823 13:48:13.083" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:48:13.084">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170823 13:48:13.084" starttime="20170823 13:48:12.800" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:48:13.084">${power_state} = Off</msg>
<status endtime="20170823 13:48:13.084" starttime="20170823 13:48:12.799" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170823 13:48:13.085">On != Off</msg>
<status endtime="20170823 13:48:13.085" starttime="20170823 13:48:13.084" status="FAIL"></status>
</kw>
<status endtime="20170823 13:48:13.085" starttime="20170823 13:48:12.799" status="FAIL"></status>
</kw>
<status endtime="20170823 13:48:13.085" starttime="20170823 13:48:12.798" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:48:23.090">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 13:48:23.091" starttime="20170823 13:48:23.090" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:48:23.091">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 13:48:23.091" starttime="20170823 13:48:23.091" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:48:23.092">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 13:48:23.092" starttime="20170823 13:48:23.091" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:48:23.092">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 13:48:23.093" starttime="20170823 13:48:23.092" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:48:23.274">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 13:48:23.274" starttime="20170823 13:48:23.093" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:48:23.274">${status} = PASS</msg>
<msg level="INFO" timestamp="20170823 13:48:23.274">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:48:23.274" starttime="20170823 13:48:23.093" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:48:23.275">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:48:23.275" starttime="20170823 13:48:23.275" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:48:23.276">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:48:23.276" starttime="20170823 13:48:23.275" status="PASS"></status>
</kw>
<status endtime="20170823 13:48:23.276" starttime="20170823 13:48:23.089" status="PASS"></status>
</kw>
<status endtime="20170823 13:48:23.276" starttime="20170823 13:48:23.089" status="PASS"></status>
</kw>
<status endtime="20170823 13:48:23.276" starttime="20170823 13:48:23.088" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:48:23.277">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 13:48:23.277" starttime="20170823 13:48:23.277" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:48:23.279">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:48:23.279" starttime="20170823 13:48:23.278" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:48:23.280">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:48:23.280" starttime="20170823 13:48:23.280" status="PASS"></status>
</kw>
<status endtime="20170823 13:48:23.280" starttime="20170823 13:48:23.279" status="PASS"></status>
</kw>
<status endtime="20170823 13:48:23.280" starttime="20170823 13:48:23.278" status="PASS"></status>
</kw>
<status endtime="20170823 13:48:23.280" starttime="20170823 13:48:23.277" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:48:23.344">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170823 13:48:23.344">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:48:23.344" starttime="20170823 13:48:23.281" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:48:23.346">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:48:23.346" starttime="20170823 13:48:23.345" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:48:23.347">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:48:23.347" starttime="20170823 13:48:23.347" status="PASS"></status>
</kw>
<status endtime="20170823 13:48:23.347" starttime="20170823 13:48:23.346" status="PASS"></status>
</kw>
<status endtime="20170823 13:48:23.347" starttime="20170823 13:48:23.345" status="PASS"></status>
</kw>
<status endtime="20170823 13:48:23.347" starttime="20170823 13:48:23.344" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170823 13:48:23.348">Delete All Sessions</msg>
<status endtime="20170823 13:48:23.348" starttime="20170823 13:48:23.347" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:48:23.348">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:48:23.348" starttime="20170823 13:48:23.088" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:48:23.348">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:48:23.349" starttime="20170823 13:48:23.348" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:48:23.349">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170823 13:48:23.349">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170823 13:48:23.349">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170823 13:48:23.349" starttime="20170823 13:48:23.349" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:48:23.350">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170823 13:48:23.350" starttime="20170823 13:48:23.087" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:48:23.350">${power_state} = Off</msg>
<status endtime="20170823 13:48:23.350" starttime="20170823 13:48:23.087" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170823 13:48:23.351">On != Off</msg>
<status endtime="20170823 13:48:23.351" starttime="20170823 13:48:23.350" status="FAIL"></status>
</kw>
<status endtime="20170823 13:48:23.351" starttime="20170823 13:48:23.086" status="FAIL"></status>
</kw>
<status endtime="20170823 13:48:23.351" starttime="20170823 13:48:23.086" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:48:33.357">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 13:48:33.357" starttime="20170823 13:48:33.356" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:48:33.358">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 13:48:33.358" starttime="20170823 13:48:33.357" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:48:33.358">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 13:48:33.358" starttime="20170823 13:48:33.358" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:48:33.359">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 13:48:33.359" starttime="20170823 13:48:33.359" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:48:33.543">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 13:48:33.543" starttime="20170823 13:48:33.360" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:48:33.544">${status} = PASS</msg>
<msg level="INFO" timestamp="20170823 13:48:33.544">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:48:33.544" starttime="20170823 13:48:33.359" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:48:33.544">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:48:33.544" starttime="20170823 13:48:33.544" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:48:33.545">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:48:33.545" starttime="20170823 13:48:33.545" status="PASS"></status>
</kw>
<status endtime="20170823 13:48:33.545" starttime="20170823 13:48:33.355" status="PASS"></status>
</kw>
<status endtime="20170823 13:48:33.545" starttime="20170823 13:48:33.355" status="PASS"></status>
</kw>
<status endtime="20170823 13:48:33.545" starttime="20170823 13:48:33.354" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:48:33.546">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 13:48:33.546" starttime="20170823 13:48:33.546" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:48:33.548">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:48:33.549" starttime="20170823 13:48:33.547" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:48:33.549">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:48:33.550" starttime="20170823 13:48:33.549" status="PASS"></status>
</kw>
<status endtime="20170823 13:48:33.550" starttime="20170823 13:48:33.549" status="PASS"></status>
</kw>
<status endtime="20170823 13:48:33.550" starttime="20170823 13:48:33.547" status="PASS"></status>
</kw>
<status endtime="20170823 13:48:33.550" starttime="20170823 13:48:33.546" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:48:33.613">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170823 13:48:33.614">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:48:33.614" starttime="20170823 13:48:33.550" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:48:33.616">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:48:33.616" starttime="20170823 13:48:33.615" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:48:33.617">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:48:33.617" starttime="20170823 13:48:33.616" status="PASS"></status>
</kw>
<status endtime="20170823 13:48:33.617" starttime="20170823 13:48:33.616" status="PASS"></status>
</kw>
<status endtime="20170823 13:48:33.617" starttime="20170823 13:48:33.615" status="PASS"></status>
</kw>
<status endtime="20170823 13:48:33.617" starttime="20170823 13:48:33.614" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170823 13:48:33.618">Delete All Sessions</msg>
<status endtime="20170823 13:48:33.618" starttime="20170823 13:48:33.618" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:48:33.618">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:48:33.618" starttime="20170823 13:48:33.354" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:48:33.619">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:48:33.619" starttime="20170823 13:48:33.618" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:48:33.619">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170823 13:48:33.619">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170823 13:48:33.620">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170823 13:48:33.620" starttime="20170823 13:48:33.619" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:48:33.620">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170823 13:48:33.620" starttime="20170823 13:48:33.353" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:48:33.620">${power_state} = Off</msg>
<status endtime="20170823 13:48:33.620" starttime="20170823 13:48:33.352" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170823 13:48:33.621">On != Off</msg>
<status endtime="20170823 13:48:33.621" starttime="20170823 13:48:33.621" status="FAIL"></status>
</kw>
<status endtime="20170823 13:48:33.621" starttime="20170823 13:48:33.352" status="FAIL"></status>
</kw>
<status endtime="20170823 13:48:33.621" starttime="20170823 13:48:33.351" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:48:43.626">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 13:48:43.627" starttime="20170823 13:48:43.626" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:48:43.627">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 13:48:43.627" starttime="20170823 13:48:43.627" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:48:43.628">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 13:48:43.628" starttime="20170823 13:48:43.628" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:48:43.629">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 13:48:43.629" starttime="20170823 13:48:43.628" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:48:43.808">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 13:48:43.809" starttime="20170823 13:48:43.629" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:48:43.809">${status} = PASS</msg>
<msg level="INFO" timestamp="20170823 13:48:43.809">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:48:43.809" starttime="20170823 13:48:43.629" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:48:43.809">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:48:43.810" starttime="20170823 13:48:43.809" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:48:43.810">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:48:43.810" starttime="20170823 13:48:43.810" status="PASS"></status>
</kw>
<status endtime="20170823 13:48:43.810" starttime="20170823 13:48:43.626" status="PASS"></status>
</kw>
<status endtime="20170823 13:48:43.810" starttime="20170823 13:48:43.625" status="PASS"></status>
</kw>
<status endtime="20170823 13:48:43.811" starttime="20170823 13:48:43.624" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:48:43.811">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 13:48:43.811" starttime="20170823 13:48:43.811" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:48:43.813">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:48:43.813" starttime="20170823 13:48:43.813" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:48:43.814">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:48:43.814" starttime="20170823 13:48:43.814" status="PASS"></status>
</kw>
<status endtime="20170823 13:48:43.815" starttime="20170823 13:48:43.813" status="PASS"></status>
</kw>
<status endtime="20170823 13:48:43.815" starttime="20170823 13:48:43.812" status="PASS"></status>
</kw>
<status endtime="20170823 13:48:43.815" starttime="20170823 13:48:43.811" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:48:43.878">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170823 13:48:43.879">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:48:43.879" starttime="20170823 13:48:43.815" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:48:43.881">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:48:43.881" starttime="20170823 13:48:43.880" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:48:43.882">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:48:43.882" starttime="20170823 13:48:43.881" status="PASS"></status>
</kw>
<status endtime="20170823 13:48:43.882" starttime="20170823 13:48:43.881" status="PASS"></status>
</kw>
<status endtime="20170823 13:48:43.882" starttime="20170823 13:48:43.880" status="PASS"></status>
</kw>
<status endtime="20170823 13:48:43.882" starttime="20170823 13:48:43.879" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170823 13:48:43.882">Delete All Sessions</msg>
<status endtime="20170823 13:48:43.882" starttime="20170823 13:48:43.882" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:48:43.883">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:48:43.883" starttime="20170823 13:48:43.624" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:48:43.883">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:48:43.883" starttime="20170823 13:48:43.883" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:48:43.884">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170823 13:48:43.884">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170823 13:48:43.884">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170823 13:48:43.884" starttime="20170823 13:48:43.884" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:48:43.885">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170823 13:48:43.885" starttime="20170823 13:48:43.623" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:48:43.885">${power_state} = Off</msg>
<status endtime="20170823 13:48:43.885" starttime="20170823 13:48:43.623" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170823 13:48:43.886">On != Off</msg>
<status endtime="20170823 13:48:43.886" starttime="20170823 13:48:43.885" status="FAIL"></status>
</kw>
<status endtime="20170823 13:48:43.886" starttime="20170823 13:48:43.622" status="FAIL"></status>
</kw>
<status endtime="20170823 13:48:43.886" starttime="20170823 13:48:43.622" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:48:53.892">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 13:48:53.892" starttime="20170823 13:48:53.891" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:48:53.893">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 13:48:53.893" starttime="20170823 13:48:53.892" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:48:53.893">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 13:48:53.893" starttime="20170823 13:48:53.893" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:48:53.894">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 13:48:53.894" starttime="20170823 13:48:53.894" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:48:54.091">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 13:48:54.091" starttime="20170823 13:48:53.895" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:48:54.091">${status} = PASS</msg>
<msg level="INFO" timestamp="20170823 13:48:54.091">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:48:54.091" starttime="20170823 13:48:53.894" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:48:54.092">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:48:54.092" starttime="20170823 13:48:54.092" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:48:54.093">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:48:54.093" starttime="20170823 13:48:54.092" status="PASS"></status>
</kw>
<status endtime="20170823 13:48:54.093" starttime="20170823 13:48:53.890" status="PASS"></status>
</kw>
<status endtime="20170823 13:48:54.093" starttime="20170823 13:48:53.890" status="PASS"></status>
</kw>
<status endtime="20170823 13:48:54.093" starttime="20170823 13:48:53.889" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:48:54.094">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 13:48:54.094" starttime="20170823 13:48:54.093" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:48:54.096">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:48:54.096" starttime="20170823 13:48:54.095" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:48:54.097">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:48:54.097" starttime="20170823 13:48:54.097" status="PASS"></status>
</kw>
<status endtime="20170823 13:48:54.097" starttime="20170823 13:48:54.096" status="PASS"></status>
</kw>
<status endtime="20170823 13:48:54.097" starttime="20170823 13:48:54.095" status="PASS"></status>
</kw>
<status endtime="20170823 13:48:54.097" starttime="20170823 13:48:54.094" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:48:54.161">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170823 13:48:54.161">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:48:54.161" starttime="20170823 13:48:54.098" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:48:54.162">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:48:54.163" starttime="20170823 13:48:54.162" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:48:54.167">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:48:54.167" starttime="20170823 13:48:54.166" status="PASS"></status>
</kw>
<status endtime="20170823 13:48:54.167" starttime="20170823 13:48:54.163" status="PASS"></status>
</kw>
<status endtime="20170823 13:48:54.167" starttime="20170823 13:48:54.161" status="PASS"></status>
</kw>
<status endtime="20170823 13:48:54.167" starttime="20170823 13:48:54.161" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170823 13:48:54.168">Delete All Sessions</msg>
<status endtime="20170823 13:48:54.168" starttime="20170823 13:48:54.168" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:48:54.168">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:48:54.168" starttime="20170823 13:48:53.888" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:48:54.169">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:48:54.169" starttime="20170823 13:48:54.168" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:48:54.169">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170823 13:48:54.169">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170823 13:48:54.169">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170823 13:48:54.170" starttime="20170823 13:48:54.169" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:48:54.170">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170823 13:48:54.170" starttime="20170823 13:48:53.888" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:48:54.170">${power_state} = Off</msg>
<status endtime="20170823 13:48:54.170" starttime="20170823 13:48:53.887" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170823 13:48:54.171">On != Off</msg>
<status endtime="20170823 13:48:54.172" starttime="20170823 13:48:54.170" status="FAIL"></status>
</kw>
<status endtime="20170823 13:48:54.172" starttime="20170823 13:48:53.887" status="FAIL"></status>
</kw>
<status endtime="20170823 13:48:54.172" starttime="20170823 13:48:53.886" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:49:04.177">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 13:49:04.178" starttime="20170823 13:49:04.177" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:49:04.178">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 13:49:04.178" starttime="20170823 13:49:04.178" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:49:04.179">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 13:49:04.179" starttime="20170823 13:49:04.179" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:49:04.180">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 13:49:04.180" starttime="20170823 13:49:04.179" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:49:04.363">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 13:49:04.363" starttime="20170823 13:49:04.181" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:49:04.363">${status} = PASS</msg>
<msg level="INFO" timestamp="20170823 13:49:04.363">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:49:04.363" starttime="20170823 13:49:04.180" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:49:04.364">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:49:04.364" starttime="20170823 13:49:04.363" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:49:04.364">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:49:04.364" starttime="20170823 13:49:04.364" status="PASS"></status>
</kw>
<status endtime="20170823 13:49:04.365" starttime="20170823 13:49:04.177" status="PASS"></status>
</kw>
<status endtime="20170823 13:49:04.365" starttime="20170823 13:49:04.176" status="PASS"></status>
</kw>
<status endtime="20170823 13:49:04.365" starttime="20170823 13:49:04.175" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:49:04.365">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 13:49:04.365" starttime="20170823 13:49:04.365" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:49:04.367">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:49:04.367" starttime="20170823 13:49:04.367" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:49:04.368">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:49:04.368" starttime="20170823 13:49:04.368" status="PASS"></status>
</kw>
<status endtime="20170823 13:49:04.369" starttime="20170823 13:49:04.368" status="PASS"></status>
</kw>
<status endtime="20170823 13:49:04.369" starttime="20170823 13:49:04.366" status="PASS"></status>
</kw>
<status endtime="20170823 13:49:04.369" starttime="20170823 13:49:04.366" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:49:04.440">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170823 13:49:04.440">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:49:04.441" starttime="20170823 13:49:04.369" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:49:04.442">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:49:04.442" starttime="20170823 13:49:04.442" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:49:04.443">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:49:04.443" starttime="20170823 13:49:04.443" status="PASS"></status>
</kw>
<status endtime="20170823 13:49:04.444" starttime="20170823 13:49:04.443" status="PASS"></status>
</kw>
<status endtime="20170823 13:49:04.444" starttime="20170823 13:49:04.441" status="PASS"></status>
</kw>
<status endtime="20170823 13:49:04.444" starttime="20170823 13:49:04.441" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170823 13:49:04.444">Delete All Sessions</msg>
<status endtime="20170823 13:49:04.444" starttime="20170823 13:49:04.444" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:49:04.445">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:49:04.445" starttime="20170823 13:49:04.175" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:49:04.445">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:49:04.445" starttime="20170823 13:49:04.445" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:49:04.446">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170823 13:49:04.446">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170823 13:49:04.446">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170823 13:49:04.446" starttime="20170823 13:49:04.446" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:49:04.446">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170823 13:49:04.446" starttime="20170823 13:49:04.174" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:49:04.447">${power_state} = Off</msg>
<status endtime="20170823 13:49:04.447" starttime="20170823 13:49:04.174" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170823 13:49:04.447">On != Off</msg>
<status endtime="20170823 13:49:04.447" starttime="20170823 13:49:04.447" status="FAIL"></status>
</kw>
<status endtime="20170823 13:49:04.447" starttime="20170823 13:49:04.173" status="FAIL"></status>
</kw>
<status endtime="20170823 13:49:04.448" starttime="20170823 13:49:04.173" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:49:14.454">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 13:49:14.454" starttime="20170823 13:49:14.453" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:49:14.455">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 13:49:14.455" starttime="20170823 13:49:14.454" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:49:14.455">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 13:49:14.455" starttime="20170823 13:49:14.455" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:49:14.456">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 13:49:14.456" starttime="20170823 13:49:14.456" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:49:14.640">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 13:49:14.640" starttime="20170823 13:49:14.457" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:49:14.640">${status} = PASS</msg>
<msg level="INFO" timestamp="20170823 13:49:14.640">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:49:14.640" starttime="20170823 13:49:14.456" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:49:14.641">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:49:14.641" starttime="20170823 13:49:14.641" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:49:14.642">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:49:14.642" starttime="20170823 13:49:14.641" status="PASS"></status>
</kw>
<status endtime="20170823 13:49:14.642" starttime="20170823 13:49:14.452" status="PASS"></status>
</kw>
<status endtime="20170823 13:49:14.642" starttime="20170823 13:49:14.452" status="PASS"></status>
</kw>
<status endtime="20170823 13:49:14.642" starttime="20170823 13:49:14.451" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:49:14.643">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 13:49:14.643" starttime="20170823 13:49:14.642" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:49:14.645">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:49:14.645" starttime="20170823 13:49:14.644" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:49:14.646">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:49:14.646" starttime="20170823 13:49:14.646" status="PASS"></status>
</kw>
<status endtime="20170823 13:49:14.646" starttime="20170823 13:49:14.645" status="PASS"></status>
</kw>
<status endtime="20170823 13:49:14.646" starttime="20170823 13:49:14.644" status="PASS"></status>
</kw>
<status endtime="20170823 13:49:14.646" starttime="20170823 13:49:14.643" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:49:14.710">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170823 13:49:14.710">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:49:14.710" starttime="20170823 13:49:14.647" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:49:14.712">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:49:14.712" starttime="20170823 13:49:14.711" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:49:14.713">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:49:14.713" starttime="20170823 13:49:14.713" status="PASS"></status>
</kw>
<status endtime="20170823 13:49:14.713" starttime="20170823 13:49:14.712" status="PASS"></status>
</kw>
<status endtime="20170823 13:49:14.714" starttime="20170823 13:49:14.711" status="PASS"></status>
</kw>
<status endtime="20170823 13:49:14.714" starttime="20170823 13:49:14.710" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170823 13:49:14.714">Delete All Sessions</msg>
<status endtime="20170823 13:49:14.714" starttime="20170823 13:49:14.714" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:49:14.714">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:49:14.714" starttime="20170823 13:49:14.450" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:49:14.715">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:49:14.715" starttime="20170823 13:49:14.715" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:49:14.716">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170823 13:49:14.716">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170823 13:49:14.716">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170823 13:49:14.716" starttime="20170823 13:49:14.715" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:49:14.716">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170823 13:49:14.716" starttime="20170823 13:49:14.450" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:49:14.716">${power_state} = Off</msg>
<status endtime="20170823 13:49:14.716" starttime="20170823 13:49:14.449" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170823 13:49:14.717">On != Off</msg>
<status endtime="20170823 13:49:14.717" starttime="20170823 13:49:14.717" status="FAIL"></status>
</kw>
<status endtime="20170823 13:49:14.717" starttime="20170823 13:49:14.449" status="FAIL"></status>
</kw>
<status endtime="20170823 13:49:14.717" starttime="20170823 13:49:14.448" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:49:24.723">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 13:49:24.723" starttime="20170823 13:49:24.723" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:49:24.724">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 13:49:24.724" starttime="20170823 13:49:24.724" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:49:24.725">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 13:49:24.725" starttime="20170823 13:49:24.724" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:49:24.725">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 13:49:24.725" starttime="20170823 13:49:24.725" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:49:24.917">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 13:49:24.917" starttime="20170823 13:49:24.726" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:49:24.917">${status} = PASS</msg>
<msg level="INFO" timestamp="20170823 13:49:24.917">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:49:24.917" starttime="20170823 13:49:24.726" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:49:24.918">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:49:24.918" starttime="20170823 13:49:24.917" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:49:24.918">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:49:24.919" starttime="20170823 13:49:24.918" status="PASS"></status>
</kw>
<status endtime="20170823 13:49:24.919" starttime="20170823 13:49:24.722" status="PASS"></status>
</kw>
<status endtime="20170823 13:49:24.919" starttime="20170823 13:49:24.722" status="PASS"></status>
</kw>
<status endtime="20170823 13:49:24.919" starttime="20170823 13:49:24.721" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:49:24.919">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 13:49:24.919" starttime="20170823 13:49:24.919" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:49:24.922">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:49:24.922" starttime="20170823 13:49:24.921" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:49:24.922">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:49:24.923" starttime="20170823 13:49:24.922" status="PASS"></status>
</kw>
<status endtime="20170823 13:49:24.923" starttime="20170823 13:49:24.922" status="PASS"></status>
</kw>
<status endtime="20170823 13:49:24.923" starttime="20170823 13:49:24.920" status="PASS"></status>
</kw>
<status endtime="20170823 13:49:24.923" starttime="20170823 13:49:24.920" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:49:25.003">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170823 13:49:25.004">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:49:25.004" starttime="20170823 13:49:24.923" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:49:25.006">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:49:25.006" starttime="20170823 13:49:25.005" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:49:25.007">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:49:25.007" starttime="20170823 13:49:25.006" status="PASS"></status>
</kw>
<status endtime="20170823 13:49:25.007" starttime="20170823 13:49:25.006" status="PASS"></status>
</kw>
<status endtime="20170823 13:49:25.007" starttime="20170823 13:49:25.005" status="PASS"></status>
</kw>
<status endtime="20170823 13:49:25.007" starttime="20170823 13:49:25.004" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170823 13:49:25.007">Delete All Sessions</msg>
<status endtime="20170823 13:49:25.008" starttime="20170823 13:49:25.007" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:49:25.008">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:49:25.008" starttime="20170823 13:49:24.720" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:49:25.008">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:49:25.008" starttime="20170823 13:49:25.008" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:49:25.009">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170823 13:49:25.009">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170823 13:49:25.009">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170823 13:49:25.009" starttime="20170823 13:49:25.009" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:49:25.009">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170823 13:49:25.009" starttime="20170823 13:49:24.720" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:49:25.010">${power_state} = Off</msg>
<status endtime="20170823 13:49:25.010" starttime="20170823 13:49:24.719" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170823 13:49:25.010">On != Off</msg>
<status endtime="20170823 13:49:25.010" starttime="20170823 13:49:25.010" status="FAIL"></status>
</kw>
<status endtime="20170823 13:49:25.011" starttime="20170823 13:49:24.719" status="FAIL"></status>
</kw>
<status endtime="20170823 13:49:25.011" starttime="20170823 13:49:24.718" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:49:35.017">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 13:49:35.017" starttime="20170823 13:49:35.016" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:49:35.018">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 13:49:35.018" starttime="20170823 13:49:35.017" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:49:35.018">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 13:49:35.018" starttime="20170823 13:49:35.018" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:49:35.019">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 13:49:35.019" starttime="20170823 13:49:35.018" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:49:35.214">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 13:49:35.214" starttime="20170823 13:49:35.020" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:49:35.214">${status} = PASS</msg>
<msg level="INFO" timestamp="20170823 13:49:35.214">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:49:35.214" starttime="20170823 13:49:35.019" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:49:35.215">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:49:35.215" starttime="20170823 13:49:35.215" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:49:35.216">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:49:35.216" starttime="20170823 13:49:35.215" status="PASS"></status>
</kw>
<status endtime="20170823 13:49:35.216" starttime="20170823 13:49:35.015" status="PASS"></status>
</kw>
<status endtime="20170823 13:49:35.216" starttime="20170823 13:49:35.015" status="PASS"></status>
</kw>
<status endtime="20170823 13:49:35.216" starttime="20170823 13:49:35.014" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:49:35.217">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 13:49:35.217" starttime="20170823 13:49:35.216" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:49:35.219">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:49:35.219" starttime="20170823 13:49:35.218" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:49:35.220">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:49:35.220" starttime="20170823 13:49:35.219" status="PASS"></status>
</kw>
<status endtime="20170823 13:49:35.220" starttime="20170823 13:49:35.219" status="PASS"></status>
</kw>
<status endtime="20170823 13:49:35.220" starttime="20170823 13:49:35.217" status="PASS"></status>
</kw>
<status endtime="20170823 13:49:35.220" starttime="20170823 13:49:35.217" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:49:35.284">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170823 13:49:35.284">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:49:35.284" starttime="20170823 13:49:35.220" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:49:35.286">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:49:35.286" starttime="20170823 13:49:35.286" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:49:35.287">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:49:35.287" starttime="20170823 13:49:35.287" status="PASS"></status>
</kw>
<status endtime="20170823 13:49:35.288" starttime="20170823 13:49:35.286" status="PASS"></status>
</kw>
<status endtime="20170823 13:49:35.288" starttime="20170823 13:49:35.285" status="PASS"></status>
</kw>
<status endtime="20170823 13:49:35.288" starttime="20170823 13:49:35.285" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170823 13:49:35.288">Delete All Sessions</msg>
<status endtime="20170823 13:49:35.288" starttime="20170823 13:49:35.288" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:49:35.288">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:49:35.288" starttime="20170823 13:49:35.013" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:49:35.289">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:49:35.289" starttime="20170823 13:49:35.289" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:49:35.290">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170823 13:49:35.290">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170823 13:49:35.290">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170823 13:49:35.290" starttime="20170823 13:49:35.289" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:49:35.290">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170823 13:49:35.290" starttime="20170823 13:49:35.013" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:49:35.290">${power_state} = Off</msg>
<status endtime="20170823 13:49:35.291" starttime="20170823 13:49:35.012" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170823 13:49:35.291">On != Off</msg>
<status endtime="20170823 13:49:35.291" starttime="20170823 13:49:35.291" status="FAIL"></status>
</kw>
<status endtime="20170823 13:49:35.291" starttime="20170823 13:49:35.012" status="FAIL"></status>
</kw>
<status endtime="20170823 13:49:35.292" starttime="20170823 13:49:35.011" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:49:45.297">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 13:49:45.297" starttime="20170823 13:49:45.296" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:49:45.298">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 13:49:45.298" starttime="20170823 13:49:45.298" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:49:45.298">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 13:49:45.299" starttime="20170823 13:49:45.298" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:49:45.299">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 13:49:45.299" starttime="20170823 13:49:45.299" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:49:45.491">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 13:49:45.491" starttime="20170823 13:49:45.300" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:49:45.491">${status} = PASS</msg>
<msg level="INFO" timestamp="20170823 13:49:45.491">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:49:45.491" starttime="20170823 13:49:45.299" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:49:45.492">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:49:45.492" starttime="20170823 13:49:45.491" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:49:45.493">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:49:45.493" starttime="20170823 13:49:45.492" status="PASS"></status>
</kw>
<status endtime="20170823 13:49:45.493" starttime="20170823 13:49:45.296" status="PASS"></status>
</kw>
<status endtime="20170823 13:49:45.493" starttime="20170823 13:49:45.295" status="PASS"></status>
</kw>
<status endtime="20170823 13:49:45.493" starttime="20170823 13:49:45.295" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:49:45.493">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 13:49:45.494" starttime="20170823 13:49:45.493" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:49:45.496">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:49:45.496" starttime="20170823 13:49:45.495" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:49:45.497">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:49:45.497" starttime="20170823 13:49:45.496" status="PASS"></status>
</kw>
<status endtime="20170823 13:49:45.497" starttime="20170823 13:49:45.496" status="PASS"></status>
</kw>
<status endtime="20170823 13:49:45.497" starttime="20170823 13:49:45.494" status="PASS"></status>
</kw>
<status endtime="20170823 13:49:45.497" starttime="20170823 13:49:45.494" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:49:45.561">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170823 13:49:45.562">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:49:45.562" starttime="20170823 13:49:45.497" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:49:45.563">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:49:45.563" starttime="20170823 13:49:45.563" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:49:45.564">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:49:45.564" starttime="20170823 13:49:45.564" status="PASS"></status>
</kw>
<status endtime="20170823 13:49:45.565" starttime="20170823 13:49:45.564" status="PASS"></status>
</kw>
<status endtime="20170823 13:49:45.565" starttime="20170823 13:49:45.562" status="PASS"></status>
</kw>
<status endtime="20170823 13:49:45.565" starttime="20170823 13:49:45.562" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170823 13:49:45.565">Delete All Sessions</msg>
<status endtime="20170823 13:49:45.565" starttime="20170823 13:49:45.565" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:49:45.566">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:49:45.566" starttime="20170823 13:49:45.294" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:49:45.566">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:49:45.566" starttime="20170823 13:49:45.566" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:49:45.567">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170823 13:49:45.567">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170823 13:49:45.567">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170823 13:49:45.567" starttime="20170823 13:49:45.566" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:49:45.567">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170823 13:49:45.567" starttime="20170823 13:49:45.294" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:49:45.568">${power_state} = Off</msg>
<status endtime="20170823 13:49:45.568" starttime="20170823 13:49:45.293" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170823 13:49:45.568">On != Off</msg>
<status endtime="20170823 13:49:45.568" starttime="20170823 13:49:45.568" status="FAIL"></status>
</kw>
<status endtime="20170823 13:49:45.569" starttime="20170823 13:49:45.293" status="FAIL"></status>
</kw>
<status endtime="20170823 13:49:45.569" starttime="20170823 13:49:45.292" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:49:55.574">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 13:49:55.575" starttime="20170823 13:49:55.574" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:49:55.575">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 13:49:55.575" starttime="20170823 13:49:55.575" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:49:55.576">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 13:49:55.576" starttime="20170823 13:49:55.576" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:49:55.577">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 13:49:55.577" starttime="20170823 13:49:55.576" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:49:55.760">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 13:49:55.760" starttime="20170823 13:49:55.578" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:49:55.761">${status} = PASS</msg>
<msg level="INFO" timestamp="20170823 13:49:55.761">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:49:55.761" starttime="20170823 13:49:55.577" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:49:55.761">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:49:55.762" starttime="20170823 13:49:55.761" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:49:55.762">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:49:55.762" starttime="20170823 13:49:55.762" status="PASS"></status>
</kw>
<status endtime="20170823 13:49:55.762" starttime="20170823 13:49:55.573" status="PASS"></status>
</kw>
<status endtime="20170823 13:49:55.763" starttime="20170823 13:49:55.573" status="PASS"></status>
</kw>
<status endtime="20170823 13:49:55.763" starttime="20170823 13:49:55.572" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:49:55.763">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 13:49:55.763" starttime="20170823 13:49:55.763" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:49:55.765">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:49:55.765" starttime="20170823 13:49:55.765" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:49:55.766">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:49:55.766" starttime="20170823 13:49:55.766" status="PASS"></status>
</kw>
<status endtime="20170823 13:49:55.767" starttime="20170823 13:49:55.766" status="PASS"></status>
</kw>
<status endtime="20170823 13:49:55.767" starttime="20170823 13:49:55.764" status="PASS"></status>
</kw>
<status endtime="20170823 13:49:55.767" starttime="20170823 13:49:55.764" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:49:55.830">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170823 13:49:55.830">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:49:55.830" starttime="20170823 13:49:55.767" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:49:55.832">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:49:55.832" starttime="20170823 13:49:55.832" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:49:55.833">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:49:55.833" starttime="20170823 13:49:55.833" status="PASS"></status>
</kw>
<status endtime="20170823 13:49:55.834" starttime="20170823 13:49:55.832" status="PASS"></status>
</kw>
<status endtime="20170823 13:49:55.834" starttime="20170823 13:49:55.831" status="PASS"></status>
</kw>
<status endtime="20170823 13:49:55.834" starttime="20170823 13:49:55.831" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170823 13:49:55.834">Delete All Sessions</msg>
<status endtime="20170823 13:49:55.834" starttime="20170823 13:49:55.834" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:49:55.834">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:49:55.834" starttime="20170823 13:49:55.571" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:49:55.835">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:49:55.835" starttime="20170823 13:49:55.835" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:49:55.836">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170823 13:49:55.836">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170823 13:49:55.836">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170823 13:49:55.836" starttime="20170823 13:49:55.836" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:49:55.836">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170823 13:49:55.836" starttime="20170823 13:49:55.571" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:49:55.837">${power_state} = Off</msg>
<status endtime="20170823 13:49:55.837" starttime="20170823 13:49:55.570" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170823 13:49:55.837">On != Off</msg>
<status endtime="20170823 13:49:55.837" starttime="20170823 13:49:55.837" status="FAIL"></status>
</kw>
<status endtime="20170823 13:49:55.838" starttime="20170823 13:49:55.570" status="FAIL"></status>
</kw>
<status endtime="20170823 13:49:55.838" starttime="20170823 13:49:55.569" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:50:05.843">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 13:50:05.843" starttime="20170823 13:50:05.842" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:50:05.844">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 13:50:05.844" starttime="20170823 13:50:05.843" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:50:05.844">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 13:50:05.844" starttime="20170823 13:50:05.844" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:50:05.845">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 13:50:05.845" starttime="20170823 13:50:05.845" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:50:06.078">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 13:50:06.078" starttime="20170823 13:50:05.846" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:50:06.078">${status} = PASS</msg>
<msg level="INFO" timestamp="20170823 13:50:06.078">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:50:06.078" starttime="20170823 13:50:05.845" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:50:06.079">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:50:06.079" starttime="20170823 13:50:06.079" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:50:06.080">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:50:06.080" starttime="20170823 13:50:06.079" status="PASS"></status>
</kw>
<status endtime="20170823 13:50:06.080" starttime="20170823 13:50:05.842" status="PASS"></status>
</kw>
<status endtime="20170823 13:50:06.080" starttime="20170823 13:50:05.841" status="PASS"></status>
</kw>
<status endtime="20170823 13:50:06.080" starttime="20170823 13:50:05.841" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:50:06.081">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 13:50:06.081" starttime="20170823 13:50:06.080" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:50:06.083">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:50:06.083" starttime="20170823 13:50:06.082" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:50:06.084">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:50:06.084" starttime="20170823 13:50:06.084" status="PASS"></status>
</kw>
<status endtime="20170823 13:50:06.084" starttime="20170823 13:50:06.083" status="PASS"></status>
</kw>
<status endtime="20170823 13:50:06.084" starttime="20170823 13:50:06.082" status="PASS"></status>
</kw>
<status endtime="20170823 13:50:06.084" starttime="20170823 13:50:06.081" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:50:06.148">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170823 13:50:06.149">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:50:06.149" starttime="20170823 13:50:06.084" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:50:06.150">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:50:06.150" starttime="20170823 13:50:06.150" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:50:06.151">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:50:06.151" starttime="20170823 13:50:06.151" status="PASS"></status>
</kw>
<status endtime="20170823 13:50:06.151" starttime="20170823 13:50:06.151" status="PASS"></status>
</kw>
<status endtime="20170823 13:50:06.152" starttime="20170823 13:50:06.149" status="PASS"></status>
</kw>
<status endtime="20170823 13:50:06.152" starttime="20170823 13:50:06.149" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170823 13:50:06.152">Delete All Sessions</msg>
<status endtime="20170823 13:50:06.152" starttime="20170823 13:50:06.152" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:50:06.152">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:50:06.152" starttime="20170823 13:50:05.840" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:50:06.153">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:50:06.153" starttime="20170823 13:50:06.153" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:50:06.154">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170823 13:50:06.154">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170823 13:50:06.154">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170823 13:50:06.154" starttime="20170823 13:50:06.153" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:50:06.154">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170823 13:50:06.154" starttime="20170823 13:50:05.840" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:50:06.154">${power_state} = Off</msg>
<status endtime="20170823 13:50:06.154" starttime="20170823 13:50:05.839" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170823 13:50:06.155">On != Off</msg>
<status endtime="20170823 13:50:06.155" starttime="20170823 13:50:06.155" status="FAIL"></status>
</kw>
<status endtime="20170823 13:50:06.155" starttime="20170823 13:50:05.839" status="FAIL"></status>
</kw>
<status endtime="20170823 13:50:06.155" starttime="20170823 13:50:05.838" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:50:16.161">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 13:50:16.162" starttime="20170823 13:50:16.161" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:50:16.162">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 13:50:16.162" starttime="20170823 13:50:16.162" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:50:16.163">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 13:50:16.163" starttime="20170823 13:50:16.163" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:50:16.164">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 13:50:16.164" starttime="20170823 13:50:16.163" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:50:16.358">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 13:50:16.358" starttime="20170823 13:50:16.164" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:50:16.358">${status} = PASS</msg>
<msg level="INFO" timestamp="20170823 13:50:16.358">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:50:16.358" starttime="20170823 13:50:16.164" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:50:16.359">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:50:16.359" starttime="20170823 13:50:16.358" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:50:16.359">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:50:16.359" starttime="20170823 13:50:16.359" status="PASS"></status>
</kw>
<status endtime="20170823 13:50:16.360" starttime="20170823 13:50:16.160" status="PASS"></status>
</kw>
<status endtime="20170823 13:50:16.360" starttime="20170823 13:50:16.159" status="PASS"></status>
</kw>
<status endtime="20170823 13:50:16.360" starttime="20170823 13:50:16.159" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:50:16.360">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 13:50:16.360" starttime="20170823 13:50:16.360" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:50:16.362">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:50:16.362" starttime="20170823 13:50:16.362" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:50:16.363">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:50:16.363" starttime="20170823 13:50:16.363" status="PASS"></status>
</kw>
<status endtime="20170823 13:50:16.364" starttime="20170823 13:50:16.363" status="PASS"></status>
</kw>
<status endtime="20170823 13:50:16.364" starttime="20170823 13:50:16.361" status="PASS"></status>
</kw>
<status endtime="20170823 13:50:16.364" starttime="20170823 13:50:16.361" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:50:16.453">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170823 13:50:16.454">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:50:16.454" starttime="20170823 13:50:16.364" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:50:16.456">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:50:16.456" starttime="20170823 13:50:16.455" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:50:16.460">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:50:16.460" starttime="20170823 13:50:16.456" status="PASS"></status>
</kw>
<status endtime="20170823 13:50:16.460" starttime="20170823 13:50:16.456" status="PASS"></status>
</kw>
<status endtime="20170823 13:50:16.460" starttime="20170823 13:50:16.454" status="PASS"></status>
</kw>
<status endtime="20170823 13:50:16.460" starttime="20170823 13:50:16.454" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170823 13:50:16.461">Delete All Sessions</msg>
<status endtime="20170823 13:50:16.461" starttime="20170823 13:50:16.461" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:50:16.461">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:50:16.461" starttime="20170823 13:50:16.158" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:50:16.462">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:50:16.462" starttime="20170823 13:50:16.461" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:50:16.463">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170823 13:50:16.463">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170823 13:50:16.463">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170823 13:50:16.463" starttime="20170823 13:50:16.463" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:50:16.463">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170823 13:50:16.463" starttime="20170823 13:50:16.157" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:50:16.464">${power_state} = Off</msg>
<status endtime="20170823 13:50:16.464" starttime="20170823 13:50:16.157" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170823 13:50:16.464">On != Off</msg>
<status endtime="20170823 13:50:16.464" starttime="20170823 13:50:16.464" status="FAIL"></status>
</kw>
<status endtime="20170823 13:50:16.465" starttime="20170823 13:50:16.157" status="FAIL"></status>
</kw>
<status endtime="20170823 13:50:16.465" starttime="20170823 13:50:16.156" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:50:26.470">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 13:50:26.471" starttime="20170823 13:50:26.470" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:50:26.471">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 13:50:26.471" starttime="20170823 13:50:26.471" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:50:26.472">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 13:50:26.472" starttime="20170823 13:50:26.472" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:50:26.473">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 13:50:26.473" starttime="20170823 13:50:26.472" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:50:26.656">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 13:50:26.656" starttime="20170823 13:50:26.473" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:50:26.656">${status} = PASS</msg>
<msg level="INFO" timestamp="20170823 13:50:26.656">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:50:26.656" starttime="20170823 13:50:26.473" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:50:26.657">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:50:26.657" starttime="20170823 13:50:26.656" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:50:26.658">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:50:26.658" starttime="20170823 13:50:26.657" status="PASS"></status>
</kw>
<status endtime="20170823 13:50:26.658" starttime="20170823 13:50:26.469" status="PASS"></status>
</kw>
<status endtime="20170823 13:50:26.658" starttime="20170823 13:50:26.469" status="PASS"></status>
</kw>
<status endtime="20170823 13:50:26.658" starttime="20170823 13:50:26.468" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:50:26.659">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 13:50:26.659" starttime="20170823 13:50:26.658" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:50:26.661">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:50:26.661" starttime="20170823 13:50:26.660" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:50:26.662">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:50:26.662" starttime="20170823 13:50:26.661" status="PASS"></status>
</kw>
<status endtime="20170823 13:50:26.662" starttime="20170823 13:50:26.661" status="PASS"></status>
</kw>
<status endtime="20170823 13:50:26.662" starttime="20170823 13:50:26.659" status="PASS"></status>
</kw>
<status endtime="20170823 13:50:26.662" starttime="20170823 13:50:26.659" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:50:26.749">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170823 13:50:26.749">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:50:26.749" starttime="20170823 13:50:26.662" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:50:26.751">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:50:26.751" starttime="20170823 13:50:26.751" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:50:26.752">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:50:26.752" starttime="20170823 13:50:26.752" status="PASS"></status>
</kw>
<status endtime="20170823 13:50:26.752" starttime="20170823 13:50:26.751" status="PASS"></status>
</kw>
<status endtime="20170823 13:50:26.753" starttime="20170823 13:50:26.750" status="PASS"></status>
</kw>
<status endtime="20170823 13:50:26.753" starttime="20170823 13:50:26.750" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170823 13:50:26.753">Delete All Sessions</msg>
<status endtime="20170823 13:50:26.753" starttime="20170823 13:50:26.753" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:50:26.753">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:50:26.753" starttime="20170823 13:50:26.467" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:50:26.754">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:50:26.754" starttime="20170823 13:50:26.754" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:50:26.755">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170823 13:50:26.755">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170823 13:50:26.755">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170823 13:50:26.755" starttime="20170823 13:50:26.754" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:50:26.755">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170823 13:50:26.755" starttime="20170823 13:50:26.467" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:50:26.755">${power_state} = Off</msg>
<status endtime="20170823 13:50:26.755" starttime="20170823 13:50:26.467" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170823 13:50:26.756">On != Off</msg>
<status endtime="20170823 13:50:26.756" starttime="20170823 13:50:26.756" status="FAIL"></status>
</kw>
<status endtime="20170823 13:50:26.756" starttime="20170823 13:50:26.466" status="FAIL"></status>
</kw>
<status endtime="20170823 13:50:26.757" starttime="20170823 13:50:26.466" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:50:36.762">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 13:50:36.763" starttime="20170823 13:50:36.762" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:50:36.763">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 13:50:36.763" starttime="20170823 13:50:36.763" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:50:36.764">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 13:50:36.764" starttime="20170823 13:50:36.764" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:50:36.765">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 13:50:36.765" starttime="20170823 13:50:36.764" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:50:36.957">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 13:50:36.957" starttime="20170823 13:50:36.765" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:50:36.958">${status} = PASS</msg>
<msg level="INFO" timestamp="20170823 13:50:36.958">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:50:36.958" starttime="20170823 13:50:36.765" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:50:36.958">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:50:36.958" starttime="20170823 13:50:36.958" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:50:36.959">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:50:36.959" starttime="20170823 13:50:36.959" status="PASS"></status>
</kw>
<status endtime="20170823 13:50:36.959" starttime="20170823 13:50:36.761" status="PASS"></status>
</kw>
<status endtime="20170823 13:50:36.959" starttime="20170823 13:50:36.760" status="PASS"></status>
</kw>
<status endtime="20170823 13:50:36.959" starttime="20170823 13:50:36.760" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:50:36.960">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 13:50:36.960" starttime="20170823 13:50:36.960" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:50:36.962">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:50:36.962" starttime="20170823 13:50:36.962" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:50:36.963">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:50:36.963" starttime="20170823 13:50:36.963" status="PASS"></status>
</kw>
<status endtime="20170823 13:50:36.963" starttime="20170823 13:50:36.962" status="PASS"></status>
</kw>
<status endtime="20170823 13:50:36.963" starttime="20170823 13:50:36.961" status="PASS"></status>
</kw>
<status endtime="20170823 13:50:36.964" starttime="20170823 13:50:36.960" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:50:37.028">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170823 13:50:37.029">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:50:37.029" starttime="20170823 13:50:36.964" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:50:37.031">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:50:37.031" starttime="20170823 13:50:37.030" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:50:37.032">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:50:37.032" starttime="20170823 13:50:37.031" status="PASS"></status>
</kw>
<status endtime="20170823 13:50:37.032" starttime="20170823 13:50:37.031" status="PASS"></status>
</kw>
<status endtime="20170823 13:50:37.032" starttime="20170823 13:50:37.030" status="PASS"></status>
</kw>
<status endtime="20170823 13:50:37.033" starttime="20170823 13:50:37.029" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170823 13:50:37.033">Delete All Sessions</msg>
<status endtime="20170823 13:50:37.033" starttime="20170823 13:50:37.033" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:50:37.033">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:50:37.033" starttime="20170823 13:50:36.759" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:50:37.034">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:50:37.034" starttime="20170823 13:50:37.034" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:50:37.034">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170823 13:50:37.035">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170823 13:50:37.035">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170823 13:50:37.035" starttime="20170823 13:50:37.034" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:50:37.035">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170823 13:50:37.035" starttime="20170823 13:50:36.759" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:50:37.035">${power_state} = Off</msg>
<status endtime="20170823 13:50:37.035" starttime="20170823 13:50:36.758" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170823 13:50:37.036">On != Off</msg>
<status endtime="20170823 13:50:37.036" starttime="20170823 13:50:37.036" status="FAIL"></status>
</kw>
<status endtime="20170823 13:50:37.036" starttime="20170823 13:50:36.758" status="FAIL"></status>
</kw>
<status endtime="20170823 13:50:37.036" starttime="20170823 13:50:36.757" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:50:47.042">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 13:50:47.042" starttime="20170823 13:50:47.041" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:50:47.043">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 13:50:47.043" starttime="20170823 13:50:47.042" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:50:47.043">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 13:50:47.043" starttime="20170823 13:50:47.043" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:50:47.044">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 13:50:47.044" starttime="20170823 13:50:47.044" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:50:47.230">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 13:50:47.230" starttime="20170823 13:50:47.045" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:50:47.230">${status} = PASS</msg>
<msg level="INFO" timestamp="20170823 13:50:47.230">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:50:47.230" starttime="20170823 13:50:47.044" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:50:47.231">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:50:47.231" starttime="20170823 13:50:47.230" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:50:47.231">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:50:47.232" starttime="20170823 13:50:47.231" status="PASS"></status>
</kw>
<status endtime="20170823 13:50:47.232" starttime="20170823 13:50:47.041" status="PASS"></status>
</kw>
<status endtime="20170823 13:50:47.232" starttime="20170823 13:50:47.040" status="PASS"></status>
</kw>
<status endtime="20170823 13:50:47.232" starttime="20170823 13:50:47.040" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:50:47.232">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 13:50:47.233" starttime="20170823 13:50:47.232" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:50:47.235">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:50:47.235" starttime="20170823 13:50:47.234" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:50:47.235">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:50:47.236" starttime="20170823 13:50:47.235" status="PASS"></status>
</kw>
<status endtime="20170823 13:50:47.236" starttime="20170823 13:50:47.235" status="PASS"></status>
</kw>
<status endtime="20170823 13:50:47.236" starttime="20170823 13:50:47.233" status="PASS"></status>
</kw>
<status endtime="20170823 13:50:47.236" starttime="20170823 13:50:47.233" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:50:47.301">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170823 13:50:47.301">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:50:47.301" starttime="20170823 13:50:47.236" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:50:47.303">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:50:47.303" starttime="20170823 13:50:47.303" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:50:47.304">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:50:47.304" starttime="20170823 13:50:47.304" status="PASS"></status>
</kw>
<status endtime="20170823 13:50:47.304" starttime="20170823 13:50:47.303" status="PASS"></status>
</kw>
<status endtime="20170823 13:50:47.305" starttime="20170823 13:50:47.302" status="PASS"></status>
</kw>
<status endtime="20170823 13:50:47.305" starttime="20170823 13:50:47.302" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170823 13:50:47.305">Delete All Sessions</msg>
<status endtime="20170823 13:50:47.305" starttime="20170823 13:50:47.305" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:50:47.305">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:50:47.305" starttime="20170823 13:50:47.039" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:50:47.306">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:50:47.306" starttime="20170823 13:50:47.306" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:50:47.307">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170823 13:50:47.307">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170823 13:50:47.307">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170823 13:50:47.307" starttime="20170823 13:50:47.306" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:50:47.307">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170823 13:50:47.307" starttime="20170823 13:50:47.038" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:50:47.308">${power_state} = Off</msg>
<status endtime="20170823 13:50:47.308" starttime="20170823 13:50:47.038" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170823 13:50:47.308">On != Off</msg>
<status endtime="20170823 13:50:47.308" starttime="20170823 13:50:47.308" status="FAIL"></status>
</kw>
<status endtime="20170823 13:50:47.308" starttime="20170823 13:50:47.038" status="FAIL"></status>
</kw>
<status endtime="20170823 13:50:47.309" starttime="20170823 13:50:47.037" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:50:57.314">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 13:50:57.315" starttime="20170823 13:50:57.314" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:50:57.315">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 13:50:57.315" starttime="20170823 13:50:57.315" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:50:57.316">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 13:50:57.316" starttime="20170823 13:50:57.316" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:50:57.317">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 13:50:57.317" starttime="20170823 13:50:57.316" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:50:57.497">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 13:50:57.497" starttime="20170823 13:50:57.317" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:50:57.497">${status} = PASS</msg>
<msg level="INFO" timestamp="20170823 13:50:57.497">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:50:57.497" starttime="20170823 13:50:57.317" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:50:57.498">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:50:57.498" starttime="20170823 13:50:57.498" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:50:57.499">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:50:57.499" starttime="20170823 13:50:57.498" status="PASS"></status>
</kw>
<status endtime="20170823 13:50:57.499" starttime="20170823 13:50:57.313" status="PASS"></status>
</kw>
<status endtime="20170823 13:50:57.499" starttime="20170823 13:50:57.312" status="PASS"></status>
</kw>
<status endtime="20170823 13:50:57.499" starttime="20170823 13:50:57.312" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:50:57.500">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 13:50:57.500" starttime="20170823 13:50:57.499" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:50:57.502">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:50:57.502" starttime="20170823 13:50:57.501" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:50:57.503">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:50:57.503" starttime="20170823 13:50:57.503" status="PASS"></status>
</kw>
<status endtime="20170823 13:50:57.503" starttime="20170823 13:50:57.502" status="PASS"></status>
</kw>
<status endtime="20170823 13:50:57.503" starttime="20170823 13:50:57.500" status="PASS"></status>
</kw>
<status endtime="20170823 13:50:57.503" starttime="20170823 13:50:57.500" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:50:57.567">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170823 13:50:57.567">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:50:57.567" starttime="20170823 13:50:57.503" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:50:57.569">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:50:57.569" starttime="20170823 13:50:57.569" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:50:57.570">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:50:57.571" starttime="20170823 13:50:57.570" status="PASS"></status>
</kw>
<status endtime="20170823 13:50:57.571" starttime="20170823 13:50:57.569" status="PASS"></status>
</kw>
<status endtime="20170823 13:50:57.571" starttime="20170823 13:50:57.568" status="PASS"></status>
</kw>
<status endtime="20170823 13:50:57.571" starttime="20170823 13:50:57.568" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170823 13:50:57.571">Delete All Sessions</msg>
<status endtime="20170823 13:50:57.571" starttime="20170823 13:50:57.571" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:50:57.572">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:50:57.572" starttime="20170823 13:50:57.311" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:50:57.572">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:50:57.572" starttime="20170823 13:50:57.572" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:50:57.573">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170823 13:50:57.573">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170823 13:50:57.573">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170823 13:50:57.573" starttime="20170823 13:50:57.573" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:50:57.573">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170823 13:50:57.573" starttime="20170823 13:50:57.311" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:50:57.574">${power_state} = Off</msg>
<status endtime="20170823 13:50:57.574" starttime="20170823 13:50:57.310" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170823 13:50:57.574">On != Off</msg>
<status endtime="20170823 13:50:57.574" starttime="20170823 13:50:57.574" status="FAIL"></status>
</kw>
<status endtime="20170823 13:50:57.575" starttime="20170823 13:50:57.310" status="FAIL"></status>
</kw>
<status endtime="20170823 13:50:57.575" starttime="20170823 13:50:57.309" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:51:07.580">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 13:51:07.580" starttime="20170823 13:51:07.580" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:51:07.581">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 13:51:07.581" starttime="20170823 13:51:07.581" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:51:07.582">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 13:51:07.582" starttime="20170823 13:51:07.581" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:51:07.582">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 13:51:07.582" starttime="20170823 13:51:07.582" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:51:07.787">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 13:51:07.787" starttime="20170823 13:51:07.583" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:51:07.787">${status} = PASS</msg>
<msg level="INFO" timestamp="20170823 13:51:07.787">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:51:07.787" starttime="20170823 13:51:07.583" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:51:07.788">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:51:07.788" starttime="20170823 13:51:07.788" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:51:07.789">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:51:07.789" starttime="20170823 13:51:07.788" status="PASS"></status>
</kw>
<status endtime="20170823 13:51:07.789" starttime="20170823 13:51:07.579" status="PASS"></status>
</kw>
<status endtime="20170823 13:51:07.789" starttime="20170823 13:51:07.579" status="PASS"></status>
</kw>
<status endtime="20170823 13:51:07.789" starttime="20170823 13:51:07.578" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:51:07.790">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 13:51:07.790" starttime="20170823 13:51:07.789" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:51:07.792">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:51:07.792" starttime="20170823 13:51:07.791" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:51:07.793">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:51:07.793" starttime="20170823 13:51:07.792" status="PASS"></status>
</kw>
<status endtime="20170823 13:51:07.793" starttime="20170823 13:51:07.792" status="PASS"></status>
</kw>
<status endtime="20170823 13:51:07.793" starttime="20170823 13:51:07.790" status="PASS"></status>
</kw>
<status endtime="20170823 13:51:07.793" starttime="20170823 13:51:07.790" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:51:07.882">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170823 13:51:07.883">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:51:07.883" starttime="20170823 13:51:07.793" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:51:07.885">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:51:07.885" starttime="20170823 13:51:07.884" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:51:07.886">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:51:07.886" starttime="20170823 13:51:07.885" status="PASS"></status>
</kw>
<status endtime="20170823 13:51:07.886" starttime="20170823 13:51:07.885" status="PASS"></status>
</kw>
<status endtime="20170823 13:51:07.886" starttime="20170823 13:51:07.884" status="PASS"></status>
</kw>
<status endtime="20170823 13:51:07.886" starttime="20170823 13:51:07.883" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170823 13:51:07.887">Delete All Sessions</msg>
<status endtime="20170823 13:51:07.887" starttime="20170823 13:51:07.886" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:51:07.887">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:51:07.887" starttime="20170823 13:51:07.577" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:51:07.887">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:51:07.888" starttime="20170823 13:51:07.887" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:51:07.888">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170823 13:51:07.888">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170823 13:51:07.888">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170823 13:51:07.888" starttime="20170823 13:51:07.888" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:51:07.889">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170823 13:51:07.889" starttime="20170823 13:51:07.577" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:51:07.889">${power_state} = Off</msg>
<status endtime="20170823 13:51:07.889" starttime="20170823 13:51:07.576" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170823 13:51:07.890">On != Off</msg>
<status endtime="20170823 13:51:07.890" starttime="20170823 13:51:07.889" status="FAIL"></status>
</kw>
<status endtime="20170823 13:51:07.890" starttime="20170823 13:51:07.576" status="FAIL"></status>
</kw>
<status endtime="20170823 13:51:07.890" starttime="20170823 13:51:07.575" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:51:17.896">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 13:51:17.896" starttime="20170823 13:51:17.895" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:51:17.897">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 13:51:17.897" starttime="20170823 13:51:17.897" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:51:17.898">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 13:51:17.898" starttime="20170823 13:51:17.897" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:51:17.898">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 13:51:17.898" starttime="20170823 13:51:17.898" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:51:18.109">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 13:51:18.109" starttime="20170823 13:51:17.899" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:51:18.110">${status} = PASS</msg>
<msg level="INFO" timestamp="20170823 13:51:18.110">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:51:18.110" starttime="20170823 13:51:17.898" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:51:18.110">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:51:18.110" starttime="20170823 13:51:18.110" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:51:18.111">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:51:18.111" starttime="20170823 13:51:18.111" status="PASS"></status>
</kw>
<status endtime="20170823 13:51:18.111" starttime="20170823 13:51:17.894" status="PASS"></status>
</kw>
<status endtime="20170823 13:51:18.111" starttime="20170823 13:51:17.894" status="PASS"></status>
</kw>
<status endtime="20170823 13:51:18.112" starttime="20170823 13:51:17.893" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:51:18.112">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 13:51:18.112" starttime="20170823 13:51:18.112" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:51:18.114">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:51:18.114" starttime="20170823 13:51:18.114" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:51:18.115">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:51:18.115" starttime="20170823 13:51:18.115" status="PASS"></status>
</kw>
<status endtime="20170823 13:51:18.115" starttime="20170823 13:51:18.114" status="PASS"></status>
</kw>
<status endtime="20170823 13:51:18.115" starttime="20170823 13:51:18.113" status="PASS"></status>
</kw>
<status endtime="20170823 13:51:18.116" starttime="20170823 13:51:18.112" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:51:18.227">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170823 13:51:18.227">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:51:18.227" starttime="20170823 13:51:18.116" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:51:18.229">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:51:18.229" starttime="20170823 13:51:18.229" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:51:18.231">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:51:18.231" starttime="20170823 13:51:18.230" status="PASS"></status>
</kw>
<status endtime="20170823 13:51:18.231" starttime="20170823 13:51:18.230" status="PASS"></status>
</kw>
<status endtime="20170823 13:51:18.231" starttime="20170823 13:51:18.228" status="PASS"></status>
</kw>
<status endtime="20170823 13:51:18.231" starttime="20170823 13:51:18.228" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170823 13:51:18.232">Delete All Sessions</msg>
<status endtime="20170823 13:51:18.232" starttime="20170823 13:51:18.231" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:51:18.232">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:51:18.232" starttime="20170823 13:51:17.893" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:51:18.232">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:51:18.233" starttime="20170823 13:51:18.232" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:51:18.233">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170823 13:51:18.233">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170823 13:51:18.233">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170823 13:51:18.233" starttime="20170823 13:51:18.233" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:51:18.234">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170823 13:51:18.234" starttime="20170823 13:51:17.892" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:51:18.234">${power_state} = Off</msg>
<status endtime="20170823 13:51:18.234" starttime="20170823 13:51:17.892" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170823 13:51:18.235">On != Off</msg>
<status endtime="20170823 13:51:18.235" starttime="20170823 13:51:18.234" status="FAIL"></status>
</kw>
<status endtime="20170823 13:51:18.235" starttime="20170823 13:51:17.891" status="FAIL"></status>
</kw>
<status endtime="20170823 13:51:18.235" starttime="20170823 13:51:17.891" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:51:28.240">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 13:51:28.241" starttime="20170823 13:51:28.240" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:51:28.241">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 13:51:28.242" starttime="20170823 13:51:28.241" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:51:28.242">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 13:51:28.242" starttime="20170823 13:51:28.242" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:51:28.243">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 13:51:28.243" starttime="20170823 13:51:28.242" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:51:28.421">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 13:51:28.421" starttime="20170823 13:51:28.243" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:51:28.421">${status} = PASS</msg>
<msg level="INFO" timestamp="20170823 13:51:28.421">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:51:28.421" starttime="20170823 13:51:28.243" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:51:28.422">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:51:28.422" starttime="20170823 13:51:28.421" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:51:28.422">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:51:28.423" starttime="20170823 13:51:28.422" status="PASS"></status>
</kw>
<status endtime="20170823 13:51:28.423" starttime="20170823 13:51:28.240" status="PASS"></status>
</kw>
<status endtime="20170823 13:51:28.423" starttime="20170823 13:51:28.239" status="PASS"></status>
</kw>
<status endtime="20170823 13:51:28.423" starttime="20170823 13:51:28.238" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:51:28.424">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 13:51:28.424" starttime="20170823 13:51:28.423" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:51:28.426">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:51:28.426" starttime="20170823 13:51:28.425" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:51:28.427">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:51:28.427" starttime="20170823 13:51:28.426" status="PASS"></status>
</kw>
<status endtime="20170823 13:51:28.427" starttime="20170823 13:51:28.426" status="PASS"></status>
</kw>
<status endtime="20170823 13:51:28.427" starttime="20170823 13:51:28.424" status="PASS"></status>
</kw>
<status endtime="20170823 13:51:28.427" starttime="20170823 13:51:28.424" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:51:28.501">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170823 13:51:28.501">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:51:28.501" starttime="20170823 13:51:28.427" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:51:28.503">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:51:28.503" starttime="20170823 13:51:28.503" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:51:28.504">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:51:28.504" starttime="20170823 13:51:28.504" status="PASS"></status>
</kw>
<status endtime="20170823 13:51:28.504" starttime="20170823 13:51:28.503" status="PASS"></status>
</kw>
<status endtime="20170823 13:51:28.504" starttime="20170823 13:51:28.502" status="PASS"></status>
</kw>
<status endtime="20170823 13:51:28.505" starttime="20170823 13:51:28.501" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170823 13:51:28.505">Delete All Sessions</msg>
<status endtime="20170823 13:51:28.505" starttime="20170823 13:51:28.505" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:51:28.505">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:51:28.505" starttime="20170823 13:51:28.238" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:51:28.506">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:51:28.506" starttime="20170823 13:51:28.506" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:51:28.507">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170823 13:51:28.507">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170823 13:51:28.507">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170823 13:51:28.507" starttime="20170823 13:51:28.506" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:51:28.507">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170823 13:51:28.507" starttime="20170823 13:51:28.237" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:51:28.507">${power_state} = Off</msg>
<status endtime="20170823 13:51:28.507" starttime="20170823 13:51:28.237" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170823 13:51:28.508">On != Off</msg>
<status endtime="20170823 13:51:28.508" starttime="20170823 13:51:28.508" status="FAIL"></status>
</kw>
<status endtime="20170823 13:51:28.508" starttime="20170823 13:51:28.236" status="FAIL"></status>
</kw>
<status endtime="20170823 13:51:28.508" starttime="20170823 13:51:28.236" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:51:38.514">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 13:51:38.515" starttime="20170823 13:51:38.514" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:51:38.515">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 13:51:38.515" starttime="20170823 13:51:38.515" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:51:38.516">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 13:51:38.516" starttime="20170823 13:51:38.516" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:51:38.517">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 13:51:38.517" starttime="20170823 13:51:38.517" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:51:38.788">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 13:51:38.788" starttime="20170823 13:51:38.518" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:51:38.788">${status} = PASS</msg>
<msg level="INFO" timestamp="20170823 13:51:38.788">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:51:38.788" starttime="20170823 13:51:38.518" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:51:38.789">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:51:38.789" starttime="20170823 13:51:38.789" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:51:38.790">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:51:38.790" starttime="20170823 13:51:38.789" status="PASS"></status>
</kw>
<status endtime="20170823 13:51:38.790" starttime="20170823 13:51:38.513" status="PASS"></status>
</kw>
<status endtime="20170823 13:51:38.790" starttime="20170823 13:51:38.512" status="PASS"></status>
</kw>
<status endtime="20170823 13:51:38.790" starttime="20170823 13:51:38.512" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:51:38.791">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 13:51:38.791" starttime="20170823 13:51:38.790" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:51:38.793">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:51:38.793" starttime="20170823 13:51:38.792" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:51:38.794">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:51:38.794" starttime="20170823 13:51:38.794" status="PASS"></status>
</kw>
<status endtime="20170823 13:51:38.794" starttime="20170823 13:51:38.793" status="PASS"></status>
</kw>
<status endtime="20170823 13:51:38.794" starttime="20170823 13:51:38.791" status="PASS"></status>
</kw>
<status endtime="20170823 13:51:38.794" starttime="20170823 13:51:38.791" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:51:38.866">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170823 13:51:38.867">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:51:38.867" starttime="20170823 13:51:38.794" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:51:38.869">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:51:38.869" starttime="20170823 13:51:38.868" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:51:38.873">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:51:38.873" starttime="20170823 13:51:38.869" status="PASS"></status>
</kw>
<status endtime="20170823 13:51:38.873" starttime="20170823 13:51:38.869" status="PASS"></status>
</kw>
<status endtime="20170823 13:51:38.873" starttime="20170823 13:51:38.867" status="PASS"></status>
</kw>
<status endtime="20170823 13:51:38.873" starttime="20170823 13:51:38.867" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170823 13:51:38.874">Delete All Sessions</msg>
<status endtime="20170823 13:51:38.874" starttime="20170823 13:51:38.874" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:51:38.874">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:51:38.874" starttime="20170823 13:51:38.511" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:51:38.875">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:51:38.875" starttime="20170823 13:51:38.875" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:51:38.876">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170823 13:51:38.876">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170823 13:51:38.876">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170823 13:51:38.876" starttime="20170823 13:51:38.875" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:51:38.876">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170823 13:51:38.876" starttime="20170823 13:51:38.511" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:51:38.876">${power_state} = Off</msg>
<status endtime="20170823 13:51:38.877" starttime="20170823 13:51:38.510" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170823 13:51:38.877">On != Off</msg>
<status endtime="20170823 13:51:38.877" starttime="20170823 13:51:38.877" status="FAIL"></status>
</kw>
<status endtime="20170823 13:51:38.878" starttime="20170823 13:51:38.510" status="FAIL"></status>
</kw>
<status endtime="20170823 13:51:38.878" starttime="20170823 13:51:38.509" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:51:48.883">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 13:51:48.883" starttime="20170823 13:51:48.883" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:51:48.884">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 13:51:48.884" starttime="20170823 13:51:48.884" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:51:48.885">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 13:51:48.885" starttime="20170823 13:51:48.884" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:51:48.885">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 13:51:48.885" starttime="20170823 13:51:48.885" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:51:49.076">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 13:51:49.076" starttime="20170823 13:51:48.886" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:51:49.076">${status} = PASS</msg>
<msg level="INFO" timestamp="20170823 13:51:49.076">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:51:49.076" starttime="20170823 13:51:48.886" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:51:49.077">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:51:49.077" starttime="20170823 13:51:49.077" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:51:49.078">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:51:49.078" starttime="20170823 13:51:49.077" status="PASS"></status>
</kw>
<status endtime="20170823 13:51:49.078" starttime="20170823 13:51:48.882" status="PASS"></status>
</kw>
<status endtime="20170823 13:51:49.078" starttime="20170823 13:51:48.882" status="PASS"></status>
</kw>
<status endtime="20170823 13:51:49.078" starttime="20170823 13:51:48.881" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:51:49.079">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 13:51:49.079" starttime="20170823 13:51:49.078" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:51:49.081">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:51:49.081" starttime="20170823 13:51:49.080" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:51:49.082">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:51:49.082" starttime="20170823 13:51:49.082" status="PASS"></status>
</kw>
<status endtime="20170823 13:51:49.082" starttime="20170823 13:51:49.081" status="PASS"></status>
</kw>
<status endtime="20170823 13:51:49.082" starttime="20170823 13:51:49.080" status="PASS"></status>
</kw>
<status endtime="20170823 13:51:49.082" starttime="20170823 13:51:49.079" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:51:49.154">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170823 13:51:49.154">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:51:49.154" starttime="20170823 13:51:49.083" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:51:49.156">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:51:49.156" starttime="20170823 13:51:49.156" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:51:49.157">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:51:49.157" starttime="20170823 13:51:49.157" status="PASS"></status>
</kw>
<status endtime="20170823 13:51:49.158" starttime="20170823 13:51:49.157" status="PASS"></status>
</kw>
<status endtime="20170823 13:51:49.158" starttime="20170823 13:51:49.155" status="PASS"></status>
</kw>
<status endtime="20170823 13:51:49.158" starttime="20170823 13:51:49.155" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170823 13:51:49.158">Delete All Sessions</msg>
<status endtime="20170823 13:51:49.158" starttime="20170823 13:51:49.158" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:51:49.158">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:51:49.158" starttime="20170823 13:51:48.880" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:51:49.159">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:51:49.159" starttime="20170823 13:51:49.159" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:51:49.160">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170823 13:51:49.160">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170823 13:51:49.160">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170823 13:51:49.160" starttime="20170823 13:51:49.160" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:51:49.160">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170823 13:51:49.160" starttime="20170823 13:51:48.880" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:51:49.161">${power_state} = Off</msg>
<status endtime="20170823 13:51:49.161" starttime="20170823 13:51:48.879" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170823 13:51:49.161">On != Off</msg>
<status endtime="20170823 13:51:49.161" starttime="20170823 13:51:49.161" status="FAIL"></status>
</kw>
<status endtime="20170823 13:51:49.162" starttime="20170823 13:51:48.879" status="FAIL"></status>
</kw>
<status endtime="20170823 13:51:49.162" starttime="20170823 13:51:48.878" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:51:59.167">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 13:51:59.168" starttime="20170823 13:51:59.167" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:51:59.168">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 13:51:59.168" starttime="20170823 13:51:59.168" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:51:59.169">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 13:51:59.169" starttime="20170823 13:51:59.169" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:51:59.170">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 13:51:59.170" starttime="20170823 13:51:59.169" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:51:59.484">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 13:51:59.484" starttime="20170823 13:51:59.171" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:51:59.484">${status} = PASS</msg>
<msg level="INFO" timestamp="20170823 13:51:59.485">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:51:59.485" starttime="20170823 13:51:59.170" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:51:59.485">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:51:59.485" starttime="20170823 13:51:59.485" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:51:59.486">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:51:59.486" starttime="20170823 13:51:59.486" status="PASS"></status>
</kw>
<status endtime="20170823 13:51:59.486" starttime="20170823 13:51:59.166" status="PASS"></status>
</kw>
<status endtime="20170823 13:51:59.486" starttime="20170823 13:51:59.166" status="PASS"></status>
</kw>
<status endtime="20170823 13:51:59.486" starttime="20170823 13:51:59.165" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:51:59.487">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 13:51:59.487" starttime="20170823 13:51:59.487" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:51:59.489">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:51:59.489" starttime="20170823 13:51:59.489" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:51:59.490">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:51:59.490" starttime="20170823 13:51:59.490" status="PASS"></status>
</kw>
<status endtime="20170823 13:51:59.491" starttime="20170823 13:51:59.489" status="PASS"></status>
</kw>
<status endtime="20170823 13:51:59.491" starttime="20170823 13:51:59.488" status="PASS"></status>
</kw>
<status endtime="20170823 13:51:59.491" starttime="20170823 13:51:59.487" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:51:59.568">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170823 13:51:59.569">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:51:59.569" starttime="20170823 13:51:59.491" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:51:59.570">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:51:59.570" starttime="20170823 13:51:59.570" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:51:59.572">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:51:59.572" starttime="20170823 13:51:59.571" status="PASS"></status>
</kw>
<status endtime="20170823 13:51:59.572" starttime="20170823 13:51:59.571" status="PASS"></status>
</kw>
<status endtime="20170823 13:51:59.572" starttime="20170823 13:51:59.569" status="PASS"></status>
</kw>
<status endtime="20170823 13:51:59.572" starttime="20170823 13:51:59.569" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170823 13:51:59.573">Delete All Sessions</msg>
<status endtime="20170823 13:51:59.573" starttime="20170823 13:51:59.572" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:51:59.573">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:51:59.573" starttime="20170823 13:51:59.164" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:51:59.573">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:51:59.574" starttime="20170823 13:51:59.573" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:51:59.574">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170823 13:51:59.574">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170823 13:51:59.574">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170823 13:51:59.574" starttime="20170823 13:51:59.574" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:51:59.575">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170823 13:51:59.575" starttime="20170823 13:51:59.164" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:51:59.575">${power_state} = Off</msg>
<status endtime="20170823 13:51:59.575" starttime="20170823 13:51:59.163" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170823 13:51:59.576">On != Off</msg>
<status endtime="20170823 13:51:59.576" starttime="20170823 13:51:59.575" status="FAIL"></status>
</kw>
<status endtime="20170823 13:51:59.576" starttime="20170823 13:51:59.163" status="FAIL"></status>
</kw>
<status endtime="20170823 13:51:59.576" starttime="20170823 13:51:59.162" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:09.582">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 13:52:09.582" starttime="20170823 13:52:09.581" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:09.583">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 13:52:09.583" starttime="20170823 13:52:09.582" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:09.583">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 13:52:09.583" starttime="20170823 13:52:09.583" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:09.584">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 13:52:09.584" starttime="20170823 13:52:09.584" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:09.768">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 13:52:09.768" starttime="20170823 13:52:09.585" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:52:09.768">${status} = PASS</msg>
<msg level="INFO" timestamp="20170823 13:52:09.768">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:52:09.768" starttime="20170823 13:52:09.584" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:09.769">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:52:09.769" starttime="20170823 13:52:09.769" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:09.770">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:52:09.770" starttime="20170823 13:52:09.769" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:09.770" starttime="20170823 13:52:09.581" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:09.770" starttime="20170823 13:52:09.580" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:09.770" starttime="20170823 13:52:09.580" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:09.771">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170823 13:52:09.771" starttime="20170823 13:52:09.770" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:09.773">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:52:09.773" starttime="20170823 13:52:09.772" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:09.774">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170823 13:52:09.774" starttime="20170823 13:52:09.774" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:09.774" starttime="20170823 13:52:09.773" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:09.774" starttime="20170823 13:52:09.772" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:09.774" starttime="20170823 13:52:09.771" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:09.840">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170823 13:52:09.840">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:52:09.840" starttime="20170823 13:52:09.774" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:09.842">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:52:09.842" starttime="20170823 13:52:09.841" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:09.843">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:52:09.843" starttime="20170823 13:52:09.843" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:09.843" starttime="20170823 13:52:09.842" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:09.843" starttime="20170823 13:52:09.841" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:09.843" starttime="20170823 13:52:09.840" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170823 13:52:09.844">Delete All Sessions</msg>
<status endtime="20170823 13:52:09.844" starttime="20170823 13:52:09.844" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:52:09.844">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:52:09.844" starttime="20170823 13:52:09.579" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:09.845">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:52:09.845" starttime="20170823 13:52:09.844" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:09.845">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170823 13:52:09.845">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170823 13:52:09.845">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170823 13:52:09.845" starttime="20170823 13:52:09.845" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:52:09.846">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170823 13:52:09.846" starttime="20170823 13:52:09.578" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:52:09.846">${power_state} = Off</msg>
<status endtime="20170823 13:52:09.846" starttime="20170823 13:52:09.578" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170823 13:52:09.847">On != Off</msg>
<status endtime="20170823 13:52:09.847" starttime="20170823 13:52:09.846" status="FAIL"></status>
</kw>
<status endtime="20170823 13:52:09.847" starttime="20170823 13:52:09.578" status="FAIL"></status>
</kw>
<status endtime="20170823 13:52:09.847" starttime="20170823 13:52:09.577" status="FAIL"></status>
</kw>
<msg level="FAIL" timestamp="20170823 13:52:09.847">Keyword 'Is Host Running' failed after retrying for 10 minutes. The last error was: On != Off</msg>
<status endtime="20170823 13:52:09.847" starttime="20170823 13:42:02.069" status="FAIL"></status>
</kw>
<status endtime="20170823 13:52:09.848" starttime="20170823 13:41:58.318" status="FAIL"></status>
</kw>
<status endtime="20170823 13:52:09.848" starttime="20170823 13:41:53.481" status="FAIL"></status>
</kw>
<status endtime="20170823 13:52:09.848" starttime="20170823 13:41:53.481" status="FAIL"></status>
</kw>
<kw name="Test Exit Logs" type="teardown">
<doc>Collect FFDC and SOL log.</doc>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:09.853">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 13:52:09.854" starttime="20170823 13:52:09.853" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:09.854">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 13:52:09.854" starttime="20170823 13:52:09.854" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:09.855">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 13:52:09.855" starttime="20170823 13:52:09.855" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:09.856">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 13:52:09.856" starttime="20170823 13:52:09.855" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:10.063">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 13:52:10.064" starttime="20170823 13:52:09.856" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:52:10.064">${status} = PASS</msg>
<msg level="INFO" timestamp="20170823 13:52:10.064">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:52:10.064" starttime="20170823 13:52:09.856" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:10.065">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:52:10.065" starttime="20170823 13:52:10.064" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:10.066">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:52:10.066" starttime="20170823 13:52:10.065" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:10.066" starttime="20170823 13:52:09.852" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:10.066" starttime="20170823 13:52:09.852" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:10.066" starttime="20170823 13:52:09.851" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:10.067">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170823 13:52:10.067" starttime="20170823 13:52:10.067" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:10.070">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170823 13:52:10.071" starttime="20170823 13:52:10.069" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:10.072">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170823 13:52:10.072" starttime="20170823 13:52:10.072" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:10.072" starttime="20170823 13:52:10.071" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:10.072" starttime="20170823 13:52:10.068" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:10.072" starttime="20170823 13:52:10.068" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:10.163">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170823 13:52:10.164">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:52:10.164" starttime="20170823 13:52:10.073" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:10.166">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:52:10.166" starttime="20170823 13:52:10.165" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:10.166">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170823 13:52:10.167" starttime="20170823 13:52:10.166" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:10.167" starttime="20170823 13:52:10.166" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:10.167" starttime="20170823 13:52:10.164" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:10.167" starttime="20170823 13:52:10.164" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170823 13:52:10.167">Delete All Sessions</msg>
<status endtime="20170823 13:52:10.167" starttime="20170823 13:52:10.167" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:52:10.168">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:52:10.168" starttime="20170823 13:52:09.850" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:10.168">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:52:10.168" starttime="20170823 13:52:10.168" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:10.169">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170823 13:52:10.169">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170823 13:52:10.169">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status endtime="20170823 13:52:10.169" starttime="20170823 13:52:10.169" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:52:10.169">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status endtime="20170823 13:52:10.169" starttime="20170823 13:52:09.850" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:52:10.170">${host_state} = Off</msg>
<status endtime="20170823 13:52:10.170" starttime="20170823 13:52:09.849" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg level="FAIL" timestamp="20170823 13:52:10.171">Off != Quiesced</msg>
<status endtime="20170823 13:52:10.171" starttime="20170823 13:52:10.170" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:52:10.171">${status} = False</msg>
<status endtime="20170823 13:52:10.171" starttime="20170823 13:52:10.170" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:52:10.171">${status} = False</msg>
<status endtime="20170823 13:52:10.171" starttime="20170823 13:52:09.849" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.3.86.161</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:10.206">Length is 10</msg>
<status endtime="20170823 13:52:10.206" starttime="20170823 13:52:10.206" status="PASS"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:10.214">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170823 13:52:13.219">${RC} = 0</msg>
<msg level="INFO" timestamp="20170823 13:52:13.219">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=1.79 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.657 ms
64 bytes from 9.3.86.161: icmp_seq...</msg>
<status endtime="20170823 13:52:13.220" starttime="20170823 13:52:10.206" status="PASS"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:13.223">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=1.79 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.657 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.649 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.657 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2999ms
rtt min/avg/max/mdev = 0.649/0.939/1.795/0.494 ms</msg>
<status endtime="20170823 13:52:13.223" starttime="20170823 13:52:13.222" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status endtime="20170823 13:52:13.224" starttime="20170823 13:52:13.223" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:13.224" starttime="20170823 13:52:10.205" status="PASS"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:13.242">${cur_time} = 2017-08-23 13:52:13:241814</msg>
<status endtime="20170823 13:52:13.242" starttime="20170823 13:52:13.242" status="PASS"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:13.243">${cur_time} = 20170823135213241814</msg>
<status endtime="20170823 13:52:13.243" starttime="20170823 13:52:13.242" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:13.243" starttime="20170823 13:52:13.241" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:52:13.243">${FFDC_TIME} = 20170823135213241814</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:13.255">${suite_name} = TestsTestBasicPoweron</msg>
<status endtime="20170823 13:52:13.255" starttime="20170823 13:52:13.255" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:13.256">${suite_name} = 20170823135213241814_TestsTestBasicPoweron</msg>
<status endtime="20170823 13:52:13.256" starttime="20170823 13:52:13.256" status="PASS"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:13.256">${test_name} = PowerOnTest</msg>
<status endtime="20170823 13:52:13.256" starttime="20170823 13:52:13.256" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:13.257">${test_name} = 20170823135213241814_PowerOnTest</msg>
<status endtime="20170823 13:52:13.257" starttime="20170823 13:52:13.257" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:13.257" starttime="20170823 13:52:13.254" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:52:13.258">${FFDC_DIR_PATH} = /tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/</msg>
<msg level="INFO" timestamp="20170823 13:52:13.258">${FFDC_PREFIX} = 20170823135213241814_</msg>
<msg level="INFO" timestamp="20170823 13:52:13.288">${LOG_PREFIX} = /tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:13.291" html="yes">Created directory '&lt;a href="file:///tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest"&gt;/tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest&lt;/a&gt;'.</msg>
<status endtime="20170823 13:52:13.291" starttime="20170823 13:52:13.291" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:52:13.298">${FFDC_FILE_PATH} = /tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:13.331" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_general.txt"&gt;/tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 13:52:13.331" starttime="20170823 13:52:13.330" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:13.331" starttime="20170823 13:52:13.328" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:13.332" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_general.txt"&gt;/tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 13:52:13.332" starttime="20170823 13:52:13.332" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:13.332" starttime="20170823 13:52:13.331" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:13.333" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_general.txt"&gt;/tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 13:52:13.333" starttime="20170823 13:52:13.333" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:13.334" starttime="20170823 13:52:13.332" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:13.335" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_general.txt"&gt;/tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 13:52:13.335" starttime="20170823 13:52:13.334" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:13.335" starttime="20170823 13:52:13.334" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:13.336" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_general.txt"&gt;/tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 13:52:13.336" starttime="20170823 13:52:13.336" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:13.336" starttime="20170823 13:52:13.335" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:13.338" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_general.txt"&gt;/tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 13:52:13.338" starttime="20170823 13:52:13.337" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:13.338" starttime="20170823 13:52:13.337" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:13.339" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_general.txt"&gt;/tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 13:52:13.339" starttime="20170823 13:52:13.339" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:13.339" starttime="20170823 13:52:13.338" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:13.341" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_general.txt"&gt;/tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 13:52:13.341" starttime="20170823 13:52:13.341" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:13.341" starttime="20170823 13:52:13.339" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:13.342" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_general.txt"&gt;/tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 13:52:13.343" starttime="20170823 13:52:13.342" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:13.343" starttime="20170823 13:52:13.342" status="PASS"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:13.344" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_general.txt"&gt;/tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 13:52:13.345" starttime="20170823 13:52:13.344" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:13.345" starttime="20170823 13:52:13.343" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:13.346" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_general.txt"&gt;/tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 13:52:13.346" starttime="20170823 13:52:13.345" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:13.346" starttime="20170823 13:52:13.345" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:13.347" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_general.txt"&gt;/tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 13:52:13.347" starttime="20170823 13:52:13.347" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:13.347" starttime="20170823 13:52:13.346" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:13.349" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_general.txt"&gt;/tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 13:52:13.349" starttime="20170823 13:52:13.348" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:13.349" starttime="20170823 13:52:13.347" status="PASS"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:13.396">term_type=vt100
path_separator=/
host=9.3.86.161
height=24
width=80
port=22
index=1
prompt=# 
timeout=25 seconds
newline=

alias=bmc_connection
encoding=UTF-8</msg>
<msg level="INFO" timestamp="20170823 13:52:13.397">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg level="INFO" timestamp="20170823 13:52:13.474">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170823 13:52:13.490">${bmc_model} = Witherspoon</msg>
<msg level="INFO" timestamp="20170823 13:52:13.490">${stderr} = </msg>
<msg level="INFO" timestamp="20170823 13:52:13.490">${rc} = 0</msg>
<status endtime="20170823 13:52:13.490" starttime="20170823 13:52:13.349" status="PASS"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:13.491">Length is 0</msg>
<status endtime="20170823 13:52:13.491" starttime="20170823 13:52:13.491" status="PASS"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:13.491">Length is 11</msg>
<status endtime="20170823 13:52:13.491" starttime="20170823 13:52:13.491" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:52:13.492">${model_name} = Witherspoon</msg>
<status endtime="20170823 13:52:13.492" starttime="20170823 13:52:13.349" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:13.493" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_general.txt"&gt;/tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 13:52:13.493" starttime="20170823 13:52:13.493" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:13.493" starttime="20170823 13:52:13.492" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:13.493" starttime="20170823 13:52:13.343" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:13.494" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_general.txt"&gt;/tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 13:52:13.495" starttime="20170823 13:52:13.494" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:13.495" starttime="20170823 13:52:13.493" status="PASS"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:13.495">@{entries} = [ BMC DATA | APPLICATION DATA | DRIVER INFO ]</msg>
<status endtime="20170823 13:52:13.495" starttime="20170823 13:52:13.495" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC DATA" type="foritem">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:13.497" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_general.txt"&gt;/tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 13:52:13.497" starttime="20170823 13:52:13.496" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:13.497" starttime="20170823 13:52:13.496" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:13.498" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_general.txt"&gt;/tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 13:52:13.498" starttime="20170823 13:52:13.498" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:13.498" starttime="20170823 13:52:13.497" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:13.498" starttime="20170823 13:52:13.495" status="PASS"></status>
</kw>
<kw name="${index} = APPLICATION DATA" type="foritem">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:13.500" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_general.txt"&gt;/tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 13:52:13.500" starttime="20170823 13:52:13.499" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:13.500" starttime="20170823 13:52:13.498" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:13.501" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_general.txt"&gt;/tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 13:52:13.501" starttime="20170823 13:52:13.501" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:13.502" starttime="20170823 13:52:13.500" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:13.502" starttime="20170823 13:52:13.498" status="PASS"></status>
</kw>
<kw name="${index} = DRIVER INFO" type="foritem">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:13.503" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_general.txt"&gt;/tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 13:52:13.503" starttime="20170823 13:52:13.502" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:13.503" starttime="20170823 13:52:13.502" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:13.504" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_general.txt"&gt;/tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 13:52:13.504" starttime="20170823 13:52:13.504" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:13.505" starttime="20170823 13:52:13.503" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:13.505" starttime="20170823 13:52:13.502" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:13.505" starttime="20170823 13:52:13.495" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:13.506" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_general.txt"&gt;/tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 13:52:13.506" starttime="20170823 13:52:13.505" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:13.506" starttime="20170823 13:52:13.505" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:13.506" starttime="20170823 13:52:13.327" status="PASS"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:13.520">@{entries} = [ BMC LOGS ]</msg>
<status endtime="20170823 13:52:13.520" starttime="20170823 13:52:13.520" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC LOGS" type="foritem">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:13.521">@{method_list} = [ ('Core Files', 'SCP Coredump Files') | ('SEL Log', 'Collect eSEL Log') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('FFDC Generic Report', 'BMC FFDC Manifest') | ('BMC Specific Files', 'BMC FF...</msg>
<status endtime="20170823 13:52:13.521" starttime="20170823 13:52:13.521" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw name="Get Ffdc Method Desc" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status endtime="20170823 13:52:13.523" starttime="20170823 13:52:13.522" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:52:13.523">@{ffdc_function_list} = [ Core Files | SEL Log | Get Request FFDC | FFDC Generic Report | BMC Specific Files | OS FFDC | Sys Inventory Files ]</msg>
<status endtime="20170823 13:52:13.523" starttime="20170823 13:52:13.522" status="PASS"></status>
</kw>
<kw name="${method} IN [ @{method_list} ]" type="for">
<kw name="${method} = ('Core Files', 'SCP Coredump Files')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170823 13:52:13.525" starttime="20170823 13:52:13.524" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:52:13.525">${status} = PASS</msg>
<msg level="INFO" timestamp="20170823 13:52:13.525">${ret_values} = None</msg>
<status endtime="20170823 13:52:13.525" starttime="20170823 13:52:13.524" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170823 13:52:13.526" starttime="20170823 13:52:13.525" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:13.637">term_type=vt100
path_separator=/
host=9.3.86.161
height=24
width=80
port=22
index=1
prompt=# 
timeout=25 seconds
newline=

alias=bmc_connection
encoding=UTF-8</msg>
<msg level="INFO" timestamp="20170823 13:52:13.638">Executing command 'ls /tmp/core_*'.</msg>
<msg level="INFO" timestamp="20170823 13:52:13.695">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170823 13:52:13.715">${core_files} = /tmp/core_xargs.1299
/tmp/core_xargs.1536</msg>
<msg level="INFO" timestamp="20170823 13:52:13.715">${stderr} = </msg>
<msg level="INFO" timestamp="20170823 13:52:13.715">${rc} = 0</msg>
<status endtime="20170823 13:52:13.715" starttime="20170823 13:52:13.580" status="PASS"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:13.716">@{core_list} = [ /tmp/core_xargs.1299 | /tmp/core_xargs.1536 ]</msg>
<status endtime="20170823 13:52:13.716" starttime="20170823 13:52:13.715" status="PASS"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Open Connection for SCP</arg>
</arguments>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status endtime="20170823 13:52:13.752" starttime="20170823 13:52:13.741" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status endtime="20170823 13:52:14.455" starttime="20170823 13:52:13.754" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:14.455" starttime="20170823 13:52:13.754" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:14.455" starttime="20170823 13:52:13.753" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:14.455" starttime="20170823 13:52:13.740" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:14.455" starttime="20170823 13:52:13.716" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{core_list} ]" type="for">
<kw name="${index} = /tmp/core_xargs.1299" type="foritem">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status endtime="20170823 13:52:14.663" starttime="20170823 13:52:14.456" status="PASS"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:14.724">term_type=vt100
path_separator=/
host=9.3.86.161
height=24
width=80
port=22
index=1
prompt=# 
timeout=25 seconds
newline=

alias=bmc_connection
encoding=UTF-8</msg>
<msg level="INFO" timestamp="20170823 13:52:14.725">Executing command 'rm /tmp/core_xargs.1299'.</msg>
<msg level="INFO" timestamp="20170823 13:52:14.772">Command exited with return code 0.</msg>
<status endtime="20170823 13:52:14.792" starttime="20170823 13:52:14.663" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:14.793" starttime="20170823 13:52:14.455" status="PASS"></status>
</kw>
<kw name="${index} = /tmp/core_xargs.1536" type="foritem">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status endtime="20170823 13:52:14.999" starttime="20170823 13:52:14.793" status="PASS"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:15.065">term_type=vt100
path_separator=/
host=9.3.86.161
height=24
width=80
port=22
index=1
prompt=# 
timeout=25 seconds
newline=

alias=bmc_connection
encoding=UTF-8</msg>
<msg level="INFO" timestamp="20170823 13:52:15.066">Executing command 'rm /tmp/core_xargs.1536'.</msg>
<msg level="INFO" timestamp="20170823 13:52:15.122">Command exited with return code 0.</msg>
<status endtime="20170823 13:52:15.142" starttime="20170823 13:52:15.000" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:15.142" starttime="20170823 13:52:14.793" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:15.142" starttime="20170823 13:52:14.455" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:15.142" starttime="20170823 13:52:13.579" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:15.142" starttime="20170823 13:52:13.526" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:15.142" starttime="20170823 13:52:13.523" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:15.142" starttime="20170823 13:52:13.523" status="PASS"></status>
</kw>
<kw name="${method} = ('SEL Log', 'Collect eSEL Log')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170823 13:52:15.145" starttime="20170823 13:52:15.144" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:52:15.145">${status} = PASS</msg>
<msg level="INFO" timestamp="20170823 13:52:15.145">${ret_values} = None</msg>
<status endtime="20170823 13:52:15.145" starttime="20170823 13:52:15.144" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170823 13:52:15.145" starttime="20170823 13:52:15.145" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:15.199">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 13:52:15.200" starttime="20170823 13:52:15.196" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:15.201">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 13:52:15.201" starttime="20170823 13:52:15.200" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:15.201">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 13:52:15.201" starttime="20170823 13:52:15.201" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:15.202">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 13:52:15.202" starttime="20170823 13:52:15.202" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:15.417">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 13:52:15.417" starttime="20170823 13:52:15.203" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:52:15.418">${status} = PASS</msg>
<msg level="INFO" timestamp="20170823 13:52:15.418">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:52:15.418" starttime="20170823 13:52:15.203" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:15.419">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:52:15.419" starttime="20170823 13:52:15.418" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:15.420">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:52:15.420" starttime="20170823 13:52:15.419" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:15.420" starttime="20170823 13:52:15.195" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:15.420" starttime="20170823 13:52:15.195" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:15.420" starttime="20170823 13:52:15.194" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:15.421">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status endtime="20170823 13:52:15.421" starttime="20170823 13:52:15.421" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170823 13:52:15.422" starttime="20170823 13:52:15.421" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:15.465">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170823 13:52:15.466">${ret} = &lt;Response [404]&gt;</msg>
<status endtime="20170823 13:52:15.466" starttime="20170823 13:52:15.422" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170823 13:52:15.466" starttime="20170823 13:52:15.466" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170823 13:52:15.467">Delete All Sessions</msg>
<status endtime="20170823 13:52:15.467" starttime="20170823 13:52:15.467" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:52:15.467">${resp} = &lt;Response [404]&gt;</msg>
<status endtime="20170823 13:52:15.467" starttime="20170823 13:52:15.193" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:15.468">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170823 13:52:15.468">404 != 200</msg>
<status endtime="20170823 13:52:15.469" starttime="20170823 13:52:15.468" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:52:15.469">${status} = False</msg>
<status endtime="20170823 13:52:15.469" starttime="20170823 13:52:15.467" status="PASS"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:15.469">Returning from the enclosing user keyword.</msg>
<status endtime="20170823 13:52:15.469" starttime="20170823 13:52:15.469" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:15.469" starttime="20170823 13:52:15.193" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:15.470" starttime="20170823 13:52:15.146" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:15.470" starttime="20170823 13:52:15.143" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:15.470" starttime="20170823 13:52:15.142" status="PASS"></status>
</kw>
<kw name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170823 13:52:15.472" starttime="20170823 13:52:15.471" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:52:15.472">${status} = PASS</msg>
<msg level="INFO" timestamp="20170823 13:52:15.472">${ret_values} = None</msg>
<status endtime="20170823 13:52:15.472" starttime="20170823 13:52:15.471" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170823 13:52:15.472" starttime="20170823 13:52:15.472" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:15.523">@{entries} = [ GET REQUESTS ]</msg>
<status endtime="20170823 13:52:15.523" starttime="20170823 13:52:15.523" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = GET REQUESTS" type="foritem">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:15.525">@{cmd_list} = [ ('BMC_control_list', '/xyz/openbmc_project/control/enumerate') | ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate') | ('BMC_led', '/org/openbmc/records/events/enumerate') | ('BMC_sensor_l...</msg>
<status endtime="20170823 13:52:15.525" starttime="20170823 13:52:15.524" status="PASS"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC_control_list', '/xyz/openbmc_project/control/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:15.526">${logpath} = /tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_control_list.txt</msg>
<status endtime="20170823 13:52:15.526" starttime="20170823 13:52:15.525" status="PASS"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:15.530">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 13:52:15.531" starttime="20170823 13:52:15.530" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:15.532">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 13:52:15.532" starttime="20170823 13:52:15.531" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:15.533">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 13:52:15.533" starttime="20170823 13:52:15.532" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:15.534">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 13:52:15.534" starttime="20170823 13:52:15.533" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:15.719">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 13:52:15.720" starttime="20170823 13:52:15.535" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:52:15.720">${status} = PASS</msg>
<msg level="INFO" timestamp="20170823 13:52:15.720">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:52:15.720" starttime="20170823 13:52:15.534" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:15.721">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:52:15.721" starttime="20170823 13:52:15.720" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:15.721">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:52:15.721" starttime="20170823 13:52:15.721" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:15.722" starttime="20170823 13:52:15.529" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:15.722" starttime="20170823 13:52:15.529" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:15.722" starttime="20170823 13:52:15.528" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:15.722">${base_uri} = /xyz/openbmc_project/control/enumerate</msg>
<status endtime="20170823 13:52:15.723" starttime="20170823 13:52:15.722" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170823 13:52:15.723" starttime="20170823 13:52:15.723" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:15.959">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/control/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170823 13:52:15.959">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:52:15.959" starttime="20170823 13:52:15.724" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170823 13:52:15.960" starttime="20170823 13:52:15.960" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170823 13:52:15.960">Delete All Sessions</msg>
<status endtime="20170823 13:52:15.960" starttime="20170823 13:52:15.960" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:52:15.961">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:52:15.961" starttime="20170823 13:52:15.527" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:15.962">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:52:15.962" starttime="20170823 13:52:15.961" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:52:15.962">${status} = True</msg>
<status endtime="20170823 13:52:15.962" starttime="20170823 13:52:15.961" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20170823 13:52:15.963" starttime="20170823 13:52:15.962" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:15.964">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/control/host0": {}, 
    "/xyz/openbmc_project/control/host0/TPMEnable": {
      "TPMEnable": 0
    }, 
    "/xyz/openbmc_project/control/host0/auto_reboot": {
      "AutoReboot": 1
    }, 
    "/xyz/openbmc_project/control/host0/boot_mode": {
      "BootMode": "xyz.openbmc_project.Control.Boot.Mode.Modes.Regular"
    }, 
    "/xyz/openbmc_project/control/host0/boot_source": {
      "BootSource": "xyz.openbmc_project.Control.Boot.Source.Sources.Default"
    }, 
    "/xyz/openbmc_project/control/host0/power_cap": {
      "PowerCap": 0, 
      "PowerCapEnable": 0
    }, 
    "/xyz/openbmc_project/control/host0/power_restore_policy": {
      "PowerRestorePolicy": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore"
    }, 
    "/xyz/openbmc_project/control/host0/restriction_mode": {
      "RestrictionMode": "xyz.openbmc_project.Control.Security.RestrictionMode.Modes.None"
    }, 
    "/xyz/openbmc_project/control/minimum_ship_level_required": {
      "MinimumShipLevelRequired": 1
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170823 13:52:15.964">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170823 13:52:15.964">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/control/host0": {},
        "/xyz/openbmc_project/control/host0/TPMEnable": {
            "TPMEnable": 0
        },
        "/xyz/openbmc_project/control/...</msg>
<status endtime="20170823 13:52:15.964" starttime="20170823 13:52:15.963" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:15.966" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_control_list.txt"&gt;/tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_control_list.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 13:52:15.966" starttime="20170823 13:52:15.965" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:15.966" starttime="20170823 13:52:15.964" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:15.966" starttime="20170823 13:52:15.525" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:15.967">${logpath} = /tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_inventory.txt</msg>
<status endtime="20170823 13:52:15.967" starttime="20170823 13:52:15.966" status="PASS"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:15.969">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 13:52:15.970" starttime="20170823 13:52:15.969" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:15.970">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 13:52:15.970" starttime="20170823 13:52:15.970" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:15.971">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 13:52:15.971" starttime="20170823 13:52:15.971" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:15.972">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 13:52:15.972" starttime="20170823 13:52:15.971" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:16.168">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 13:52:16.168" starttime="20170823 13:52:15.972" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:52:16.168">${status} = PASS</msg>
<msg level="INFO" timestamp="20170823 13:52:16.168">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:52:16.168" starttime="20170823 13:52:15.972" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:16.169">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:52:16.169" starttime="20170823 13:52:16.169" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:16.170">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:52:16.170" starttime="20170823 13:52:16.169" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:16.170" starttime="20170823 13:52:15.969" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:16.170" starttime="20170823 13:52:15.968" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:16.170" starttime="20170823 13:52:15.967" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:16.171">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status endtime="20170823 13:52:16.171" starttime="20170823 13:52:16.170" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170823 13:52:16.171" starttime="20170823 13:52:16.171" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:16.354">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170823 13:52:16.354">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:52:16.354" starttime="20170823 13:52:16.172" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170823 13:52:16.354" starttime="20170823 13:52:16.354" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170823 13:52:16.355">Delete All Sessions</msg>
<status endtime="20170823 13:52:16.355" starttime="20170823 13:52:16.355" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:52:16.356">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:52:16.356" starttime="20170823 13:52:15.967" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:16.357">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:52:16.357" starttime="20170823 13:52:16.356" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:52:16.357">${status} = True</msg>
<status endtime="20170823 13:52:16.357" starttime="20170823 13:52:16.356" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20170823 13:52:16.358" starttime="20170823 13:52:16.358" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:16.359">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 0
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH051", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "00:00:00:00:00:00", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply0": {
      "Present": 1, 
      "PrettyName": "power_supply0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply1": {
      "Present": 1, 
      "PrettyName": "power_supply1"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170823 13:52:16.359">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170823 13:52:16.359">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system/chassis": {
            "AirCooled": 1,
            "WaterCooled": 0
        },
        "/xyz/openbmc_project/inventory/system/chassis/mo...</msg>
<status endtime="20170823 13:52:16.359" starttime="20170823 13:52:16.358" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:16.360" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_inventory.txt"&gt;/tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 13:52:16.361" starttime="20170823 13:52:16.360" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:16.361" starttime="20170823 13:52:16.359" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:16.361" starttime="20170823 13:52:15.966" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:16.361">${logpath} = /tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_led.txt</msg>
<status endtime="20170823 13:52:16.361" starttime="20170823 13:52:16.361" status="PASS"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:16.364">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 13:52:16.365" starttime="20170823 13:52:16.364" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:16.365">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 13:52:16.365" starttime="20170823 13:52:16.365" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:16.366">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 13:52:16.366" starttime="20170823 13:52:16.365" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:16.367">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 13:52:16.367" starttime="20170823 13:52:16.366" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:16.622">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 13:52:16.622" starttime="20170823 13:52:16.368" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:52:16.622">${status} = PASS</msg>
<msg level="INFO" timestamp="20170823 13:52:16.622">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:52:16.622" starttime="20170823 13:52:16.367" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:16.623">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:52:16.623" starttime="20170823 13:52:16.622" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:16.624">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:52:16.624" starttime="20170823 13:52:16.623" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:16.624" starttime="20170823 13:52:16.363" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:16.624" starttime="20170823 13:52:16.363" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:16.624" starttime="20170823 13:52:16.362" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:16.625">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status endtime="20170823 13:52:16.625" starttime="20170823 13:52:16.624" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170823 13:52:16.625" starttime="20170823 13:52:16.625" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:16.670">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170823 13:52:16.670">${ret} = &lt;Response [404]&gt;</msg>
<status endtime="20170823 13:52:16.670" starttime="20170823 13:52:16.626" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170823 13:52:16.671" starttime="20170823 13:52:16.670" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170823 13:52:16.671">Delete All Sessions</msg>
<status endtime="20170823 13:52:16.671" starttime="20170823 13:52:16.671" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:52:16.671">${resp} = &lt;Response [404]&gt;</msg>
<status endtime="20170823 13:52:16.671" starttime="20170823 13:52:16.362" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:16.672">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170823 13:52:16.673">404 != 200</msg>
<status endtime="20170823 13:52:16.673" starttime="20170823 13:52:16.672" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:52:16.673">${status} = False</msg>
<status endtime="20170823 13:52:16.673" starttime="20170823 13:52:16.672" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg level="INFO" timestamp="20170823 13:52:16.674">Continuing for loop from the next iteration.</msg>
<status endtime="20170823 13:52:16.674" starttime="20170823 13:52:16.674" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:16.674" starttime="20170823 13:52:16.673" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:16.674" starttime="20170823 13:52:16.361" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:16.675">${logpath} = /tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_sensor_list.txt</msg>
<status endtime="20170823 13:52:16.675" starttime="20170823 13:52:16.674" status="PASS"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:16.678">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 13:52:16.678" starttime="20170823 13:52:16.677" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:16.679">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 13:52:16.679" starttime="20170823 13:52:16.678" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:16.679">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 13:52:16.679" starttime="20170823 13:52:16.679" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:16.680">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 13:52:16.680" starttime="20170823 13:52:16.680" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:16.869">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 13:52:16.870" starttime="20170823 13:52:16.681" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:52:16.870">${status} = PASS</msg>
<msg level="INFO" timestamp="20170823 13:52:16.870">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:52:16.870" starttime="20170823 13:52:16.680" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:16.870">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:52:16.871" starttime="20170823 13:52:16.870" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:16.871">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:52:16.871" starttime="20170823 13:52:16.871" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:16.871" starttime="20170823 13:52:16.677" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:16.871" starttime="20170823 13:52:16.676" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:16.872" starttime="20170823 13:52:16.676" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:16.872">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status endtime="20170823 13:52:16.872" starttime="20170823 13:52:16.872" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170823 13:52:16.873" starttime="20170823 13:52:16.872" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:17.046">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170823 13:52:17.046">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:52:17.046" starttime="20170823 13:52:16.873" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170823 13:52:17.047" starttime="20170823 13:52:17.047" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170823 13:52:17.048">Delete All Sessions</msg>
<status endtime="20170823 13:52:17.048" starttime="20170823 13:52:17.047" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:52:17.048">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:52:17.048" starttime="20170823 13:52:16.675" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:17.049">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:52:17.049" starttime="20170823 13:52:17.049" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:52:17.049">${status} = True</msg>
<status endtime="20170823 13:52:17.049" starttime="20170823 13:52:17.048" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20170823 13:52:17.050" starttime="20170823 13:52:17.049" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:17.050">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 3
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/PowerSupplyDerating": {
      "error": 0, 
      "units": "", 
      "value": 10
    }, 
    "/org/openbmc/sensors/host/PowerSupplyRedundancy": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/TurboAllowed": {
      "error": 0, 
      "units": "", 
      "value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170823 13:52:17.051">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170823 13:52:17.051">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/host/BootCount": {
            "error": 0,
            "units": "",
            "value": 3
        },
        "/org/openbmc/sensors/host/BootProgress": {
...</msg>
<status endtime="20170823 13:52:17.051" starttime="20170823 13:52:17.050" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:17.052" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_sensor_list.txt"&gt;/tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 13:52:17.052" starttime="20170823 13:52:17.052" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:17.052" starttime="20170823 13:52:17.051" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:17.052" starttime="20170823 13:52:16.674" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:17.053">${logpath} = /tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_elog.txt</msg>
<status endtime="20170823 13:52:17.053" starttime="20170823 13:52:17.053" status="PASS"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:17.056">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 13:52:17.056" starttime="20170823 13:52:17.056" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:17.057">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 13:52:17.057" starttime="20170823 13:52:17.057" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:17.058">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 13:52:17.058" starttime="20170823 13:52:17.057" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:17.058">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 13:52:17.058" starttime="20170823 13:52:17.058" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:17.250">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 13:52:17.251" starttime="20170823 13:52:17.059" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:52:17.251">${status} = PASS</msg>
<msg level="INFO" timestamp="20170823 13:52:17.251">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:52:17.251" starttime="20170823 13:52:17.059" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:17.252">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:52:17.252" starttime="20170823 13:52:17.251" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:17.252">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:52:17.252" starttime="20170823 13:52:17.252" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:17.252" starttime="20170823 13:52:17.055" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:17.253" starttime="20170823 13:52:17.055" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:17.253" starttime="20170823 13:52:17.054" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:17.253">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status endtime="20170823 13:52:17.253" starttime="20170823 13:52:17.253" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170823 13:52:17.254" starttime="20170823 13:52:17.254" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:17.306">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170823 13:52:17.306">${ret} = &lt;Response [404]&gt;</msg>
<status endtime="20170823 13:52:17.306" starttime="20170823 13:52:17.254" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170823 13:52:17.307" starttime="20170823 13:52:17.307" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170823 13:52:17.308">Delete All Sessions</msg>
<status endtime="20170823 13:52:17.308" starttime="20170823 13:52:17.307" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:52:17.308">${resp} = &lt;Response [404]&gt;</msg>
<status endtime="20170823 13:52:17.308" starttime="20170823 13:52:17.053" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:17.309">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170823 13:52:17.309">404 != 200</msg>
<status endtime="20170823 13:52:17.309" starttime="20170823 13:52:17.309" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:52:17.309">${status} = False</msg>
<status endtime="20170823 13:52:17.309" starttime="20170823 13:52:17.308" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg level="INFO" timestamp="20170823 13:52:17.310">Continuing for loop from the next iteration.</msg>
<status endtime="20170823 13:52:17.310" starttime="20170823 13:52:17.310" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:17.310" starttime="20170823 13:52:17.310" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:17.311" starttime="20170823 13:52:17.053" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:17.311">${logpath} = /tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_record_log.txt</msg>
<status endtime="20170823 13:52:17.311" starttime="20170823 13:52:17.311" status="PASS"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:17.314">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 13:52:17.314" starttime="20170823 13:52:17.314" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:17.315">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 13:52:17.315" starttime="20170823 13:52:17.315" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:17.316">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 13:52:17.316" starttime="20170823 13:52:17.315" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:17.316">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 13:52:17.316" starttime="20170823 13:52:17.316" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:17.514">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 13:52:17.514" starttime="20170823 13:52:17.317" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:52:17.514">${status} = PASS</msg>
<msg level="INFO" timestamp="20170823 13:52:17.514">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:52:17.514" starttime="20170823 13:52:17.317" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:17.515">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:52:17.515" starttime="20170823 13:52:17.515" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:17.516">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:52:17.516" starttime="20170823 13:52:17.515" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:17.516" starttime="20170823 13:52:17.313" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:17.516" starttime="20170823 13:52:17.313" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:17.516" starttime="20170823 13:52:17.312" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:17.517">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status endtime="20170823 13:52:17.517" starttime="20170823 13:52:17.517" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170823 13:52:17.518" starttime="20170823 13:52:17.517" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:17.569">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170823 13:52:17.569">${ret} = &lt;Response [404]&gt;</msg>
<status endtime="20170823 13:52:17.569" starttime="20170823 13:52:17.518" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170823 13:52:17.569" starttime="20170823 13:52:17.569" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170823 13:52:17.570">Delete All Sessions</msg>
<status endtime="20170823 13:52:17.570" starttime="20170823 13:52:17.570" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:52:17.570">${resp} = &lt;Response [404]&gt;</msg>
<status endtime="20170823 13:52:17.570" starttime="20170823 13:52:17.311" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:17.571">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170823 13:52:17.571">404 != 200</msg>
<status endtime="20170823 13:52:17.571" starttime="20170823 13:52:17.571" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:52:17.572">${status} = False</msg>
<status endtime="20170823 13:52:17.572" starttime="20170823 13:52:17.570" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg level="INFO" timestamp="20170823 13:52:17.573">Continuing for loop from the next iteration.</msg>
<status endtime="20170823 13:52:17.573" starttime="20170823 13:52:17.572" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:17.573" starttime="20170823 13:52:17.572" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:17.573" starttime="20170823 13:52:17.311" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_sensor_xyz_list', '/xyz/openbmc_project/sensors/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:17.574">${logpath} = /tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_sensor_xyz_list.txt</msg>
<status endtime="20170823 13:52:17.574" starttime="20170823 13:52:17.573" status="PASS"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:17.576">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170823 13:52:17.577" starttime="20170823 13:52:17.576" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:17.577">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170823 13:52:17.577" starttime="20170823 13:52:17.577" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:17.578">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170823 13:52:17.578" starttime="20170823 13:52:17.578" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:17.579">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170823 13:52:17.579" starttime="20170823 13:52:17.578" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:17.797">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170823 13:52:17.797" starttime="20170823 13:52:17.579" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:52:17.797">${status} = PASS</msg>
<msg level="INFO" timestamp="20170823 13:52:17.797">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:52:17.797" starttime="20170823 13:52:17.579" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:17.798">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:52:17.798" starttime="20170823 13:52:17.798" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:17.799">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:52:17.799" starttime="20170823 13:52:17.798" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:17.799" starttime="20170823 13:52:17.575" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:17.799" starttime="20170823 13:52:17.575" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:17.799" starttime="20170823 13:52:17.574" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:17.800">${base_uri} = /xyz/openbmc_project/sensors/enumerate</msg>
<status endtime="20170823 13:52:17.800" starttime="20170823 13:52:17.799" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170823 13:52:17.800" starttime="20170823 13:52:17.800" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:18.168">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/sensors/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170823 13:52:18.168">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:52:18.168" starttime="20170823 13:52:17.801" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170823 13:52:18.169" starttime="20170823 13:52:18.169" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170823 13:52:18.169">Delete All Sessions</msg>
<status endtime="20170823 13:52:18.169" starttime="20170823 13:52:18.169" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:52:18.170">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170823 13:52:18.170" starttime="20170823 13:52:17.574" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:18.171">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170823 13:52:18.171" starttime="20170823 13:52:18.170" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:52:18.171">${status} = True</msg>
<status endtime="20170823 13:52:18.171" starttime="20170823 13:52:18.170" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20170823 13:52:18.171" starttime="20170823 13:52:18.171" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:18.173">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/sensors/current/ps0_output_current": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/current/ps1_output_current": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan0_0": {
      "Scale": 0, 
      "Target": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan0_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan1_0": {
      "Scale": 0, 
      "Target": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan1_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan2_0": {
      "Scale": 0, 
      "Target": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan2_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan3_0": {
      "Scale": 0, 
      "Target": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan3_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/power/ps0_input_power": {
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 8000000
    }, 
    "/xyz/openbmc_project/sensors/power/ps1_input_power": {
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/ambient": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 26570
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps0_input_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 205000
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps0_output_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 343
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps1_input_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps1_output_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170823 13:52:18.173">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170823 13:52:18.173">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/sensors/current/ps0_output_current": {
            "Scale": -3,
            "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes",
            "Value": ...</msg>
<status endtime="20170823 13:52:18.173" starttime="20170823 13:52:18.172" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:18.174" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_sensor_xyz_list.txt"&gt;/tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_sensor_xyz_list.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 13:52:18.174" starttime="20170823 13:52:18.174" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:18.175" starttime="20170823 13:52:18.173" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:18.175" starttime="20170823 13:52:17.573" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:18.175" starttime="20170823 13:52:15.525" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:18.175" starttime="20170823 13:52:15.523" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:18.175" starttime="20170823 13:52:15.523" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:18.175" starttime="20170823 13:52:15.523" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:18.175" starttime="20170823 13:52:15.522" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:18.175" starttime="20170823 13:52:15.473" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:18.175" starttime="20170823 13:52:15.470" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:18.175" starttime="20170823 13:52:15.470" status="PASS"></status>
</kw>
<kw name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170823 13:52:18.177" starttime="20170823 13:52:18.177" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:52:18.177">${status} = PASS</msg>
<msg level="INFO" timestamp="20170823 13:52:18.177">${ret_values} = None</msg>
<status endtime="20170823 13:52:18.177" starttime="20170823 13:52:18.176" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170823 13:52:18.178" starttime="20170823 13:52:18.178" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:18.222">@{entries} = [ BMC DATA | APPLICATION DATA | DRIVER INFO ]</msg>
<status endtime="20170823 13:52:18.223" starttime="20170823 13:52:18.222" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC DATA" type="foritem">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:18.224">@{cmd_list} = [ ('BMC OS', 'uname -a') | ('BMC File System Disk Space Usage', 'df -hT') | ('BMC Uptime', 'uptime') ]</msg>
<status endtime="20170823 13:52:18.224" starttime="20170823 13:52:18.223" status="PASS"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:18.233">${ENTRY_INDEX} = BMC DATA</msg>
<status endtime="20170823 13:52:18.233" starttime="20170823 13:52:18.226" status="PASS"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC OS', 'uname -a')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:18.236" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_general.txt"&gt;/tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 13:52:18.237" starttime="20170823 13:52:18.236" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:18.237" starttime="20170823 13:52:18.235" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:18.238" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_general.txt"&gt;/tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 13:52:18.238" starttime="20170823 13:52:18.238" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:18.238" starttime="20170823 13:52:18.237" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:18.240" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_general.txt"&gt;/tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 13:52:18.240" starttime="20170823 13:52:18.239" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:18.240" starttime="20170823 13:52:18.239" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:18.241" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_general.txt"&gt;/tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 13:52:18.241" starttime="20170823 13:52:18.241" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:18.241" starttime="20170823 13:52:18.240" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:18.241" starttime="20170823 13:52:18.234" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:18.241" starttime="20170823 13:52:18.234" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:18.242">${cmd_buf} = BMC Execute Command  uname -a  ignore_err=1</msg>
<status endtime="20170823 13:52:18.242" starttime="20170823 13:52:18.242" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uname -a</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:18.371">term_type=vt100
path_separator=/
host=9.3.86.161
height=24
width=80
port=22
index=1
prompt=# 
timeout=25 seconds
newline=

alias=bmc_connection
encoding=UTF-8</msg>
<msg level="INFO" timestamp="20170823 13:52:18.371">Executing command 'uname -a'.</msg>
<msg level="INFO" timestamp="20170823 13:52:18.431">Command exited with return code 0.</msg>
<status endtime="20170823 13:52:18.431" starttime="20170823 13:52:18.307" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:52:18.431">${status} = PASS</msg>
<msg level="INFO" timestamp="20170823 13:52:18.431">${ret_values} = (u'Linux witherspoon 4.10.17-ba30e9ed152bab62f72da24986ee5ca22d6c9b07 #1 Wed Aug 23 13:13:13 UTC 2017 armv6l GNU/Linux', u'', 0)</msg>
<status endtime="20170823 13:52:18.431" starttime="20170823 13:52:18.242" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:18.432">${stdout} = Linux witherspoon 4.10.17-ba30e9ed152bab62f72da24986ee5ca22d6c9b07 #1 Wed Aug 23 13:13:13 UTC 2017 armv6l GNU/Linux</msg>
<status endtime="20170823 13:52:18.432" starttime="20170823 13:52:18.432" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:18.433">${stderr} = </msg>
<status endtime="20170823 13:52:18.433" starttime="20170823 13:52:18.432" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:18.441" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_general.txt"&gt;/tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 13:52:18.441" starttime="20170823 13:52:18.440" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:18.441" starttime="20170823 13:52:18.440" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:18.441" starttime="20170823 13:52:18.433" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:18.441" starttime="20170823 13:52:18.233" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:18.441" starttime="20170823 13:52:18.233" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:18.444" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_general.txt"&gt;/tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 13:52:18.444" starttime="20170823 13:52:18.444" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:18.444" starttime="20170823 13:52:18.443" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:18.446" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_general.txt"&gt;/tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 13:52:18.446" starttime="20170823 13:52:18.446" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:18.446" starttime="20170823 13:52:18.445" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:18.447" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_general.txt"&gt;/tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 13:52:18.448" starttime="20170823 13:52:18.447" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:18.448" starttime="20170823 13:52:18.446" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:18.449" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_general.txt"&gt;/tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 13:52:18.449" starttime="20170823 13:52:18.448" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:18.449" starttime="20170823 13:52:18.448" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:18.449" starttime="20170823 13:52:18.443" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:18.449" starttime="20170823 13:52:18.442" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:18.450">${cmd_buf} = BMC Execute Command  df -hT  ignore_err=1</msg>
<status endtime="20170823 13:52:18.450" starttime="20170823 13:52:18.449" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>df -hT</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:18.575">term_type=vt100
path_separator=/
host=9.3.86.161
height=24
width=80
port=22
index=1
prompt=# 
timeout=25 seconds
newline=

alias=bmc_connection
encoding=UTF-8</msg>
<msg level="INFO" timestamp="20170823 13:52:18.576">Executing command 'df -hT'.</msg>
<msg level="INFO" timestamp="20170823 13:52:18.634">Command exited with return code 0.</msg>
<status endtime="20170823 13:52:18.635" starttime="20170823 13:52:18.507" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:52:18.635">${status} = PASS</msg>
<msg level="INFO" timestamp="20170823 13:52:18.635">${ret_values} = (u'Filesystem           Type            Size      Used Available Use% Mounted on\ndev                  devtmpfs      210.2M         0    210.2M   0% /dev\ntmpfs                tmpfs         211.1M    ...</msg>
<status endtime="20170823 13:52:18.635" starttime="20170823 13:52:18.450" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:18.636">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.2M         0    210.2M   0% /dev
tmpfs                tmpfs         211.1M     14.0...</msg>
<status endtime="20170823 13:52:18.636" starttime="20170823 13:52:18.635" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:18.636">${stderr} = </msg>
<status endtime="20170823 13:52:18.636" starttime="20170823 13:52:18.636" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:18.646" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_general.txt"&gt;/tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 13:52:18.647" starttime="20170823 13:52:18.646" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:18.647" starttime="20170823 13:52:18.645" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:18.647" starttime="20170823 13:52:18.637" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:18.647" starttime="20170823 13:52:18.442" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:18.647" starttime="20170823 13:52:18.441" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC Uptime', 'uptime')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:18.650" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_general.txt"&gt;/tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 13:52:18.650" starttime="20170823 13:52:18.650" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:18.650" starttime="20170823 13:52:18.649" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:18.651" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_general.txt"&gt;/tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 13:52:18.651" starttime="20170823 13:52:18.651" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:18.652" starttime="20170823 13:52:18.650" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:18.653" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_general.txt"&gt;/tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 13:52:18.656" starttime="20170823 13:52:18.652" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:18.656" starttime="20170823 13:52:18.652" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:18.658" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_general.txt"&gt;/tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 13:52:18.658" starttime="20170823 13:52:18.657" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:18.658" starttime="20170823 13:52:18.656" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:18.658" starttime="20170823 13:52:18.649" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:18.658" starttime="20170823 13:52:18.648" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:18.659">${cmd_buf} = BMC Execute Command  uptime  ignore_err=1</msg>
<status endtime="20170823 13:52:18.659" starttime="20170823 13:52:18.658" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uptime</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:18.784">term_type=vt100
path_separator=/
host=9.3.86.161
height=24
width=80
port=22
index=1
prompt=# 
timeout=25 seconds
newline=

alias=bmc_connection
encoding=UTF-8</msg>
<msg level="INFO" timestamp="20170823 13:52:18.784">Executing command 'uptime'.</msg>
<msg level="INFO" timestamp="20170823 13:52:18.841">Command exited with return code 0.</msg>
<status endtime="20170823 13:52:18.841" starttime="20170823 13:52:18.716" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:52:18.842">${status} = PASS</msg>
<msg level="INFO" timestamp="20170823 13:52:18.842">${ret_values} = (u' 13:52:26 up 13 min,  load average: 0.44, 0.54, 0.63', u'', 0)</msg>
<status endtime="20170823 13:52:18.842" starttime="20170823 13:52:18.659" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:18.842">${stdout} =  13:52:26 up 13 min,  load average: 0.44, 0.54, 0.63</msg>
<status endtime="20170823 13:52:18.842" starttime="20170823 13:52:18.842" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:18.843">${stderr} = </msg>
<status endtime="20170823 13:52:18.843" starttime="20170823 13:52:18.843" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:18.852" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_general.txt"&gt;/tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 13:52:18.852" starttime="20170823 13:52:18.851" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:18.852" starttime="20170823 13:52:18.850" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:18.852" starttime="20170823 13:52:18.843" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:18.852" starttime="20170823 13:52:18.647" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:18.852" starttime="20170823 13:52:18.647" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:18.852" starttime="20170823 13:52:18.233" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:18.852" starttime="20170823 13:52:18.223" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:18.852" starttime="20170823 13:52:18.223" status="PASS"></status>
</kw>
<kw name="${index} = APPLICATION DATA" type="foritem">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:18.853">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil state') ]</msg>
<status endtime="20170823 13:52:18.853" starttime="20170823 13:52:18.853" status="PASS"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:18.854">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status endtime="20170823 13:52:18.854" starttime="20170823 13:52:18.854" status="PASS"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC state', '/usr/sbin/obmcutil state')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:18.857" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_general.txt"&gt;/tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 13:52:18.857" starttime="20170823 13:52:18.857" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:18.858" starttime="20170823 13:52:18.856" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:18.859" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_general.txt"&gt;/tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 13:52:18.859" starttime="20170823 13:52:18.858" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:18.859" starttime="20170823 13:52:18.858" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:18.860" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_general.txt"&gt;/tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 13:52:18.860" starttime="20170823 13:52:18.860" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:18.860" starttime="20170823 13:52:18.859" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:18.862" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_general.txt"&gt;/tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 13:52:18.862" starttime="20170823 13:52:18.861" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:18.862" starttime="20170823 13:52:18.860" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:18.862" starttime="20170823 13:52:18.856" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:18.862" starttime="20170823 13:52:18.855" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:18.863">${cmd_buf} = BMC Execute Command  /usr/sbin/obmcutil state  ignore_err=1</msg>
<status endtime="20170823 13:52:18.863" starttime="20170823 13:52:18.862" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>/usr/sbin/obmcutil state</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:18.990">term_type=vt100
path_separator=/
host=9.3.86.161
height=24
width=80
port=22
index=1
prompt=# 
timeout=25 seconds
newline=

alias=bmc_connection
encoding=UTF-8</msg>
<msg level="INFO" timestamp="20170823 13:52:18.990">Executing command '/usr/sbin/obmcutil state'.</msg>
<msg level="INFO" timestamp="20170823 13:52:20.348">Command exited with return code 0.</msg>
<status endtime="20170823 13:52:20.348" starttime="20170823 13:52:18.923" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:52:20.349">${status} = PASS</msg>
<msg level="INFO" timestamp="20170823 13:52:20.349">${ret_values} = (u'CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.NotReady\nCurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off\nCurrentHostState:   xyz.openbmc_project.State.Host.HostSta...</msg>
<status endtime="20170823 13:52:20.349" starttime="20170823 13:52:18.863" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:20.349">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.NotReady
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Of...</msg>
<status endtime="20170823 13:52:20.350" starttime="20170823 13:52:20.349" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:20.350">${stderr} = </msg>
<status endtime="20170823 13:52:20.350" starttime="20170823 13:52:20.350" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:20.359" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_general.txt"&gt;/tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 13:52:20.359" starttime="20170823 13:52:20.358" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:20.359" starttime="20170823 13:52:20.357" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:20.359" starttime="20170823 13:52:20.350" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:20.359" starttime="20170823 13:52:18.855" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:20.359" starttime="20170823 13:52:18.854" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:20.360" starttime="20170823 13:52:18.854" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:20.360" starttime="20170823 13:52:18.853" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:20.360" starttime="20170823 13:52:18.852" status="PASS"></status>
</kw>
<kw name="${index} = DRIVER INFO" type="foritem">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:20.361">@{cmd_list} = [ ('FW Timestamp', 'cat /etc/timestamp') | ('FW Level', 'cat /etc/os-release') ]</msg>
<status endtime="20170823 13:52:20.361" starttime="20170823 13:52:20.360" status="PASS"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:20.361">${ENTRY_INDEX} = DRIVER INFO</msg>
<status endtime="20170823 13:52:20.362" starttime="20170823 13:52:20.361" status="PASS"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('FW Timestamp', 'cat /etc/timestamp')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:20.365" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_general.txt"&gt;/tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 13:52:20.365" starttime="20170823 13:52:20.364" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:20.365" starttime="20170823 13:52:20.364" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:20.366" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_general.txt"&gt;/tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 13:52:20.366" starttime="20170823 13:52:20.366" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:20.366" starttime="20170823 13:52:20.365" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:20.367" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_general.txt"&gt;/tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 13:52:20.368" starttime="20170823 13:52:20.367" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:20.368" starttime="20170823 13:52:20.366" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:20.369" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_general.txt"&gt;/tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 13:52:20.369" starttime="20170823 13:52:20.368" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:20.369" starttime="20170823 13:52:20.368" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:20.369" starttime="20170823 13:52:20.363" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:20.370" starttime="20170823 13:52:20.363" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:20.370">${cmd_buf} = BMC Execute Command  cat /etc/timestamp  ignore_err=1</msg>
<status endtime="20170823 13:52:20.370" starttime="20170823 13:52:20.370" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/timestamp</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:20.497">term_type=vt100
path_separator=/
host=9.3.86.161
height=24
width=80
port=22
index=1
prompt=# 
timeout=25 seconds
newline=

alias=bmc_connection
encoding=UTF-8</msg>
<msg level="INFO" timestamp="20170823 13:52:20.498">Executing command 'cat /etc/timestamp'.</msg>
<msg level="INFO" timestamp="20170823 13:52:20.573">Command exited with return code 0.</msg>
<status endtime="20170823 13:52:20.573" starttime="20170823 13:52:20.425" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:52:20.573">${status} = PASS</msg>
<msg level="INFO" timestamp="20170823 13:52:20.573">${ret_values} = (u'20170823131434', u'', 0)</msg>
<status endtime="20170823 13:52:20.573" starttime="20170823 13:52:20.371" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:20.574">${stdout} = 20170823131434</msg>
<status endtime="20170823 13:52:20.574" starttime="20170823 13:52:20.574" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:20.574">${stderr} = </msg>
<status endtime="20170823 13:52:20.575" starttime="20170823 13:52:20.574" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:20.581" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_general.txt"&gt;/tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 13:52:20.581" starttime="20170823 13:52:20.581" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:20.582" starttime="20170823 13:52:20.580" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:20.582" starttime="20170823 13:52:20.575" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:20.582" starttime="20170823 13:52:20.362" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:20.582" starttime="20170823 13:52:20.362" status="PASS"></status>
</kw>
<kw name="${cmd} = ('FW Level', 'cat /etc/os-release')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:20.585" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_general.txt"&gt;/tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 13:52:20.585" starttime="20170823 13:52:20.584" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:20.585" starttime="20170823 13:52:20.584" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:20.586" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_general.txt"&gt;/tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 13:52:20.586" starttime="20170823 13:52:20.586" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:20.586" starttime="20170823 13:52:20.585" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:20.588" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_general.txt"&gt;/tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 13:52:20.588" starttime="20170823 13:52:20.587" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:20.588" starttime="20170823 13:52:20.587" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:20.589" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_general.txt"&gt;/tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 13:52:20.589" starttime="20170823 13:52:20.589" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:20.589" starttime="20170823 13:52:20.588" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:20.589" starttime="20170823 13:52:20.583" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:20.589" starttime="20170823 13:52:20.583" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:20.590">${cmd_buf} = BMC Execute Command  cat /etc/os-release  ignore_err=1</msg>
<status endtime="20170823 13:52:20.590" starttime="20170823 13:52:20.590" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/os-release</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:20.719">term_type=vt100
path_separator=/
host=9.3.86.161
height=24
width=80
port=22
index=1
prompt=# 
timeout=25 seconds
newline=

alias=bmc_connection
encoding=UTF-8</msg>
<msg level="INFO" timestamp="20170823 13:52:20.720">Executing command 'cat /etc/os-release'.</msg>
<msg level="INFO" timestamp="20170823 13:52:20.766">Command exited with return code 0.</msg>
<status endtime="20170823 13:52:20.766" starttime="20170823 13:52:20.649" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:52:20.767">${status} = PASS</msg>
<msg level="INFO" timestamp="20170823 13:52:20.767">${ret_values} = (u'ID="openbmc-phosphor"\nNAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"\nVERSION="v1.99.9-31"\nVERSION_ID="v1.99.9-31-g6e1f963"\nPRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC P...</msg>
<status endtime="20170823 13:52:20.767" starttime="20170823 13:52:20.590" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:20.767">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.9-31"
VERSION_ID="v1.99.9-31-g6e1f963"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Project ...</msg>
<status endtime="20170823 13:52:20.767" starttime="20170823 13:52:20.767" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:20.768">${stderr} = </msg>
<status endtime="20170823 13:52:20.768" starttime="20170823 13:52:20.768" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:20.775" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_general.txt"&gt;/tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 13:52:20.775" starttime="20170823 13:52:20.774" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:20.775" starttime="20170823 13:52:20.774" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:20.775" starttime="20170823 13:52:20.768" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:20.775" starttime="20170823 13:52:20.582" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:20.775" starttime="20170823 13:52:20.582" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:20.775" starttime="20170823 13:52:20.362" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:20.775" starttime="20170823 13:52:20.360" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:20.776" starttime="20170823 13:52:20.360" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:20.776" starttime="20170823 13:52:18.223" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:20.776" starttime="20170823 13:52:18.222" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:20.776" starttime="20170823 13:52:18.178" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:20.776" starttime="20170823 13:52:18.176" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:20.776" starttime="20170823 13:52:18.175" status="PASS"></status>
</kw>
<kw name="${method} = ('BMC Specific Files', 'BMC FFDC Files')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170823 13:52:20.778" starttime="20170823 13:52:20.778" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:52:20.778">${status} = PASS</msg>
<msg level="INFO" timestamp="20170823 13:52:20.778">${ret_values} = None</msg>
<status endtime="20170823 13:52:20.778" starttime="20170823 13:52:20.777" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170823 13:52:20.779" starttime="20170823 13:52:20.778" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:20.824">@{entries} = [ BMC FILES ]</msg>
<status endtime="20170823 13:52:20.824" starttime="20170823 13:52:20.824" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC FILES" type="foritem">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:20.825">@{cmd_list} = [ ('BMC_dmesg', 'dmesg') | ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/') | ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_journalctl', 'journalctl --no-pager') | ('BMC_procinfo', 'cat /proc/cpuinfo'...</msg>
<status endtime="20170823 13:52:20.825" starttime="20170823 13:52:20.825" status="PASS"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC_dmesg', 'dmesg')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:20.826">${logpath} = /tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_dmesg.txt</msg>
<status endtime="20170823 13:52:20.826" starttime="20170823 13:52:20.826" status="PASS"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170823 13:52:20.828" starttime="20170823 13:52:20.827" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:20.830">${cmd_buf} = BMC Execute Command  dmesg  ignore_err=1</msg>
<status endtime="20170823 13:52:20.830" starttime="20170823 13:52:20.829" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>dmesg</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:20.957">term_type=vt100
path_separator=/
host=9.3.86.161
height=24
width=80
port=22
index=1
prompt=# 
timeout=25 seconds
newline=

alias=bmc_connection
encoding=UTF-8</msg>
<msg level="INFO" timestamp="20170823 13:52:20.957">Executing command 'dmesg'.</msg>
<msg level="INFO" timestamp="20170823 13:52:21.024">Command exited with return code 0.</msg>
<status endtime="20170823 13:52:21.024" starttime="20170823 13:52:20.885" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:52:21.025">${status} = PASS</msg>
<msg level="INFO" timestamp="20170823 13:52:21.025">${ret_values} = (u'[    0.000000] CPU: PIPT / VIPT nonaliasing data cache, VIPT nonaliasing instruction cache\n[    0.000000] OF: fdt:Machine model: Witherspoon BMC\n[    0.000000] Memory policy: Data cache writeback...</msg>
<status endtime="20170823 13:52:21.025" starttime="20170823 13:52:20.830" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:21.026">${stdout} = [    0.000000] CPU: PIPT / VIPT nonaliasing data cache, VIPT nonaliasing instruction cache
[    0.000000] OF: fdt:Machine model: Witherspoon BMC
[    0.000000] Memory policy: Data cache writeback
[   ...</msg>
<status endtime="20170823 13:52:21.026" starttime="20170823 13:52:21.025" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:21.026">${stderr} = </msg>
<status endtime="20170823 13:52:21.026" starttime="20170823 13:52:21.026" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:21.034" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_dmesg.txt"&gt;/tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 13:52:21.035" starttime="20170823 13:52:21.034" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:21.035" starttime="20170823 13:52:21.033" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:21.035" starttime="20170823 13:52:21.027" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:21.035" starttime="20170823 13:52:20.826" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:21.035" starttime="20170823 13:52:20.825" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:21.036">${logpath} = /tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_proc_fd_active_list.txt</msg>
<status endtime="20170823 13:52:21.036" starttime="20170823 13:52:21.035" status="PASS"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170823 13:52:21.037" starttime="20170823 13:52:21.037" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:21.038">${cmd_buf} = BMC Execute Command  ls -Al /proc/*/fd/  ignore_err=1</msg>
<status endtime="20170823 13:52:21.038" starttime="20170823 13:52:21.037" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls -Al /proc/*/fd/</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:21.159">term_type=vt100
path_separator=/
host=9.3.86.161
height=24
width=80
port=22
index=1
prompt=# 
timeout=25 seconds
newline=

alias=bmc_connection
encoding=UTF-8</msg>
<msg level="INFO" timestamp="20170823 13:52:21.159">Executing command 'ls -Al /proc/*/fd/'.</msg>
<msg level="INFO" timestamp="20170823 13:52:21.725">Command exited with return code 0.</msg>
<status endtime="20170823 13:52:21.725" starttime="20170823 13:52:21.092" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:52:21.726">${status} = PASS</msg>
<msg level="INFO" timestamp="20170823 13:52:21.727">${ret_values} = (u'/proc/1/fd/:\ntotal 0\nlrwx------    1 root     root            64 Aug 23 13:52 0 -&gt; /dev/null\nlrwx------    1 root     root            64 Aug 23 13:52 1 -&gt; /dev/null\nlr-x------    1 root     roo...</msg>
<status endtime="20170823 13:52:21.727" starttime="20170823 13:52:21.038" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:21.728">${stdout} = /proc/1/fd/:
total 0
lrwx------    1 root     root            64 Aug 23 13:52 0 -&gt; /dev/null
lrwx------    1 root     root            64 Aug 23 13:52 1 -&gt; /dev/null
lr-x------    1 root     root      ...</msg>
<status endtime="20170823 13:52:21.728" starttime="20170823 13:52:21.727" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:21.728">${stderr} = ls: /proc/1561/fd/3: cannot read link: No such file or directory
ls: /proc/self/fd/3: cannot read link: No such file or directory
ls: /proc/thread-self/fd/3: cannot read link: No such file or director...</msg>
<status endtime="20170823 13:52:21.728" starttime="20170823 13:52:21.728" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:21.737" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_proc_fd_active_list.txt"&gt;/tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_proc_fd_active_list.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 13:52:21.737" starttime="20170823 13:52:21.736" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:21.737" starttime="20170823 13:52:21.735" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:21.737" starttime="20170823 13:52:21.729" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:21.738" starttime="20170823 13:52:21.036" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:21.738" starttime="20170823 13:52:21.035" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:21.738">${logpath} = /tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_meminfo.txt</msg>
<status endtime="20170823 13:52:21.738" starttime="20170823 13:52:21.738" status="PASS"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170823 13:52:21.740" starttime="20170823 13:52:21.739" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:21.741">${cmd_buf} = BMC Execute Command  cat /proc/meminfo  ignore_err=1</msg>
<status endtime="20170823 13:52:21.741" starttime="20170823 13:52:21.740" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/meminfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:21.869">term_type=vt100
path_separator=/
host=9.3.86.161
height=24
width=80
port=22
index=1
prompt=# 
timeout=25 seconds
newline=

alias=bmc_connection
encoding=UTF-8</msg>
<msg level="INFO" timestamp="20170823 13:52:21.870">Executing command 'cat /proc/meminfo'.</msg>
<msg level="INFO" timestamp="20170823 13:52:21.916">Command exited with return code 0.</msg>
<status endtime="20170823 13:52:21.916" starttime="20170823 13:52:21.796" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:52:21.917">${status} = PASS</msg>
<msg level="INFO" timestamp="20170823 13:52:21.917">${ret_values} = (u'MemTotal:         432248 kB\nMemFree:          274332 kB\nMemAvailable:     322396 kB\nBuffers:           11628 kB\nCached:            53160 kB\nSwapCached:            0 kB\nActive:            9592...</msg>
<status endtime="20170823 13:52:21.917" starttime="20170823 13:52:21.741" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:21.918">${stdout} = MemTotal:         432248 kB
MemFree:          274332 kB
MemAvailable:     322396 kB
Buffers:           11628 kB
Cached:            53160 kB
SwapCached:            0 kB
Active:            95920 kB
Inac...</msg>
<status endtime="20170823 13:52:21.918" starttime="20170823 13:52:21.917" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:21.918">${stderr} = </msg>
<status endtime="20170823 13:52:21.918" starttime="20170823 13:52:21.918" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:21.925" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_meminfo.txt"&gt;/tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 13:52:21.925" starttime="20170823 13:52:21.924" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:21.925" starttime="20170823 13:52:21.924" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:21.925" starttime="20170823 13:52:21.918" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:21.925" starttime="20170823 13:52:21.739" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:21.925" starttime="20170823 13:52:21.738" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:21.926">${logpath} = /tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_journalctl.txt</msg>
<status endtime="20170823 13:52:21.926" starttime="20170823 13:52:21.926" status="PASS"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170823 13:52:21.928" starttime="20170823 13:52:21.927" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:21.928">${cmd_buf} = BMC Execute Command  journalctl --no-pager  ignore_err=1</msg>
<status endtime="20170823 13:52:21.928" starttime="20170823 13:52:21.928" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl --no-pager</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:22.058">term_type=vt100
path_separator=/
host=9.3.86.161
height=24
width=80
port=22
index=1
prompt=# 
timeout=25 seconds
newline=

alias=bmc_connection
encoding=UTF-8</msg>
<msg level="INFO" timestamp="20170823 13:52:22.059">Executing command 'journalctl --no-pager'.</msg>
<msg level="INFO" timestamp="20170823 13:52:23.379">Command exited with return code 0.</msg>
<status endtime="20170823 13:52:23.380" starttime="20170823 13:52:21.985" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:52:23.380">${status} = PASS</msg>
<msg level="INFO" timestamp="20170823 13:52:23.382">${ret_values} = (u'-- Logs begin at Wed 2017-08-23 13:38:54 UTC, end at Wed 2017-08-23 13:52:25 UTC. --\nAug 23 13:38:54 witherspoon kernel: Booting Linux on physical CPU 0x0\nAug 23 13:38:54 witherspoon kernel: Linu...</msg>
<status endtime="20170823 13:52:23.382" starttime="20170823 13:52:21.929" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:23.383">${stdout} = -- Logs begin at Wed 2017-08-23 13:38:54 UTC, end at Wed 2017-08-23 13:52:25 UTC. --
Aug 23 13:38:54 witherspoon kernel: Booting Linux on physical CPU 0x0
Aug 23 13:38:54 witherspoon kernel: Linux ver...</msg>
<status endtime="20170823 13:52:23.384" starttime="20170823 13:52:23.383" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:23.384">${stderr} = </msg>
<status endtime="20170823 13:52:23.384" starttime="20170823 13:52:23.384" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:23.394" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_journalctl.txt"&gt;/tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 13:52:23.395" starttime="20170823 13:52:23.393" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:23.395" starttime="20170823 13:52:23.392" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:23.395" starttime="20170823 13:52:23.384" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:23.395" starttime="20170823 13:52:21.926" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:23.395" starttime="20170823 13:52:21.926" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:23.396">${logpath} = /tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_procinfo.txt</msg>
<status endtime="20170823 13:52:23.396" starttime="20170823 13:52:23.395" status="PASS"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170823 13:52:23.397" starttime="20170823 13:52:23.397" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:23.398">${cmd_buf} = BMC Execute Command  cat /proc/cpuinfo  ignore_err=1</msg>
<status endtime="20170823 13:52:23.398" starttime="20170823 13:52:23.397" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/cpuinfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:23.530">term_type=vt100
path_separator=/
host=9.3.86.161
height=24
width=80
port=22
index=1
prompt=# 
timeout=25 seconds
newline=

alias=bmc_connection
encoding=UTF-8</msg>
<msg level="INFO" timestamp="20170823 13:52:23.531">Executing command 'cat /proc/cpuinfo'.</msg>
<msg level="INFO" timestamp="20170823 13:52:23.578">Command exited with return code 0.</msg>
<status endtime="20170823 13:52:23.578" starttime="20170823 13:52:23.465" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:52:23.578">${status} = PASS</msg>
<msg level="INFO" timestamp="20170823 13:52:23.578">${ret_values} = (u'processor\t: 0\nmodel name\t: ARMv6-compatible processor rev 7 (v6l)\nBogoMIPS\t: 789.70\nFeatures\t: half thumb fastmult edsp java tls \nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t...</msg>
<status endtime="20170823 13:52:23.578" starttime="20170823 13:52:23.398" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:23.579">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<status endtime="20170823 13:52:23.579" starttime="20170823 13:52:23.579" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:23.580">${stderr} = </msg>
<status endtime="20170823 13:52:23.580" starttime="20170823 13:52:23.580" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:23.587" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_procinfo.txt"&gt;/tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 13:52:23.587" starttime="20170823 13:52:23.586" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:23.587" starttime="20170823 13:52:23.586" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:23.587" starttime="20170823 13:52:23.580" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:23.587" starttime="20170823 13:52:23.396" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:23.587" starttime="20170823 13:52:23.395" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:23.588">${logpath} = /tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_proc_list.txt</msg>
<status endtime="20170823 13:52:23.588" starttime="20170823 13:52:23.588" status="PASS"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170823 13:52:23.589" starttime="20170823 13:52:23.589" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:23.590">${cmd_buf} = BMC Execute Command  top -n 1 -b  ignore_err=1</msg>
<status endtime="20170823 13:52:23.590" starttime="20170823 13:52:23.590" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>top -n 1 -b</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:23.714">term_type=vt100
path_separator=/
host=9.3.86.161
height=24
width=80
port=22
index=1
prompt=# 
timeout=25 seconds
newline=

alias=bmc_connection
encoding=UTF-8</msg>
<msg level="INFO" timestamp="20170823 13:52:23.715">Executing command 'top -n 1 -b'.</msg>
<msg level="INFO" timestamp="20170823 13:52:24.105">Command exited with return code 0.</msg>
<status endtime="20170823 13:52:24.105" starttime="20170823 13:52:23.648" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:52:24.105">${status} = PASS</msg>
<msg level="INFO" timestamp="20170823 13:52:24.105">${ret_values} = (u'Mem: 157792K used, 274456K free, 14480K shrd, 11628K buff, 53164K cached\nCPU:   5% usr  11% sys   0% nic  77% idle   0% io   0% irq   5% sirq\nLoad average: 0.38 0.53 0.63 1/148 1565\n  PID  PPID ...</msg>
<status endtime="20170823 13:52:24.105" starttime="20170823 13:52:23.591" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:24.106">${stdout} = Mem: 157792K used, 274456K free, 14480K shrd, 11628K buff, 53164K cached
CPU:   5% usr  11% sys   0% nic  77% idle   0% io   0% irq   5% sirq
Load average: 0.38 0.53 0.63 1/148 1565
  PID  PPID USER  ...</msg>
<status endtime="20170823 13:52:24.107" starttime="20170823 13:52:24.106" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:24.107">${stderr} = </msg>
<status endtime="20170823 13:52:24.107" starttime="20170823 13:52:24.107" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:24.119" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_proc_list.txt"&gt;/tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/20170823135213241814_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 13:52:24.120" starttime="20170823 13:52:24.117" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:24.120" starttime="20170823 13:52:24.116" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:24.120" starttime="20170823 13:52:24.108" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:24.120" starttime="20170823 13:52:23.588" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:24.120" starttime="20170823 13:52:23.587" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:24.120" starttime="20170823 13:52:20.825" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:24.120" starttime="20170823 13:52:20.824" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:24.120" starttime="20170823 13:52:20.824" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:24.120" starttime="20170823 13:52:20.824" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:24.121" starttime="20170823 13:52:20.823" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:24.121" starttime="20170823 13:52:20.779" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:24.121" starttime="20170823 13:52:20.776" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:24.121" starttime="20170823 13:52:20.776" status="PASS"></status>
</kw>
<kw name="${method} = ('OS FFDC', 'OS FFDC Files')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170823 13:52:24.123" starttime="20170823 13:52:24.123" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:52:24.123">${status} = PASS</msg>
<msg level="INFO" timestamp="20170823 13:52:24.123">${ret_values} = None</msg>
<status endtime="20170823 13:52:24.123" starttime="20170823 13:52:24.122" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170823 13:52:24.124" starttime="20170823 13:52:24.124" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:24.173">Returning from the enclosing user keyword.</msg>
<status endtime="20170823 13:52:24.173" starttime="20170823 13:52:24.172" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:24.173" starttime="20170823 13:52:24.171" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:24.173" starttime="20170823 13:52:24.124" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:24.173" starttime="20170823 13:52:24.121" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:24.173" starttime="20170823 13:52:24.121" status="PASS"></status>
</kw>
<kw name="${method} = ('Sys Inventory Files', 'System Inventory Files')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170823 13:52:24.175" starttime="20170823 13:52:24.175" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:52:24.175">${status} = PASS</msg>
<msg level="INFO" timestamp="20170823 13:52:24.175">${ret_values} = None</msg>
<status endtime="20170823 13:52:24.175" starttime="20170823 13:52:24.174" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170823 13:52:24.176" starttime="20170823 13:52:24.176" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="System Inventory Files" library="openbmc_ffdc_methods">
<doc>Copy systest os_inventory files.</doc>
<kw name="Copy Files" library="OperatingSystem">
<doc>Copies specified files to the target directory.</doc>
<arguments>
<arg>os_inventory_*.json</arg>
<arg>${ffdc_dir_path}</arg>
</arguments>
<status endtime="20170823 13:52:24.215" starttime="20170823 13:52:24.214" status="PASS"></status>
</kw>
<kw name="Remove Files" library="OperatingSystem">
<doc>Uses `Remove File` to remove multiple files one-by-one.</doc>
<arguments>
<arg>os_inventory_*.json</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:24.216" html="yes">File '&lt;a href="file:///tmp/fspcibld/30075/obmc-robot/os_inventory_*.json"&gt;/tmp/fspcibld/30075/obmc-robot/os_inventory_*.json&lt;/a&gt;' does not exist.</msg>
<status endtime="20170823 13:52:24.216" starttime="20170823 13:52:24.216" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:24.216" starttime="20170823 13:52:24.213" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:24.216" starttime="20170823 13:52:24.176" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:24.216" starttime="20170823 13:52:24.174" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:24.216" starttime="20170823 13:52:24.173" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:24.216" starttime="20170823 13:52:13.523" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:24.217" starttime="20170823 13:52:13.521" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:24.217" starttime="20170823 13:52:13.520" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:24.217" starttime="20170823 13:52:13.520" status="PASS"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>SSHLibrary.Close All Connections</arg>
</arguments>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status endtime="20170823 13:52:24.236" starttime="20170823 13:52:24.236" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:24.236" starttime="20170823 13:52:24.217" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:24.236" starttime="20170823 13:52:13.519" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:24.237" starttime="20170823 13:52:10.172" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:24.237" starttime="20170823 13:52:10.171" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status endtime="20170823 13:52:24.237" starttime="20170823 13:52:24.237" status="PASS"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:24.249">${FFDC_DIR_PATH_STYLE} = </msg>
<status endtime="20170823 13:52:24.249" starttime="20170823 13:52:24.238" status="PASS"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:24.250">${FFDC_DIR_PATH} = /tmp/fspcibld/30075/obmc-robot/logs/20170823135213241814_TestsTestBasicPoweron/20170823135213241814_PowerOnTest/</msg>
<status endtime="20170823 13:52:24.250" starttime="20170823 13:52:24.249" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status endtime="20170823 13:52:24.250" starttime="20170823 13:52:24.250" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status endtime="20170823 13:52:24.251" starttime="20170823 13:52:24.251" status="PASS"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:24.251" html="yes">Directory '&lt;a href="file:///tmp/fspcibld/30075/obmc-robot/logs"&gt;/tmp/fspcibld/30075/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status endtime="20170823 13:52:24.252" starttime="20170823 13:52:24.251" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:24.254" html="yes">File '&lt;a href="file:///tmp/fspcibld/30075/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/30075/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status endtime="20170823 13:52:24.254" starttime="20170823 13:52:24.253" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:52:24.254">${exist} = True</msg>
<status endtime="20170823 13:52:24.254" starttime="20170823 13:52:24.252" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status endtime="20170823 13:52:24.254" starttime="20170823 13:52:24.254" status="PASS"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status endtime="20170823 13:52:24.255" starttime="20170823 13:52:24.255" status="PASS"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:24.256">${cur_time} = 2017-08-23 13:52:24:255941</msg>
<status endtime="20170823 13:52:24.256" starttime="20170823 13:52:24.256" status="PASS"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:24.257">${cur_time} = 20170823135224255941</msg>
<status endtime="20170823 13:52:24.257" starttime="20170823 13:52:24.256" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:52:24.257">${cur_time} = 20170823135224255941</msg>
<status endtime="20170823 13:52:24.257" starttime="20170823 13:52:24.255" status="PASS"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:24.258" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/30075/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/30075/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20170823 13:52:24.258" starttime="20170823 13:52:24.257" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:24.258" starttime="20170823 13:52:24.238" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:24.258" starttime="20170823 13:52:09.849" status="PASS"></status>
</kw>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Stop system console logging and return log output.</doc>
<assign>
<var>${sol_log}</var>
</assign>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:24.260">${default_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170823 13:52:24.260" starttime="20170823 13:52:24.260" status="PASS"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:24.261">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170823 13:52:24.261" starttime="20170823 13:52:24.260" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:52:24.261">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170823 13:52:24.261" starttime="20170823 13:52:24.259" status="PASS"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:24.262">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status endtime="20170823 13:52:24.262" starttime="20170823 13:52:24.262" status="PASS"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170823 13:52:24.262" starttime="20170823 13:52:24.262" status="PASS"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:24.268">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170823 13:52:24.273">${rc} = 0</msg>
<msg level="INFO" timestamp="20170823 13:52:24.273">${output} = /tmp/fspcibld/30075/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20170823 13:52:24.273" starttime="20170823 13:52:24.263" status="PASS"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170823 13:52:24.276" starttime="20170823 13:52:24.275" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status endtime="20170823 13:52:24.280" starttime="20170823 13:52:24.277" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:24.281">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status endtime="20170823 13:52:24.281" starttime="20170823 13:52:24.280" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:52:24.281">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status endtime="20170823 13:52:24.281" starttime="20170823 13:52:24.261" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:24.282">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161' | egrep -v grep | cut -c10-14)</msg>
<status endtime="20170823 13:52:24.282" starttime="20170823 13:52:24.282" status="PASS"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170823 13:52:24.283" starttime="20170823 13:52:24.282" status="PASS"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:24.291">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170823 13:52:24.301">${rc} = 0</msg>
<msg level="INFO" timestamp="20170823 13:52:24.301">${os_con_pid} = </msg>
<status endtime="20170823 13:52:24.301" starttime="20170823 13:52:24.283" status="PASS"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status endtime="20170823 13:52:24.304" starttime="20170823 13:52:24.303" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:24.305">${cmd_buf} = kill -9 </msg>
<status endtime="20170823 13:52:24.305" starttime="20170823 13:52:24.305" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170823 13:52:24.307" starttime="20170823 13:52:24.306" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:24.307">${rc} = None</msg>
<msg level="INFO" timestamp="20170823 13:52:24.308">${output} = None</msg>
<status endtime="20170823 13:52:24.308" starttime="20170823 13:52:24.307" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170823 13:52:24.309" starttime="20170823 13:52:24.308" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:24.313" html="yes">Copied file from '&lt;a href="file:///tmp/9.3.86.161_os_console"&gt;/tmp/9.3.86.161_os_console&lt;/a&gt;' to '&lt;a href="file:///tmp/fspcibld/30075/obmc-robot/logs/9.3.86.161_os_console"&gt;/tmp/fspcibld/30075/obmc-robot/logs/9.3.86.161_os_console&lt;/a&gt;'.</msg>
<status endtime="20170823 13:52:24.313" starttime="20170823 13:52:24.310" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:24.313" starttime="20170823 13:52:24.310" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:24.314" starttime="20170823 13:52:24.309" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:24.314">${output} = </msg>
<status endtime="20170823 13:52:24.314" starttime="20170823 13:52:24.314" status="PASS"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg level="INFO" timestamp="20170823 13:52:24.315">${loc_quiet} = 1</msg>
<status endtime="20170823 13:52:24.315" starttime="20170823 13:52:24.315" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw name="Cmd Fnc" library="gen_cmd">
<doc>Run the given command in a shell and return the shell return code.</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status endtime="20170823 13:52:24.363" starttime="20170823 13:52:24.316" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:52:24.364">${rc} = 0</msg>
<msg level="INFO" timestamp="20170823 13:52:24.364">${output} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.86.161
Warning: Permanently added '[9.3.86.161]:2200' (RSA) to the list of known hosts.
root@9.3.86.161's password: 
</msg>
<status endtime="20170823 13:52:24.364" starttime="20170823 13:52:24.315" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170823 13:52:24.365">${sol_log} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.86.161
Warning: Permanently added '[9.3.86.161]:2200' (RSA) to the list of known hosts.
root@9.3.86.161's password: 
</msg>
<status endtime="20170823 13:52:24.365" starttime="20170823 13:52:24.258" status="PASS"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${sol_log}</arg>
</arguments>
<msg level="INFO" timestamp="20170823 13:52:24.368">spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.86.161
Warning: Permanently added '[9.3.86.161]:2200' (RSA) to the list of known hosts.
root@9.3.86.161's password: 
</msg>
<status endtime="20170823 13:52:24.368" starttime="20170823 13:52:24.367" status="PASS"></status>
</kw>
<status endtime="20170823 13:52:24.368" starttime="20170823 13:52:09.848" status="PASS"></status>
</kw>
<doc>Power off and on.</doc>
<tags>
<tag>chassisboot</tag>
<tag>Power_On_Test</tag>
</tags>
<status endtime="20170823 13:52:24.368" critical="yes" starttime="20170823 13:41:53.345" status="FAIL">Keyword 'Is Host Running' failed after retrying for 10 minutes. The last error was: On != Off</status>
</test>
<doc>Test power on for HW CI.</doc>
<status endtime="20170823 13:52:24.370" starttime="20170823 13:41:53.307" status="FAIL"></status>
</suite>
<doc>Set metadata for test suite.</doc>
<status endtime="20170823 13:52:24.374" starttime="20170823 13:41:46.801" status="FAIL"></status>
</suite>
<statistics>
<total>
<stat pass="1" fail="1">Critical Tests</stat>
<stat pass="1" fail="1">All Tests</stat>
</total>
<tag>
<stat pass="0" fail="1">chassisboot</stat>
<stat pass="0" fail="1">Power_On_Test</stat>
<stat pass="1" fail="0">Test_SSL_Connection</stat>
</tag>
<suite>
<stat pass="1" id="s1" name="Tests" fail="1">Tests</stat>
<stat pass="1" id="s1-s1" name="Security" fail="0">Tests.Security</stat>
<stat pass="1" id="s1-s1-s1" name="Test Ssl" fail="0">Tests.Security.Test Ssl</stat>
<stat pass="0" id="s1-s2" name="Test Basic Poweron" fail="1">Tests.Test Basic Poweron</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
