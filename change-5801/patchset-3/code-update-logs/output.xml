<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170805 05:48:10.496" generator="Robot 3.0.2 (Python 2.7.12 on linux2)">
<suite source="/home/fspcibld/openbmc-test-automation/extended/code_update/update_bmc.robot" id="s1" name="Update Bmc">
<test id="s1-t1" name="Initiate Code Update BMC">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${LAST_KNOWN_GOOD_VERSION}' != '${EMPTY}'</arg>
<arg>Run Keyword And Return Status</arg>
<arg>Validate BMC Version</arg>
<arg>${LAST_KNOWN_GOOD_VERSION}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<msg timestamp="20170805 05:48:11.692" level="INFO">${status} = None</msg>
<status status="PASS" endtime="20170805 05:48:11.693" starttime="20170805 05:48:11.692"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>Pass Execution</arg>
<arg>The BMC already has the requested build loaded so no further action will be taken.</arg>
</arguments>
<status status="PASS" endtime="20170805 05:48:11.694" starttime="20170805 05:48:11.694"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${FORCE_UPDATE} == ${0}</arg>
<arg>Prepare BMC For Update</arg>
</arguments>
<kw name="Prepare BMC For Update">
<doc>Prerequisite operation before code update.</doc>
<kw name="Check Boot Count And Time">
<doc>Check for unexpected reboots.</doc>
<kw name="Set BMC Reset Reference Time" library="utils">
<doc>Set current boot time as a reference and increment</doc>
<kw name="Get BMC Boot Time" library="utils">
<doc>Get boot time from /proc/stat.</doc>
<assign>
<var>${cur_btime}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170805 05:48:11.699" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170805 05:48:11.699" starttime="20170805 05:48:11.698"></status>
</kw>
<msg timestamp="20170805 05:48:11.699" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170805 05:48:11.699" starttime="20170805 05:48:11.698"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170805 05:48:11.700" starttime="20170805 05:48:11.700"></status>
</kw>
<status status="PASS" endtime="20170805 05:48:11.700" starttime="20170805 05:48:11.699"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170805 05:48:11.702" starttime="20170805 05:48:11.701"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170805 05:48:11.703" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170805 05:48:11.703" starttime="20170805 05:48:11.702"></status>
</kw>
<msg timestamp="20170805 05:48:11.703" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170805 05:48:11.703" starttime="20170805 05:48:11.702"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170805 05:48:11.705" starttime="20170805 05:48:11.705"></status>
</kw>
<status status="PASS" endtime="20170805 05:48:11.705" starttime="20170805 05:48:11.704"></status>
</kw>
<status status="PASS" endtime="20170805 05:48:11.706" starttime="20170805 05:48:11.704"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170805 05:48:11.706" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170805 05:48:13.421" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170805 05:48:13.421" starttime="20170805 05:48:11.706"></status>
</kw>
<status status="PASS" endtime="20170805 05:48:13.421" starttime="20170805 05:48:11.697"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>egrep '^btime ' /proc/stat | cut -f 2 -d ' '</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170805 05:48:13.422" level="INFO">Executing command 'egrep '^btime ' /proc/stat | cut -f 2 -d ' ''.</msg>
<msg timestamp="20170805 05:48:13.499" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170805 05:48:13.500" level="INFO">${output} = 1501908373</msg>
<msg timestamp="20170805 05:48:13.500" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170805 05:48:13.500" starttime="20170805 05:48:13.422"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170805 05:48:13.500" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170805 05:48:13.500" starttime="20170805 05:48:13.500"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${btime}</var>
</assign>
<msg timestamp="20170805 05:48:13.501" level="INFO">${btime} = 1501908373</msg>
<status status="PASS" endtime="20170805 05:48:13.501" starttime="20170805 05:48:13.501"></status>
</kw>
<msg timestamp="20170805 05:48:13.501" level="INFO">${cur_btime} = 1501908373</msg>
<status status="PASS" endtime="20170805 05:48:13.501" starttime="20170805 05:48:11.696"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${BOOT_TIME} == ${0} and ${BOOT_COUNT} == ${0}</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
<arg>ELSE IF</arg>
<arg>${cur_btime} &gt; ${BOOT_TIME}</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_COUNT}</arg>
<arg>${BOOT_COUNT + 1}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
</arguments>
<msg timestamp="20170805 05:48:13.503" level="INFO">${BOOT_TIME} = 1501908373</msg>
<status status="PASS" endtime="20170805 05:48:13.503" starttime="20170805 05:48:13.503"></status>
</kw>
<status status="PASS" endtime="20170805 05:48:13.503" starttime="20170805 05:48:13.502"></status>
</kw>
<status status="PASS" endtime="20170805 05:48:13.503" starttime="20170805 05:48:11.696"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\n Boot Count: ${BOOT_COUNT}</arg>
</arguments>
<status status="PASS" endtime="20170805 05:48:13.504" starttime="20170805 05:48:13.504"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\n Boot Time: ${BOOT_TIME}</arg>
</arguments>
<status status="PASS" endtime="20170805 05:48:13.505" starttime="20170805 05:48:13.504"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${BOOT_COUNT} &gt; ${MAX_BOOT_COUNT}</arg>
<arg>Log</arg>
<arg>Phantom Reboot!!! Unexpected reboot detected</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20170805 05:48:13.505" starttime="20170805 05:48:13.505"></status>
</kw>
<status status="PASS" endtime="20170805 05:48:13.506" starttime="20170805 05:48:11.695"></status>
</kw>
<kw name="Prune Journal Log" library="utils">
<doc>Prune archived journal logs.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170805 05:48:13.508" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170805 05:48:13.508" starttime="20170805 05:48:13.508"></status>
</kw>
<msg timestamp="20170805 05:48:13.508" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170805 05:48:13.508" starttime="20170805 05:48:13.507"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170805 05:48:13.509" starttime="20170805 05:48:13.509"></status>
</kw>
<status status="PASS" endtime="20170805 05:48:13.509" starttime="20170805 05:48:13.509"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170805 05:48:13.510" starttime="20170805 05:48:13.510"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170805 05:48:13.511" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170805 05:48:13.511" starttime="20170805 05:48:13.511"></status>
</kw>
<msg timestamp="20170805 05:48:13.511" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170805 05:48:13.511" starttime="20170805 05:48:13.510"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170805 05:48:13.513" starttime="20170805 05:48:13.513"></status>
</kw>
<status status="PASS" endtime="20170805 05:48:13.513" starttime="20170805 05:48:13.513"></status>
</kw>
<status status="PASS" endtime="20170805 05:48:13.513" starttime="20170805 05:48:13.512"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170805 05:48:13.514" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170805 05:48:15.224" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170805 05:48:15.225" starttime="20170805 05:48:13.514"></status>
</kw>
<status status="PASS" endtime="20170805 05:48:15.225" starttime="20170805 05:48:13.506"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>journalctl --vacuum-size=${vacuum_size}</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170805 05:48:15.226" level="INFO">Executing command 'journalctl --vacuum-size=1M'.</msg>
<msg timestamp="20170805 05:48:15.302" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170805 05:48:15.302" level="INFO">${output} = </msg>
<msg timestamp="20170805 05:48:15.303" level="INFO">${stderr} = Vacuuming done, freed 0B of archived journals from /run/log/journal/cc6e1404d87444e8a089dfdb00a18f7d.</msg>
<msg timestamp="20170805 05:48:15.303" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20170805 05:48:15.303" starttime="20170805 05:48:15.225"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${stderr}</arg>
</arguments>
<status status="PASS" endtime="20170805 05:48:15.304" starttime="20170805 05:48:15.303"></status>
</kw>
<status status="PASS" endtime="20170805 05:48:15.304" starttime="20170805 05:48:13.506"></status>
</kw>
<kw name="Power Off Request" library="state_manager">
<doc>Select appropriate poweroff keyword.</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${OBMC_STATES_VERSION}' == '${0}'</arg>
<arg>Initiate Power Off</arg>
<arg>ELSE</arg>
<arg>Initiate Host PowerOff</arg>
</arguments>
<kw name="Initiate Host PowerOff" library="state_manager">
<doc>Initiate host power off.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170805 05:48:15.306" level="INFO">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status status="PASS" endtime="20170805 05:48:15.306" starttime="20170805 05:48:15.306"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170805 05:48:15.308" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status status="PASS" endtime="20170805 05:48:15.308" starttime="20170805 05:48:15.307"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170805 05:48:15.310" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170805 05:48:15.311" starttime="20170805 05:48:15.310"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 05:48:15.312" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 05:48:15.312" starttime="20170805 05:48:15.312"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170805 05:48:15.313" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170805 05:48:15.313" starttime="20170805 05:48:15.312"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 05:48:15.314" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170805 05:48:15.314" starttime="20170805 05:48:15.313"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170805 05:48:15.529" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170805 05:48:15.529" starttime="20170805 05:48:15.315"></status>
</kw>
<msg timestamp="20170805 05:48:15.529" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 05:48:15.529" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 05:48:15.529" starttime="20170805 05:48:15.314"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170805 05:48:15.530" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 05:48:15.530" starttime="20170805 05:48:15.530"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 05:48:15.531" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 05:48:15.531" starttime="20170805 05:48:15.531"></status>
</kw>
<status status="PASS" endtime="20170805 05:48:15.531" starttime="20170805 05:48:15.310"></status>
</kw>
<status status="PASS" endtime="20170805 05:48:15.531" starttime="20170805 05:48:15.309"></status>
</kw>
<status status="PASS" endtime="20170805 05:48:15.531" starttime="20170805 05:48:15.309"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170805 05:48:15.532" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status status="PASS" endtime="20170805 05:48:15.532" starttime="20170805 05:48:15.532"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 05:48:15.533" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 05:48:15.533" starttime="20170805 05:48:15.532"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170805 05:48:15.533" starttime="20170805 05:48:15.533"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170805 05:48:15.535" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type...</msg>
<status status="PASS" endtime="20170805 05:48:15.535" starttime="20170805 05:48:15.534"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170805 05:48:15.536" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170805 05:48:15.537" starttime="20170805 05:48:15.536"></status>
</kw>
<status status="PASS" endtime="20170805 05:48:15.537" starttime="20170805 05:48:15.535"></status>
</kw>
<status status="PASS" endtime="20170805 05:48:15.537" starttime="20170805 05:48:15.533"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170805 05:48:15.736" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170805 05:48:15.736" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 05:48:15.736" starttime="20170805 05:48:15.537"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170805 05:48:15.738" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170805 05:48:15.738" starttime="20170805 05:48:15.737"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170805 05:48:15.739" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170805 05:48:15.739" starttime="20170805 05:48:15.739"></status>
</kw>
<status status="PASS" endtime="20170805 05:48:15.739" starttime="20170805 05:48:15.738"></status>
</kw>
<status status="PASS" endtime="20170805 05:48:15.739" starttime="20170805 05:48:15.737"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170805 05:48:15.740" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170805 05:48:15.740" starttime="20170805 05:48:15.740"></status>
</kw>
<msg timestamp="20170805 05:48:15.740" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 05:48:15.740" starttime="20170805 05:48:15.308"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 05:48:15.741" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 05:48:15.741" starttime="20170805 05:48:15.741"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170805 05:48:15.742" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170805 05:48:15.742" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170805 05:48:15.742" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170805 05:48:15.742" starttime="20170805 05:48:15.741"></status>
</kw>
<status status="PASS" endtime="20170805 05:48:15.742" starttime="20170805 05:48:15.307"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status status="PASS" endtime="20170805 05:48:15.743" starttime="20170805 05:48:15.742"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>6 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170805 05:48:15.748" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170805 05:48:15.749" starttime="20170805 05:48:15.748"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 05:48:15.749" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 05:48:15.749" starttime="20170805 05:48:15.749"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170805 05:48:15.750" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170805 05:48:15.750" starttime="20170805 05:48:15.750"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 05:48:15.751" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170805 05:48:15.751" starttime="20170805 05:48:15.750"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170805 05:48:16.346" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170805 05:48:16.346" starttime="20170805 05:48:15.751"></status>
</kw>
<msg timestamp="20170805 05:48:16.346" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 05:48:16.346" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 05:48:16.346" starttime="20170805 05:48:15.751"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170805 05:48:16.347" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 05:48:16.347" starttime="20170805 05:48:16.346"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 05:48:16.348" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 05:48:16.348" starttime="20170805 05:48:16.347"></status>
</kw>
<status status="PASS" endtime="20170805 05:48:16.348" starttime="20170805 05:48:15.747"></status>
</kw>
<status status="PASS" endtime="20170805 05:48:16.348" starttime="20170805 05:48:15.747"></status>
</kw>
<status status="PASS" endtime="20170805 05:48:16.348" starttime="20170805 05:48:15.746"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170805 05:48:16.349" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170805 05:48:16.349" starttime="20170805 05:48:16.348"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170805 05:48:16.349" starttime="20170805 05:48:16.349"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170805 05:48:16.501" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170805 05:48:16.501" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 05:48:16.501" starttime="20170805 05:48:16.350"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170805 05:48:16.503" starttime="20170805 05:48:16.502"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170805 05:48:16.503" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170805 05:48:16.503" starttime="20170805 05:48:16.503"></status>
</kw>
<msg timestamp="20170805 05:48:16.504" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 05:48:16.504" starttime="20170805 05:48:15.745"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 05:48:16.505" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 05:48:16.505" starttime="20170805 05:48:16.504"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170805 05:48:16.506" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170805 05:48:16.506" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170805 05:48:16.506" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status status="PASS" endtime="20170805 05:48:16.506" starttime="20170805 05:48:16.505"></status>
</kw>
<msg timestamp="20170805 05:48:16.506" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170805 05:48:16.506" starttime="20170805 05:48:15.745"></status>
</kw>
<msg timestamp="20170805 05:48:16.507" level="INFO">${power_state} = Off</msg>
<status status="PASS" endtime="20170805 05:48:16.507" starttime="20170805 05:48:15.744"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20170805 05:48:16.508" starttime="20170805 05:48:16.507"></status>
</kw>
<status status="PASS" endtime="20170805 05:48:16.508" starttime="20170805 05:48:15.744"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170805 05:48:16.512" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170805 05:48:16.513" starttime="20170805 05:48:16.512"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 05:48:16.514" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 05:48:16.514" starttime="20170805 05:48:16.513"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170805 05:48:16.514" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170805 05:48:16.514" starttime="20170805 05:48:16.514"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 05:48:16.515" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170805 05:48:16.515" starttime="20170805 05:48:16.515"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170805 05:48:16.944" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170805 05:48:16.944" starttime="20170805 05:48:16.516"></status>
</kw>
<msg timestamp="20170805 05:48:16.944" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 05:48:16.944" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 05:48:16.944" starttime="20170805 05:48:16.515"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170805 05:48:16.945" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 05:48:16.945" starttime="20170805 05:48:16.945"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 05:48:16.946" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 05:48:16.946" starttime="20170805 05:48:16.945"></status>
</kw>
<status status="PASS" endtime="20170805 05:48:16.946" starttime="20170805 05:48:16.511"></status>
</kw>
<status status="PASS" endtime="20170805 05:48:16.946" starttime="20170805 05:48:16.511"></status>
</kw>
<status status="PASS" endtime="20170805 05:48:16.946" starttime="20170805 05:48:16.510"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170805 05:48:16.947" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170805 05:48:16.947" starttime="20170805 05:48:16.946"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170805 05:48:16.947" starttime="20170805 05:48:16.947"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170805 05:48:17.068" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170805 05:48:17.069" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 05:48:17.069" starttime="20170805 05:48:16.948"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170805 05:48:17.069" starttime="20170805 05:48:17.069"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170805 05:48:17.070" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170805 05:48:17.070" starttime="20170805 05:48:17.070"></status>
</kw>
<msg timestamp="20170805 05:48:17.070" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 05:48:17.070" starttime="20170805 05:48:16.510"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 05:48:17.071" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 05:48:17.071" starttime="20170805 05:48:17.070"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170805 05:48:17.071" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170805 05:48:17.071" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170805 05:48:17.072" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170805 05:48:17.072" starttime="20170805 05:48:17.071"></status>
</kw>
<msg timestamp="20170805 05:48:17.072" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170805 05:48:17.072" starttime="20170805 05:48:16.509"></status>
</kw>
<msg timestamp="20170805 05:48:17.072" level="INFO">${host_state} = Off</msg>
<status status="PASS" endtime="20170805 05:48:17.072" starttime="20170805 05:48:16.508"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20170805 05:48:17.073" starttime="20170805 05:48:17.073"></status>
</kw>
<status status="PASS" endtime="20170805 05:48:17.073" starttime="20170805 05:48:15.743"></status>
</kw>
<status status="PASS" endtime="20170805 05:48:17.073" starttime="20170805 05:48:15.743"></status>
</kw>
<status status="PASS" endtime="20170805 05:48:17.073" starttime="20170805 05:48:15.305"></status>
</kw>
<status status="PASS" endtime="20170805 05:48:17.073" starttime="20170805 05:48:15.305"></status>
</kw>
<status status="PASS" endtime="20170805 05:48:17.073" starttime="20170805 05:48:15.304"></status>
</kw>
<kw name="Set Policy Setting" library="code_update_utils">
<doc>Set the given test policy</doc>
<arguments>
<arg>RESTORE_LAST_STATE</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${policy}</arg>
</arguments>
<assign>
<var>${valueDict}</var>
</assign>
<msg timestamp="20170805 05:48:17.075" level="INFO">${valueDict} = {u'data': u'RESTORE_LAST_STATE'}</msg>
<status status="PASS" endtime="20170805 05:48:17.075" starttime="20170805 05:48:17.074"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_SETTING}</arg>
<arg>power_policy</arg>
<arg>data=${valueDict}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170805 05:48:17.076" level="INFO">${base_uri} = /org/openbmc/settings/host0</msg>
<status status="PASS" endtime="20170805 05:48:17.076" starttime="20170805 05:48:17.075"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170805 05:48:17.079" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170805 05:48:17.079" starttime="20170805 05:48:17.078"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 05:48:17.080" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 05:48:17.080" starttime="20170805 05:48:17.080"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170805 05:48:17.081" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170805 05:48:17.081" starttime="20170805 05:48:17.080"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 05:48:17.081" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170805 05:48:17.081" starttime="20170805 05:48:17.081"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170805 05:48:17.283" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170805 05:48:17.283" starttime="20170805 05:48:17.082"></status>
</kw>
<msg timestamp="20170805 05:48:17.283" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 05:48:17.283" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 05:48:17.283" starttime="20170805 05:48:17.082"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170805 05:48:17.284" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 05:48:17.284" starttime="20170805 05:48:17.284"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 05:48:17.285" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 05:48:17.285" starttime="20170805 05:48:17.284"></status>
</kw>
<status status="PASS" endtime="20170805 05:48:17.285" starttime="20170805 05:48:17.078"></status>
</kw>
<status status="PASS" endtime="20170805 05:48:17.285" starttime="20170805 05:48:17.077"></status>
</kw>
<status status="PASS" endtime="20170805 05:48:17.285" starttime="20170805 05:48:17.077"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170805 05:48:17.286" level="INFO">${base_uri} = /org/openbmc/settings/host0/attr/power_policy</msg>
<status status="PASS" endtime="20170805 05:48:17.286" starttime="20170805 05:48:17.285"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 05:48:17.286" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 05:48:17.286" starttime="20170805 05:48:17.286"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170805 05:48:17.287" starttime="20170805 05:48:17.287"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170805 05:48:17.289" level="INFO">${msg} = URI:https://9.3.86.161/org/openbmc/settings/host0/attr/power_policy, method:Put, args:{u'data': {u'data': u'RESTORE_LAST_STATE'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170805 05:48:17.289" starttime="20170805 05:48:17.288"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170805 05:48:17.290" level="INFO">URI:https://9.3.86.161/org/openbmc/settings/host0/attr/power_policy, method:Put, args:{u'data': {u'data': u'RESTORE_LAST_STATE'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170805 05:48:17.290" starttime="20170805 05:48:17.289"></status>
</kw>
<status status="PASS" endtime="20170805 05:48:17.290" starttime="20170805 05:48:17.289"></status>
</kw>
<status status="PASS" endtime="20170805 05:48:17.290" starttime="20170805 05:48:17.287"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170805 05:48:17.524" level="INFO">Put Request using : alias=openbmc, uri=/org/openbmc/settings/host0/attr/power_policy, data={"data": "RESTORE_LAST_STATE"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170805 05:48:17.524" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 05:48:17.524" starttime="20170805 05:48:17.290"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170805 05:48:17.526" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170805 05:48:17.526" starttime="20170805 05:48:17.525"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170805 05:48:17.527" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170805 05:48:17.527" starttime="20170805 05:48:17.527"></status>
</kw>
<status status="PASS" endtime="20170805 05:48:17.527" starttime="20170805 05:48:17.526"></status>
</kw>
<status status="PASS" endtime="20170805 05:48:17.528" starttime="20170805 05:48:17.525"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170805 05:48:17.528" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170805 05:48:17.529" starttime="20170805 05:48:17.528"></status>
</kw>
<msg timestamp="20170805 05:48:17.529" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 05:48:17.529" starttime="20170805 05:48:17.076"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 05:48:17.529" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 05:48:17.530" starttime="20170805 05:48:17.529"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170805 05:48:17.530" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170805 05:48:17.530" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170805 05:48:17.530" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170805 05:48:17.530" starttime="20170805 05:48:17.530"></status>
</kw>
<status status="PASS" endtime="20170805 05:48:17.531" starttime="20170805 05:48:17.075"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_SETTING}</arg>
<arg>power_policy</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170805 05:48:17.537" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170805 05:48:17.537" starttime="20170805 05:48:17.536"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 05:48:17.538" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 05:48:17.538" starttime="20170805 05:48:17.537"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170805 05:48:17.539" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170805 05:48:17.539" starttime="20170805 05:48:17.538"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 05:48:17.539" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170805 05:48:17.539" starttime="20170805 05:48:17.539"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170805 05:48:17.871" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170805 05:48:17.871" starttime="20170805 05:48:17.540"></status>
</kw>
<msg timestamp="20170805 05:48:17.872" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 05:48:17.872" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 05:48:17.872" starttime="20170805 05:48:17.540"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170805 05:48:17.872" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 05:48:17.873" starttime="20170805 05:48:17.872"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 05:48:17.873" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 05:48:17.873" starttime="20170805 05:48:17.873"></status>
</kw>
<status status="PASS" endtime="20170805 05:48:17.873" starttime="20170805 05:48:17.536"></status>
</kw>
<status status="PASS" endtime="20170805 05:48:17.873" starttime="20170805 05:48:17.535"></status>
</kw>
<status status="PASS" endtime="20170805 05:48:17.874" starttime="20170805 05:48:17.532"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170805 05:48:17.874" level="INFO">${base_uri} = /org/openbmc/settings/host0/attr/power_policy</msg>
<status status="PASS" endtime="20170805 05:48:17.874" starttime="20170805 05:48:17.874"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170805 05:48:17.875" starttime="20170805 05:48:17.875"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170805 05:48:17.960" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/settings/host0/attr/power_policy, headers=None json=None</msg>
<msg timestamp="20170805 05:48:17.960" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 05:48:17.960" starttime="20170805 05:48:17.875"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170805 05:48:17.961" starttime="20170805 05:48:17.961"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170805 05:48:17.961" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170805 05:48:17.961" starttime="20170805 05:48:17.961"></status>
</kw>
<msg timestamp="20170805 05:48:17.962" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 05:48:17.962" starttime="20170805 05:48:17.531"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 05:48:17.962" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 05:48:17.962" starttime="20170805 05:48:17.962"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170805 05:48:17.963" level="INFO">To JSON using : content={
  "data": "RESTORE_LAST_STATE", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170805 05:48:17.963" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170805 05:48:17.963" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'RESTORE_LAST_STATE'}</msg>
<status status="PASS" endtime="20170805 05:48:17.963" starttime="20170805 05:48:17.963"></status>
</kw>
<msg timestamp="20170805 05:48:17.964" level="INFO">${currentPolicy} = RESTORE_LAST_STATE</msg>
<status status="PASS" endtime="20170805 05:48:17.964" starttime="20170805 05:48:17.531"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${currentPolicy}</arg>
<arg>${policy}</arg>
</arguments>
<status status="PASS" endtime="20170805 05:48:17.964" starttime="20170805 05:48:17.964"></status>
</kw>
<status status="PASS" endtime="20170805 05:48:17.964" starttime="20170805 05:48:17.074"></status>
</kw>
<kw name="Prepare For Update" library="code_update_utils">
<doc>Switch to update mode in progress. This method calls</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 05:48:17.966" level="INFO">${data} = {u'data': []}</msg>
<status status="PASS" endtime="20170805 05:48:17.966" starttime="20170805 05:48:17.965"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${BMC_PREP_METHOD}</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170805 05:48:17.969" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170805 05:48:17.969" starttime="20170805 05:48:17.968"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 05:48:17.970" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 05:48:17.970" starttime="20170805 05:48:17.969"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170805 05:48:17.970" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170805 05:48:17.970" starttime="20170805 05:48:17.970"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 05:48:17.971" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170805 05:48:17.971" starttime="20170805 05:48:17.971"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170805 05:48:18.169" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170805 05:48:18.169" starttime="20170805 05:48:17.972"></status>
</kw>
<msg timestamp="20170805 05:48:18.169" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 05:48:18.169" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 05:48:18.169" starttime="20170805 05:48:17.971"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170805 05:48:18.170" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 05:48:18.170" starttime="20170805 05:48:18.170"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 05:48:18.171" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 05:48:18.171" starttime="20170805 05:48:18.170"></status>
</kw>
<status status="PASS" endtime="20170805 05:48:18.171" starttime="20170805 05:48:17.967"></status>
</kw>
<status status="PASS" endtime="20170805 05:48:18.171" starttime="20170805 05:48:17.967"></status>
</kw>
<status status="PASS" endtime="20170805 05:48:18.171" starttime="20170805 05:48:17.966"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170805 05:48:18.172" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc/action/PrepareForUpdate</msg>
<status status="PASS" endtime="20170805 05:48:18.172" starttime="20170805 05:48:18.172"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 05:48:18.173" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 05:48:18.173" starttime="20170805 05:48:18.173"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170805 05:48:18.174" starttime="20170805 05:48:18.173"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170805 05:48:18.174" starttime="20170805 05:48:18.174"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170805 05:48:18.554" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc/action/PrepareForUpdate, data={"data": []}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20170805 05:48:18.555" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 05:48:18.555" starttime="20170805 05:48:18.175"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170805 05:48:18.555" starttime="20170805 05:48:18.555"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170805 05:48:18.556" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170805 05:48:18.556" starttime="20170805 05:48:18.556"></status>
</kw>
<msg timestamp="20170805 05:48:18.556" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 05:48:18.556" starttime="20170805 05:48:17.966"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 05:48:18.557" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 05:48:18.557" starttime="20170805 05:48:18.557"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10s</arg>
</arguments>
<msg timestamp="20170805 05:48:28.558" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20170805 05:48:28.558" starttime="20170805 05:48:18.557"></status>
</kw>
<status status="PASS" endtime="20170805 05:48:28.558" starttime="20170805 05:48:17.965"></status>
</kw>
<kw name="Check If BMC is Up" library="utils">
<doc>Wait for Host to be online. Checks every X seconds</doc>
<arguments>
<arg>20 min</arg>
<arg>10 sec</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${max_timeout}</arg>
<arg>${interval}</arg>
<arg>Verify Ping and REST Authentication</arg>
</arguments>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170805 05:48:28.561" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20170805 05:48:28.561" starttime="20170805 05:48:28.561"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170805 05:48:28.567" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20170805 05:48:31.571" level="INFO">${RC} = 0</msg>
<msg timestamp="20170805 05:48:31.571" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.837 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=92.0 ms
64 bytes from 9.3.86.161: icmp_seq...</msg>
<status status="PASS" endtime="20170805 05:48:31.571" starttime="20170805 05:48:28.562"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170805 05:48:31.574" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.837 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=92.0 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.640 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.647 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3001ms
rtt min/avg/max/mdev = 0.640/23.552/92.085/39.567 ms</msg>
<status status="PASS" endtime="20170805 05:48:31.574" starttime="20170805 05:48:31.573"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170805 05:48:31.575" starttime="20170805 05:48:31.574"></status>
</kw>
<status status="PASS" endtime="20170805 05:48:31.575" starttime="20170805 05:48:28.560"></status>
</kw>
<msg timestamp="20170805 05:48:31.575" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20170805 05:48:31.575" starttime="20170805 05:48:28.560"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20170805 05:48:31.576" starttime="20170805 05:48:31.576"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170805 05:48:31.579" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170805 05:48:31.580" starttime="20170805 05:48:31.579"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 05:48:31.580" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 05:48:31.580" starttime="20170805 05:48:31.580"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170805 05:48:31.581" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170805 05:48:31.581" starttime="20170805 05:48:31.581"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 05:48:31.582" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170805 05:48:31.582" starttime="20170805 05:48:31.581"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170805 05:48:32.245" level="FAIL">ConnectionError: ('Connection aborted.', error(104, 'Connection reset by peer'))</msg>
<status status="FAIL" endtime="20170805 05:48:32.245" starttime="20170805 05:48:31.583"></status>
</kw>
<msg timestamp="20170805 05:48:32.245" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170805 05:48:32.245" level="INFO">${resp} = ConnectionError: ('Connection aborted.', error(104, 'Connection reset by peer'))</msg>
<status status="PASS" endtime="20170805 05:48:32.245" starttime="20170805 05:48:31.582"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170805 05:48:32.246" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170805 05:48:32.246" level="FAIL">ConnectionError: ('Connection aborted.', error(104, 'Connection reset by peer')): FAIL != PASS</msg>
<status status="FAIL" endtime="20170805 05:48:32.246" starttime="20170805 05:48:32.245"></status>
</kw>
<status status="FAIL" endtime="20170805 05:48:32.246" starttime="20170805 05:48:31.578"></status>
</kw>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170805 05:48:52.248" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170805 05:48:52.249" starttime="20170805 05:48:52.248"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 05:48:52.249" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 05:48:52.249" starttime="20170805 05:48:52.249"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170805 05:48:52.250" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170805 05:48:52.250" starttime="20170805 05:48:52.250"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 05:48:52.251" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170805 05:48:52.251" starttime="20170805 05:48:52.250"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170805 05:49:12.275" level="WARN">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff81431910&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=20.0)')': /login</msg>
<msg timestamp="20170805 05:49:32.497" level="WARN">Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff81431390&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=20.0)')': /login</msg>
<msg timestamp="20170805 05:50:07.537" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="FAIL" endtime="20170805 05:50:07.537" starttime="20170805 05:48:52.251"></status>
</kw>
<msg timestamp="20170805 05:50:07.538" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170805 05:50:07.538" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="PASS" endtime="20170805 05:50:07.538" starttime="20170805 05:48:52.251"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170805 05:50:07.539" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170805 05:50:07.539" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=20.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170805 05:50:07.539" starttime="20170805 05:50:07.538"></status>
</kw>
<status status="FAIL" endtime="20170805 05:50:07.539" starttime="20170805 05:48:52.247"></status>
</kw>
<msg timestamp="20170805 05:50:07.539" level="FAIL">Keyword 'Post Login Request' failed after retrying for 40 seconds. The last error was: ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=20.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170805 05:50:07.539" starttime="20170805 05:48:31.577"></status>
</kw>
<status status="FAIL" endtime="20170805 05:50:07.539" starttime="20170805 05:48:31.577"></status>
</kw>
<msg timestamp="20170805 05:50:07.540" level="INFO">${l_rest} = False</msg>
<status status="PASS" endtime="20170805 05:50:07.540" starttime="20170805 05:48:31.576"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<msg timestamp="20170805 05:50:07.541" level="FAIL">REST Authentication Failed</msg>
<status status="FAIL" endtime="20170805 05:50:07.541" starttime="20170805 05:50:07.541"></status>
</kw>
<status status="FAIL" endtime="20170805 05:50:07.541" starttime="20170805 05:50:07.540"></status>
</kw>
<status status="FAIL" endtime="20170805 05:50:07.541" starttime="20170805 05:48:28.560"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170805 05:50:17.544" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20170805 05:50:17.544" starttime="20170805 05:50:17.543"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170805 05:50:17.548" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20170805 05:50:20.551" level="INFO">${RC} = 0</msg>
<msg timestamp="20170805 05:50:20.551" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.734 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.606 ms
64 bytes from 9.3.86.161: icmp_se...</msg>
<status status="PASS" endtime="20170805 05:50:20.551" starttime="20170805 05:50:17.544"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170805 05:50:20.555" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.734 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.606 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.661 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.641 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2998ms
rtt min/avg/max/mdev = 0.606/0.660/0.734/0.053 ms</msg>
<status status="PASS" endtime="20170805 05:50:20.555" starttime="20170805 05:50:20.554"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170805 05:50:20.556" starttime="20170805 05:50:20.556"></status>
</kw>
<status status="PASS" endtime="20170805 05:50:20.556" starttime="20170805 05:50:17.543"></status>
</kw>
<msg timestamp="20170805 05:50:20.557" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20170805 05:50:20.557" starttime="20170805 05:50:17.543"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20170805 05:50:20.558" starttime="20170805 05:50:20.557"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170805 05:50:20.561" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170805 05:50:20.562" starttime="20170805 05:50:20.560"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 05:50:20.562" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 05:50:20.563" starttime="20170805 05:50:20.562"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170805 05:50:20.563" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170805 05:50:20.563" starttime="20170805 05:50:20.563"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 05:50:20.564" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170805 05:50:20.564" starttime="20170805 05:50:20.564"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170805 05:50:38.818" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170805 05:50:38.818" starttime="20170805 05:50:20.565"></status>
</kw>
<msg timestamp="20170805 05:50:38.818" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 05:50:38.818" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 05:50:38.818" starttime="20170805 05:50:20.564"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170805 05:50:38.819" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 05:50:38.819" starttime="20170805 05:50:38.819"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 05:50:38.820" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 05:50:38.820" starttime="20170805 05:50:38.819"></status>
</kw>
<status status="PASS" endtime="20170805 05:50:38.821" starttime="20170805 05:50:20.560"></status>
</kw>
<status status="PASS" endtime="20170805 05:50:38.821" starttime="20170805 05:50:20.559"></status>
</kw>
<status status="PASS" endtime="20170805 05:50:38.821" starttime="20170805 05:50:20.558"></status>
</kw>
<msg timestamp="20170805 05:50:38.821" level="INFO">${l_rest} = True</msg>
<status status="PASS" endtime="20170805 05:50:38.821" starttime="20170805 05:50:20.558"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<status status="PASS" endtime="20170805 05:50:38.822" starttime="20170805 05:50:38.821"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170805 05:50:38.824" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170805 05:50:38.824" starttime="20170805 05:50:38.823"></status>
</kw>
<msg timestamp="20170805 05:50:38.824" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170805 05:50:38.824" starttime="20170805 05:50:38.823"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170805 05:50:38.825" starttime="20170805 05:50:38.825"></status>
</kw>
<status status="PASS" endtime="20170805 05:50:38.825" starttime="20170805 05:50:38.824"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170805 05:50:38.826" starttime="20170805 05:50:38.825"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170805 05:50:38.827" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170805 05:50:38.827" starttime="20170805 05:50:38.827"></status>
</kw>
<msg timestamp="20170805 05:50:38.827" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170805 05:50:38.827" starttime="20170805 05:50:38.826"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170805 05:50:38.829" starttime="20170805 05:50:38.828"></status>
</kw>
<status status="PASS" endtime="20170805 05:50:38.829" starttime="20170805 05:50:38.828"></status>
</kw>
<status status="PASS" endtime="20170805 05:50:38.829" starttime="20170805 05:50:38.827"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170805 05:50:38.830" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170805 05:50:42.343" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170805 05:50:42.344" starttime="20170805 05:50:38.829"></status>
</kw>
<status status="PASS" endtime="20170805 05:50:42.344" starttime="20170805 05:50:38.822"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>hostname</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${system}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170805 05:50:42.344" level="INFO">Executing command 'hostname'.</msg>
<msg timestamp="20170805 05:50:42.613" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170805 05:50:42.613" level="INFO">${system} = witherspoon</msg>
<msg timestamp="20170805 05:50:42.613" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170805 05:50:42.613" starttime="20170805 05:50:42.344"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170805 05:50:42.613" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170805 05:50:42.614" starttime="20170805 05:50:42.613"></status>
</kw>
<status status="PASS" endtime="20170805 05:50:42.614" starttime="20170805 05:50:17.542"></status>
</kw>
<status status="PASS" endtime="20170805 05:50:42.614" starttime="20170805 05:48:28.559"></status>
</kw>
<status status="PASS" endtime="20170805 05:50:42.614" starttime="20170805 05:48:28.559"></status>
</kw>
<kw name="Check Boot Count And Time">
<doc>Check for unexpected reboots.</doc>
<kw name="Set BMC Reset Reference Time" library="utils">
<doc>Set current boot time as a reference and increment</doc>
<kw name="Get BMC Boot Time" library="utils">
<doc>Get boot time from /proc/stat.</doc>
<assign>
<var>${cur_btime}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170805 05:50:42.617" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170805 05:50:42.617" starttime="20170805 05:50:42.616"></status>
</kw>
<msg timestamp="20170805 05:50:42.617" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170805 05:50:42.617" starttime="20170805 05:50:42.616"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170805 05:50:42.618" starttime="20170805 05:50:42.618"></status>
</kw>
<status status="PASS" endtime="20170805 05:50:42.619" starttime="20170805 05:50:42.618"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170805 05:50:42.619" starttime="20170805 05:50:42.619"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170805 05:50:42.620" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170805 05:50:42.620" starttime="20170805 05:50:42.620"></status>
</kw>
<msg timestamp="20170805 05:50:42.620" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170805 05:50:42.620" starttime="20170805 05:50:42.620"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170805 05:50:42.622" starttime="20170805 05:50:42.622"></status>
</kw>
<status status="PASS" endtime="20170805 05:50:42.622" starttime="20170805 05:50:42.622"></status>
</kw>
<status status="PASS" endtime="20170805 05:50:42.623" starttime="20170805 05:50:42.621"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170805 05:50:42.623" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170805 05:50:44.669" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170805 05:50:44.669" starttime="20170805 05:50:42.623"></status>
</kw>
<status status="PASS" endtime="20170805 05:50:44.669" starttime="20170805 05:50:42.615"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>egrep '^btime ' /proc/stat | cut -f 2 -d ' '</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170805 05:50:44.670" level="INFO">Executing command 'egrep '^btime ' /proc/stat | cut -f 2 -d ' ''.</msg>
<msg timestamp="20170805 05:50:44.837" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170805 05:50:44.838" level="INFO">${output} = 1501912142</msg>
<msg timestamp="20170805 05:50:44.838" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170805 05:50:44.838" starttime="20170805 05:50:44.670"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170805 05:50:44.838" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170805 05:50:44.838" starttime="20170805 05:50:44.838"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${btime}</var>
</assign>
<msg timestamp="20170805 05:50:44.839" level="INFO">${btime} = 1501912142</msg>
<status status="PASS" endtime="20170805 05:50:44.839" starttime="20170805 05:50:44.839"></status>
</kw>
<msg timestamp="20170805 05:50:44.839" level="INFO">${cur_btime} = 1501912142</msg>
<status status="PASS" endtime="20170805 05:50:44.839" starttime="20170805 05:50:42.615"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${BOOT_TIME} == ${0} and ${BOOT_COUNT} == ${0}</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
<arg>ELSE IF</arg>
<arg>${cur_btime} &gt; ${BOOT_TIME}</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_COUNT}</arg>
<arg>${BOOT_COUNT + 1}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set Global Variable</arg>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_COUNT}</arg>
<arg>${BOOT_COUNT + 1}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
</arguments>
<msg timestamp="20170805 05:50:44.842" level="INFO">${BOOT_TIME} = 1501912142</msg>
<status status="PASS" endtime="20170805 05:50:44.842" starttime="20170805 05:50:44.841"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${BOOT_COUNT}</arg>
<arg>${BOOT_COUNT + 1}</arg>
</arguments>
<msg timestamp="20170805 05:50:44.842" level="INFO">${BOOT_COUNT} = 1</msg>
<status status="PASS" endtime="20170805 05:50:44.842" starttime="20170805 05:50:44.842"></status>
</kw>
<status status="PASS" endtime="20170805 05:50:44.843" starttime="20170805 05:50:44.841"></status>
</kw>
<status status="PASS" endtime="20170805 05:50:44.843" starttime="20170805 05:50:44.840"></status>
</kw>
<status status="PASS" endtime="20170805 05:50:44.843" starttime="20170805 05:50:42.615"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\n Boot Count: ${BOOT_COUNT}</arg>
</arguments>
<status status="PASS" endtime="20170805 05:50:44.843" starttime="20170805 05:50:44.843"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\n Boot Time: ${BOOT_TIME}</arg>
</arguments>
<status status="PASS" endtime="20170805 05:50:44.844" starttime="20170805 05:50:44.844"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${BOOT_COUNT} &gt; ${MAX_BOOT_COUNT}</arg>
<arg>Log</arg>
<arg>Phantom Reboot!!! Unexpected reboot detected</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20170805 05:50:44.845" starttime="20170805 05:50:44.844"></status>
</kw>
<status status="PASS" endtime="20170805 05:50:44.845" starttime="20170805 05:50:42.614"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Temp BMC URI Check</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Temp BMC URI Check">
<doc>Check for transient "BMC0" interface.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/state/BMC0/</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170805 05:50:44.849" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170805 05:50:44.850" starttime="20170805 05:50:44.849"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 05:50:44.851" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 05:50:44.851" starttime="20170805 05:50:44.850"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170805 05:50:44.851" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170805 05:50:44.851" starttime="20170805 05:50:44.851"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 05:50:44.852" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170805 05:50:44.852" starttime="20170805 05:50:44.852"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170805 05:50:45.252" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170805 05:50:45.252" starttime="20170805 05:50:44.853"></status>
</kw>
<msg timestamp="20170805 05:50:45.252" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 05:50:45.252" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 05:50:45.252" starttime="20170805 05:50:44.852"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170805 05:50:45.253" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 05:50:45.253" starttime="20170805 05:50:45.253"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 05:50:45.254" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 05:50:45.254" starttime="20170805 05:50:45.253"></status>
</kw>
<status status="PASS" endtime="20170805 05:50:45.254" starttime="20170805 05:50:44.848"></status>
</kw>
<status status="PASS" endtime="20170805 05:50:45.254" starttime="20170805 05:50:44.848"></status>
</kw>
<status status="PASS" endtime="20170805 05:50:45.254" starttime="20170805 05:50:44.846"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170805 05:50:45.255" level="INFO">${base_uri} = /xyz/openbmc_project/state/BMC0/</msg>
<status status="PASS" endtime="20170805 05:50:45.255" starttime="20170805 05:50:45.254"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170805 05:50:45.255" starttime="20170805 05:50:45.255"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170805 05:50:46.037" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/BMC0/, headers=None json=None</msg>
<msg timestamp="20170805 05:50:46.038" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170805 05:50:46.038" starttime="20170805 05:50:45.256"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170805 05:50:46.039" starttime="20170805 05:50:46.038"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170805 05:50:46.039" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170805 05:50:46.039" starttime="20170805 05:50:46.039"></status>
</kw>
<msg timestamp="20170805 05:50:46.039" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170805 05:50:46.039" starttime="20170805 05:50:44.846"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 05:50:46.040" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170805 05:50:46.040" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170805 05:50:46.040" starttime="20170805 05:50:46.040"></status>
</kw>
<status status="FAIL" endtime="20170805 05:50:46.040" starttime="20170805 05:50:44.845"></status>
</kw>
<msg timestamp="20170805 05:50:46.041" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170805 05:50:46.041" starttime="20170805 05:50:44.845"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Wait For BMC Ready</arg>
<arg>ELSE</arg>
<arg>Wait For Temp BMC Ready</arg>
</arguments>
<kw name="Wait For BMC Ready" library="state_manager">
<doc>Check BMC state and wait for BMC Ready.</doc>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>BMC_READY</arg>
<arg>HOST_POWERED_OFF</arg>
</arguments>
<assign>
<var>@{states}</var>
</assign>
<msg timestamp="20170805 05:50:46.042" level="INFO">@{states} = [ BMC_READY | HOST_POWERED_OFF ]</msg>
<status status="PASS" endtime="20170805 05:50:46.042" starttime="20170805 05:50:46.042"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${OBMC_STATES_VERSION}' == '${0}'</arg>
<arg>Wait Until Keyword Succeeds</arg>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Verify BMC State</arg>
<arg>${states}</arg>
<arg>ELSE</arg>
<arg>Wait Until Keyword Succeeds</arg>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is BMC Ready</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is BMC Ready</arg>
</arguments>
<kw name="Is BMC Ready" library="state_manager">
<doc>Check if BMC state is Ready.</doc>
<kw name="Get BMC State" library="state_manager">
<doc>Return the state of the BMC.</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${BMC_STATE_URI}</arg>
<arg>CurrentBMCState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170805 05:50:46.048" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170805 05:50:46.048" starttime="20170805 05:50:46.048"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 05:50:46.049" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 05:50:46.049" starttime="20170805 05:50:46.049"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170805 05:50:46.050" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170805 05:50:46.050" starttime="20170805 05:50:46.049"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 05:50:46.050" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170805 05:50:46.050" starttime="20170805 05:50:46.050"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170805 05:50:47.059" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170805 05:50:47.059" starttime="20170805 05:50:46.051"></status>
</kw>
<msg timestamp="20170805 05:50:47.059" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 05:50:47.059" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 05:50:47.059" starttime="20170805 05:50:46.051"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170805 05:50:47.060" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 05:50:47.060" starttime="20170805 05:50:47.060"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 05:50:47.061" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 05:50:47.061" starttime="20170805 05:50:47.060"></status>
</kw>
<status status="PASS" endtime="20170805 05:50:47.061" starttime="20170805 05:50:46.047"></status>
</kw>
<status status="PASS" endtime="20170805 05:50:47.061" starttime="20170805 05:50:46.047"></status>
</kw>
<status status="PASS" endtime="20170805 05:50:47.061" starttime="20170805 05:50:46.046"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170805 05:50:47.062" level="INFO">${base_uri} = /xyz/openbmc_project/state/bmc0//attr/CurrentBMCState</msg>
<status status="PASS" endtime="20170805 05:50:47.062" starttime="20170805 05:50:47.061"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170805 05:50:47.062" starttime="20170805 05:50:47.062"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170805 05:50:47.883" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/bmc0//attr/CurrentBMCState, headers=None json=None</msg>
<msg timestamp="20170805 05:50:47.884" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 05:50:47.884" starttime="20170805 05:50:47.063"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170805 05:50:47.884" starttime="20170805 05:50:47.884"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170805 05:50:47.885" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170805 05:50:47.885" starttime="20170805 05:50:47.885"></status>
</kw>
<msg timestamp="20170805 05:50:47.885" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 05:50:47.885" starttime="20170805 05:50:46.045"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 05:50:47.886" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 05:50:47.886" starttime="20170805 05:50:47.885"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170805 05:50:47.886" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.BMC.BMCState.NotReady", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170805 05:50:47.886" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170805 05:50:47.887" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.BMC.BMCState.NotReady'}</msg>
<status status="PASS" endtime="20170805 05:50:47.887" starttime="20170805 05:50:47.886"></status>
</kw>
<msg timestamp="20170805 05:50:47.887" level="INFO">${state} = xyz.openbmc_project.State.BMC.BMCState.NotReady</msg>
<status status="PASS" endtime="20170805 05:50:47.887" starttime="20170805 05:50:46.044"></status>
</kw>
<msg timestamp="20170805 05:50:47.887" level="INFO">${bmc_state} = NotReady</msg>
<status status="PASS" endtime="20170805 05:50:47.887" starttime="20170805 05:50:46.044"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${BMC_READY_STATE}</arg>
<arg>${bmc_state}</arg>
</arguments>
<msg timestamp="20170805 05:50:47.888" level="FAIL">Ready != NotReady</msg>
<status status="FAIL" endtime="20170805 05:50:47.888" starttime="20170805 05:50:47.888"></status>
</kw>
<status status="FAIL" endtime="20170805 05:50:47.888" starttime="20170805 05:50:46.044"></status>
</kw>
<kw name="Is BMC Ready" library="state_manager">
<doc>Check if BMC state is Ready.</doc>
<kw name="Get BMC State" library="state_manager">
<doc>Return the state of the BMC.</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${BMC_STATE_URI}</arg>
<arg>CurrentBMCState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170805 05:50:57.894" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170805 05:50:57.894" starttime="20170805 05:50:57.893"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 05:50:57.895" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 05:50:57.895" starttime="20170805 05:50:57.895"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170805 05:50:57.896" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170805 05:50:57.896" starttime="20170805 05:50:57.895"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 05:50:57.896" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170805 05:50:57.896" starttime="20170805 05:50:57.896"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170805 05:50:58.114" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170805 05:50:58.114" starttime="20170805 05:50:57.897"></status>
</kw>
<msg timestamp="20170805 05:50:58.114" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 05:50:58.114" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 05:50:58.114" starttime="20170805 05:50:57.897"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170805 05:50:58.115" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 05:50:58.115" starttime="20170805 05:50:58.114"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 05:50:58.116" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 05:50:58.116" starttime="20170805 05:50:58.115"></status>
</kw>
<status status="PASS" endtime="20170805 05:50:58.116" starttime="20170805 05:50:57.893"></status>
</kw>
<status status="PASS" endtime="20170805 05:50:58.116" starttime="20170805 05:50:57.892"></status>
</kw>
<status status="PASS" endtime="20170805 05:50:58.116" starttime="20170805 05:50:57.892"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170805 05:50:58.117" level="INFO">${base_uri} = /xyz/openbmc_project/state/bmc0//attr/CurrentBMCState</msg>
<status status="PASS" endtime="20170805 05:50:58.117" starttime="20170805 05:50:58.116"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170805 05:50:58.117" starttime="20170805 05:50:58.117"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170805 05:50:58.186" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/bmc0//attr/CurrentBMCState, headers=None json=None</msg>
<msg timestamp="20170805 05:50:58.186" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 05:50:58.187" starttime="20170805 05:50:58.118"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170805 05:50:58.188" starttime="20170805 05:50:58.187"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170805 05:50:58.188" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170805 05:50:58.188" starttime="20170805 05:50:58.188"></status>
</kw>
<msg timestamp="20170805 05:50:58.188" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 05:50:58.188" starttime="20170805 05:50:57.891"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 05:50:58.189" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 05:50:58.189" starttime="20170805 05:50:58.189"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170805 05:50:58.190" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170805 05:50:58.190" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170805 05:50:58.190" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.BMC.BMCState.Ready'}</msg>
<status status="PASS" endtime="20170805 05:50:58.190" starttime="20170805 05:50:58.189"></status>
</kw>
<msg timestamp="20170805 05:50:58.190" level="INFO">${state} = xyz.openbmc_project.State.BMC.BMCState.Ready</msg>
<status status="PASS" endtime="20170805 05:50:58.190" starttime="20170805 05:50:57.890"></status>
</kw>
<msg timestamp="20170805 05:50:58.190" level="INFO">${bmc_state} = Ready</msg>
<status status="PASS" endtime="20170805 05:50:58.190" starttime="20170805 05:50:57.890"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${BMC_READY_STATE}</arg>
<arg>${bmc_state}</arg>
</arguments>
<status status="PASS" endtime="20170805 05:50:58.191" starttime="20170805 05:50:58.191"></status>
</kw>
<status status="PASS" endtime="20170805 05:50:58.191" starttime="20170805 05:50:57.889"></status>
</kw>
<status status="PASS" endtime="20170805 05:50:58.191" starttime="20170805 05:50:46.043"></status>
</kw>
<status status="PASS" endtime="20170805 05:50:58.191" starttime="20170805 05:50:46.043"></status>
</kw>
<status status="PASS" endtime="20170805 05:50:58.191" starttime="20170805 05:50:46.041"></status>
</kw>
<status status="PASS" endtime="20170805 05:50:58.192" starttime="20170805 05:50:46.041"></status>
</kw>
<status status="PASS" endtime="20170805 05:50:58.192" starttime="20170805 05:48:11.695"></status>
</kw>
<status status="PASS" endtime="20170805 05:50:58.192" starttime="20170805 05:48:11.695"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Preserve BMC Network Setting</arg>
</arguments>
<kw name="Preserve BMC Network Setting" library="code_update_utils">
<doc>Preserve Network setting</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${1}</arg>
</arguments>
<assign>
<var>${policy}</var>
</assign>
<msg timestamp="20170805 05:50:58.201" level="INFO">${policy} = 1</msg>
<status status="PASS" endtime="20170805 05:50:58.201" starttime="20170805 05:50:58.200"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${policy}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20170805 05:50:58.201" level="INFO">${value} = {u'data': 1}</msg>
<status status="PASS" endtime="20170805 05:50:58.202" starttime="20170805 05:50:58.201"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${BMC_UPD_ATTR}</arg>
<arg>preserve_network_settings</arg>
<arg>data=${value}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170805 05:50:58.203" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc</msg>
<status status="PASS" endtime="20170805 05:50:58.203" starttime="20170805 05:50:58.202"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170805 05:50:58.206" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170805 05:50:58.207" starttime="20170805 05:50:58.206"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 05:50:58.207" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 05:50:58.207" starttime="20170805 05:50:58.207"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170805 05:50:58.208" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170805 05:50:58.208" starttime="20170805 05:50:58.207"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 05:50:58.209" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170805 05:50:58.209" starttime="20170805 05:50:58.209"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170805 05:50:58.385" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170805 05:50:58.385" starttime="20170805 05:50:58.210"></status>
</kw>
<msg timestamp="20170805 05:50:58.385" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 05:50:58.385" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 05:50:58.385" starttime="20170805 05:50:58.209"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170805 05:50:58.386" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 05:50:58.386" starttime="20170805 05:50:58.386"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 05:50:58.387" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 05:50:58.387" starttime="20170805 05:50:58.386"></status>
</kw>
<status status="PASS" endtime="20170805 05:50:58.387" starttime="20170805 05:50:58.205"></status>
</kw>
<status status="PASS" endtime="20170805 05:50:58.387" starttime="20170805 05:50:58.205"></status>
</kw>
<status status="PASS" endtime="20170805 05:50:58.387" starttime="20170805 05:50:58.204"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170805 05:50:58.388" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc/attr/preserve_network_settings</msg>
<status status="PASS" endtime="20170805 05:50:58.388" starttime="20170805 05:50:58.388"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 05:50:58.389" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 05:50:58.389" starttime="20170805 05:50:58.388"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170805 05:50:58.389" starttime="20170805 05:50:58.389"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170805 05:50:58.391" level="INFO">${msg} = URI:https://9.3.86.161/org/openbmc/control/flash/bmc/attr/preserve_network_settings, method:Put, args:{u'data': {u'data': 1}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170805 05:50:58.391" starttime="20170805 05:50:58.390"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170805 05:50:58.392" level="INFO">URI:https://9.3.86.161/org/openbmc/control/flash/bmc/attr/preserve_network_settings, method:Put, args:{u'data': {u'data': 1}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170805 05:50:58.392" starttime="20170805 05:50:58.392"></status>
</kw>
<status status="PASS" endtime="20170805 05:50:58.392" starttime="20170805 05:50:58.391"></status>
</kw>
<status status="PASS" endtime="20170805 05:50:58.393" starttime="20170805 05:50:58.389"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170805 05:50:58.650" level="INFO">Put Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc/attr/preserve_network_settings, data={"data": 1},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170805 05:50:58.650" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 05:50:58.650" starttime="20170805 05:50:58.393"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170805 05:50:58.652" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170805 05:50:58.652" starttime="20170805 05:50:58.651"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170805 05:50:58.653" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170805 05:50:58.654" starttime="20170805 05:50:58.653"></status>
</kw>
<status status="PASS" endtime="20170805 05:50:58.654" starttime="20170805 05:50:58.652"></status>
</kw>
<status status="PASS" endtime="20170805 05:50:58.654" starttime="20170805 05:50:58.650"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170805 05:50:58.655" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170805 05:50:58.655" starttime="20170805 05:50:58.654"></status>
</kw>
<msg timestamp="20170805 05:50:58.655" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 05:50:58.655" starttime="20170805 05:50:58.203"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 05:50:58.656" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 05:50:58.656" starttime="20170805 05:50:58.656"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170805 05:50:58.657" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170805 05:50:58.657" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170805 05:50:58.657" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170805 05:50:58.657" starttime="20170805 05:50:58.656"></status>
</kw>
<status status="PASS" endtime="20170805 05:50:58.657" starttime="20170805 05:50:58.202"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${BMC_UPD_ATTR}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170805 05:50:58.660" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170805 05:50:58.661" starttime="20170805 05:50:58.660"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 05:50:58.661" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 05:50:58.661" starttime="20170805 05:50:58.661"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170805 05:50:58.662" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170805 05:50:58.662" starttime="20170805 05:50:58.662"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 05:50:58.663" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170805 05:50:58.663" starttime="20170805 05:50:58.662"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170805 05:50:58.863" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170805 05:50:58.863" starttime="20170805 05:50:58.664"></status>
</kw>
<msg timestamp="20170805 05:50:58.863" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 05:50:58.863" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 05:50:58.863" starttime="20170805 05:50:58.663"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170805 05:50:58.864" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 05:50:58.864" starttime="20170805 05:50:58.864"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 05:50:58.865" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 05:50:58.865" starttime="20170805 05:50:58.864"></status>
</kw>
<status status="PASS" endtime="20170805 05:50:58.865" starttime="20170805 05:50:58.659"></status>
</kw>
<status status="PASS" endtime="20170805 05:50:58.865" starttime="20170805 05:50:58.659"></status>
</kw>
<status status="PASS" endtime="20170805 05:50:58.865" starttime="20170805 05:50:58.658"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170805 05:50:58.866" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc</msg>
<status status="PASS" endtime="20170805 05:50:58.866" starttime="20170805 05:50:58.866"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170805 05:50:58.867" starttime="20170805 05:50:58.866"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170805 05:50:58.989" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc, headers=None json=None</msg>
<msg timestamp="20170805 05:50:58.989" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 05:50:58.989" starttime="20170805 05:50:58.867"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170805 05:50:58.990" starttime="20170805 05:50:58.990"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170805 05:50:58.990" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170805 05:50:58.991" starttime="20170805 05:50:58.990"></status>
</kw>
<msg timestamp="20170805 05:50:58.991" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 05:50:58.991" starttime="20170805 05:50:58.658"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 05:50:58.991" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 05:50:58.992" starttime="20170805 05:50:58.991"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170805 05:50:58.992" level="INFO">To JSON using : content={
  "data": {
    "auto_apply": 0, 
    "clear_persistent_files": 0, 
    "filename": "", 
    "preserve_network_settings": 1, 
    "restore_application_defaults": 0, 
    "status": "Idle", 
    "update_kernel_and_apps": 0
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170805 05:50:58.992" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170805 05:50:58.992" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Idle', u'update_kernel_and_apps': 0, u'clear_persistent_files': 0, u'auto_apply': 0, u'filename': u'', u'preserve_network_settings': 1,...</msg>
<status status="PASS" endtime="20170805 05:50:58.992" starttime="20170805 05:50:58.992"></status>
</kw>
<msg timestamp="20170805 05:50:58.993" level="INFO">${data} = {u'status': u'Idle', u'update_kernel_and_apps': 0, u'clear_persistent_files': 0, u'auto_apply': 0, u'filename': u'', u'preserve_network_settings': 1, u'restore_application_defaults': 0}</msg>
<status status="PASS" endtime="20170805 05:50:58.993" starttime="20170805 05:50:58.657"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${data['preserve_network_settings']}</arg>
<arg>${1}</arg>
<arg>msg=0 indicates network is not preserved</arg>
</arguments>
<status status="PASS" endtime="20170805 05:50:58.994" starttime="20170805 05:50:58.993"></status>
</kw>
<status status="PASS" endtime="20170805 05:50:58.994" starttime="20170805 05:50:58.200"></status>
</kw>
<status status="PASS" endtime="20170805 05:50:58.994" starttime="20170805 05:50:58.193"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>SCP Tar Image File To BMC \ ${FILE_PATH}</arg>
</arguments>
<kw name="SCP Tar Image File to BMC" library="code_update_utils">
<doc>Copy BMC tar image to BMC.</doc>
<arguments>
<arg>/home/fspcibld/obmc-phosphor-image-witherspoon-20170805053922.static.mtd.all.tar</arg>
</arguments>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20170805 05:50:59.013" starttime="20170805 05:50:59.004"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" endtime="20170805 05:50:59.744" starttime="20170805 05:50:59.014"></status>
</kw>
<status status="PASS" endtime="20170805 05:50:59.744" starttime="20170805 05:50:59.013"></status>
</kw>
<status status="PASS" endtime="20170805 05:50:59.745" starttime="20170805 05:50:59.003"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170805 05:50:59.750" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170805 05:50:59.750" starttime="20170805 05:50:59.746"></status>
</kw>
<msg timestamp="20170805 05:50:59.751" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170805 05:50:59.751" starttime="20170805 05:50:59.746"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170805 05:50:59.752" starttime="20170805 05:50:59.752"></status>
</kw>
<status status="PASS" endtime="20170805 05:50:59.752" starttime="20170805 05:50:59.751"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170805 05:50:59.753" starttime="20170805 05:50:59.752"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170805 05:50:59.754" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170805 05:50:59.754" starttime="20170805 05:50:59.754"></status>
</kw>
<msg timestamp="20170805 05:50:59.754" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170805 05:50:59.754" starttime="20170805 05:50:59.753"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170805 05:50:59.757" starttime="20170805 05:50:59.756"></status>
</kw>
<status status="PASS" endtime="20170805 05:50:59.757" starttime="20170805 05:50:59.755"></status>
</kw>
<status status="PASS" endtime="20170805 05:50:59.757" starttime="20170805 05:50:59.754"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170805 05:50:59.757" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170805 05:51:01.667" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170805 05:51:01.668" starttime="20170805 05:50:59.757"></status>
</kw>
<status status="PASS" endtime="20170805 05:51:01.668" starttime="20170805 05:50:59.745"></status>
</kw>
<kw name="Loop SCP Retry" library="code_update_utils">
<doc>Try transferring the file 4 times.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<kw type="for" name="${index} IN RANGE [ 0 | 4 ]">
<kw type="foritem" name="${index} = 0">
<kw name="Retry SCP" library="code_update_utils">
<doc>Delete the incomplete file and scp file.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/tmp/flashimg</arg>
</arguments>
<assign>
<var>${targ_file_path}</var>
</assign>
<msg timestamp="20170805 05:51:01.670" level="INFO">${targ_file_path} = /tmp/flashimg</msg>
<status status="PASS" endtime="20170805 05:51:01.670" starttime="20170805 05:51:01.670"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm -f /tmp/flashimg</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170805 05:51:01.671" level="INFO">Executing command 'rm -f /tmp/flashimg'.</msg>
<msg timestamp="20170805 05:51:01.738" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170805 05:51:01.738" level="INFO">${stdout} = </msg>
<msg timestamp="20170805 05:51:01.738" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170805 05:51:01.738" starttime="20170805 05:51:01.671"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170805 05:51:01.739" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170805 05:51:01.739" starttime="20170805 05:51:01.738"></status>
</kw>
<status status="PASS" endtime="20170805 05:51:01.739" starttime="20170805 05:51:01.670"></status>
</kw>
<kw name="Put File" library="scp">
<doc>Uploads a file to the remote machine from the local machine.</doc>
<arguments>
<arg>${image_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<status status="PASS" endtime="20170805 05:51:18.191" starttime="20170805 05:51:01.739"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>ls -lh ${targ_file_path}</arg>
</arguments>
<assign>
<var>${file_size}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170805 05:51:18.194" level="INFO">Executing command 'ls -lh /tmp/flashimg'.</msg>
<msg timestamp="20170805 05:51:18.251" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170805 05:51:18.251" level="INFO">${stdout} = -rw-r--r--    1 root     root       36.4M Aug  5 05:51 /tmp/flashimg</msg>
<msg timestamp="20170805 05:51:18.251" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170805 05:51:18.251" starttime="20170805 05:51:18.194"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170805 05:51:18.252" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170805 05:51:18.252" starttime="20170805 05:51:18.251"></status>
</kw>
<msg timestamp="20170805 05:51:18.252" level="INFO">${file_size} = -rw-r--r--    1 root     root       36.4M Aug  5 05:51 /tmp/flashimg</msg>
<status status="PASS" endtime="20170805 05:51:18.252" starttime="20170805 05:51:18.192"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${file_size}</arg>
<arg>32.0M</arg>
<arg>msg=Incomplete file transfer.</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${file_size}</arg>
<arg>32.0M</arg>
<arg>msg=Incomplete file transfer.</arg>
</arguments>
<msg timestamp="20170805 05:51:18.253" level="FAIL">Incomplete file transfer.: '-rw-r--r--    1 root     root       36.4M Aug  5 05:51 /tmp/flashimg' does not contain '32.0M'</msg>
<status status="FAIL" endtime="20170805 05:51:18.253" starttime="20170805 05:51:18.253"></status>
</kw>
<msg timestamp="20170805 05:51:18.253" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170805 05:51:18.253" starttime="20170805 05:51:18.252"></status>
</kw>
<msg timestamp="20170805 05:51:18.254" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170805 05:51:18.254" starttime="20170805 05:51:01.669"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
</arguments>
<status status="PASS" endtime="20170805 05:51:18.254" starttime="20170805 05:51:18.254"></status>
</kw>
<status status="PASS" endtime="20170805 05:51:18.254" starttime="20170805 05:51:01.669"></status>
</kw>
<kw type="foritem" name="${index} = 1">
<kw name="Retry SCP" library="code_update_utils">
<doc>Delete the incomplete file and scp file.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/tmp/flashimg</arg>
</arguments>
<assign>
<var>${targ_file_path}</var>
</assign>
<msg timestamp="20170805 05:51:18.255" level="INFO">${targ_file_path} = /tmp/flashimg</msg>
<status status="PASS" endtime="20170805 05:51:18.256" starttime="20170805 05:51:18.255"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm -f /tmp/flashimg</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170805 05:51:18.256" level="INFO">Executing command 'rm -f /tmp/flashimg'.</msg>
<msg timestamp="20170805 05:51:18.393" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170805 05:51:18.393" level="INFO">${stdout} = </msg>
<msg timestamp="20170805 05:51:18.394" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170805 05:51:18.394" starttime="20170805 05:51:18.256"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170805 05:51:18.394" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170805 05:51:18.394" starttime="20170805 05:51:18.394"></status>
</kw>
<status status="PASS" endtime="20170805 05:51:18.394" starttime="20170805 05:51:18.256"></status>
</kw>
<kw name="Put File" library="scp">
<doc>Uploads a file to the remote machine from the local machine.</doc>
<arguments>
<arg>${image_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<status status="PASS" endtime="20170805 05:51:35.149" starttime="20170805 05:51:18.395"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>ls -lh ${targ_file_path}</arg>
</arguments>
<assign>
<var>${file_size}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170805 05:51:35.150" level="INFO">Executing command 'ls -lh /tmp/flashimg'.</msg>
<msg timestamp="20170805 05:51:35.207" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170805 05:51:35.207" level="INFO">${stdout} = -rw-r--r--    1 root     root       36.4M Aug  5 05:51 /tmp/flashimg</msg>
<msg timestamp="20170805 05:51:35.207" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170805 05:51:35.207" starttime="20170805 05:51:35.150"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170805 05:51:35.208" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170805 05:51:35.208" starttime="20170805 05:51:35.208"></status>
</kw>
<msg timestamp="20170805 05:51:35.208" level="INFO">${file_size} = -rw-r--r--    1 root     root       36.4M Aug  5 05:51 /tmp/flashimg</msg>
<status status="PASS" endtime="20170805 05:51:35.208" starttime="20170805 05:51:35.149"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${file_size}</arg>
<arg>32.0M</arg>
<arg>msg=Incomplete file transfer.</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${file_size}</arg>
<arg>32.0M</arg>
<arg>msg=Incomplete file transfer.</arg>
</arguments>
<msg timestamp="20170805 05:51:35.209" level="FAIL">Incomplete file transfer.: '-rw-r--r--    1 root     root       36.4M Aug  5 05:51 /tmp/flashimg' does not contain '32.0M'</msg>
<status status="FAIL" endtime="20170805 05:51:35.209" starttime="20170805 05:51:35.209"></status>
</kw>
<msg timestamp="20170805 05:51:35.209" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170805 05:51:35.209" starttime="20170805 05:51:35.208"></status>
</kw>
<msg timestamp="20170805 05:51:35.210" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170805 05:51:35.210" starttime="20170805 05:51:18.255"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
</arguments>
<status status="PASS" endtime="20170805 05:51:35.210" starttime="20170805 05:51:35.210"></status>
</kw>
<status status="PASS" endtime="20170805 05:51:35.210" starttime="20170805 05:51:18.254"></status>
</kw>
<kw type="foritem" name="${index} = 2">
<kw name="Retry SCP" library="code_update_utils">
<doc>Delete the incomplete file and scp file.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/tmp/flashimg</arg>
</arguments>
<assign>
<var>${targ_file_path}</var>
</assign>
<msg timestamp="20170805 05:51:35.212" level="INFO">${targ_file_path} = /tmp/flashimg</msg>
<status status="PASS" endtime="20170805 05:51:35.212" starttime="20170805 05:51:35.211"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm -f /tmp/flashimg</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170805 05:51:35.212" level="INFO">Executing command 'rm -f /tmp/flashimg'.</msg>
<msg timestamp="20170805 05:51:35.317" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170805 05:51:35.317" level="INFO">${stdout} = </msg>
<msg timestamp="20170805 05:51:35.317" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170805 05:51:35.317" starttime="20170805 05:51:35.212"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170805 05:51:35.318" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170805 05:51:35.318" starttime="20170805 05:51:35.318"></status>
</kw>
<status status="PASS" endtime="20170805 05:51:35.318" starttime="20170805 05:51:35.212"></status>
</kw>
<kw name="Put File" library="scp">
<doc>Uploads a file to the remote machine from the local machine.</doc>
<arguments>
<arg>${image_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<status status="PASS" endtime="20170805 05:51:51.945" starttime="20170805 05:51:35.318"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>ls -lh ${targ_file_path}</arg>
</arguments>
<assign>
<var>${file_size}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170805 05:51:51.947" level="INFO">Executing command 'ls -lh /tmp/flashimg'.</msg>
<msg timestamp="20170805 05:51:52.023" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170805 05:51:52.024" level="INFO">${stdout} = -rw-r--r--    1 root     root       36.4M Aug  5 05:51 /tmp/flashimg</msg>
<msg timestamp="20170805 05:51:52.024" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170805 05:51:52.024" starttime="20170805 05:51:51.946"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170805 05:51:52.024" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170805 05:51:52.024" starttime="20170805 05:51:52.024"></status>
</kw>
<msg timestamp="20170805 05:51:52.025" level="INFO">${file_size} = -rw-r--r--    1 root     root       36.4M Aug  5 05:51 /tmp/flashimg</msg>
<status status="PASS" endtime="20170805 05:51:52.025" starttime="20170805 05:51:51.946"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${file_size}</arg>
<arg>32.0M</arg>
<arg>msg=Incomplete file transfer.</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${file_size}</arg>
<arg>32.0M</arg>
<arg>msg=Incomplete file transfer.</arg>
</arguments>
<msg timestamp="20170805 05:51:52.026" level="FAIL">Incomplete file transfer.: '-rw-r--r--    1 root     root       36.4M Aug  5 05:51 /tmp/flashimg' does not contain '32.0M'</msg>
<status status="FAIL" endtime="20170805 05:51:52.026" starttime="20170805 05:51:52.026"></status>
</kw>
<msg timestamp="20170805 05:51:52.027" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170805 05:51:52.027" starttime="20170805 05:51:52.025"></status>
</kw>
<msg timestamp="20170805 05:51:52.027" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170805 05:51:52.027" starttime="20170805 05:51:35.211"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
</arguments>
<status status="PASS" endtime="20170805 05:51:52.027" starttime="20170805 05:51:52.027"></status>
</kw>
<status status="PASS" endtime="20170805 05:51:52.028" starttime="20170805 05:51:35.210"></status>
</kw>
<kw type="foritem" name="${index} = 3">
<kw name="Retry SCP" library="code_update_utils">
<doc>Delete the incomplete file and scp file.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/tmp/flashimg</arg>
</arguments>
<assign>
<var>${targ_file_path}</var>
</assign>
<msg timestamp="20170805 05:51:52.029" level="INFO">${targ_file_path} = /tmp/flashimg</msg>
<status status="PASS" endtime="20170805 05:51:52.029" starttime="20170805 05:51:52.029"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm -f /tmp/flashimg</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170805 05:51:52.030" level="INFO">Executing command 'rm -f /tmp/flashimg'.</msg>
<msg timestamp="20170805 05:51:52.136" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170805 05:51:52.136" level="INFO">${stdout} = </msg>
<msg timestamp="20170805 05:51:52.136" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170805 05:51:52.136" starttime="20170805 05:51:52.030"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170805 05:51:52.137" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170805 05:51:52.137" starttime="20170805 05:51:52.137"></status>
</kw>
<status status="PASS" endtime="20170805 05:51:52.137" starttime="20170805 05:51:52.029"></status>
</kw>
<kw name="Put File" library="scp">
<doc>Uploads a file to the remote machine from the local machine.</doc>
<arguments>
<arg>${image_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<status status="PASS" endtime="20170805 05:52:08.723" starttime="20170805 05:51:52.138"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>ls -lh ${targ_file_path}</arg>
</arguments>
<assign>
<var>${file_size}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170805 05:52:08.725" level="INFO">Executing command 'ls -lh /tmp/flashimg'.</msg>
<msg timestamp="20170805 05:52:08.781" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170805 05:52:08.781" level="INFO">${stdout} = -rw-r--r--    1 root     root       36.4M Aug  5 05:52 /tmp/flashimg</msg>
<msg timestamp="20170805 05:52:08.781" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170805 05:52:08.781" starttime="20170805 05:52:08.724"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170805 05:52:08.782" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170805 05:52:08.782" starttime="20170805 05:52:08.782"></status>
</kw>
<msg timestamp="20170805 05:52:08.782" level="INFO">${file_size} = -rw-r--r--    1 root     root       36.4M Aug  5 05:52 /tmp/flashimg</msg>
<status status="PASS" endtime="20170805 05:52:08.782" starttime="20170805 05:52:08.724"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${file_size}</arg>
<arg>32.0M</arg>
<arg>msg=Incomplete file transfer.</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${file_size}</arg>
<arg>32.0M</arg>
<arg>msg=Incomplete file transfer.</arg>
</arguments>
<msg timestamp="20170805 05:52:08.783" level="FAIL">Incomplete file transfer.: '-rw-r--r--    1 root     root       36.4M Aug  5 05:52 /tmp/flashimg' does not contain '32.0M'</msg>
<status status="FAIL" endtime="20170805 05:52:08.783" starttime="20170805 05:52:08.783"></status>
</kw>
<msg timestamp="20170805 05:52:08.783" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170805 05:52:08.784" starttime="20170805 05:52:08.782"></status>
</kw>
<msg timestamp="20170805 05:52:08.784" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170805 05:52:08.784" starttime="20170805 05:51:52.028"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
</arguments>
<status status="PASS" endtime="20170805 05:52:08.784" starttime="20170805 05:52:08.784"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:08.784" starttime="20170805 05:51:52.028"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:08.785" starttime="20170805 05:51:01.669"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:08.785" starttime="20170805 05:51:01.668"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:08.785" starttime="20170805 05:50:59.003"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:08.785" starttime="20170805 05:50:58.994"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>Activate BMC Flash Image</arg>
</arguments>
<kw name="Activate BMC flash image" library="code_update_utils">
<doc>Activate and verify the update status</doc>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>/tmp/flashimg</arg>
</arguments>
<assign>
<var>@{img_path}</var>
</assign>
<msg timestamp="20170805 05:52:08.795" level="INFO">@{img_path} = [ /tmp/flashimg ]</msg>
<status status="PASS" endtime="20170805 05:52:08.795" starttime="20170805 05:52:08.795"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{img_path}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 05:52:08.796" level="INFO">${data} = {u'data': [u'/tmp/flashimg']}</msg>
<status status="PASS" endtime="20170805 05:52:08.796" starttime="20170805 05:52:08.796"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${BMC_UPD_METHOD}</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170805 05:52:08.799" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170805 05:52:08.800" starttime="20170805 05:52:08.799"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 05:52:08.801" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 05:52:08.801" starttime="20170805 05:52:08.800"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170805 05:52:08.801" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170805 05:52:08.801" starttime="20170805 05:52:08.801"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 05:52:08.802" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170805 05:52:08.802" starttime="20170805 05:52:08.802"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170805 05:52:09.051" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170805 05:52:09.052" starttime="20170805 05:52:08.803"></status>
</kw>
<msg timestamp="20170805 05:52:09.052" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 05:52:09.052" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 05:52:09.052" starttime="20170805 05:52:08.802"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170805 05:52:09.053" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 05:52:09.053" starttime="20170805 05:52:09.053"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 05:52:09.054" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 05:52:09.054" starttime="20170805 05:52:09.054"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:09.054" starttime="20170805 05:52:08.798"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:09.054" starttime="20170805 05:52:08.798"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:09.055" starttime="20170805 05:52:08.797"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170805 05:52:09.056" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc/action/update</msg>
<status status="PASS" endtime="20170805 05:52:09.056" starttime="20170805 05:52:09.055"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 05:52:09.057" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 05:52:09.057" starttime="20170805 05:52:09.056"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170805 05:52:09.058" starttime="20170805 05:52:09.057"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170805 05:52:09.059" starttime="20170805 05:52:09.058"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170805 05:52:12.731" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc/action/update, data={"data": ["/tmp/flashimg"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20170805 05:52:12.731" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 05:52:12.731" starttime="20170805 05:52:09.059"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170805 05:52:12.732" starttime="20170805 05:52:12.732"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170805 05:52:12.733" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170805 05:52:12.733" starttime="20170805 05:52:12.733"></status>
</kw>
<msg timestamp="20170805 05:52:12.733" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 05:52:12.734" starttime="20170805 05:52:08.796"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 05:52:12.734" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 05:52:12.735" starttime="20170805 05:52:12.734"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${BMC_UPD_ATTR}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170805 05:52:12.739" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170805 05:52:12.740" starttime="20170805 05:52:12.739"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 05:52:12.741" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 05:52:12.741" starttime="20170805 05:52:12.741"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170805 05:52:12.742" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170805 05:52:12.742" starttime="20170805 05:52:12.741"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 05:52:12.742" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170805 05:52:12.742" starttime="20170805 05:52:12.742"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170805 05:52:12.927" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170805 05:52:12.927" starttime="20170805 05:52:12.743"></status>
</kw>
<msg timestamp="20170805 05:52:12.927" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 05:52:12.927" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 05:52:12.927" starttime="20170805 05:52:12.743"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170805 05:52:12.928" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 05:52:12.928" starttime="20170805 05:52:12.928"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 05:52:12.929" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 05:52:12.929" starttime="20170805 05:52:12.929"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:12.929" starttime="20170805 05:52:12.738"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:12.929" starttime="20170805 05:52:12.738"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:12.929" starttime="20170805 05:52:12.737"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170805 05:52:12.930" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc</msg>
<status status="PASS" endtime="20170805 05:52:12.930" starttime="20170805 05:52:12.930"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170805 05:52:12.931" starttime="20170805 05:52:12.930"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170805 05:52:13.056" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc, headers=None json=None</msg>
<msg timestamp="20170805 05:52:13.056" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 05:52:13.056" starttime="20170805 05:52:12.931"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170805 05:52:13.057" starttime="20170805 05:52:13.057"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170805 05:52:13.058" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170805 05:52:13.058" starttime="20170805 05:52:13.057"></status>
</kw>
<msg timestamp="20170805 05:52:13.058" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 05:52:13.058" starttime="20170805 05:52:12.736"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 05:52:13.059" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 05:52:13.059" starttime="20170805 05:52:13.058"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170805 05:52:13.059" level="INFO">To JSON using : content={
  "data": {
    "auto_apply": 0, 
    "clear_persistent_files": 0, 
    "filename": "/tmp/flashimg", 
    "preserve_network_settings": 1, 
    "restore_application_defaults": 0, 
    "status": "Verify error: update: --no-flash --ignore-mount --no-save-files --no-restore-files --no-clean-saved-files\nERROR: Image image-bmc too big for mtd0.\n", 
    "update_kernel_and_apps": 0
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170805 05:52:13.060" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170805 05:52:13.060" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Verify error: update: --no-flash --ignore-mount --no-save-files --no-restore-files --no-clean-saved-files\nERROR: Image image-bmc too b...</msg>
<status status="PASS" endtime="20170805 05:52:13.060" starttime="20170805 05:52:13.059"></status>
</kw>
<msg timestamp="20170805 05:52:13.060" level="INFO">${data} = {u'status': u'Verify error: update: --no-flash --ignore-mount --no-save-files --no-restore-files --no-clean-saved-files\nERROR: Image image-bmc too big for mtd0.\n', u'update_kernel_and_apps': 0, u'cl...</msg>
<status status="PASS" endtime="20170805 05:52:13.060" starttime="20170805 05:52:12.735"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${data["filename"]}</arg>
<arg>/tmp/flashimg</arg>
</arguments>
<status status="PASS" endtime="20170805 05:52:13.061" starttime="20170805 05:52:13.060"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${data['status']}</arg>
<arg>to apply</arg>
</arguments>
<msg timestamp="20170805 05:52:13.061" level="FAIL">'Verify error: update: --no-flash --ignore-mount --no-save-files --no-restore-files --no-clean-saved-files
ERROR: Image image-bmc too big for mtd0.
' does not contain 'to apply'</msg>
<status status="FAIL" endtime="20170805 05:52:13.062" starttime="20170805 05:52:13.061"></status>
</kw>
<status status="FAIL" endtime="20170805 05:52:13.062" starttime="20170805 05:52:08.794"></status>
</kw>
<msg timestamp="20170805 05:52:13.065" level="FAIL">'Verify error: update: --no-flash --ignore-mount --no-save-files --no-restore-files --no-clean-saved-files
ERROR: Image image-bmc too big for mtd0.
' does not contain 'to apply'</msg>
<status status="FAIL" endtime="20170805 05:52:13.065" starttime="20170805 05:52:08.785"></status>
</kw>
<kw type="teardown" name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>FFDC On Test Case Fail</arg>
</arguments>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170805 05:52:13.081" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170805 05:52:13.081" starttime="20170805 05:52:13.080"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 05:52:13.082" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 05:52:13.082" starttime="20170805 05:52:13.081"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170805 05:52:13.082" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170805 05:52:13.083" starttime="20170805 05:52:13.082"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 05:52:13.083" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170805 05:52:13.084" starttime="20170805 05:52:13.083"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170805 05:52:13.297" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170805 05:52:13.298" starttime="20170805 05:52:13.085"></status>
</kw>
<msg timestamp="20170805 05:52:13.298" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 05:52:13.298" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 05:52:13.298" starttime="20170805 05:52:13.084"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170805 05:52:13.298" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 05:52:13.299" starttime="20170805 05:52:13.298"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 05:52:13.299" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 05:52:13.299" starttime="20170805 05:52:13.299"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:13.299" starttime="20170805 05:52:13.079"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:13.300" starttime="20170805 05:52:13.078"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:13.300" starttime="20170805 05:52:13.077"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170805 05:52:13.300" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170805 05:52:13.300" starttime="20170805 05:52:13.300"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170805 05:52:13.301" starttime="20170805 05:52:13.301"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170805 05:52:13.363" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170805 05:52:13.364" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 05:52:13.364" starttime="20170805 05:52:13.301"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170805 05:52:13.365" starttime="20170805 05:52:13.364"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170805 05:52:13.365" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170805 05:52:13.365" starttime="20170805 05:52:13.365"></status>
</kw>
<msg timestamp="20170805 05:52:13.365" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 05:52:13.365" starttime="20170805 05:52:13.077"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 05:52:13.366" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 05:52:13.366" starttime="20170805 05:52:13.366"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170805 05:52:13.367" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170805 05:52:13.367" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170805 05:52:13.367" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170805 05:52:13.367" starttime="20170805 05:52:13.367"></status>
</kw>
<msg timestamp="20170805 05:52:13.368" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170805 05:52:13.368" starttime="20170805 05:52:13.076"></status>
</kw>
<msg timestamp="20170805 05:52:13.369" level="INFO">${host_state} = Off</msg>
<status status="PASS" endtime="20170805 05:52:13.369" starttime="20170805 05:52:13.076"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg timestamp="20170805 05:52:13.370" level="FAIL">Off != Quiesced</msg>
<status status="FAIL" endtime="20170805 05:52:13.371" starttime="20170805 05:52:13.370"></status>
</kw>
<msg timestamp="20170805 05:52:13.371" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170805 05:52:13.371" starttime="20170805 05:52:13.369"></status>
</kw>
<msg timestamp="20170805 05:52:13.371" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170805 05:52:13.371" starttime="20170805 05:52:13.075"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.3.86.161</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170805 05:52:13.391" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20170805 05:52:13.391" starttime="20170805 05:52:13.391"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170805 05:52:13.413" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20170805 05:52:16.407" level="INFO">${RC} = 0</msg>
<msg timestamp="20170805 05:52:16.407" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.897 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.618 ms
64 bytes from 9.3.86.161: icmp_se...</msg>
<status status="PASS" endtime="20170805 05:52:16.407" starttime="20170805 05:52:13.392"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170805 05:52:16.410" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.897 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.618 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.628 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.679 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3001ms
rtt min/avg/max/mdev = 0.618/0.705/0.897/0.116 ms</msg>
<status status="PASS" endtime="20170805 05:52:16.410" starttime="20170805 05:52:16.410"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170805 05:52:16.411" starttime="20170805 05:52:16.411"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:16.411" starttime="20170805 05:52:13.390"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170805 05:52:16.439" level="INFO">${cur_time} = 2017-08-05 05:52:16:439080</msg>
<status status="PASS" endtime="20170805 05:52:16.439" starttime="20170805 05:52:16.439"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170805 05:52:16.440" level="INFO">${cur_time} = 20170805055216439080</msg>
<status status="PASS" endtime="20170805 05:52:16.441" starttime="20170805 05:52:16.440"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:16.441" starttime="20170805 05:52:16.438"></status>
</kw>
<msg timestamp="20170805 05:52:16.447" level="INFO">${FFDC_TIME} = 20170805055216439080</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170805 05:52:16.452" level="INFO">${suite_name} = UpdateBmc</msg>
<status status="PASS" endtime="20170805 05:52:16.452" starttime="20170805 05:52:16.451"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170805 05:52:16.452" level="INFO">${suite_name} = 20170805055216439080_UpdateBmc</msg>
<status status="PASS" endtime="20170805 05:52:16.453" starttime="20170805 05:52:16.452"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170805 05:52:16.453" level="INFO">${test_name} = InitiateCodeUpdateBMC</msg>
<status status="PASS" endtime="20170805 05:52:16.453" starttime="20170805 05:52:16.453"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170805 05:52:16.454" level="INFO">${test_name} = 20170805055216439080_InitiateCodeUpdateBMC</msg>
<status status="PASS" endtime="20170805 05:52:16.454" starttime="20170805 05:52:16.453"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:16.454" starttime="20170805 05:52:16.450"></status>
</kw>
<msg timestamp="20170805 05:52:16.460" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/</msg>
<msg timestamp="20170805 05:52:16.465" level="INFO">${FFDC_PREFIX} = 20170805055216439080_</msg>
<msg timestamp="20170805 05:52:16.489" level="INFO">${LOG_PREFIX} = /home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/</arg>
</arguments>
<msg timestamp="20170805 05:52:16.491" html="yes" level="INFO">Created directory '&lt;a href="file:///home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC"&gt;/home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 05:52:16.491" starttime="20170805 05:52:16.490"></status>
</kw>
<msg timestamp="20170805 05:52:16.498" level="INFO">${FFDC_FILE_PATH} = /home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 05:52:16.512" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_general.txt"&gt;/home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 05:52:16.512" starttime="20170805 05:52:16.511"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:16.512" starttime="20170805 05:52:16.511"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 05:52:16.513" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_general.txt"&gt;/home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 05:52:16.513" starttime="20170805 05:52:16.513"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:16.513" starttime="20170805 05:52:16.512"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 05:52:16.515" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_general.txt"&gt;/home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 05:52:16.515" starttime="20170805 05:52:16.514"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:16.515" starttime="20170805 05:52:16.514"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 05:52:16.516" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_general.txt"&gt;/home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 05:52:16.516" starttime="20170805 05:52:16.516"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:16.516" starttime="20170805 05:52:16.515"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 05:52:16.518" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_general.txt"&gt;/home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 05:52:16.518" starttime="20170805 05:52:16.517"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:16.518" starttime="20170805 05:52:16.517"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 05:52:16.519" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_general.txt"&gt;/home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 05:52:16.519" starttime="20170805 05:52:16.519"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:16.519" starttime="20170805 05:52:16.518"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 05:52:16.521" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_general.txt"&gt;/home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 05:52:16.521" starttime="20170805 05:52:16.520"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:16.521" starttime="20170805 05:52:16.520"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 05:52:16.522" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_general.txt"&gt;/home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 05:52:16.522" starttime="20170805 05:52:16.522"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:16.522" starttime="20170805 05:52:16.521"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 05:52:16.523" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_general.txt"&gt;/home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 05:52:16.523" starttime="20170805 05:52:16.523"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:16.523" starttime="20170805 05:52:16.522"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 05:52:16.526" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_general.txt"&gt;/home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 05:52:16.527" starttime="20170805 05:52:16.526"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:16.527" starttime="20170805 05:52:16.524"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 05:52:16.528" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_general.txt"&gt;/home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 05:52:16.528" starttime="20170805 05:52:16.527"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:16.528" starttime="20170805 05:52:16.527"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 05:52:16.530" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_general.txt"&gt;/home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 05:52:16.530" starttime="20170805 05:52:16.529"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:16.530" starttime="20170805 05:52:16.529"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 05:52:16.531" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_general.txt"&gt;/home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 05:52:16.531" starttime="20170805 05:52:16.531"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:16.531" starttime="20170805 05:52:16.530"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170805 05:52:16.556" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170805 05:52:16.556" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170805 05:52:17.319" level="INFO">Read output: root@witherspoon:~#</msg>
<msg timestamp="20170805 05:52:17.319" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170805 05:52:17.396" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170805 05:52:17.408" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170805 05:52:17.408" level="INFO">${stderr} = </msg>
<msg timestamp="20170805 05:52:17.408" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20170805 05:52:17.408" starttime="20170805 05:52:16.532"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170805 05:52:17.409" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170805 05:52:17.409" starttime="20170805 05:52:17.409"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170805 05:52:17.409" level="INFO">Length is 11</msg>
<status status="PASS" endtime="20170805 05:52:17.410" starttime="20170805 05:52:17.409"></status>
</kw>
<msg timestamp="20170805 05:52:17.410" level="INFO">${model_name} = Witherspoon</msg>
<status status="PASS" endtime="20170805 05:52:17.410" starttime="20170805 05:52:16.532"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 05:52:17.411" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_general.txt"&gt;/home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 05:52:17.411" starttime="20170805 05:52:17.411"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:17.412" starttime="20170805 05:52:17.410"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:17.412" starttime="20170805 05:52:16.524"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 05:52:17.413" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_general.txt"&gt;/home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 05:52:17.413" starttime="20170805 05:52:17.413"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:17.413" starttime="20170805 05:52:17.412"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170805 05:52:17.414" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170805 05:52:17.414" starttime="20170805 05:52:17.413"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 05:52:17.415" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_general.txt"&gt;/home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 05:52:17.415" starttime="20170805 05:52:17.415"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:17.416" starttime="20170805 05:52:17.414"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 05:52:17.417" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_general.txt"&gt;/home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 05:52:17.417" starttime="20170805 05:52:17.416"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:17.417" starttime="20170805 05:52:17.416"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:17.417" starttime="20170805 05:52:17.414"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 05:52:17.418" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_general.txt"&gt;/home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 05:52:17.418" starttime="20170805 05:52:17.418"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:17.418" starttime="20170805 05:52:17.417"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 05:52:17.420" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_general.txt"&gt;/home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 05:52:17.420" starttime="20170805 05:52:17.419"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:17.420" starttime="20170805 05:52:17.419"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:17.420" starttime="20170805 05:52:17.417"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 05:52:17.422" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_general.txt"&gt;/home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 05:52:17.422" starttime="20170805 05:52:17.421"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:17.422" starttime="20170805 05:52:17.421"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 05:52:17.423" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_general.txt"&gt;/home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 05:52:17.423" starttime="20170805 05:52:17.423"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:17.423" starttime="20170805 05:52:17.422"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:17.423" starttime="20170805 05:52:17.420"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:17.423" starttime="20170805 05:52:17.414"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 05:52:17.424" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_general.txt"&gt;/home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 05:52:17.425" starttime="20170805 05:52:17.424"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:17.425" starttime="20170805 05:52:17.424"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:17.425" starttime="20170805 05:52:16.510"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170805 05:52:17.433" level="INFO">@{entries} = [ BMC LOGS ]</msg>
<status status="PASS" endtime="20170805 05:52:17.433" starttime="20170805 05:52:17.432"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg timestamp="20170805 05:52:17.434" level="INFO">@{method_list} = [ ('FFDC Generic Report', 'BMC FFDC Manifest') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('Core Files', 'SCP Coredump Files') | ('BMC Specific Files', 'BMC FFDC Files') | ('SEL Log', 'Collect ...</msg>
<status status="PASS" endtime="20170805 05:52:17.434" starttime="20170805 05:52:17.434"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw name="Get Ffdc Method Desc" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status status="PASS" endtime="20170805 05:52:17.436" starttime="20170805 05:52:17.436"></status>
</kw>
<msg timestamp="20170805 05:52:17.436" level="INFO">@{ffdc_function_list} = [ FFDC Generic Report | Get Request FFDC | Core Files | BMC Specific Files | SEL Log | OS FFDC ]</msg>
<status status="PASS" endtime="20170805 05:52:17.436" starttime="20170805 05:52:17.435"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170805 05:52:17.438" starttime="20170805 05:52:17.438"></status>
</kw>
<msg timestamp="20170805 05:52:17.438" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 05:52:17.438" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170805 05:52:17.438" starttime="20170805 05:52:17.437"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170805 05:52:17.439" starttime="20170805 05:52:17.439"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170805 05:52:17.462" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170805 05:52:17.462" starttime="20170805 05:52:17.462"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170805 05:52:17.463" level="INFO">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil state') ]</msg>
<status status="PASS" endtime="20170805 05:52:17.463" starttime="20170805 05:52:17.463"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170805 05:52:17.469" level="INFO">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status status="PASS" endtime="20170805 05:52:17.470" starttime="20170805 05:52:17.464"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil state')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 05:52:17.477" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_general.txt"&gt;/home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 05:52:17.477" starttime="20170805 05:52:17.477"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:17.477" starttime="20170805 05:52:17.472"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 05:52:17.479" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_general.txt"&gt;/home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 05:52:17.479" starttime="20170805 05:52:17.479"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:17.479" starttime="20170805 05:52:17.478"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 05:52:17.481" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_general.txt"&gt;/home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 05:52:17.481" starttime="20170805 05:52:17.481"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:17.481" starttime="20170805 05:52:17.480"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 05:52:17.482" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_general.txt"&gt;/home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 05:52:17.482" starttime="20170805 05:52:17.482"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:17.483" starttime="20170805 05:52:17.481"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:17.483" starttime="20170805 05:52:17.471"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:17.483" starttime="20170805 05:52:17.471"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170805 05:52:17.484" level="INFO">${cmd_buf} = BMC Execute Command  /usr/sbin/obmcutil state  ignore_err=1</msg>
<status status="PASS" endtime="20170805 05:52:17.484" starttime="20170805 05:52:17.483"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>/usr/sbin/obmcutil state</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170805 05:52:17.550" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170805 05:52:17.550" level="INFO">Executing command '/usr/sbin/obmcutil state'.</msg>
<msg timestamp="20170805 05:52:18.886" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170805 05:52:18.887" starttime="20170805 05:52:17.512"></status>
</kw>
<msg timestamp="20170805 05:52:18.887" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 05:52:18.887" level="INFO">${ret_values} = (u'CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready\nCurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off\nCurrentHostState:   xyz.openbmc_project.State.Host.HostState....</msg>
<status status="PASS" endtime="20170805 05:52:18.887" starttime="20170805 05:52:17.484"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170805 05:52:18.888" level="INFO">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170805 05:52:18.888" starttime="20170805 05:52:18.887"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170805 05:52:18.888" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170805 05:52:18.888" starttime="20170805 05:52:18.888"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 05:52:18.896" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_general.txt"&gt;/home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 05:52:18.896" starttime="20170805 05:52:18.896"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:18.896" starttime="20170805 05:52:18.895"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:18.896" starttime="20170805 05:52:18.889"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:18.896" starttime="20170805 05:52:17.470"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:18.896" starttime="20170805 05:52:17.470"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:18.896" starttime="20170805 05:52:17.470"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:18.897" starttime="20170805 05:52:17.462"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:18.897" starttime="20170805 05:52:17.462"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170805 05:52:18.898" level="INFO">@{cmd_list} = [ ('FW Level', 'cat /etc/os-release') ]</msg>
<status status="PASS" endtime="20170805 05:52:18.898" starttime="20170805 05:52:18.898"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170805 05:52:18.899" level="INFO">${ENTRY_INDEX} = DRIVER INFO</msg>
<status status="PASS" endtime="20170805 05:52:18.899" starttime="20170805 05:52:18.898"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 05:52:18.902" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_general.txt"&gt;/home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 05:52:18.902" starttime="20170805 05:52:18.902"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:18.902" starttime="20170805 05:52:18.901"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 05:52:18.904" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_general.txt"&gt;/home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 05:52:18.904" starttime="20170805 05:52:18.903"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:18.904" starttime="20170805 05:52:18.903"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 05:52:18.905" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_general.txt"&gt;/home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 05:52:18.905" starttime="20170805 05:52:18.905"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:18.905" starttime="20170805 05:52:18.904"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 05:52:18.906" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_general.txt"&gt;/home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 05:52:18.906" starttime="20170805 05:52:18.906"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:18.907" starttime="20170805 05:52:18.905"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:18.907" starttime="20170805 05:52:18.900"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:18.907" starttime="20170805 05:52:18.900"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170805 05:52:18.908" level="INFO">${cmd_buf} = BMC Execute Command  cat /etc/os-release  ignore_err=1</msg>
<status status="PASS" endtime="20170805 05:52:18.908" starttime="20170805 05:52:18.907"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/os-release</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170805 05:52:18.987" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170805 05:52:18.988" level="INFO">Executing command 'cat /etc/os-release'.</msg>
<msg timestamp="20170805 05:52:19.053" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170805 05:52:19.054" starttime="20170805 05:52:18.943"></status>
</kw>
<msg timestamp="20170805 05:52:19.054" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 05:52:19.054" level="INFO">${ret_values} = (u'ID="openbmc-phosphor"\nNAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"\nVERSION="v1.99.8-139"\nVERSION_ID="v1.99.8-139-gb3dbb28"\nPRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC...</msg>
<status status="PASS" endtime="20170805 05:52:19.054" starttime="20170805 05:52:18.908"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170805 05:52:19.055" level="INFO">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.8-139"
VERSION_ID="v1.99.8-139-gb3dbb28"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Projec...</msg>
<status status="PASS" endtime="20170805 05:52:19.055" starttime="20170805 05:52:19.054"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170805 05:52:19.056" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170805 05:52:19.056" starttime="20170805 05:52:19.055"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 05:52:19.067" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_general.txt"&gt;/home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 05:52:19.067" starttime="20170805 05:52:19.066"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:19.067" starttime="20170805 05:52:19.065"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:19.067" starttime="20170805 05:52:19.056"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:19.067" starttime="20170805 05:52:18.899"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:19.067" starttime="20170805 05:52:18.899"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:19.067" starttime="20170805 05:52:18.899"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:19.067" starttime="20170805 05:52:18.897"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:19.067" starttime="20170805 05:52:18.897"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170805 05:52:19.068" level="INFO">@{cmd_list} = [ ('BMC Uptime', 'uptime') | ('BMC File System Disk Space Usage', 'df -hT') | ('BMC OS', 'uname -a') ]</msg>
<status status="PASS" endtime="20170805 05:52:19.068" starttime="20170805 05:52:19.068"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170805 05:52:19.069" level="INFO">${ENTRY_INDEX} = BMC DATA</msg>
<status status="PASS" endtime="20170805 05:52:19.069" starttime="20170805 05:52:19.069"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 05:52:19.072" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_general.txt"&gt;/home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 05:52:19.073" starttime="20170805 05:52:19.072"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:19.073" starttime="20170805 05:52:19.071"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 05:52:19.074" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_general.txt"&gt;/home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 05:52:19.074" starttime="20170805 05:52:19.074"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:19.074" starttime="20170805 05:52:19.073"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 05:52:19.076" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_general.txt"&gt;/home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 05:52:19.076" starttime="20170805 05:52:19.075"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:19.076" starttime="20170805 05:52:19.075"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 05:52:19.077" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_general.txt"&gt;/home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 05:52:19.077" starttime="20170805 05:52:19.077"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:19.077" starttime="20170805 05:52:19.076"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:19.077" starttime="20170805 05:52:19.071"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:19.077" starttime="20170805 05:52:19.070"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170805 05:52:19.078" level="INFO">${cmd_buf} = BMC Execute Command  uptime  ignore_err=1</msg>
<status status="PASS" endtime="20170805 05:52:19.078" starttime="20170805 05:52:19.078"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uptime</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170805 05:52:19.153" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170805 05:52:19.153" level="INFO">Executing command 'uptime'.</msg>
<msg timestamp="20170805 05:52:19.212" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170805 05:52:19.213" starttime="20170805 05:52:19.108"></status>
</kw>
<msg timestamp="20170805 05:52:19.213" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 05:52:19.213" level="INFO">${ret_values} = (u' 05:52:24 up 3 min,  load average: 2.36, 2.01, 0.86', u'', 0)</msg>
<status status="PASS" endtime="20170805 05:52:19.213" starttime="20170805 05:52:19.078"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170805 05:52:19.214" level="INFO">${stdout} =  05:52:24 up 3 min,  load average: 2.36, 2.01, 0.86</msg>
<status status="PASS" endtime="20170805 05:52:19.214" starttime="20170805 05:52:19.213"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170805 05:52:19.214" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170805 05:52:19.214" starttime="20170805 05:52:19.214"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 05:52:19.221" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_general.txt"&gt;/home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 05:52:19.221" starttime="20170805 05:52:19.221"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:19.221" starttime="20170805 05:52:19.220"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:19.221" starttime="20170805 05:52:19.214"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:19.222" starttime="20170805 05:52:19.070"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:19.222" starttime="20170805 05:52:19.069"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 05:52:19.225" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_general.txt"&gt;/home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 05:52:19.225" starttime="20170805 05:52:19.224"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:19.225" starttime="20170805 05:52:19.224"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 05:52:19.226" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_general.txt"&gt;/home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 05:52:19.226" starttime="20170805 05:52:19.226"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:19.226" starttime="20170805 05:52:19.225"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 05:52:19.227" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_general.txt"&gt;/home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 05:52:19.228" starttime="20170805 05:52:19.227"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:19.228" starttime="20170805 05:52:19.226"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 05:52:19.229" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_general.txt"&gt;/home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 05:52:19.229" starttime="20170805 05:52:19.229"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:19.229" starttime="20170805 05:52:19.228"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:19.229" starttime="20170805 05:52:19.223"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:19.229" starttime="20170805 05:52:19.223"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170805 05:52:19.230" level="INFO">${cmd_buf} = BMC Execute Command  df -hT  ignore_err=1</msg>
<status status="PASS" endtime="20170805 05:52:19.230" starttime="20170805 05:52:19.230"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>df -hT</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170805 05:52:19.306" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170805 05:52:19.306" level="INFO">Executing command 'df -hT'.</msg>
<msg timestamp="20170805 05:52:19.374" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170805 05:52:19.374" starttime="20170805 05:52:19.264"></status>
</kw>
<msg timestamp="20170805 05:52:19.374" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 05:52:19.374" level="INFO">${ret_values} = (u'Filesystem           Type            Size      Used Available Use% Mounted on\ndev                  devtmpfs      210.2M         0    210.2M   0% /dev\ntmpfs                tmpfs         211.1M    ...</msg>
<status status="PASS" endtime="20170805 05:52:19.374" starttime="20170805 05:52:19.231"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170805 05:52:19.375" level="INFO">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.2M         0    210.2M   0% /dev
tmpfs                tmpfs         211.1M     74.0...</msg>
<status status="PASS" endtime="20170805 05:52:19.375" starttime="20170805 05:52:19.375"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170805 05:52:19.376" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170805 05:52:19.376" starttime="20170805 05:52:19.376"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 05:52:19.383" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_general.txt"&gt;/home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 05:52:19.383" starttime="20170805 05:52:19.383"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:19.383" starttime="20170805 05:52:19.382"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:19.383" starttime="20170805 05:52:19.376"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:19.383" starttime="20170805 05:52:19.222"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:19.383" starttime="20170805 05:52:19.222"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 05:52:19.387" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_general.txt"&gt;/home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 05:52:19.387" starttime="20170805 05:52:19.386"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:19.387" starttime="20170805 05:52:19.385"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 05:52:19.388" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_general.txt"&gt;/home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 05:52:19.388" starttime="20170805 05:52:19.388"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:19.388" starttime="20170805 05:52:19.387"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 05:52:19.390" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_general.txt"&gt;/home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 05:52:19.390" starttime="20170805 05:52:19.389"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:19.390" starttime="20170805 05:52:19.389"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 05:52:19.391" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_general.txt"&gt;/home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 05:52:19.391" starttime="20170805 05:52:19.391"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:19.391" starttime="20170805 05:52:19.390"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:19.391" starttime="20170805 05:52:19.385"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:19.391" starttime="20170805 05:52:19.384"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170805 05:52:19.392" level="INFO">${cmd_buf} = BMC Execute Command  uname -a  ignore_err=1</msg>
<status status="PASS" endtime="20170805 05:52:19.392" starttime="20170805 05:52:19.392"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uname -a</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170805 05:52:19.472" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170805 05:52:19.473" level="INFO">Executing command 'uname -a'.</msg>
<msg timestamp="20170805 05:52:19.530" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170805 05:52:19.530" starttime="20170805 05:52:19.429"></status>
</kw>
<msg timestamp="20170805 05:52:19.531" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 05:52:19.531" level="INFO">${ret_values} = (u'Linux witherspoon 4.10.17-03afe5775baf06c3037d62cc2a15628079af38c9 #1 Tue Aug 1 17:31:09 UTC 2017 armv6l GNU/Linux', u'', 0)</msg>
<status status="PASS" endtime="20170805 05:52:19.531" starttime="20170805 05:52:19.392"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170805 05:52:19.531" level="INFO">${stdout} = Linux witherspoon 4.10.17-03afe5775baf06c3037d62cc2a15628079af38c9 #1 Tue Aug 1 17:31:09 UTC 2017 armv6l GNU/Linux</msg>
<status status="PASS" endtime="20170805 05:52:19.531" starttime="20170805 05:52:19.531"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170805 05:52:19.532" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170805 05:52:19.532" starttime="20170805 05:52:19.532"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 05:52:19.539" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_general.txt"&gt;/home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 05:52:19.539" starttime="20170805 05:52:19.539"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:19.539" starttime="20170805 05:52:19.538"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:19.539" starttime="20170805 05:52:19.532"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:19.539" starttime="20170805 05:52:19.384"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:19.539" starttime="20170805 05:52:19.383"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:19.540" starttime="20170805 05:52:19.069"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:19.540" starttime="20170805 05:52:19.068"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:19.540" starttime="20170805 05:52:19.067"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:19.540" starttime="20170805 05:52:17.462"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:19.540" starttime="20170805 05:52:17.461"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:19.540" starttime="20170805 05:52:17.439"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:19.540" starttime="20170805 05:52:17.437"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:19.540" starttime="20170805 05:52:17.436"></status>
</kw>
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170805 05:52:19.542" starttime="20170805 05:52:19.542"></status>
</kw>
<msg timestamp="20170805 05:52:19.542" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 05:52:19.542" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170805 05:52:19.542" starttime="20170805 05:52:19.541"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170805 05:52:19.543" starttime="20170805 05:52:19.543"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170805 05:52:19.562" level="INFO">@{entries} = [ GET REQUESTS ]</msg>
<status status="PASS" endtime="20170805 05:52:19.562" starttime="20170805 05:52:19.562"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170805 05:52:19.564" level="INFO">@{cmd_list} = [ ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate') | ('BMC_sensor_list', '/org/openbmc/sensors/enumerate') | ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate') | ('BMC_led', '/o...</msg>
<status status="PASS" endtime="20170805 05:52:19.564" starttime="20170805 05:52:19.563"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170805 05:52:19.565" level="INFO">${logpath} = /home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_elog.txt</msg>
<status status="PASS" endtime="20170805 05:52:19.565" starttime="20170805 05:52:19.564"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170805 05:52:19.568" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170805 05:52:19.569" starttime="20170805 05:52:19.568"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 05:52:19.569" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 05:52:19.569" starttime="20170805 05:52:19.569"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170805 05:52:19.570" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170805 05:52:19.570" starttime="20170805 05:52:19.570"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 05:52:19.571" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170805 05:52:19.571" starttime="20170805 05:52:19.570"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170805 05:52:19.765" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170805 05:52:19.765" starttime="20170805 05:52:19.571"></status>
</kw>
<msg timestamp="20170805 05:52:19.766" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 05:52:19.766" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 05:52:19.766" starttime="20170805 05:52:19.571"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170805 05:52:19.766" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 05:52:19.766" starttime="20170805 05:52:19.766"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 05:52:19.768" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 05:52:19.768" starttime="20170805 05:52:19.767"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:19.768" starttime="20170805 05:52:19.567"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:19.768" starttime="20170805 05:52:19.566"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:19.768" starttime="20170805 05:52:19.566"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170805 05:52:19.769" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status status="PASS" endtime="20170805 05:52:19.769" starttime="20170805 05:52:19.768"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170805 05:52:19.769" starttime="20170805 05:52:19.769"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170805 05:52:19.898" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg timestamp="20170805 05:52:19.898" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 05:52:19.898" starttime="20170805 05:52:19.770"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170805 05:52:19.899" starttime="20170805 05:52:19.898"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170805 05:52:19.899" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170805 05:52:19.899" starttime="20170805 05:52:19.899"></status>
</kw>
<msg timestamp="20170805 05:52:19.899" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 05:52:19.899" starttime="20170805 05:52:19.565"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 05:52:19.901" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 05:52:19.901" starttime="20170805 05:52:19.900"></status>
</kw>
<msg timestamp="20170805 05:52:19.901" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170805 05:52:19.901" starttime="20170805 05:52:19.900"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170805 05:52:19.901" starttime="20170805 05:52:19.901"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170805 05:52:19.902" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/1": {
      "AdditionalData": [], 
      "Id": 1, 
      "Message": "xyz.openbmc_project.Common.Error.InternalFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501912226589, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170805 05:52:19.902" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170805 05:52:19.902" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/logging/entry/1": {
            "AdditionalData": [],
            "Id": 1,
            "Message": "xyz.openbmc_project.Common.Error.InternalFailure",
    ...</msg>
<status status="PASS" endtime="20170805 05:52:19.902" starttime="20170805 05:52:19.902"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 05:52:19.904" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_elog.txt"&gt;/home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_elog.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 05:52:19.904" starttime="20170805 05:52:19.903"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:19.904" starttime="20170805 05:52:19.903"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:19.904" starttime="20170805 05:52:19.564"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170805 05:52:19.905" level="INFO">${logpath} = /home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_sensor_list.txt</msg>
<status status="PASS" endtime="20170805 05:52:19.905" starttime="20170805 05:52:19.904"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170805 05:52:19.908" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170805 05:52:19.909" starttime="20170805 05:52:19.908"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 05:52:19.909" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 05:52:19.910" starttime="20170805 05:52:19.909"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170805 05:52:19.910" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170805 05:52:19.910" starttime="20170805 05:52:19.910"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 05:52:19.911" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170805 05:52:19.911" starttime="20170805 05:52:19.910"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170805 05:52:20.110" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170805 05:52:20.111" starttime="20170805 05:52:19.912"></status>
</kw>
<msg timestamp="20170805 05:52:20.111" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 05:52:20.111" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 05:52:20.111" starttime="20170805 05:52:19.911"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170805 05:52:20.112" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 05:52:20.112" starttime="20170805 05:52:20.111"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 05:52:20.112" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 05:52:20.112" starttime="20170805 05:52:20.112"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:20.113" starttime="20170805 05:52:19.907"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:20.113" starttime="20170805 05:52:19.906"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:20.113" starttime="20170805 05:52:19.906"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170805 05:52:20.113" level="INFO">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status status="PASS" endtime="20170805 05:52:20.113" starttime="20170805 05:52:20.113"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170805 05:52:20.114" starttime="20170805 05:52:20.114"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170805 05:52:20.344" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None json=None</msg>
<msg timestamp="20170805 05:52:20.344" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 05:52:20.344" starttime="20170805 05:52:20.114"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170805 05:52:20.345" starttime="20170805 05:52:20.345"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170805 05:52:20.346" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170805 05:52:20.346" starttime="20170805 05:52:20.346"></status>
</kw>
<msg timestamp="20170805 05:52:20.346" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 05:52:20.346" starttime="20170805 05:52:19.905"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 05:52:20.347" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 05:52:20.347" starttime="20170805 05:52:20.347"></status>
</kw>
<msg timestamp="20170805 05:52:20.347" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170805 05:52:20.347" starttime="20170805 05:52:20.346"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170805 05:52:20.348" starttime="20170805 05:52:20.348"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170805 05:52:20.349" level="INFO">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 3
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/PowerSupplyDerating": {
      "error": 0, 
      "units": "", 
      "value": 10
    }, 
    "/org/openbmc/sensors/host/PowerSupplyRedundancy": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/TurboAllowed": {
      "error": 0, 
      "units": "", 
      "value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170805 05:52:20.349" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170805 05:52:20.349" level="INFO">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/host/BootCount": {
            "error": 0,
            "units": "",
            "value": 3
        },
        "/org/openbmc/sensors/host/BootProgress": {
...</msg>
<status status="PASS" endtime="20170805 05:52:20.349" starttime="20170805 05:52:20.348"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 05:52:20.351" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_sensor_list.txt"&gt;/home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 05:52:20.351" starttime="20170805 05:52:20.350"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:20.351" starttime="20170805 05:52:20.349"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:20.351" starttime="20170805 05:52:19.904"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170805 05:52:20.352" level="INFO">${logpath} = /home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_inventory.txt</msg>
<status status="PASS" endtime="20170805 05:52:20.352" starttime="20170805 05:52:20.352"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170805 05:52:20.356" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170805 05:52:20.356" starttime="20170805 05:52:20.355"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 05:52:20.357" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 05:52:20.357" starttime="20170805 05:52:20.356"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170805 05:52:20.358" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170805 05:52:20.358" starttime="20170805 05:52:20.357"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 05:52:20.358" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170805 05:52:20.358" starttime="20170805 05:52:20.358"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170805 05:52:20.534" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170805 05:52:20.534" starttime="20170805 05:52:20.359"></status>
</kw>
<msg timestamp="20170805 05:52:20.534" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 05:52:20.534" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 05:52:20.535" starttime="20170805 05:52:20.359"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170805 05:52:20.535" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 05:52:20.535" starttime="20170805 05:52:20.535"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 05:52:20.536" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 05:52:20.536" starttime="20170805 05:52:20.536"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:20.536" starttime="20170805 05:52:20.354"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:20.536" starttime="20170805 05:52:20.354"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:20.536" starttime="20170805 05:52:20.353"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170805 05:52:20.537" level="INFO">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status status="PASS" endtime="20170805 05:52:20.537" starttime="20170805 05:52:20.537"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170805 05:52:20.538" starttime="20170805 05:52:20.537"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170805 05:52:20.731" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg timestamp="20170805 05:52:20.731" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 05:52:20.731" starttime="20170805 05:52:20.538"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170805 05:52:20.732" starttime="20170805 05:52:20.732"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170805 05:52:20.732" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170805 05:52:20.733" starttime="20170805 05:52:20.732"></status>
</kw>
<msg timestamp="20170805 05:52:20.733" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 05:52:20.733" starttime="20170805 05:52:20.352"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 05:52:20.734" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 05:52:20.734" starttime="20170805 05:52:20.734"></status>
</kw>
<msg timestamp="20170805 05:52:20.734" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170805 05:52:20.734" starttime="20170805 05:52:20.733"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170805 05:52:20.735" starttime="20170805 05:52:20.734"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170805 05:52:20.736" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 1
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH051", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "00:00:00:00:00:00", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply0": {
      "Present": 1, 
      "PrettyName": "power_supply0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply1": {
      "Present": 1, 
      "PrettyName": "power_supply1"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170805 05:52:20.736" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170805 05:52:20.736" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system/chassis": {
            "AirCooled": 1,
            "WaterCooled": 1
        },
        "/xyz/openbmc_project/inventory/system/chassis/mo...</msg>
<status status="PASS" endtime="20170805 05:52:20.736" starttime="20170805 05:52:20.735"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 05:52:20.737" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_inventory.txt"&gt;/home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 05:52:20.737" starttime="20170805 05:52:20.737"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:20.738" starttime="20170805 05:52:20.736"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:20.738" starttime="20170805 05:52:20.351"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170805 05:52:20.738" level="INFO">${logpath} = /home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_led.txt</msg>
<status status="PASS" endtime="20170805 05:52:20.738" starttime="20170805 05:52:20.738"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170805 05:52:20.742" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170805 05:52:20.742" starttime="20170805 05:52:20.741"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 05:52:20.743" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 05:52:20.743" starttime="20170805 05:52:20.742"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170805 05:52:20.743" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170805 05:52:20.743" starttime="20170805 05:52:20.743"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 05:52:20.744" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170805 05:52:20.744" starttime="20170805 05:52:20.744"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170805 05:52:20.934" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170805 05:52:20.935" starttime="20170805 05:52:20.745"></status>
</kw>
<msg timestamp="20170805 05:52:20.935" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 05:52:20.935" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 05:52:20.935" starttime="20170805 05:52:20.744"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170805 05:52:20.936" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 05:52:20.936" starttime="20170805 05:52:20.935"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 05:52:20.936" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 05:52:20.936" starttime="20170805 05:52:20.936"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:20.937" starttime="20170805 05:52:20.740"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:20.937" starttime="20170805 05:52:20.740"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:20.937" starttime="20170805 05:52:20.739"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170805 05:52:20.937" level="INFO">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status status="PASS" endtime="20170805 05:52:20.937" starttime="20170805 05:52:20.937"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170805 05:52:20.938" starttime="20170805 05:52:20.938"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170805 05:52:20.979" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None json=None</msg>
<msg timestamp="20170805 05:52:20.979" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170805 05:52:20.979" starttime="20170805 05:52:20.938"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170805 05:52:20.980" starttime="20170805 05:52:20.980"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170805 05:52:20.981" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170805 05:52:20.981" starttime="20170805 05:52:20.981"></status>
</kw>
<msg timestamp="20170805 05:52:20.981" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170805 05:52:20.981" starttime="20170805 05:52:20.739"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 05:52:20.982" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170805 05:52:20.982" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170805 05:52:20.982" starttime="20170805 05:52:20.982"></status>
</kw>
<msg timestamp="20170805 05:52:20.982" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170805 05:52:20.983" starttime="20170805 05:52:20.981"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170805 05:52:20.984" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170805 05:52:20.984" starttime="20170805 05:52:20.983"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:20.984" starttime="20170805 05:52:20.983"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:20.984" starttime="20170805 05:52:20.738"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170805 05:52:20.985" level="INFO">${logpath} = /home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_record_log.txt</msg>
<status status="PASS" endtime="20170805 05:52:20.985" starttime="20170805 05:52:20.984"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170805 05:52:20.988" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170805 05:52:20.988" starttime="20170805 05:52:20.987"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 05:52:20.989" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 05:52:20.989" starttime="20170805 05:52:20.989"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170805 05:52:20.990" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170805 05:52:20.990" starttime="20170805 05:52:20.990"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 05:52:20.991" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170805 05:52:20.991" starttime="20170805 05:52:20.991"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170805 05:52:21.190" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170805 05:52:21.190" starttime="20170805 05:52:20.992"></status>
</kw>
<msg timestamp="20170805 05:52:21.190" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 05:52:21.190" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 05:52:21.190" starttime="20170805 05:52:20.992"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170805 05:52:21.191" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 05:52:21.191" starttime="20170805 05:52:21.191"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 05:52:21.192" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 05:52:21.192" starttime="20170805 05:52:21.192"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:21.192" starttime="20170805 05:52:20.987"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:21.192" starttime="20170805 05:52:20.986"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:21.192" starttime="20170805 05:52:20.985"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170805 05:52:21.193" level="INFO">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status status="PASS" endtime="20170805 05:52:21.193" starttime="20170805 05:52:21.193"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170805 05:52:21.194" starttime="20170805 05:52:21.193"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170805 05:52:21.237" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None json=None</msg>
<msg timestamp="20170805 05:52:21.237" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170805 05:52:21.237" starttime="20170805 05:52:21.194"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170805 05:52:21.238" starttime="20170805 05:52:21.237"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170805 05:52:21.238" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170805 05:52:21.238" starttime="20170805 05:52:21.238"></status>
</kw>
<msg timestamp="20170805 05:52:21.238" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170805 05:52:21.239" starttime="20170805 05:52:20.985"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 05:52:21.240" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170805 05:52:21.240" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170805 05:52:21.240" starttime="20170805 05:52:21.239"></status>
</kw>
<msg timestamp="20170805 05:52:21.240" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170805 05:52:21.240" starttime="20170805 05:52:21.239"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170805 05:52:21.241" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170805 05:52:21.241" starttime="20170805 05:52:21.241"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:21.241" starttime="20170805 05:52:21.240"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:21.241" starttime="20170805 05:52:20.984"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:21.241" starttime="20170805 05:52:19.564"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:21.241" starttime="20170805 05:52:19.563"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:21.241" starttime="20170805 05:52:19.563"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:21.242" starttime="20170805 05:52:19.563"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:21.242" starttime="20170805 05:52:19.562"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:21.242" starttime="20170805 05:52:19.543"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:21.242" starttime="20170805 05:52:19.540"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:21.242" starttime="20170805 05:52:19.540"></status>
</kw>
<kw type="foritem" name="${method} = ('Core Files', 'SCP Coredump Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170805 05:52:21.244" starttime="20170805 05:52:21.243"></status>
</kw>
<msg timestamp="20170805 05:52:21.244" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 05:52:21.244" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170805 05:52:21.244" starttime="20170805 05:52:21.243"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170805 05:52:21.245" starttime="20170805 05:52:21.244"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170805 05:52:21.292" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170805 05:52:21.292" level="INFO">Executing command 'ls /tmp/core_*'.</msg>
<msg timestamp="20170805 05:52:21.349" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170805 05:52:21.364" level="INFO">${core_files} = None</msg>
<msg timestamp="20170805 05:52:21.364" level="INFO">${stderr} = None</msg>
<msg timestamp="20170805 05:52:21.364" level="INFO">${rc} = None</msg>
<msg timestamp="20170805 05:52:21.365" level="FAIL">#(UTC) 2017/08/05 05:52:21.362584 -    3.955150 - **ERROR** The prior SSH command returned a non-zero return code:
rc:                                               0x00000001
ls: /tmp/core_*: No such file or directory
: 1 != 0</msg>
<status status="FAIL" endtime="20170805 05:52:21.365" starttime="20170805 05:52:21.264"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg timestamp="20170805 05:52:21.365" level="INFO">@{core_list} = [ ]</msg>
<msg timestamp="20170805 05:52:21.365" level="FAIL">AttributeError: 'NoneType' object has no attribute 'split'</msg>
<status status="FAIL" endtime="20170805 05:52:21.366" starttime="20170805 05:52:21.365"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Open Connection for SCP</arg>
</arguments>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20170805 05:52:21.383" starttime="20170805 05:52:21.379"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" endtime="20170805 05:52:22.082" starttime="20170805 05:52:21.384"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:22.082" starttime="20170805 05:52:21.383"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:22.082" starttime="20170805 05:52:21.378"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:22.082" starttime="20170805 05:52:21.366"></status>
</kw>
<kw type="for" name="${index} IN [ @{core_list} ]">
<status status="PASS" endtime="20170805 05:52:22.083" starttime="20170805 05:52:22.082"></status>
</kw>
<status status="FAIL" endtime="20170805 05:52:22.083" starttime="20170805 05:52:21.263"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:22.083" starttime="20170805 05:52:21.245"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:22.083" starttime="20170805 05:52:21.242"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:22.083" starttime="20170805 05:52:21.242"></status>
</kw>
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170805 05:52:22.085" starttime="20170805 05:52:22.085"></status>
</kw>
<msg timestamp="20170805 05:52:22.085" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 05:52:22.085" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170805 05:52:22.086" starttime="20170805 05:52:22.085"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170805 05:52:22.086" starttime="20170805 05:52:22.086"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170805 05:52:22.105" level="INFO">@{entries} = [ BMC FILES ]</msg>
<status status="PASS" endtime="20170805 05:52:22.105" starttime="20170805 05:52:22.105"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170805 05:52:22.107" level="INFO">@{cmd_list} = [ ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/') | ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_proc_list', 'top -n 1 -b') | ('BMC_dmesg', 'dmesg') | ('BMC_j...</msg>
<status status="PASS" endtime="20170805 05:52:22.107" starttime="20170805 05:52:22.106"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170805 05:52:22.108" level="INFO">${logpath} = /home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_proc_fd_active_list.txt</msg>
<status status="PASS" endtime="20170805 05:52:22.108" starttime="20170805 05:52:22.107"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170805 05:52:22.109" starttime="20170805 05:52:22.109"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170805 05:52:22.110" level="INFO">${cmd_buf} = BMC Execute Command  ls -Al /proc/*/fd/  ignore_err=1</msg>
<status status="PASS" endtime="20170805 05:52:22.110" starttime="20170805 05:52:22.110"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls -Al /proc/*/fd/</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170805 05:52:22.172" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170805 05:52:22.173" level="INFO">Executing command 'ls -Al /proc/*/fd/'.</msg>
<msg timestamp="20170805 05:52:22.714" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170805 05:52:22.714" starttime="20170805 05:52:22.137"></status>
</kw>
<msg timestamp="20170805 05:52:22.714" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 05:52:22.715" level="INFO">${ret_values} = (u'/proc/1/fd/:\ntotal 0\nlrwx------    1 root     root            64 Aug  5 05:52 0 -&gt; /dev/null\nlrwx------    1 root     root            64 Aug  5 05:52 1 -&gt; /dev/null\nlr-x------    1 root     roo...</msg>
<status status="PASS" endtime="20170805 05:52:22.715" starttime="20170805 05:52:22.110"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170805 05:52:22.716" level="INFO">${stdout} = /proc/1/fd/:
total 0
lrwx------    1 root     root            64 Aug  5 05:52 0 -&gt; /dev/null
lrwx------    1 root     root            64 Aug  5 05:52 1 -&gt; /dev/null
lr-x------    1 root     root      ...</msg>
<status status="PASS" endtime="20170805 05:52:22.716" starttime="20170805 05:52:22.716"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170805 05:52:22.717" level="INFO">${stderr} = ls: /proc/1242/fd/3: cannot read link: No such file or directory
ls: /proc/self/fd/3: cannot read link: No such file or directory
ls: /proc/thread-self/fd/3: cannot read link: No such file or director...</msg>
<status status="PASS" endtime="20170805 05:52:22.717" starttime="20170805 05:52:22.717"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 05:52:22.725" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_proc_fd_active_list.txt"&gt;/home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_proc_fd_active_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 05:52:22.725" starttime="20170805 05:52:22.724"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:22.725" starttime="20170805 05:52:22.723"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:22.725" starttime="20170805 05:52:22.717"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:22.725" starttime="20170805 05:52:22.108"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:22.725" starttime="20170805 05:52:22.107"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170805 05:52:22.726" level="INFO">${logpath} = /home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_procinfo.txt</msg>
<status status="PASS" endtime="20170805 05:52:22.726" starttime="20170805 05:52:22.725"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170805 05:52:22.727" starttime="20170805 05:52:22.727"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170805 05:52:22.728" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/cpuinfo  ignore_err=1</msg>
<status status="PASS" endtime="20170805 05:52:22.728" starttime="20170805 05:52:22.728"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/cpuinfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170805 05:52:22.789" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170805 05:52:22.790" level="INFO">Executing command 'cat /proc/cpuinfo'.</msg>
<msg timestamp="20170805 05:52:22.847" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170805 05:52:22.847" starttime="20170805 05:52:22.753"></status>
</kw>
<msg timestamp="20170805 05:52:22.847" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 05:52:22.847" level="INFO">${ret_values} = (u'processor\t: 0\nmodel name\t: ARMv6-compatible processor rev 7 (v6l)\nBogoMIPS\t: 789.70\nFeatures\t: half thumb fastmult edsp java tls \nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t...</msg>
<status status="PASS" endtime="20170805 05:52:22.847" starttime="20170805 05:52:22.728"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170805 05:52:22.848" level="INFO">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<status status="PASS" endtime="20170805 05:52:22.848" starttime="20170805 05:52:22.848"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170805 05:52:22.849" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170805 05:52:22.849" starttime="20170805 05:52:22.848"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 05:52:22.856" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_procinfo.txt"&gt;/home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 05:52:22.856" starttime="20170805 05:52:22.855"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:22.856" starttime="20170805 05:52:22.855"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:22.856" starttime="20170805 05:52:22.849"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:22.856" starttime="20170805 05:52:22.726"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:22.856" starttime="20170805 05:52:22.725"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170805 05:52:22.857" level="INFO">${logpath} = /home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_meminfo.txt</msg>
<status status="PASS" endtime="20170805 05:52:22.857" starttime="20170805 05:52:22.857"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170805 05:52:22.859" starttime="20170805 05:52:22.858"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170805 05:52:22.863" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/meminfo  ignore_err=1</msg>
<status status="PASS" endtime="20170805 05:52:22.863" starttime="20170805 05:52:22.859"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/meminfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170805 05:52:22.924" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170805 05:52:22.925" level="INFO">Executing command 'cat /proc/meminfo'.</msg>
<msg timestamp="20170805 05:52:22.992" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170805 05:52:22.992" starttime="20170805 05:52:22.890"></status>
</kw>
<msg timestamp="20170805 05:52:22.992" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 05:52:22.992" level="INFO">${ret_values} = (u'MemTotal:         432268 kB\nMemFree:          181204 kB\nMemAvailable:     227196 kB\nBuffers:           11264 kB\nCached:           150264 kB\nSwapCached:            0 kB\nActive:           14605...</msg>
<status status="PASS" endtime="20170805 05:52:22.992" starttime="20170805 05:52:22.863"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170805 05:52:22.993" level="INFO">${stdout} = MemTotal:         432268 kB
MemFree:          181204 kB
MemAvailable:     227196 kB
Buffers:           11264 kB
Cached:           150264 kB
SwapCached:            0 kB
Active:           146056 kB
Inac...</msg>
<status status="PASS" endtime="20170805 05:52:22.993" starttime="20170805 05:52:22.992"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170805 05:52:22.993" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170805 05:52:22.993" starttime="20170805 05:52:22.993"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 05:52:23.002" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_meminfo.txt"&gt;/home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 05:52:23.002" starttime="20170805 05:52:23.002"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:23.003" starttime="20170805 05:52:23.001"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:23.003" starttime="20170805 05:52:22.994"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:23.003" starttime="20170805 05:52:22.857"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:23.003" starttime="20170805 05:52:22.856"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170805 05:52:23.004" level="INFO">${logpath} = /home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_proc_list.txt</msg>
<status status="PASS" endtime="20170805 05:52:23.004" starttime="20170805 05:52:23.003"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170805 05:52:23.005" starttime="20170805 05:52:23.005"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170805 05:52:23.006" level="INFO">${cmd_buf} = BMC Execute Command  top -n 1 -b  ignore_err=1</msg>
<status status="PASS" endtime="20170805 05:52:23.006" starttime="20170805 05:52:23.005"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>top -n 1 -b</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170805 05:52:23.067" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170805 05:52:23.067" level="INFO">Executing command 'top -n 1 -b'.</msg>
<msg timestamp="20170805 05:52:23.406" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170805 05:52:23.407" starttime="20170805 05:52:23.031"></status>
</kw>
<msg timestamp="20170805 05:52:23.407" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 05:52:23.407" level="INFO">${ret_values} = (u'Mem: 251064K used, 181204K free, 113128K shrd, 11264K buff, 150268K cached\nCPU:  13% usr   6% sys   0% nic  80% idle   0% io   0% irq   0% sirq\nLoad average: 2.33 2.01 0.87 1/152 1245\n  PID  PPI...</msg>
<status status="PASS" endtime="20170805 05:52:23.407" starttime="20170805 05:52:23.006"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170805 05:52:23.408" level="INFO">${stdout} = Mem: 251064K used, 181204K free, 113128K shrd, 11264K buff, 150268K cached
CPU:  13% usr   6% sys   0% nic  80% idle   0% io   0% irq   0% sirq
Load average: 2.33 2.01 0.87 1/152 1245
  PID  PPID USER...</msg>
<status status="PASS" endtime="20170805 05:52:23.408" starttime="20170805 05:52:23.407"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170805 05:52:23.408" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170805 05:52:23.408" starttime="20170805 05:52:23.408"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 05:52:23.416" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_proc_list.txt"&gt;/home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 05:52:23.416" starttime="20170805 05:52:23.415"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:23.416" starttime="20170805 05:52:23.414"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:23.416" starttime="20170805 05:52:23.409"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:23.416" starttime="20170805 05:52:23.004"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:23.416" starttime="20170805 05:52:23.003"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170805 05:52:23.417" level="INFO">${logpath} = /home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_dmesg.txt</msg>
<status status="PASS" endtime="20170805 05:52:23.417" starttime="20170805 05:52:23.417"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170805 05:52:23.418" starttime="20170805 05:52:23.418"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170805 05:52:23.419" level="INFO">${cmd_buf} = BMC Execute Command  dmesg  ignore_err=1</msg>
<status status="PASS" endtime="20170805 05:52:23.419" starttime="20170805 05:52:23.419"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>dmesg</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170805 05:52:23.479" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170805 05:52:23.480" level="INFO">Executing command 'dmesg'.</msg>
<msg timestamp="20170805 05:52:23.537" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170805 05:52:23.538" starttime="20170805 05:52:23.444"></status>
</kw>
<msg timestamp="20170805 05:52:23.538" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 05:52:23.538" level="INFO">${ret_values} = (u'[    0.000000] Booting Linux on physical CPU 0x0\n[    0.000000] Linux version 4.10.17-03afe5775baf06c3037d62cc2a15628079af38c9 (jenkins@hudson) (gcc version 6.2.0 (GCC) ) #1 Tue Aug 1 17:31:09 UTC...</msg>
<status status="PASS" endtime="20170805 05:52:23.538" starttime="20170805 05:52:23.420"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170805 05:52:23.539" level="INFO">${stdout} = [    0.000000] Booting Linux on physical CPU 0x0
[    0.000000] Linux version 4.10.17-03afe5775baf06c3037d62cc2a15628079af38c9 (jenkins@hudson) (gcc version 6.2.0 (GCC) ) #1 Tue Aug 1 17:31:09 UTC 201...</msg>
<status status="PASS" endtime="20170805 05:52:23.539" starttime="20170805 05:52:23.538"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170805 05:52:23.539" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170805 05:52:23.539" starttime="20170805 05:52:23.539"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 05:52:23.547" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_dmesg.txt"&gt;/home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 05:52:23.547" starttime="20170805 05:52:23.546"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:23.547" starttime="20170805 05:52:23.545"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:23.547" starttime="20170805 05:52:23.540"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:23.547" starttime="20170805 05:52:23.417"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:23.547" starttime="20170805 05:52:23.416"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170805 05:52:23.548" level="INFO">${logpath} = /home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_journalctl.txt</msg>
<status status="PASS" endtime="20170805 05:52:23.548" starttime="20170805 05:52:23.548"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170805 05:52:23.549" starttime="20170805 05:52:23.549"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170805 05:52:23.550" level="INFO">${cmd_buf} = BMC Execute Command  journalctl --no-pager  ignore_err=1</msg>
<status status="PASS" endtime="20170805 05:52:23.550" starttime="20170805 05:52:23.550"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl --no-pager</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170805 05:52:23.609" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170805 05:52:23.610" level="INFO">Executing command 'journalctl --no-pager'.</msg>
<msg timestamp="20170805 05:52:24.515" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170805 05:52:24.515" starttime="20170805 05:52:23.574"></status>
</kw>
<msg timestamp="20170805 05:52:24.515" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 05:52:24.517" level="INFO">${ret_values} = (u'-- Logs begin at Sat 2017-08-05 05:49:20 UTC, end at Sat 2017-08-05 05:52:27 UTC. --\nAug 05 05:49:20 witherspoon kernel: Booting Linux on physical CPU 0x0\nAug 05 05:49:20 witherspoon kernel: Linu...</msg>
<status status="PASS" endtime="20170805 05:52:24.517" starttime="20170805 05:52:23.550"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170805 05:52:24.518" level="INFO">${stdout} = -- Logs begin at Sat 2017-08-05 05:49:20 UTC, end at Sat 2017-08-05 05:52:27 UTC. --
Aug 05 05:49:20 witherspoon kernel: Booting Linux on physical CPU 0x0
Aug 05 05:49:20 witherspoon kernel: Linux ver...</msg>
<status status="PASS" endtime="20170805 05:52:24.518" starttime="20170805 05:52:24.517"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170805 05:52:24.518" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170805 05:52:24.518" starttime="20170805 05:52:24.518"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 05:52:24.526" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_journalctl.txt"&gt;/home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 05:52:24.526" starttime="20170805 05:52:24.525"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:24.526" starttime="20170805 05:52:24.524"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:24.526" starttime="20170805 05:52:24.519"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:24.526" starttime="20170805 05:52:23.548"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:24.526" starttime="20170805 05:52:23.547"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:24.526" starttime="20170805 05:52:22.107"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:24.526" starttime="20170805 05:52:22.106"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:24.527" starttime="20170805 05:52:22.106"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:24.527" starttime="20170805 05:52:22.106"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:24.527" starttime="20170805 05:52:22.105"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:24.527" starttime="20170805 05:52:22.086"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:24.527" starttime="20170805 05:52:22.083"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:24.527" starttime="20170805 05:52:22.083"></status>
</kw>
<kw type="foritem" name="${method} = ('SEL Log', 'Collect eSEL Log')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170805 05:52:24.529" starttime="20170805 05:52:24.529"></status>
</kw>
<msg timestamp="20170805 05:52:24.529" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 05:52:24.529" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170805 05:52:24.529" starttime="20170805 05:52:24.528"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170805 05:52:24.530" starttime="20170805 05:52:24.529"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170805 05:52:24.551" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170805 05:52:24.552" starttime="20170805 05:52:24.551"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 05:52:24.552" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 05:52:24.553" starttime="20170805 05:52:24.552"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170805 05:52:24.553" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170805 05:52:24.553" starttime="20170805 05:52:24.553"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 05:52:24.554" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170805 05:52:24.554" starttime="20170805 05:52:24.554"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170805 05:52:24.734" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170805 05:52:24.735" starttime="20170805 05:52:24.555"></status>
</kw>
<msg timestamp="20170805 05:52:24.735" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 05:52:24.735" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 05:52:24.735" starttime="20170805 05:52:24.554"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170805 05:52:24.736" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 05:52:24.736" starttime="20170805 05:52:24.735"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 05:52:24.736" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 05:52:24.736" starttime="20170805 05:52:24.736"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:24.737" starttime="20170805 05:52:24.550"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:24.737" starttime="20170805 05:52:24.549"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:24.737" starttime="20170805 05:52:24.549"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170805 05:52:24.737" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status status="PASS" endtime="20170805 05:52:24.737" starttime="20170805 05:52:24.737"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170805 05:52:24.738" starttime="20170805 05:52:24.738"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170805 05:52:24.854" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg timestamp="20170805 05:52:24.854" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 05:52:24.854" starttime="20170805 05:52:24.738"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170805 05:52:24.855" starttime="20170805 05:52:24.854"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170805 05:52:24.855" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170805 05:52:24.855" starttime="20170805 05:52:24.855"></status>
</kw>
<msg timestamp="20170805 05:52:24.855" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 05:52:24.855" starttime="20170805 05:52:24.548"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 05:52:24.856" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 05:52:24.857" starttime="20170805 05:52:24.856"></status>
</kw>
<msg timestamp="20170805 05:52:24.857" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170805 05:52:24.857" starttime="20170805 05:52:24.856"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<status status="PASS" endtime="20170805 05:52:24.857" starttime="20170805 05:52:24.857"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170805 05:52:24.858" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/1": {
      "AdditionalData": [], 
      "Id": 1, 
      "Message": "xyz.openbmc_project.Common.Error.InternalFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501912226589, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170805 05:52:24.858" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170805 05:52:24.858" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'/xyz/openbmc_project/logging/entry/1': {u'Resolved': 0, u'AdditionalData': [], u'Severity': u'xyz.openbmc_project.Logging.Entry.Level.Error', u'Ti...</msg>
<status status="PASS" endtime="20170805 05:52:24.858" starttime="20170805 05:52:24.858"></status>
</kw>
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${content['data']}</arg>
</arguments>
<assign>
<var>${esel_list}</var>
</assign>
<msg timestamp="20170805 05:52:24.859" level="INFO">${esel_list} = [u'/xyz/openbmc_project/logging/entry/1']</msg>
<status status="PASS" endtime="20170805 05:52:24.859" starttime="20170805 05:52:24.858"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>esel</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170805 05:52:24.859" level="INFO">${logpath} = /home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_esel</msg>
<status status="PASS" endtime="20170805 05:52:24.859" starttime="20170805 05:52:24.859"></status>
</kw>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${logpath}</arg>
</arguments>
<msg timestamp="20170805 05:52:24.860" html="yes" level="INFO">Created file '&lt;a href="file:///home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_esel"&gt;/home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/20170805055216439080_esel&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 05:52:24.860" starttime="20170805 05:52:24.860"></status>
</kw>
<kw type="for" name="${entry_path} IN [ @{esel_list} ]">
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/1">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status status="PASS" endtime="20170805 05:52:24.861" starttime="20170805 05:52:24.861"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170805 05:52:24.865" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170805 05:52:24.865" starttime="20170805 05:52:24.865"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 05:52:24.866" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 05:52:24.866" starttime="20170805 05:52:24.866"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170805 05:52:24.867" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170805 05:52:24.867" starttime="20170805 05:52:24.866"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 05:52:24.867" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170805 05:52:24.868" starttime="20170805 05:52:24.867"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170805 05:52:25.076" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170805 05:52:25.076" starttime="20170805 05:52:24.868"></status>
</kw>
<msg timestamp="20170805 05:52:25.076" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 05:52:25.076" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 05:52:25.076" starttime="20170805 05:52:24.868"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170805 05:52:25.077" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 05:52:25.077" starttime="20170805 05:52:25.077"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 05:52:25.078" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 05:52:25.078" starttime="20170805 05:52:25.077"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:25.078" starttime="20170805 05:52:24.864"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:25.078" starttime="20170805 05:52:24.864"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:25.078" starttime="20170805 05:52:24.863"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170805 05:52:25.079" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/1/attr/AdditionalData</msg>
<status status="PASS" endtime="20170805 05:52:25.079" starttime="20170805 05:52:25.078"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170805 05:52:25.079" starttime="20170805 05:52:25.079"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170805 05:52:25.192" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/1/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170805 05:52:25.192" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 05:52:25.192" starttime="20170805 05:52:25.080"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170805 05:52:25.193" starttime="20170805 05:52:25.192"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170805 05:52:25.193" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170805 05:52:25.193" starttime="20170805 05:52:25.193"></status>
</kw>
<msg timestamp="20170805 05:52:25.194" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 05:52:25.194" starttime="20170805 05:52:24.862"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 05:52:25.194" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 05:52:25.194" starttime="20170805 05:52:25.194"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170805 05:52:25.195" level="INFO">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170805 05:52:25.195" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170805 05:52:25.195" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': []}</msg>
<status status="PASS" endtime="20170805 05:52:25.195" starttime="20170805 05:52:25.195"></status>
</kw>
<msg timestamp="20170805 05:52:25.195" level="INFO">${esel_data} = []</msg>
<status status="PASS" endtime="20170805 05:52:25.195" starttime="20170805 05:52:24.862"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170805 05:52:25.196" level="INFO">Length is 0</msg>
<msg timestamp="20170805 05:52:25.196" level="INFO">${length} = 0</msg>
<status status="PASS" endtime="20170805 05:52:25.196" starttime="20170805 05:52:25.196"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg timestamp="20170805 05:52:25.197" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170805 05:52:25.197" starttime="20170805 05:52:25.196"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:25.197" starttime="20170805 05:52:24.861"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:25.197" starttime="20170805 05:52:24.860"></status>
</kw>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>which eSEL.pl</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20170805 05:52:25.201" level="INFO">Running command 'which eSEL.pl 2&gt;&amp;1'.</msg>
<msg timestamp="20170805 05:52:25.205" level="INFO">${out} = </msg>
<status status="PASS" endtime="20170805 05:52:25.205" starttime="20170805 05:52:25.197"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<msg timestamp="20170805 05:52:25.210" level="FAIL">'' does not contain 'eSEL.pl'</msg>
<status status="FAIL" endtime="20170805 05:52:25.210" starttime="20170805 05:52:25.209"></status>
</kw>
<msg timestamp="20170805 05:52:25.211" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170805 05:52:25.211" starttime="20170805 05:52:25.208"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg timestamp="20170805 05:52:25.212" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170805 05:52:25.212" starttime="20170805 05:52:25.211"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:25.212" starttime="20170805 05:52:24.548"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:25.212" starttime="20170805 05:52:24.530"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:25.213" starttime="20170805 05:52:24.527"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:25.213" starttime="20170805 05:52:24.527"></status>
</kw>
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170805 05:52:25.218" starttime="20170805 05:52:25.216"></status>
</kw>
<msg timestamp="20170805 05:52:25.218" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 05:52:25.218" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170805 05:52:25.218" starttime="20170805 05:52:25.215"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170805 05:52:25.219" starttime="20170805 05:52:25.218"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg timestamp="20170805 05:52:25.239" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170805 05:52:25.239" starttime="20170805 05:52:25.239"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:25.239" starttime="20170805 05:52:25.238"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:25.239" starttime="20170805 05:52:25.219"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:25.239" starttime="20170805 05:52:25.213"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:25.240" starttime="20170805 05:52:25.213"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:25.240" starttime="20170805 05:52:17.436"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:25.240" starttime="20170805 05:52:17.433"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:25.240" starttime="20170805 05:52:17.433"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:25.240" starttime="20170805 05:52:17.433"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>SSHLibrary.Close All Connections</arg>
</arguments>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20170805 05:52:25.285" starttime="20170805 05:52:25.249"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:25.285" starttime="20170805 05:52:25.240"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:25.285" starttime="20170805 05:52:17.432"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:25.286" starttime="20170805 05:52:13.372"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:25.286" starttime="20170805 05:52:13.372"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status status="PASS" endtime="20170805 05:52:25.287" starttime="20170805 05:52:25.287"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170805 05:52:25.289" level="INFO">${FFDC_DIR_PATH_STYLE} = </msg>
<status status="PASS" endtime="20170805 05:52:25.289" starttime="20170805 05:52:25.289"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170805 05:52:25.290" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20170805055216439080_UpdateBmc/20170805055216439080_InitiateCodeUpdateBMC/</msg>
<status status="PASS" endtime="20170805 05:52:25.290" starttime="20170805 05:52:25.289"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status status="PASS" endtime="20170805 05:52:25.290" starttime="20170805 05:52:25.290"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" endtime="20170805 05:52:25.291" starttime="20170805 05:52:25.291"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20170805 05:52:25.292" html="yes" level="INFO">Directory '&lt;a href="file:///home/fspcibld/logs"&gt;/home/fspcibld/logs&lt;/a&gt;' already exists.</msg>
<status status="PASS" endtime="20170805 05:52:25.292" starttime="20170805 05:52:25.291"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170805 05:52:25.293" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20170805 05:52:25.293" starttime="20170805 05:52:25.293"></status>
</kw>
<msg timestamp="20170805 05:52:25.293" level="INFO">${exist} = True</msg>
<status status="PASS" endtime="20170805 05:52:25.293" starttime="20170805 05:52:25.292"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status status="PASS" endtime="20170805 05:52:25.294" starttime="20170805 05:52:25.293"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" endtime="20170805 05:52:25.294" starttime="20170805 05:52:25.294"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170805 05:52:25.296" level="INFO">${cur_time} = 2017-08-05 05:52:25:295670</msg>
<status status="PASS" endtime="20170805 05:52:25.296" starttime="20170805 05:52:25.295"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170805 05:52:25.297" level="INFO">${cur_time} = 20170805055225295670</msg>
<status status="PASS" endtime="20170805 05:52:25.297" starttime="20170805 05:52:25.296"></status>
</kw>
<msg timestamp="20170805 05:52:25.297" level="INFO">${cur_time} = 20170805055225295670</msg>
<status status="PASS" endtime="20170805 05:52:25.297" starttime="20170805 05:52:25.295"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20170805 05:52:25.298" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 05:52:25.298" starttime="20170805 05:52:25.297"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:25.298" starttime="20170805 05:52:25.288"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:25.298" starttime="20170805 05:52:13.075"></status>
</kw>
<status status="PASS" endtime="20170805 05:52:25.298" starttime="20170805 05:52:13.066"></status>
</kw>
<doc>Initiate a code update on the BMC.</doc>
<tags>
<tag>Initiate_Code_Update_BMC</tag>
</tags>
<status status="FAIL" endtime="20170805 05:52:25.299" critical="yes" starttime="20170805 05:48:11.686">'Verify error: update: --no-flash --ignore-mount --no-save-files --no-restore-files --no-clean-saved-files
ERROR: Image image-bmc too big for mtd0.
' does not contain 'to apply'</status>
</test>
<doc>Trigger code update to a target BMC.
Execution Method :
python -m robot -v OPENBMC_HOST:&lt;hostname&gt;
-v FILE_PATH:&lt;path/*all.tar&gt; update_bmc.robot

Code update method BMC using REST
Update work flow sequence:
- User input BMC File existence check
- Ping Test and REST authentication
- Set Host Power host setting Policy to RESTORE_LAST_STATE
On reboot this policy would ensure the BMC comes
online and stays at HOST_POWERED_OFF state.
- Issue poweroff
- Prune archived journal logs
- Prepare for Update
- Wait for BMC to come online clean
- Wait for BMC_READY state
- Apply preserve BMC Network setting
- SCP image to BMC
- Activate the flash image
- Warm Reset BMC to activate code
- Wait for BMC to come online time out 30 minutes
- Version check post update
- Identify REST url post update</doc>
<status status="FAIL" endtime="20170805 05:52:25.300" starttime="20170805 05:48:10.500"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="0">Critical Tests</stat>
<stat fail="1" pass="0">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">Initiate_Code_Update_BMC</stat>
</tag>
<suite>
<stat fail="1" id="s1" name="Update Bmc" pass="0">Update Bmc</stat>
</suite>
</statistics>
<errors>
<msg timestamp="20170805 05:49:12.275" level="WARN">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff81431910&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=20.0)')': /login</msg>
<msg timestamp="20170805 05:49:32.497" level="WARN">Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff81431390&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=20.0)')': /login</msg>
</errors>
</robot>
