<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170805 04:54:13.421" generator="Robot 3.0.2 (Python 2.7.12 on linux2)">
<suite source="/home/fspcibld/openbmc-test-automation/extended/code_update/update_bmc.robot" id="s1" name="Update Bmc">
<test id="s1-t1" name="Initiate Code Update BMC">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${LAST_KNOWN_GOOD_VERSION}' != '${EMPTY}'</arg>
<arg>Run Keyword And Return Status</arg>
<arg>Validate BMC Version</arg>
<arg>${LAST_KNOWN_GOOD_VERSION}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<msg timestamp="20170805 04:54:14.538" level="INFO">${status} = None</msg>
<status status="PASS" endtime="20170805 04:54:14.538" starttime="20170805 04:54:14.538"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>Pass Execution</arg>
<arg>The BMC already has the requested build loaded so no further action will be taken.</arg>
</arguments>
<status status="PASS" endtime="20170805 04:54:14.539" starttime="20170805 04:54:14.539"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${FORCE_UPDATE} == ${0}</arg>
<arg>Prepare BMC For Update</arg>
</arguments>
<kw name="Prepare BMC For Update">
<doc>Prerequisite operation before code update.</doc>
<kw name="Check Boot Count And Time">
<doc>Check for unexpected reboots.</doc>
<kw name="Set BMC Reset Reference Time" library="utils">
<doc>Set current boot time as a reference and increment</doc>
<kw name="Get BMC Boot Time" library="utils">
<doc>Get boot time from /proc/stat.</doc>
<assign>
<var>${cur_btime}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170805 04:54:14.543" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170805 04:54:14.543" starttime="20170805 04:54:14.542"></status>
</kw>
<msg timestamp="20170805 04:54:14.543" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170805 04:54:14.543" starttime="20170805 04:54:14.542"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:54:14.544" starttime="20170805 04:54:14.544"></status>
</kw>
<status status="PASS" endtime="20170805 04:54:14.544" starttime="20170805 04:54:14.543"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170805 04:54:14.545" starttime="20170805 04:54:14.544"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170805 04:54:14.546" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170805 04:54:14.546" starttime="20170805 04:54:14.546"></status>
</kw>
<msg timestamp="20170805 04:54:14.546" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170805 04:54:14.546" starttime="20170805 04:54:14.545"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:54:14.548" starttime="20170805 04:54:14.548"></status>
</kw>
<status status="PASS" endtime="20170805 04:54:14.548" starttime="20170805 04:54:14.547"></status>
</kw>
<status status="PASS" endtime="20170805 04:54:14.548" starttime="20170805 04:54:14.546"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170805 04:54:14.549" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170805 04:54:16.335" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170805 04:54:16.336" starttime="20170805 04:54:14.549"></status>
</kw>
<status status="PASS" endtime="20170805 04:54:16.336" starttime="20170805 04:54:14.541"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>egrep '^btime ' /proc/stat | cut -f 2 -d ' '</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170805 04:54:16.337" level="INFO">Executing command 'egrep '^btime ' /proc/stat | cut -f 2 -d ' ''.</msg>
<msg timestamp="20170805 04:54:16.413" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170805 04:54:16.413" level="INFO">${output} = 1500635606</msg>
<msg timestamp="20170805 04:54:16.413" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170805 04:54:16.414" starttime="20170805 04:54:16.336"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170805 04:54:16.414" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170805 04:54:16.414" starttime="20170805 04:54:16.414"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${btime}</var>
</assign>
<msg timestamp="20170805 04:54:16.415" level="INFO">${btime} = 1500635606</msg>
<status status="PASS" endtime="20170805 04:54:16.415" starttime="20170805 04:54:16.415"></status>
</kw>
<msg timestamp="20170805 04:54:16.415" level="INFO">${cur_btime} = 1500635606</msg>
<status status="PASS" endtime="20170805 04:54:16.415" starttime="20170805 04:54:14.541"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${BOOT_TIME} == ${0} and ${BOOT_COUNT} == ${0}</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
<arg>ELSE IF</arg>
<arg>${cur_btime} &gt; ${BOOT_TIME}</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_COUNT}</arg>
<arg>${BOOT_COUNT + 1}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
</arguments>
<msg timestamp="20170805 04:54:16.417" level="INFO">${BOOT_TIME} = 1500635606</msg>
<status status="PASS" endtime="20170805 04:54:16.417" starttime="20170805 04:54:16.417"></status>
</kw>
<status status="PASS" endtime="20170805 04:54:16.417" starttime="20170805 04:54:16.416"></status>
</kw>
<status status="PASS" endtime="20170805 04:54:16.417" starttime="20170805 04:54:14.540"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\n Boot Count: ${BOOT_COUNT}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:54:16.418" starttime="20170805 04:54:16.417"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\n Boot Time: ${BOOT_TIME}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:54:16.423" starttime="20170805 04:54:16.422"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${BOOT_COUNT} &gt; ${MAX_BOOT_COUNT}</arg>
<arg>Log</arg>
<arg>Phantom Reboot!!! Unexpected reboot detected</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20170805 04:54:16.424" starttime="20170805 04:54:16.423"></status>
</kw>
<status status="PASS" endtime="20170805 04:54:16.424" starttime="20170805 04:54:14.540"></status>
</kw>
<kw name="Prune Journal Log" library="utils">
<doc>Prune archived journal logs.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170805 04:54:16.426" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170805 04:54:16.426" starttime="20170805 04:54:16.426"></status>
</kw>
<msg timestamp="20170805 04:54:16.426" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170805 04:54:16.427" starttime="20170805 04:54:16.426"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:54:16.428" starttime="20170805 04:54:16.427"></status>
</kw>
<status status="PASS" endtime="20170805 04:54:16.428" starttime="20170805 04:54:16.427"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170805 04:54:16.429" starttime="20170805 04:54:16.428"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170805 04:54:16.430" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170805 04:54:16.430" starttime="20170805 04:54:16.429"></status>
</kw>
<msg timestamp="20170805 04:54:16.430" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170805 04:54:16.430" starttime="20170805 04:54:16.429"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:54:16.432" starttime="20170805 04:54:16.431"></status>
</kw>
<status status="PASS" endtime="20170805 04:54:16.432" starttime="20170805 04:54:16.431"></status>
</kw>
<status status="PASS" endtime="20170805 04:54:16.432" starttime="20170805 04:54:16.430"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170805 04:54:16.433" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170805 04:54:18.078" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170805 04:54:18.078" starttime="20170805 04:54:16.432"></status>
</kw>
<status status="PASS" endtime="20170805 04:54:18.078" starttime="20170805 04:54:16.424"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>journalctl --vacuum-size=${vacuum_size}</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170805 04:54:18.079" level="INFO">Executing command 'journalctl --vacuum-size=1M'.</msg>
<msg timestamp="20170805 04:54:18.158" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170805 04:54:18.158" level="INFO">${output} = </msg>
<msg timestamp="20170805 04:54:18.158" level="INFO">${stderr} = Vacuuming done, freed 0B of archived journals from /run/log/journal/98da6a547f8141998b98e23f5894fd04.</msg>
<msg timestamp="20170805 04:54:18.158" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20170805 04:54:18.158" starttime="20170805 04:54:18.079"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${stderr}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:54:18.160" starttime="20170805 04:54:18.159"></status>
</kw>
<status status="PASS" endtime="20170805 04:54:18.160" starttime="20170805 04:54:16.424"></status>
</kw>
<kw name="Power Off Request" library="state_manager">
<doc>Select appropriate poweroff keyword.</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${OBMC_STATES_VERSION}' == '${0}'</arg>
<arg>Initiate Power Off</arg>
<arg>ELSE</arg>
<arg>Initiate Host PowerOff</arg>
</arguments>
<kw name="Initiate Host PowerOff" library="state_manager">
<doc>Initiate host power off.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170805 04:54:18.162" level="INFO">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status status="PASS" endtime="20170805 04:54:18.162" starttime="20170805 04:54:18.162"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170805 04:54:18.163" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status status="PASS" endtime="20170805 04:54:18.163" starttime="20170805 04:54:18.163"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170805 04:54:18.166" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170805 04:54:18.167" starttime="20170805 04:54:18.166"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 04:54:18.168" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 04:54:18.168" starttime="20170805 04:54:18.167"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170805 04:54:18.168" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170805 04:54:18.168" starttime="20170805 04:54:18.168"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 04:54:18.169" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170805 04:54:18.169" starttime="20170805 04:54:18.169"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170805 04:54:18.434" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170805 04:54:18.434" starttime="20170805 04:54:18.171"></status>
</kw>
<msg timestamp="20170805 04:54:18.434" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 04:54:18.434" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:54:18.434" starttime="20170805 04:54:18.170"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170805 04:54:18.435" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:54:18.435" starttime="20170805 04:54:18.434"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 04:54:18.435" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:54:18.436" starttime="20170805 04:54:18.435"></status>
</kw>
<status status="PASS" endtime="20170805 04:54:18.436" starttime="20170805 04:54:18.165"></status>
</kw>
<status status="PASS" endtime="20170805 04:54:18.436" starttime="20170805 04:54:18.165"></status>
</kw>
<status status="PASS" endtime="20170805 04:54:18.436" starttime="20170805 04:54:18.164"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170805 04:54:18.436" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status status="PASS" endtime="20170805 04:54:18.437" starttime="20170805 04:54:18.436"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 04:54:18.437" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 04:54:18.437" starttime="20170805 04:54:18.437"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:54:18.438" starttime="20170805 04:54:18.437"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170805 04:54:18.439" level="INFO">${msg} = URI:https://9.41.166.169/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Ty...</msg>
<status status="PASS" endtime="20170805 04:54:18.439" starttime="20170805 04:54:18.439"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170805 04:54:18.441" level="INFO">URI:https://9.41.166.169/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170805 04:54:18.441" starttime="20170805 04:54:18.440"></status>
</kw>
<status status="PASS" endtime="20170805 04:54:18.441" starttime="20170805 04:54:18.440"></status>
</kw>
<status status="PASS" endtime="20170805 04:54:18.441" starttime="20170805 04:54:18.438"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170805 04:54:18.698" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170805 04:54:18.698" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:54:18.698" starttime="20170805 04:54:18.441"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170805 04:54:18.700" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170805 04:54:18.700" starttime="20170805 04:54:18.699"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170805 04:54:18.701" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170805 04:54:18.701" starttime="20170805 04:54:18.700"></status>
</kw>
<status status="PASS" endtime="20170805 04:54:18.701" starttime="20170805 04:54:18.700"></status>
</kw>
<status status="PASS" endtime="20170805 04:54:18.701" starttime="20170805 04:54:18.699"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170805 04:54:18.701" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170805 04:54:18.702" starttime="20170805 04:54:18.701"></status>
</kw>
<msg timestamp="20170805 04:54:18.703" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:54:18.703" starttime="20170805 04:54:18.164"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 04:54:18.704" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:54:18.704" starttime="20170805 04:54:18.703"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170805 04:54:18.704" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170805 04:54:18.704" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170805 04:54:18.704" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170805 04:54:18.704" starttime="20170805 04:54:18.704"></status>
</kw>
<status status="PASS" endtime="20170805 04:54:18.705" starttime="20170805 04:54:18.162"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status status="PASS" endtime="20170805 04:54:18.705" starttime="20170805 04:54:18.705"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>6 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170805 04:54:18.711" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170805 04:54:18.711" starttime="20170805 04:54:18.710"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 04:54:18.712" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 04:54:18.712" starttime="20170805 04:54:18.711"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170805 04:54:18.713" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170805 04:54:18.713" starttime="20170805 04:54:18.712"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 04:54:18.713" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170805 04:54:18.713" starttime="20170805 04:54:18.713"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170805 04:54:19.989" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170805 04:54:19.989" starttime="20170805 04:54:18.714"></status>
</kw>
<msg timestamp="20170805 04:54:19.989" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 04:54:19.990" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:54:19.990" starttime="20170805 04:54:18.714"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170805 04:54:19.990" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:54:19.991" starttime="20170805 04:54:19.990"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 04:54:19.991" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:54:19.991" starttime="20170805 04:54:19.991"></status>
</kw>
<status status="PASS" endtime="20170805 04:54:19.991" starttime="20170805 04:54:18.710"></status>
</kw>
<status status="PASS" endtime="20170805 04:54:19.991" starttime="20170805 04:54:18.709"></status>
</kw>
<status status="PASS" endtime="20170805 04:54:19.992" starttime="20170805 04:54:18.709"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170805 04:54:19.992" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170805 04:54:19.992" starttime="20170805 04:54:19.992"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:54:19.993" starttime="20170805 04:54:19.993"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170805 04:54:24.283" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170805 04:54:24.283" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:54:24.283" starttime="20170805 04:54:19.993"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:54:24.284" starttime="20170805 04:54:24.284"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170805 04:54:24.285" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170805 04:54:24.285" starttime="20170805 04:54:24.284"></status>
</kw>
<msg timestamp="20170805 04:54:24.285" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:54:24.285" starttime="20170805 04:54:18.708"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 04:54:24.286" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:54:24.286" starttime="20170805 04:54:24.285"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170805 04:54:24.286" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170805 04:54:24.286" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170805 04:54:24.287" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status status="PASS" endtime="20170805 04:54:24.287" starttime="20170805 04:54:24.286"></status>
</kw>
<msg timestamp="20170805 04:54:24.287" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170805 04:54:24.287" starttime="20170805 04:54:18.707"></status>
</kw>
<msg timestamp="20170805 04:54:24.287" level="INFO">${power_state} = Off</msg>
<status status="PASS" endtime="20170805 04:54:24.287" starttime="20170805 04:54:18.707"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:54:24.288" starttime="20170805 04:54:24.288"></status>
</kw>
<status status="PASS" endtime="20170805 04:54:24.288" starttime="20170805 04:54:18.707"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170805 04:54:24.292" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170805 04:54:24.293" starttime="20170805 04:54:24.291"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 04:54:24.293" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 04:54:24.293" starttime="20170805 04:54:24.293"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170805 04:54:24.294" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170805 04:54:24.294" starttime="20170805 04:54:24.293"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 04:54:24.295" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170805 04:54:24.295" starttime="20170805 04:54:24.294"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170805 04:54:24.754" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170805 04:54:24.754" starttime="20170805 04:54:24.295"></status>
</kw>
<msg timestamp="20170805 04:54:24.754" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 04:54:24.754" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:54:24.754" starttime="20170805 04:54:24.295"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170805 04:54:24.755" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:54:24.755" starttime="20170805 04:54:24.755"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 04:54:24.756" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:54:24.756" starttime="20170805 04:54:24.755"></status>
</kw>
<status status="PASS" endtime="20170805 04:54:24.756" starttime="20170805 04:54:24.291"></status>
</kw>
<status status="PASS" endtime="20170805 04:54:24.756" starttime="20170805 04:54:24.290"></status>
</kw>
<status status="PASS" endtime="20170805 04:54:24.756" starttime="20170805 04:54:24.290"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170805 04:54:24.757" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170805 04:54:24.757" starttime="20170805 04:54:24.756"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:54:24.757" starttime="20170805 04:54:24.757"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170805 04:54:25.344" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170805 04:54:25.345" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:54:25.345" starttime="20170805 04:54:24.758"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:54:25.345" starttime="20170805 04:54:25.345"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170805 04:54:25.346" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170805 04:54:25.346" starttime="20170805 04:54:25.346"></status>
</kw>
<msg timestamp="20170805 04:54:25.346" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:54:25.346" starttime="20170805 04:54:24.289"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 04:54:25.347" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:54:25.347" starttime="20170805 04:54:25.347"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170805 04:54:25.348" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170805 04:54:25.348" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170805 04:54:25.348" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170805 04:54:25.348" starttime="20170805 04:54:25.347"></status>
</kw>
<msg timestamp="20170805 04:54:25.348" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170805 04:54:25.348" starttime="20170805 04:54:24.289"></status>
</kw>
<msg timestamp="20170805 04:54:25.348" level="INFO">${host_state} = Off</msg>
<status status="PASS" endtime="20170805 04:54:25.348" starttime="20170805 04:54:24.288"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:54:25.349" starttime="20170805 04:54:25.349"></status>
</kw>
<status status="PASS" endtime="20170805 04:54:25.349" starttime="20170805 04:54:18.706"></status>
</kw>
<status status="PASS" endtime="20170805 04:54:25.349" starttime="20170805 04:54:18.706"></status>
</kw>
<status status="PASS" endtime="20170805 04:54:25.349" starttime="20170805 04:54:18.161"></status>
</kw>
<status status="PASS" endtime="20170805 04:54:25.349" starttime="20170805 04:54:18.161"></status>
</kw>
<status status="PASS" endtime="20170805 04:54:25.349" starttime="20170805 04:54:18.160"></status>
</kw>
<kw name="Set Policy Setting" library="code_update_utils">
<doc>Set the given test policy</doc>
<arguments>
<arg>RESTORE_LAST_STATE</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${policy}</arg>
</arguments>
<assign>
<var>${valueDict}</var>
</assign>
<msg timestamp="20170805 04:54:25.351" level="INFO">${valueDict} = {u'data': u'RESTORE_LAST_STATE'}</msg>
<status status="PASS" endtime="20170805 04:54:25.351" starttime="20170805 04:54:25.350"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_SETTING}</arg>
<arg>power_policy</arg>
<arg>data=${valueDict}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170805 04:54:25.352" level="INFO">${base_uri} = /org/openbmc/settings/host0</msg>
<status status="PASS" endtime="20170805 04:54:25.352" starttime="20170805 04:54:25.351"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170805 04:54:25.355" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170805 04:54:25.355" starttime="20170805 04:54:25.354"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 04:54:25.356" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 04:54:25.356" starttime="20170805 04:54:25.356"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170805 04:54:25.357" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170805 04:54:25.357" starttime="20170805 04:54:25.356"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 04:54:25.357" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170805 04:54:25.357" starttime="20170805 04:54:25.357"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170805 04:54:25.555" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170805 04:54:25.555" starttime="20170805 04:54:25.358"></status>
</kw>
<msg timestamp="20170805 04:54:25.556" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 04:54:25.556" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:54:25.556" starttime="20170805 04:54:25.358"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170805 04:54:25.556" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:54:25.556" starttime="20170805 04:54:25.556"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 04:54:25.557" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:54:25.557" starttime="20170805 04:54:25.557"></status>
</kw>
<status status="PASS" endtime="20170805 04:54:25.557" starttime="20170805 04:54:25.354"></status>
</kw>
<status status="PASS" endtime="20170805 04:54:25.557" starttime="20170805 04:54:25.353"></status>
</kw>
<status status="PASS" endtime="20170805 04:54:25.557" starttime="20170805 04:54:25.353"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170805 04:54:25.558" level="INFO">${base_uri} = /org/openbmc/settings/host0/attr/power_policy</msg>
<status status="PASS" endtime="20170805 04:54:25.558" starttime="20170805 04:54:25.558"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 04:54:25.559" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 04:54:25.559" starttime="20170805 04:54:25.558"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:54:25.559" starttime="20170805 04:54:25.559"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170805 04:54:25.561" level="INFO">${msg} = URI:https://9.41.166.169/org/openbmc/settings/host0/attr/power_policy, method:Put, args:{u'data': {u'data': u'RESTORE_LAST_STATE'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170805 04:54:25.561" starttime="20170805 04:54:25.560"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170805 04:54:25.562" level="INFO">URI:https://9.41.166.169/org/openbmc/settings/host0/attr/power_policy, method:Put, args:{u'data': {u'data': u'RESTORE_LAST_STATE'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170805 04:54:25.562" starttime="20170805 04:54:25.562"></status>
</kw>
<status status="PASS" endtime="20170805 04:54:25.562" starttime="20170805 04:54:25.561"></status>
</kw>
<status status="PASS" endtime="20170805 04:54:25.562" starttime="20170805 04:54:25.560"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170805 04:54:25.758" level="INFO">Put Request using : alias=openbmc, uri=/org/openbmc/settings/host0/attr/power_policy, data={"data": "RESTORE_LAST_STATE"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170805 04:54:25.758" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:54:25.758" starttime="20170805 04:54:25.563"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170805 04:54:25.759" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170805 04:54:25.759" starttime="20170805 04:54:25.759"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170805 04:54:25.760" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170805 04:54:25.761" starttime="20170805 04:54:25.760"></status>
</kw>
<status status="PASS" endtime="20170805 04:54:25.761" starttime="20170805 04:54:25.760"></status>
</kw>
<status status="PASS" endtime="20170805 04:54:25.761" starttime="20170805 04:54:25.758"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170805 04:54:25.762" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170805 04:54:25.762" starttime="20170805 04:54:25.762"></status>
</kw>
<msg timestamp="20170805 04:54:25.762" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:54:25.762" starttime="20170805 04:54:25.352"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 04:54:25.763" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:54:25.763" starttime="20170805 04:54:25.763"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170805 04:54:25.764" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170805 04:54:25.764" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170805 04:54:25.764" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170805 04:54:25.764" starttime="20170805 04:54:25.763"></status>
</kw>
<status status="PASS" endtime="20170805 04:54:25.764" starttime="20170805 04:54:25.351"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_SETTING}</arg>
<arg>power_policy</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170805 04:54:25.772" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170805 04:54:25.772" starttime="20170805 04:54:25.771"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 04:54:25.773" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 04:54:25.773" starttime="20170805 04:54:25.773"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170805 04:54:25.774" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170805 04:54:25.774" starttime="20170805 04:54:25.774"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 04:54:25.775" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170805 04:54:25.775" starttime="20170805 04:54:25.775"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170805 04:54:25.963" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170805 04:54:25.963" starttime="20170805 04:54:25.776"></status>
</kw>
<msg timestamp="20170805 04:54:25.964" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 04:54:25.964" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:54:25.964" starttime="20170805 04:54:25.776"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170805 04:54:25.964" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:54:25.964" starttime="20170805 04:54:25.964"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 04:54:25.965" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:54:25.965" starttime="20170805 04:54:25.965"></status>
</kw>
<status status="PASS" endtime="20170805 04:54:25.965" starttime="20170805 04:54:25.770"></status>
</kw>
<status status="PASS" endtime="20170805 04:54:25.966" starttime="20170805 04:54:25.770"></status>
</kw>
<status status="PASS" endtime="20170805 04:54:25.966" starttime="20170805 04:54:25.766"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170805 04:54:25.966" level="INFO">${base_uri} = /org/openbmc/settings/host0/attr/power_policy</msg>
<status status="PASS" endtime="20170805 04:54:25.966" starttime="20170805 04:54:25.966"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:54:25.967" starttime="20170805 04:54:25.967"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170805 04:54:26.052" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/settings/host0/attr/power_policy, headers=None json=None</msg>
<msg timestamp="20170805 04:54:26.052" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:54:26.052" starttime="20170805 04:54:25.967"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:54:26.053" starttime="20170805 04:54:26.052"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170805 04:54:26.053" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170805 04:54:26.053" starttime="20170805 04:54:26.053"></status>
</kw>
<msg timestamp="20170805 04:54:26.053" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:54:26.053" starttime="20170805 04:54:25.765"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 04:54:26.054" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:54:26.054" starttime="20170805 04:54:26.054"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170805 04:54:26.055" level="INFO">To JSON using : content={
  "data": "RESTORE_LAST_STATE", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170805 04:54:26.055" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170805 04:54:26.055" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'RESTORE_LAST_STATE'}</msg>
<status status="PASS" endtime="20170805 04:54:26.055" starttime="20170805 04:54:26.054"></status>
</kw>
<msg timestamp="20170805 04:54:26.055" level="INFO">${currentPolicy} = RESTORE_LAST_STATE</msg>
<status status="PASS" endtime="20170805 04:54:26.055" starttime="20170805 04:54:25.764"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${currentPolicy}</arg>
<arg>${policy}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:54:26.056" starttime="20170805 04:54:26.055"></status>
</kw>
<status status="PASS" endtime="20170805 04:54:26.056" starttime="20170805 04:54:25.350"></status>
</kw>
<kw name="Prepare For Update" library="code_update_utils">
<doc>Switch to update mode in progress. This method calls</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 04:54:26.057" level="INFO">${data} = {u'data': []}</msg>
<status status="PASS" endtime="20170805 04:54:26.057" starttime="20170805 04:54:26.057"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${BMC_PREP_METHOD}</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170805 04:54:26.060" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170805 04:54:26.060" starttime="20170805 04:54:26.060"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 04:54:26.061" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 04:54:26.061" starttime="20170805 04:54:26.061"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170805 04:54:26.062" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170805 04:54:26.062" starttime="20170805 04:54:26.061"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 04:54:26.062" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170805 04:54:26.062" starttime="20170805 04:54:26.062"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170805 04:54:26.241" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170805 04:54:26.241" starttime="20170805 04:54:26.063"></status>
</kw>
<msg timestamp="20170805 04:54:26.241" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 04:54:26.241" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:54:26.241" starttime="20170805 04:54:26.063"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170805 04:54:26.242" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:54:26.242" starttime="20170805 04:54:26.242"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 04:54:26.243" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:54:26.243" starttime="20170805 04:54:26.242"></status>
</kw>
<status status="PASS" endtime="20170805 04:54:26.243" starttime="20170805 04:54:26.059"></status>
</kw>
<status status="PASS" endtime="20170805 04:54:26.243" starttime="20170805 04:54:26.058"></status>
</kw>
<status status="PASS" endtime="20170805 04:54:26.243" starttime="20170805 04:54:26.058"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170805 04:54:26.244" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc/action/PrepareForUpdate</msg>
<status status="PASS" endtime="20170805 04:54:26.244" starttime="20170805 04:54:26.243"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 04:54:26.244" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 04:54:26.244" starttime="20170805 04:54:26.244"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:54:26.245" starttime="20170805 04:54:26.245"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:54:26.246" starttime="20170805 04:54:26.245"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170805 04:54:26.689" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc/action/PrepareForUpdate, data={"data": []}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20170805 04:54:26.689" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:54:26.689" starttime="20170805 04:54:26.246"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:54:26.690" starttime="20170805 04:54:26.689"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170805 04:54:26.690" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170805 04:54:26.690" starttime="20170805 04:54:26.690"></status>
</kw>
<msg timestamp="20170805 04:54:26.691" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:54:26.691" starttime="20170805 04:54:26.057"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 04:54:26.691" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:54:26.691" starttime="20170805 04:54:26.691"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10s</arg>
</arguments>
<msg timestamp="20170805 04:54:36.692" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20170805 04:54:36.692" starttime="20170805 04:54:26.692"></status>
</kw>
<status status="PASS" endtime="20170805 04:54:36.693" starttime="20170805 04:54:26.056"></status>
</kw>
<kw name="Check If BMC is Up" library="utils">
<doc>Wait for Host to be online. Checks every X seconds</doc>
<arguments>
<arg>20 min</arg>
<arg>10 sec</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${max_timeout}</arg>
<arg>${interval}</arg>
<arg>Verify Ping and REST Authentication</arg>
</arguments>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170805 04:54:36.696" level="INFO">Length is 12</msg>
<status status="PASS" endtime="20170805 04:54:36.696" starttime="20170805 04:54:36.695"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170805 04:54:36.701" level="INFO">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg timestamp="20170805 04:54:39.720" level="INFO">${RC} = 0</msg>
<msg timestamp="20170805 04:54:39.720" level="INFO">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=8.44 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=2.98 ms
64 bytes from 9.41.166.169:...</msg>
<status status="PASS" endtime="20170805 04:54:39.720" starttime="20170805 04:54:36.696"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170805 04:54:39.724" level="INFO">RC: 0
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=8.44 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=2.98 ms
64 bytes from 9.41.166.169: icmp_seq=3 ttl=63 time=9.74 ms
64 bytes from 9.41.166.169: icmp_seq=4 ttl=63 time=12.3 ms

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3004ms
rtt min/avg/max/mdev = 2.983/8.372/12.321/3.411 ms</msg>
<status status="PASS" endtime="20170805 04:54:39.724" starttime="20170805 04:54:39.723"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:54:39.726" starttime="20170805 04:54:39.724"></status>
</kw>
<status status="PASS" endtime="20170805 04:54:39.726" starttime="20170805 04:54:36.695"></status>
</kw>
<msg timestamp="20170805 04:54:39.727" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20170805 04:54:39.727" starttime="20170805 04:54:36.695"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20170805 04:54:39.727" starttime="20170805 04:54:39.727"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170805 04:54:39.730" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170805 04:54:39.731" starttime="20170805 04:54:39.730"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 04:54:39.732" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 04:54:39.732" starttime="20170805 04:54:39.731"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170805 04:54:39.732" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170805 04:54:39.732" starttime="20170805 04:54:39.732"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 04:54:39.733" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170805 04:54:39.733" starttime="20170805 04:54:39.733"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170805 04:54:39.749" level="WARN">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff76113590&gt;: Failed to establish a new connection: [Errno 111] Connection refused',)': /login</msg>
<msg timestamp="20170805 04:54:39.958" level="WARN">Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff761133d0&gt;: Failed to establish a new connection: [Errno 111] Connection refused',)': /login</msg>
<msg timestamp="20170805 04:54:40.367" level="WARN">Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff76113a10&gt;: Failed to establish a new connection: [Errno 111] Connection refused',)': /login</msg>
<msg timestamp="20170805 04:54:40.381" level="FAIL">ConnectionError: HTTPSConnectionPool(host='9.41.166.169', port=443): Max retries exceeded with url: /login (Caused by NewConnectionError('&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff76113e50&gt;: Failed to establish a new connection: [Errno 111] Connection refused',))</msg>
<status status="FAIL" endtime="20170805 04:54:40.381" starttime="20170805 04:54:39.734"></status>
</kw>
<msg timestamp="20170805 04:54:40.381" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170805 04:54:40.382" level="INFO">${resp} = ConnectionError: HTTPSConnectionPool(host='9.41.166.169', port=443): Max retries exceeded with url: /login (Caused by NewConnectionError('&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff76...</msg>
<status status="PASS" endtime="20170805 04:54:40.382" starttime="20170805 04:54:39.733"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170805 04:54:40.382" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170805 04:54:40.383" level="FAIL">ConnectionError: HTTPSConnectionPool(host='9.41.166.169', port=443): Max retries exceeded with url: /login (Caused by NewConnectionError('&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff76113e50&gt;: Failed to establish a new connection: [Errno 111] Connection refused',)): FAIL != PASS</msg>
<status status="FAIL" endtime="20170805 04:54:40.383" starttime="20170805 04:54:40.382"></status>
</kw>
<status status="FAIL" endtime="20170805 04:54:40.383" starttime="20170805 04:54:39.729"></status>
</kw>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170805 04:55:00.385" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170805 04:55:00.385" starttime="20170805 04:55:00.384"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 04:55:00.386" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 04:55:00.386" starttime="20170805 04:55:00.385"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170805 04:55:00.386" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170805 04:55:00.387" starttime="20170805 04:55:00.386"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 04:55:00.387" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170805 04:55:00.387" starttime="20170805 04:55:00.387"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170805 04:55:20.410" level="WARN">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff7692f310&gt;, 'Connection to 9.41.166.169 timed out. (connect timeout=20.0)')': /login</msg>
<msg timestamp="20170805 04:55:40.632" level="WARN">Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff76113990&gt;, 'Connection to 9.41.166.169 timed out. (connect timeout=20.0)')': /login</msg>
<msg timestamp="20170805 04:56:01.054" level="WARN">Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff760a4690&gt;, 'Connection to 9.41.166.169 timed out. (connect timeout=20.0)')': /login</msg>
<msg timestamp="20170805 04:56:21.077" level="FAIL">ConnectTimeout: HTTPSConnectionPool(host='9.41.166.169', port=443): Max retries exceeded with url: /login (Caused by ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff760a4090&gt;, 'Connection to 9.41.166.169 timed out. (connect timeout=20.0)'))</msg>
<status status="FAIL" endtime="20170805 04:56:21.077" starttime="20170805 04:55:00.388"></status>
</kw>
<msg timestamp="20170805 04:56:21.077" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170805 04:56:21.077" level="INFO">${resp} = ConnectTimeout: HTTPSConnectionPool(host='9.41.166.169', port=443): Max retries exceeded with url: /login (Caused by ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff760...</msg>
<status status="PASS" endtime="20170805 04:56:21.077" starttime="20170805 04:55:00.388"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170805 04:56:21.078" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170805 04:56:21.078" level="FAIL">ConnectTimeout: HTTPSConnectionPool(host='9.41.166.169', port=443): Max retries exceeded with url: /login (Caused by ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff760a4090&gt;, 'Connection to 9.41.166.169 timed out. (connect timeout=20.0)')): FAIL != PASS</msg>
<status status="FAIL" endtime="20170805 04:56:21.078" starttime="20170805 04:56:21.078"></status>
</kw>
<status status="FAIL" endtime="20170805 04:56:21.078" starttime="20170805 04:55:00.383"></status>
</kw>
<msg timestamp="20170805 04:56:21.079" level="FAIL">Keyword 'Post Login Request' failed after retrying for 40 seconds. The last error was: ConnectTimeout: HTTPSConnectionPool(host='9.41.166.169', port=443): Max retries exceeded with url: /login (Caused by ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff760a4090&gt;, 'Connection to 9.41.166.169 timed out. (connect timeout=20.0)')): FAIL != PASS</msg>
<status status="FAIL" endtime="20170805 04:56:21.079" starttime="20170805 04:54:39.729"></status>
</kw>
<status status="FAIL" endtime="20170805 04:56:21.079" starttime="20170805 04:54:39.728"></status>
</kw>
<msg timestamp="20170805 04:56:21.079" level="INFO">${l_rest} = False</msg>
<status status="PASS" endtime="20170805 04:56:21.079" starttime="20170805 04:54:39.728"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<msg timestamp="20170805 04:56:21.080" level="FAIL">REST Authentication Failed</msg>
<status status="FAIL" endtime="20170805 04:56:21.080" starttime="20170805 04:56:21.080"></status>
</kw>
<status status="FAIL" endtime="20170805 04:56:21.080" starttime="20170805 04:56:21.079"></status>
</kw>
<status status="FAIL" endtime="20170805 04:56:21.080" starttime="20170805 04:54:36.694"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170805 04:56:31.083" level="INFO">Length is 12</msg>
<status status="PASS" endtime="20170805 04:56:31.083" starttime="20170805 04:56:31.083"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170805 04:56:31.087" level="INFO">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg timestamp="20170805 04:56:44.122" level="INFO">${RC} = 1</msg>
<msg timestamp="20170805 04:56:44.122" level="INFO">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3025ms
</msg>
<status status="PASS" endtime="20170805 04:56:44.123" starttime="20170805 04:56:31.084"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170805 04:56:44.142" level="INFO">RC: 1
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3025ms
</msg>
<status status="PASS" endtime="20170805 04:56:44.142" starttime="20170805 04:56:44.138"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<msg timestamp="20170805 04:56:44.144" level="FAIL">1 != 0</msg>
<status status="FAIL" endtime="20170805 04:56:44.144" starttime="20170805 04:56:44.143"></status>
</kw>
<status status="FAIL" endtime="20170805 04:56:44.144" starttime="20170805 04:56:31.082"></status>
</kw>
<msg timestamp="20170805 04:56:44.146" level="INFO">${l_ping} = False</msg>
<status status="PASS" endtime="20170805 04:56:44.146" starttime="20170805 04:56:31.082"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=Ping Failed</arg>
</arguments>
<msg timestamp="20170805 04:56:44.148" level="FAIL">Ping Failed</msg>
<status status="FAIL" endtime="20170805 04:56:44.148" starttime="20170805 04:56:44.148"></status>
</kw>
<status status="FAIL" endtime="20170805 04:56:44.148" starttime="20170805 04:56:44.146"></status>
</kw>
<status status="FAIL" endtime="20170805 04:56:44.149" starttime="20170805 04:56:31.081"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170805 04:56:54.154" level="INFO">Length is 12</msg>
<status status="PASS" endtime="20170805 04:56:54.154" starttime="20170805 04:56:54.153"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170805 04:56:54.167" level="INFO">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg timestamp="20170805 04:57:07.169" level="INFO">${RC} = 1</msg>
<msg timestamp="20170805 04:57:07.169" level="INFO">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 2999ms
</msg>
<status status="PASS" endtime="20170805 04:57:07.169" starttime="20170805 04:56:54.155"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170805 04:57:07.187" level="INFO">RC: 1
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 2999ms
</msg>
<status status="PASS" endtime="20170805 04:57:07.187" starttime="20170805 04:57:07.184"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<msg timestamp="20170805 04:57:07.190" level="FAIL">1 != 0</msg>
<status status="FAIL" endtime="20170805 04:57:07.190" starttime="20170805 04:57:07.189"></status>
</kw>
<status status="FAIL" endtime="20170805 04:57:07.190" starttime="20170805 04:56:54.152"></status>
</kw>
<msg timestamp="20170805 04:57:07.191" level="INFO">${l_ping} = False</msg>
<status status="PASS" endtime="20170805 04:57:07.191" starttime="20170805 04:56:54.152"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=Ping Failed</arg>
</arguments>
<msg timestamp="20170805 04:57:07.193" level="FAIL">Ping Failed</msg>
<status status="FAIL" endtime="20170805 04:57:07.193" starttime="20170805 04:57:07.193"></status>
</kw>
<status status="FAIL" endtime="20170805 04:57:07.193" starttime="20170805 04:57:07.192"></status>
</kw>
<status status="FAIL" endtime="20170805 04:57:07.194" starttime="20170805 04:56:54.150"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170805 04:57:17.197" level="INFO">Length is 12</msg>
<status status="PASS" endtime="20170805 04:57:17.197" starttime="20170805 04:57:17.196"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170805 04:57:17.205" level="INFO">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg timestamp="20170805 04:57:30.237" level="INFO">${RC} = 1</msg>
<msg timestamp="20170805 04:57:30.237" level="INFO">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3024ms
</msg>
<status status="PASS" endtime="20170805 04:57:30.238" starttime="20170805 04:57:17.197"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170805 04:57:30.256" level="INFO">RC: 1
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3024ms
</msg>
<status status="PASS" endtime="20170805 04:57:30.256" starttime="20170805 04:57:30.253"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<msg timestamp="20170805 04:57:30.257" level="FAIL">1 != 0</msg>
<status status="FAIL" endtime="20170805 04:57:30.258" starttime="20170805 04:57:30.256"></status>
</kw>
<status status="FAIL" endtime="20170805 04:57:30.258" starttime="20170805 04:57:17.196"></status>
</kw>
<msg timestamp="20170805 04:57:30.259" level="INFO">${l_ping} = False</msg>
<status status="PASS" endtime="20170805 04:57:30.259" starttime="20170805 04:57:17.195"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=Ping Failed</arg>
</arguments>
<msg timestamp="20170805 04:57:30.266" level="FAIL">Ping Failed</msg>
<status status="FAIL" endtime="20170805 04:57:30.266" starttime="20170805 04:57:30.261"></status>
</kw>
<status status="FAIL" endtime="20170805 04:57:30.266" starttime="20170805 04:57:30.261"></status>
</kw>
<status status="FAIL" endtime="20170805 04:57:30.266" starttime="20170805 04:57:17.194"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170805 04:57:40.269" level="INFO">Length is 12</msg>
<status status="PASS" endtime="20170805 04:57:40.269" starttime="20170805 04:57:40.269"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170805 04:57:40.273" level="INFO">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg timestamp="20170805 04:57:53.301" level="INFO">${RC} = 1</msg>
<msg timestamp="20170805 04:57:53.301" level="INFO">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3024ms
</msg>
<status status="PASS" endtime="20170805 04:57:53.301" starttime="20170805 04:57:40.270"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170805 04:57:53.305" level="INFO">RC: 1
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3024ms
</msg>
<status status="PASS" endtime="20170805 04:57:53.305" starttime="20170805 04:57:53.304"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<msg timestamp="20170805 04:57:53.306" level="FAIL">1 != 0</msg>
<status status="FAIL" endtime="20170805 04:57:53.306" starttime="20170805 04:57:53.305"></status>
</kw>
<status status="FAIL" endtime="20170805 04:57:53.306" starttime="20170805 04:57:40.268"></status>
</kw>
<msg timestamp="20170805 04:57:53.306" level="INFO">${l_ping} = False</msg>
<status status="PASS" endtime="20170805 04:57:53.307" starttime="20170805 04:57:40.268"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=Ping Failed</arg>
</arguments>
<msg timestamp="20170805 04:57:53.308" level="FAIL">Ping Failed</msg>
<status status="FAIL" endtime="20170805 04:57:53.308" starttime="20170805 04:57:53.308"></status>
</kw>
<status status="FAIL" endtime="20170805 04:57:53.308" starttime="20170805 04:57:53.307"></status>
</kw>
<status status="FAIL" endtime="20170805 04:57:53.308" starttime="20170805 04:57:40.267"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170805 04:58:03.311" level="INFO">Length is 12</msg>
<status status="PASS" endtime="20170805 04:58:03.311" starttime="20170805 04:58:03.310"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170805 04:58:03.314" level="INFO">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg timestamp="20170805 04:58:16.349" level="INFO">${RC} = 1</msg>
<msg timestamp="20170805 04:58:16.349" level="INFO">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3025ms
</msg>
<status status="PASS" endtime="20170805 04:58:16.350" starttime="20170805 04:58:03.311"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170805 04:58:16.370" level="INFO">RC: 1
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3025ms
</msg>
<status status="PASS" endtime="20170805 04:58:16.370" starttime="20170805 04:58:16.367"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<msg timestamp="20170805 04:58:16.373" level="FAIL">1 != 0</msg>
<status status="FAIL" endtime="20170805 04:58:16.373" starttime="20170805 04:58:16.371"></status>
</kw>
<status status="FAIL" endtime="20170805 04:58:16.373" starttime="20170805 04:58:03.310"></status>
</kw>
<msg timestamp="20170805 04:58:16.375" level="INFO">${l_ping} = False</msg>
<status status="PASS" endtime="20170805 04:58:16.375" starttime="20170805 04:58:03.309"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=Ping Failed</arg>
</arguments>
<msg timestamp="20170805 04:58:16.377" level="FAIL">Ping Failed</msg>
<status status="FAIL" endtime="20170805 04:58:16.378" starttime="20170805 04:58:16.377"></status>
</kw>
<status status="FAIL" endtime="20170805 04:58:16.378" starttime="20170805 04:58:16.375"></status>
</kw>
<status status="FAIL" endtime="20170805 04:58:16.378" starttime="20170805 04:58:03.309"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170805 04:58:26.382" level="INFO">Length is 12</msg>
<status status="PASS" endtime="20170805 04:58:26.382" starttime="20170805 04:58:26.382"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170805 04:58:26.396" level="INFO">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg timestamp="20170805 04:58:39.396" level="INFO">${RC} = 1</msg>
<msg timestamp="20170805 04:58:39.396" level="INFO">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 2999ms
</msg>
<status status="PASS" endtime="20170805 04:58:39.396" starttime="20170805 04:58:26.382"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170805 04:58:39.415" level="INFO">RC: 1
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 2999ms
</msg>
<status status="PASS" endtime="20170805 04:58:39.415" starttime="20170805 04:58:39.412"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<msg timestamp="20170805 04:58:39.416" level="FAIL">1 != 0</msg>
<status status="FAIL" endtime="20170805 04:58:39.416" starttime="20170805 04:58:39.416"></status>
</kw>
<status status="FAIL" endtime="20170805 04:58:39.417" starttime="20170805 04:58:26.381"></status>
</kw>
<msg timestamp="20170805 04:58:39.418" level="INFO">${l_ping} = False</msg>
<status status="PASS" endtime="20170805 04:58:39.418" starttime="20170805 04:58:26.381"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=Ping Failed</arg>
</arguments>
<msg timestamp="20170805 04:58:39.419" level="FAIL">Ping Failed</msg>
<status status="FAIL" endtime="20170805 04:58:39.420" starttime="20170805 04:58:39.419"></status>
</kw>
<status status="FAIL" endtime="20170805 04:58:39.420" starttime="20170805 04:58:39.418"></status>
</kw>
<status status="FAIL" endtime="20170805 04:58:39.421" starttime="20170805 04:58:26.379"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170805 04:58:49.426" level="INFO">Length is 12</msg>
<status status="PASS" endtime="20170805 04:58:49.426" starttime="20170805 04:58:49.426"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170805 04:58:49.435" level="INFO">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg timestamp="20170805 04:59:02.462" level="INFO">${RC} = 1</msg>
<msg timestamp="20170805 04:59:02.463" level="INFO">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3023ms
</msg>
<status status="PASS" endtime="20170805 04:59:02.463" starttime="20170805 04:58:49.426"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170805 04:59:02.483" level="INFO">RC: 1
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3023ms
</msg>
<status status="PASS" endtime="20170805 04:59:02.483" starttime="20170805 04:59:02.479"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<msg timestamp="20170805 04:59:02.485" level="FAIL">1 != 0</msg>
<status status="FAIL" endtime="20170805 04:59:02.485" starttime="20170805 04:59:02.484"></status>
</kw>
<status status="FAIL" endtime="20170805 04:59:02.485" starttime="20170805 04:58:49.425"></status>
</kw>
<msg timestamp="20170805 04:59:02.486" level="INFO">${l_ping} = False</msg>
<status status="PASS" endtime="20170805 04:59:02.487" starttime="20170805 04:58:49.422"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=Ping Failed</arg>
</arguments>
<msg timestamp="20170805 04:59:02.490" level="FAIL">Ping Failed</msg>
<status status="FAIL" endtime="20170805 04:59:02.490" starttime="20170805 04:59:02.489"></status>
</kw>
<status status="FAIL" endtime="20170805 04:59:02.490" starttime="20170805 04:59:02.487"></status>
</kw>
<status status="FAIL" endtime="20170805 04:59:02.490" starttime="20170805 04:58:49.421"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170805 04:59:12.493" level="INFO">Length is 12</msg>
<status status="PASS" endtime="20170805 04:59:12.493" starttime="20170805 04:59:12.493"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170805 04:59:12.510" level="INFO">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg timestamp="20170805 04:59:25.529" level="INFO">${RC} = 1</msg>
<msg timestamp="20170805 04:59:25.529" level="INFO">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3023ms
</msg>
<status status="PASS" endtime="20170805 04:59:25.529" starttime="20170805 04:59:12.494"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170805 04:59:25.547" level="INFO">RC: 1
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3023ms
</msg>
<status status="PASS" endtime="20170805 04:59:25.547" starttime="20170805 04:59:25.544"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<msg timestamp="20170805 04:59:25.549" level="FAIL">1 != 0</msg>
<status status="FAIL" endtime="20170805 04:59:25.549" starttime="20170805 04:59:25.547"></status>
</kw>
<status status="FAIL" endtime="20170805 04:59:25.549" starttime="20170805 04:59:12.492"></status>
</kw>
<msg timestamp="20170805 04:59:25.550" level="INFO">${l_ping} = False</msg>
<status status="PASS" endtime="20170805 04:59:25.550" starttime="20170805 04:59:12.492"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=Ping Failed</arg>
</arguments>
<msg timestamp="20170805 04:59:25.552" level="FAIL">Ping Failed</msg>
<status status="FAIL" endtime="20170805 04:59:25.552" starttime="20170805 04:59:25.552"></status>
</kw>
<status status="FAIL" endtime="20170805 04:59:25.552" starttime="20170805 04:59:25.551"></status>
</kw>
<status status="FAIL" endtime="20170805 04:59:25.553" starttime="20170805 04:59:12.491"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170805 04:59:35.556" level="INFO">Length is 12</msg>
<status status="PASS" endtime="20170805 04:59:35.556" starttime="20170805 04:59:35.556"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170805 04:59:35.567" level="INFO">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg timestamp="20170805 04:59:48.593" level="INFO">${RC} = 1</msg>
<msg timestamp="20170805 04:59:48.593" level="INFO">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3025ms
</msg>
<status status="PASS" endtime="20170805 04:59:48.594" starttime="20170805 04:59:35.557"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170805 04:59:48.615" level="INFO">RC: 1
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3025ms
</msg>
<status status="PASS" endtime="20170805 04:59:48.615" starttime="20170805 04:59:48.611"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<msg timestamp="20170805 04:59:48.617" level="FAIL">1 != 0</msg>
<status status="FAIL" endtime="20170805 04:59:48.617" starttime="20170805 04:59:48.615"></status>
</kw>
<status status="FAIL" endtime="20170805 04:59:48.617" starttime="20170805 04:59:35.555"></status>
</kw>
<msg timestamp="20170805 04:59:48.618" level="INFO">${l_ping} = False</msg>
<status status="PASS" endtime="20170805 04:59:48.618" starttime="20170805 04:59:35.555"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=Ping Failed</arg>
</arguments>
<msg timestamp="20170805 04:59:48.621" level="FAIL">Ping Failed</msg>
<status status="FAIL" endtime="20170805 04:59:48.621" starttime="20170805 04:59:48.620"></status>
</kw>
<status status="FAIL" endtime="20170805 04:59:48.621" starttime="20170805 04:59:48.619"></status>
</kw>
<status status="FAIL" endtime="20170805 04:59:48.621" starttime="20170805 04:59:35.553"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170805 04:59:58.625" level="INFO">Length is 12</msg>
<status status="PASS" endtime="20170805 04:59:58.625" starttime="20170805 04:59:58.624"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170805 04:59:58.632" level="INFO">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg timestamp="20170805 05:00:11.638" level="INFO">${RC} = 1</msg>
<msg timestamp="20170805 05:00:11.639" level="INFO">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3000ms
</msg>
<status status="PASS" endtime="20170805 05:00:11.639" starttime="20170805 04:59:58.625"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170805 05:00:11.642" level="INFO">RC: 1
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3000ms
</msg>
<status status="PASS" endtime="20170805 05:00:11.642" starttime="20170805 05:00:11.641"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<msg timestamp="20170805 05:00:11.643" level="FAIL">1 != 0</msg>
<status status="FAIL" endtime="20170805 05:00:11.643" starttime="20170805 05:00:11.643"></status>
</kw>
<status status="FAIL" endtime="20170805 05:00:11.644" starttime="20170805 04:59:58.623"></status>
</kw>
<msg timestamp="20170805 05:00:11.644" level="INFO">${l_ping} = False</msg>
<status status="PASS" endtime="20170805 05:00:11.644" starttime="20170805 04:59:58.623"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=Ping Failed</arg>
</arguments>
<msg timestamp="20170805 05:00:11.645" level="FAIL">Ping Failed</msg>
<status status="FAIL" endtime="20170805 05:00:11.645" starttime="20170805 05:00:11.645"></status>
</kw>
<status status="FAIL" endtime="20170805 05:00:11.645" starttime="20170805 05:00:11.644"></status>
</kw>
<status status="FAIL" endtime="20170805 05:00:11.646" starttime="20170805 04:59:58.622"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170805 05:00:21.648" level="INFO">Length is 12</msg>
<status status="PASS" endtime="20170805 05:00:21.648" starttime="20170805 05:00:21.648"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170805 05:00:21.654" level="INFO">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg timestamp="20170805 05:00:34.680" level="INFO">${RC} = 1</msg>
<msg timestamp="20170805 05:00:34.680" level="INFO">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3024ms
</msg>
<status status="PASS" endtime="20170805 05:00:34.680" starttime="20170805 05:00:21.649"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170805 05:00:34.684" level="INFO">RC: 1
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3024ms
</msg>
<status status="PASS" endtime="20170805 05:00:34.684" starttime="20170805 05:00:34.683"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<msg timestamp="20170805 05:00:34.685" level="FAIL">1 != 0</msg>
<status status="FAIL" endtime="20170805 05:00:34.685" starttime="20170805 05:00:34.684"></status>
</kw>
<status status="FAIL" endtime="20170805 05:00:34.685" starttime="20170805 05:00:21.647"></status>
</kw>
<msg timestamp="20170805 05:00:34.685" level="INFO">${l_ping} = False</msg>
<status status="PASS" endtime="20170805 05:00:34.685" starttime="20170805 05:00:21.647"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=Ping Failed</arg>
</arguments>
<msg timestamp="20170805 05:00:34.687" level="FAIL">Ping Failed</msg>
<status status="FAIL" endtime="20170805 05:00:34.687" starttime="20170805 05:00:34.686"></status>
</kw>
<status status="FAIL" endtime="20170805 05:00:34.687" starttime="20170805 05:00:34.686"></status>
</kw>
<status status="FAIL" endtime="20170805 05:00:34.687" starttime="20170805 05:00:21.646"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170805 05:00:44.690" level="INFO">Length is 12</msg>
<status status="PASS" endtime="20170805 05:00:44.690" starttime="20170805 05:00:44.689"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170805 05:00:44.702" level="INFO">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg timestamp="20170805 05:00:57.720" level="INFO">${RC} = 1</msg>
<msg timestamp="20170805 05:00:57.720" level="INFO">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3024ms
</msg>
<status status="PASS" endtime="20170805 05:00:57.721" starttime="20170805 05:00:44.690"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170805 05:00:57.725" level="INFO">RC: 1
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3024ms
</msg>
<status status="PASS" endtime="20170805 05:00:57.725" starttime="20170805 05:00:57.724"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<msg timestamp="20170805 05:00:57.726" level="FAIL">1 != 0</msg>
<status status="FAIL" endtime="20170805 05:00:57.726" starttime="20170805 05:00:57.725"></status>
</kw>
<status status="FAIL" endtime="20170805 05:00:57.726" starttime="20170805 05:00:44.689"></status>
</kw>
<msg timestamp="20170805 05:00:57.726" level="INFO">${l_ping} = False</msg>
<status status="PASS" endtime="20170805 05:00:57.726" starttime="20170805 05:00:44.689"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=Ping Failed</arg>
</arguments>
<msg timestamp="20170805 05:00:57.728" level="FAIL">Ping Failed</msg>
<status status="FAIL" endtime="20170805 05:00:57.728" starttime="20170805 05:00:57.728"></status>
</kw>
<status status="FAIL" endtime="20170805 05:00:57.728" starttime="20170805 05:00:57.727"></status>
</kw>
<status status="FAIL" endtime="20170805 05:00:57.728" starttime="20170805 05:00:44.687"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170805 05:01:07.731" level="INFO">Length is 12</msg>
<status status="PASS" endtime="20170805 05:01:07.731" starttime="20170805 05:01:07.730"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170805 05:01:07.737" level="INFO">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg timestamp="20170805 05:01:20.746" level="INFO">${RC} = 1</msg>
<msg timestamp="20170805 05:01:20.746" level="INFO">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3001ms
</msg>
<status status="PASS" endtime="20170805 05:01:20.747" starttime="20170805 05:01:07.731"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170805 05:01:20.763" level="INFO">RC: 1
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3001ms
</msg>
<status status="PASS" endtime="20170805 05:01:20.764" starttime="20170805 05:01:20.761"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<msg timestamp="20170805 05:01:20.766" level="FAIL">1 != 0</msg>
<status status="FAIL" endtime="20170805 05:01:20.766" starttime="20170805 05:01:20.764"></status>
</kw>
<status status="FAIL" endtime="20170805 05:01:20.766" starttime="20170805 05:01:07.730"></status>
</kw>
<msg timestamp="20170805 05:01:20.767" level="INFO">${l_ping} = False</msg>
<status status="PASS" endtime="20170805 05:01:20.767" starttime="20170805 05:01:07.729"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=Ping Failed</arg>
</arguments>
<msg timestamp="20170805 05:01:20.770" level="FAIL">Ping Failed</msg>
<status status="FAIL" endtime="20170805 05:01:20.773" starttime="20170805 05:01:20.770"></status>
</kw>
<status status="FAIL" endtime="20170805 05:01:20.773" starttime="20170805 05:01:20.769"></status>
</kw>
<status status="FAIL" endtime="20170805 05:01:20.773" starttime="20170805 05:01:07.729"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170805 05:01:30.776" level="INFO">Length is 12</msg>
<status status="PASS" endtime="20170805 05:01:30.776" starttime="20170805 05:01:30.776"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170805 05:01:30.783" level="INFO">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg timestamp="20170805 05:01:43.793" level="INFO">${RC} = 1</msg>
<msg timestamp="20170805 05:01:43.793" level="INFO">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 2999ms
</msg>
<status status="PASS" endtime="20170805 05:01:43.793" starttime="20170805 05:01:30.777"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170805 05:01:43.811" level="INFO">RC: 1
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 2999ms
</msg>
<status status="PASS" endtime="20170805 05:01:43.811" starttime="20170805 05:01:43.809"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<msg timestamp="20170805 05:01:43.813" level="FAIL">1 != 0</msg>
<status status="FAIL" endtime="20170805 05:01:43.814" starttime="20170805 05:01:43.812"></status>
</kw>
<status status="FAIL" endtime="20170805 05:01:43.814" starttime="20170805 05:01:30.775"></status>
</kw>
<msg timestamp="20170805 05:01:43.815" level="INFO">${l_ping} = False</msg>
<status status="PASS" endtime="20170805 05:01:43.815" starttime="20170805 05:01:30.775"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=Ping Failed</arg>
</arguments>
<msg timestamp="20170805 05:01:43.818" level="FAIL">Ping Failed</msg>
<status status="FAIL" endtime="20170805 05:01:43.818" starttime="20170805 05:01:43.818"></status>
</kw>
<status status="FAIL" endtime="20170805 05:01:43.818" starttime="20170805 05:01:43.816"></status>
</kw>
<status status="FAIL" endtime="20170805 05:01:43.818" starttime="20170805 05:01:30.774"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170805 05:01:53.820" level="INFO">Length is 12</msg>
<status status="PASS" endtime="20170805 05:01:53.820" starttime="20170805 05:01:53.820"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170805 05:01:53.825" level="INFO">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg timestamp="20170805 05:02:06.858" level="INFO">${RC} = 1</msg>
<msg timestamp="20170805 05:02:06.859" level="INFO">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3023ms
</msg>
<status status="PASS" endtime="20170805 05:02:06.860" starttime="20170805 05:01:53.821"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170805 05:02:06.880" level="INFO">RC: 1
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3023ms
</msg>
<status status="PASS" endtime="20170805 05:02:06.880" starttime="20170805 05:02:06.877"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<msg timestamp="20170805 05:02:06.882" level="FAIL">1 != 0</msg>
<status status="FAIL" endtime="20170805 05:02:06.883" starttime="20170805 05:02:06.881"></status>
</kw>
<status status="FAIL" endtime="20170805 05:02:06.883" starttime="20170805 05:01:53.820"></status>
</kw>
<msg timestamp="20170805 05:02:06.883" level="INFO">${l_ping} = False</msg>
<status status="PASS" endtime="20170805 05:02:06.883" starttime="20170805 05:01:53.819"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=Ping Failed</arg>
</arguments>
<msg timestamp="20170805 05:02:06.887" level="FAIL">Ping Failed</msg>
<status status="FAIL" endtime="20170805 05:02:06.887" starttime="20170805 05:02:06.886"></status>
</kw>
<status status="FAIL" endtime="20170805 05:02:06.887" starttime="20170805 05:02:06.885"></status>
</kw>
<status status="FAIL" endtime="20170805 05:02:06.887" starttime="20170805 05:01:53.818"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170805 05:02:16.890" level="INFO">Length is 12</msg>
<status status="PASS" endtime="20170805 05:02:16.890" starttime="20170805 05:02:16.890"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170805 05:02:16.894" level="INFO">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg timestamp="20170805 05:02:29.903" level="INFO">${RC} = 1</msg>
<msg timestamp="20170805 05:02:29.904" level="INFO">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3001ms
</msg>
<status status="PASS" endtime="20170805 05:02:29.905" starttime="20170805 05:02:16.890"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170805 05:02:29.922" level="INFO">RC: 1
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3001ms
</msg>
<status status="PASS" endtime="20170805 05:02:29.923" starttime="20170805 05:02:29.919"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<msg timestamp="20170805 05:02:29.925" level="FAIL">1 != 0</msg>
<status status="FAIL" endtime="20170805 05:02:29.925" starttime="20170805 05:02:29.924"></status>
</kw>
<status status="FAIL" endtime="20170805 05:02:29.925" starttime="20170805 05:02:16.889"></status>
</kw>
<msg timestamp="20170805 05:02:29.926" level="INFO">${l_ping} = False</msg>
<status status="PASS" endtime="20170805 05:02:29.926" starttime="20170805 05:02:16.889"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=Ping Failed</arg>
</arguments>
<msg timestamp="20170805 05:02:29.929" level="FAIL">Ping Failed</msg>
<status status="FAIL" endtime="20170805 05:02:29.929" starttime="20170805 05:02:29.929"></status>
</kw>
<status status="FAIL" endtime="20170805 05:02:29.929" starttime="20170805 05:02:29.927"></status>
</kw>
<status status="FAIL" endtime="20170805 05:02:29.929" starttime="20170805 05:02:16.888"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170805 05:02:39.934" level="INFO">Length is 12</msg>
<status status="PASS" endtime="20170805 05:02:39.935" starttime="20170805 05:02:39.934"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170805 05:02:39.940" level="INFO">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg timestamp="20170805 05:02:52.948" level="INFO">${RC} = 1</msg>
<msg timestamp="20170805 05:02:52.948" level="INFO">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 2999ms
</msg>
<status status="PASS" endtime="20170805 05:02:52.949" starttime="20170805 05:02:39.935"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170805 05:02:52.966" level="INFO">RC: 1
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 2999ms
</msg>
<status status="PASS" endtime="20170805 05:02:52.966" starttime="20170805 05:02:52.963"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<msg timestamp="20170805 05:02:52.969" level="FAIL">1 != 0</msg>
<status status="FAIL" endtime="20170805 05:02:52.969" starttime="20170805 05:02:52.967"></status>
</kw>
<status status="FAIL" endtime="20170805 05:02:52.969" starttime="20170805 05:02:39.934"></status>
</kw>
<msg timestamp="20170805 05:02:52.971" level="INFO">${l_ping} = False</msg>
<status status="PASS" endtime="20170805 05:02:52.971" starttime="20170805 05:02:39.931"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=Ping Failed</arg>
</arguments>
<msg timestamp="20170805 05:02:52.974" level="FAIL">Ping Failed</msg>
<status status="FAIL" endtime="20170805 05:02:52.974" starttime="20170805 05:02:52.973"></status>
</kw>
<status status="FAIL" endtime="20170805 05:02:52.974" starttime="20170805 05:02:52.972"></status>
</kw>
<status status="FAIL" endtime="20170805 05:02:52.974" starttime="20170805 05:02:39.930"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170805 05:03:02.977" level="INFO">Length is 12</msg>
<status status="PASS" endtime="20170805 05:03:02.978" starttime="20170805 05:03:02.977"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170805 05:03:02.981" level="INFO">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg timestamp="20170805 05:03:16.014" level="INFO">${RC} = 1</msg>
<msg timestamp="20170805 05:03:16.015" level="INFO">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3023ms
</msg>
<status status="PASS" endtime="20170805 05:03:16.015" starttime="20170805 05:03:02.978"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170805 05:03:16.035" level="INFO">RC: 1
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3023ms
</msg>
<status status="PASS" endtime="20170805 05:03:16.035" starttime="20170805 05:03:16.032"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<msg timestamp="20170805 05:03:16.037" level="FAIL">1 != 0</msg>
<status status="FAIL" endtime="20170805 05:03:16.037" starttime="20170805 05:03:16.035"></status>
</kw>
<status status="FAIL" endtime="20170805 05:03:16.037" starttime="20170805 05:03:02.977"></status>
</kw>
<msg timestamp="20170805 05:03:16.038" level="INFO">${l_ping} = False</msg>
<status status="PASS" endtime="20170805 05:03:16.038" starttime="20170805 05:03:02.976"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=Ping Failed</arg>
</arguments>
<msg timestamp="20170805 05:03:16.042" level="FAIL">Ping Failed</msg>
<status status="FAIL" endtime="20170805 05:03:16.042" starttime="20170805 05:03:16.041"></status>
</kw>
<status status="FAIL" endtime="20170805 05:03:16.042" starttime="20170805 05:03:16.039"></status>
</kw>
<status status="FAIL" endtime="20170805 05:03:16.042" starttime="20170805 05:03:02.975"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170805 05:03:26.045" level="INFO">Length is 12</msg>
<status status="PASS" endtime="20170805 05:03:26.045" starttime="20170805 05:03:26.045"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170805 05:03:26.059" level="INFO">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg timestamp="20170805 05:03:39.076" level="INFO">${RC} = 1</msg>
<msg timestamp="20170805 05:03:39.077" level="INFO">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3023ms
</msg>
<status status="PASS" endtime="20170805 05:03:39.077" starttime="20170805 05:03:26.046"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170805 05:03:39.081" level="INFO">RC: 1
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3023ms
</msg>
<status status="PASS" endtime="20170805 05:03:39.081" starttime="20170805 05:03:39.080"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<msg timestamp="20170805 05:03:39.082" level="FAIL">1 != 0</msg>
<status status="FAIL" endtime="20170805 05:03:39.082" starttime="20170805 05:03:39.081"></status>
</kw>
<status status="FAIL" endtime="20170805 05:03:39.082" starttime="20170805 05:03:26.044"></status>
</kw>
<msg timestamp="20170805 05:03:39.082" level="INFO">${l_ping} = False</msg>
<status status="PASS" endtime="20170805 05:03:39.082" starttime="20170805 05:03:26.044"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=Ping Failed</arg>
</arguments>
<msg timestamp="20170805 05:03:39.084" level="FAIL">Ping Failed</msg>
<status status="FAIL" endtime="20170805 05:03:39.084" starttime="20170805 05:03:39.084"></status>
</kw>
<status status="FAIL" endtime="20170805 05:03:39.084" starttime="20170805 05:03:39.083"></status>
</kw>
<status status="FAIL" endtime="20170805 05:03:39.084" starttime="20170805 05:03:26.043"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170805 05:03:49.087" level="INFO">Length is 12</msg>
<status status="PASS" endtime="20170805 05:03:49.087" starttime="20170805 05:03:49.086"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170805 05:03:49.091" level="INFO">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg timestamp="20170805 05:04:02.101" level="INFO">${RC} = 1</msg>
<msg timestamp="20170805 05:04:02.101" level="INFO">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3000ms
</msg>
<status status="PASS" endtime="20170805 05:04:02.101" starttime="20170805 05:03:49.087"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170805 05:04:02.120" level="INFO">RC: 1
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3000ms
</msg>
<status status="PASS" endtime="20170805 05:04:02.120" starttime="20170805 05:04:02.117"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<msg timestamp="20170805 05:04:02.121" level="FAIL">1 != 0</msg>
<status status="FAIL" endtime="20170805 05:04:02.121" starttime="20170805 05:04:02.120"></status>
</kw>
<status status="FAIL" endtime="20170805 05:04:02.122" starttime="20170805 05:03:49.086"></status>
</kw>
<msg timestamp="20170805 05:04:02.122" level="INFO">${l_ping} = False</msg>
<status status="PASS" endtime="20170805 05:04:02.123" starttime="20170805 05:03:49.085"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=Ping Failed</arg>
</arguments>
<msg timestamp="20170805 05:04:02.125" level="FAIL">Ping Failed</msg>
<status status="FAIL" endtime="20170805 05:04:02.125" starttime="20170805 05:04:02.125"></status>
</kw>
<status status="FAIL" endtime="20170805 05:04:02.125" starttime="20170805 05:04:02.123"></status>
</kw>
<status status="FAIL" endtime="20170805 05:04:02.125" starttime="20170805 05:03:49.084"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170805 05:04:12.129" level="INFO">Length is 12</msg>
<status status="PASS" endtime="20170805 05:04:12.129" starttime="20170805 05:04:12.128"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170805 05:04:12.142" level="INFO">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg timestamp="20170805 05:04:25.167" level="INFO">${RC} = 1</msg>
<msg timestamp="20170805 05:04:25.167" level="INFO">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3024ms
</msg>
<status status="PASS" endtime="20170805 05:04:25.169" starttime="20170805 05:04:12.129"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170805 05:04:25.188" level="INFO">RC: 1
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3024ms
</msg>
<status status="PASS" endtime="20170805 05:04:25.188" starttime="20170805 05:04:25.185"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<msg timestamp="20170805 05:04:25.189" level="FAIL">1 != 0</msg>
<status status="FAIL" endtime="20170805 05:04:25.189" starttime="20170805 05:04:25.188"></status>
</kw>
<status status="FAIL" endtime="20170805 05:04:25.190" starttime="20170805 05:04:12.128"></status>
</kw>
<msg timestamp="20170805 05:04:25.191" level="INFO">${l_ping} = False</msg>
<status status="PASS" endtime="20170805 05:04:25.191" starttime="20170805 05:04:12.127"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=Ping Failed</arg>
</arguments>
<msg timestamp="20170805 05:04:25.194" level="FAIL">Ping Failed</msg>
<status status="FAIL" endtime="20170805 05:04:25.194" starttime="20170805 05:04:25.194"></status>
</kw>
<status status="FAIL" endtime="20170805 05:04:25.194" starttime="20170805 05:04:25.192"></status>
</kw>
<status status="FAIL" endtime="20170805 05:04:25.195" starttime="20170805 05:04:12.126"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170805 05:04:35.198" level="INFO">Length is 12</msg>
<status status="PASS" endtime="20170805 05:04:35.198" starttime="20170805 05:04:35.198"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170805 05:04:35.214" level="INFO">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg timestamp="20170805 05:04:48.210" level="INFO">${RC} = 1</msg>
<msg timestamp="20170805 05:04:48.210" level="INFO">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3000ms
</msg>
<status status="PASS" endtime="20170805 05:04:48.211" starttime="20170805 05:04:35.199"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170805 05:04:48.214" level="INFO">RC: 1
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3000ms
</msg>
<status status="PASS" endtime="20170805 05:04:48.214" starttime="20170805 05:04:48.214"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<msg timestamp="20170805 05:04:48.215" level="FAIL">1 != 0</msg>
<status status="FAIL" endtime="20170805 05:04:48.216" starttime="20170805 05:04:48.215"></status>
</kw>
<status status="FAIL" endtime="20170805 05:04:48.216" starttime="20170805 05:04:35.198"></status>
</kw>
<msg timestamp="20170805 05:04:48.216" level="INFO">${l_ping} = False</msg>
<status status="PASS" endtime="20170805 05:04:48.216" starttime="20170805 05:04:35.197"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=Ping Failed</arg>
</arguments>
<msg timestamp="20170805 05:04:48.217" level="FAIL">Ping Failed</msg>
<status status="FAIL" endtime="20170805 05:04:48.218" starttime="20170805 05:04:48.217"></status>
</kw>
<status status="FAIL" endtime="20170805 05:04:48.218" starttime="20170805 05:04:48.217"></status>
</kw>
<status status="FAIL" endtime="20170805 05:04:48.218" starttime="20170805 05:04:35.195"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170805 05:04:58.221" level="INFO">Length is 12</msg>
<status status="PASS" endtime="20170805 05:04:58.221" starttime="20170805 05:04:58.220"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170805 05:04:58.226" level="INFO">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg timestamp="20170805 05:05:11.232" level="INFO">${RC} = 1</msg>
<msg timestamp="20170805 05:05:11.232" level="INFO">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 2999ms
</msg>
<status status="PASS" endtime="20170805 05:05:11.233" starttime="20170805 05:04:58.221"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170805 05:05:11.252" level="INFO">RC: 1
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 2999ms
</msg>
<status status="PASS" endtime="20170805 05:05:11.252" starttime="20170805 05:05:11.249"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<msg timestamp="20170805 05:05:11.254" level="FAIL">1 != 0</msg>
<status status="FAIL" endtime="20170805 05:05:11.254" starttime="20170805 05:05:11.252"></status>
</kw>
<status status="FAIL" endtime="20170805 05:05:11.254" starttime="20170805 05:04:58.220"></status>
</kw>
<msg timestamp="20170805 05:05:11.255" level="INFO">${l_ping} = False</msg>
<status status="PASS" endtime="20170805 05:05:11.255" starttime="20170805 05:04:58.219"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=Ping Failed</arg>
</arguments>
<msg timestamp="20170805 05:05:11.260" level="FAIL">Ping Failed</msg>
<status status="FAIL" endtime="20170805 05:05:11.261" starttime="20170805 05:05:11.257"></status>
</kw>
<status status="FAIL" endtime="20170805 05:05:11.261" starttime="20170805 05:05:11.256"></status>
</kw>
<status status="FAIL" endtime="20170805 05:05:11.261" starttime="20170805 05:04:58.218"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170805 05:05:21.263" level="INFO">Length is 12</msg>
<status status="PASS" endtime="20170805 05:05:21.263" starttime="20170805 05:05:21.263"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170805 05:05:21.275" level="INFO">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg timestamp="20170805 05:05:34.302" level="INFO">${RC} = 1</msg>
<msg timestamp="20170805 05:05:34.302" level="INFO">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3023ms
</msg>
<status status="PASS" endtime="20170805 05:05:34.302" starttime="20170805 05:05:21.263"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170805 05:05:34.316" level="INFO">RC: 1
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3023ms
</msg>
<status status="PASS" endtime="20170805 05:05:34.316" starttime="20170805 05:05:34.315"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<msg timestamp="20170805 05:05:34.317" level="FAIL">1 != 0</msg>
<status status="FAIL" endtime="20170805 05:05:34.317" starttime="20170805 05:05:34.316"></status>
</kw>
<status status="FAIL" endtime="20170805 05:05:34.317" starttime="20170805 05:05:21.262"></status>
</kw>
<msg timestamp="20170805 05:05:34.317" level="INFO">${l_ping} = False</msg>
<status status="PASS" endtime="20170805 05:05:34.318" starttime="20170805 05:05:21.262"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=Ping Failed</arg>
</arguments>
<msg timestamp="20170805 05:05:34.319" level="FAIL">Ping Failed</msg>
<status status="FAIL" endtime="20170805 05:05:34.319" starttime="20170805 05:05:34.319"></status>
</kw>
<status status="FAIL" endtime="20170805 05:05:34.319" starttime="20170805 05:05:34.318"></status>
</kw>
<status status="FAIL" endtime="20170805 05:05:34.319" starttime="20170805 05:05:21.261"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170805 05:05:44.323" level="INFO">Length is 12</msg>
<status status="PASS" endtime="20170805 05:05:44.323" starttime="20170805 05:05:44.322"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170805 05:05:44.328" level="INFO">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg timestamp="20170805 05:05:57.336" level="INFO">${RC} = 1</msg>
<msg timestamp="20170805 05:05:57.336" level="INFO">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 2999ms
</msg>
<status status="PASS" endtime="20170805 05:05:57.336" starttime="20170805 05:05:44.323"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170805 05:05:57.355" level="INFO">RC: 1
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 2999ms
</msg>
<status status="PASS" endtime="20170805 05:05:57.355" starttime="20170805 05:05:57.353"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<msg timestamp="20170805 05:05:57.357" level="FAIL">1 != 0</msg>
<status status="FAIL" endtime="20170805 05:05:57.357" starttime="20170805 05:05:57.356"></status>
</kw>
<status status="FAIL" endtime="20170805 05:05:57.357" starttime="20170805 05:05:44.322"></status>
</kw>
<msg timestamp="20170805 05:05:57.359" level="INFO">${l_ping} = False</msg>
<status status="PASS" endtime="20170805 05:05:57.359" starttime="20170805 05:05:44.321"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=Ping Failed</arg>
</arguments>
<msg timestamp="20170805 05:05:57.360" level="FAIL">Ping Failed</msg>
<status status="FAIL" endtime="20170805 05:05:57.361" starttime="20170805 05:05:57.360"></status>
</kw>
<status status="FAIL" endtime="20170805 05:05:57.361" starttime="20170805 05:05:57.359"></status>
</kw>
<status status="FAIL" endtime="20170805 05:05:57.361" starttime="20170805 05:05:44.320"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170805 05:06:07.365" level="INFO">Length is 12</msg>
<status status="PASS" endtime="20170805 05:06:07.365" starttime="20170805 05:06:07.364"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170805 05:06:07.368" level="INFO">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg timestamp="20170805 05:06:20.396" level="INFO">${RC} = 1</msg>
<msg timestamp="20170805 05:06:20.396" level="INFO">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3023ms
</msg>
<status status="PASS" endtime="20170805 05:06:20.396" starttime="20170805 05:06:07.365"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170805 05:06:20.400" level="INFO">RC: 1
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3023ms
</msg>
<status status="PASS" endtime="20170805 05:06:20.400" starttime="20170805 05:06:20.399"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<msg timestamp="20170805 05:06:20.401" level="FAIL">1 != 0</msg>
<status status="FAIL" endtime="20170805 05:06:20.401" starttime="20170805 05:06:20.400"></status>
</kw>
<status status="FAIL" endtime="20170805 05:06:20.401" starttime="20170805 05:06:07.364"></status>
</kw>
<msg timestamp="20170805 05:06:20.401" level="INFO">${l_ping} = False</msg>
<status status="PASS" endtime="20170805 05:06:20.401" starttime="20170805 05:06:07.363"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=Ping Failed</arg>
</arguments>
<msg timestamp="20170805 05:06:20.403" level="FAIL">Ping Failed</msg>
<status status="FAIL" endtime="20170805 05:06:20.403" starttime="20170805 05:06:20.403"></status>
</kw>
<status status="FAIL" endtime="20170805 05:06:20.403" starttime="20170805 05:06:20.402"></status>
</kw>
<status status="FAIL" endtime="20170805 05:06:20.403" starttime="20170805 05:06:07.362"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170805 05:06:30.410" level="INFO">Length is 12</msg>
<status status="PASS" endtime="20170805 05:06:30.410" starttime="20170805 05:06:30.410"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170805 05:06:30.423" level="INFO">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg timestamp="20170805 05:06:43.447" level="INFO">${RC} = 1</msg>
<msg timestamp="20170805 05:06:43.447" level="INFO">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3022ms
</msg>
<status status="PASS" endtime="20170805 05:06:43.447" starttime="20170805 05:06:30.411"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170805 05:06:43.467" level="INFO">RC: 1
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3022ms
</msg>
<status status="PASS" endtime="20170805 05:06:43.467" starttime="20170805 05:06:43.464"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<msg timestamp="20170805 05:06:43.469" level="FAIL">1 != 0</msg>
<status status="FAIL" endtime="20170805 05:06:43.469" starttime="20170805 05:06:43.467"></status>
</kw>
<status status="FAIL" endtime="20170805 05:06:43.469" starttime="20170805 05:06:30.409"></status>
</kw>
<msg timestamp="20170805 05:06:43.471" level="INFO">${l_ping} = False</msg>
<status status="PASS" endtime="20170805 05:06:43.471" starttime="20170805 05:06:30.406"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=Ping Failed</arg>
</arguments>
<msg timestamp="20170805 05:06:43.473" level="FAIL">Ping Failed</msg>
<status status="FAIL" endtime="20170805 05:06:43.473" starttime="20170805 05:06:43.473"></status>
</kw>
<status status="FAIL" endtime="20170805 05:06:43.474" starttime="20170805 05:06:43.471"></status>
</kw>
<status status="FAIL" endtime="20170805 05:06:43.474" starttime="20170805 05:06:30.404"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170805 05:06:53.477" level="INFO">Length is 12</msg>
<status status="PASS" endtime="20170805 05:06:53.478" starttime="20170805 05:06:53.477"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170805 05:06:53.487" level="INFO">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg timestamp="20170805 05:07:06.487" level="INFO">${RC} = 1</msg>
<msg timestamp="20170805 05:07:06.487" level="INFO">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3000ms
</msg>
<status status="PASS" endtime="20170805 05:07:06.487" starttime="20170805 05:06:53.478"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170805 05:07:06.491" level="INFO">RC: 1
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3000ms
</msg>
<status status="PASS" endtime="20170805 05:07:06.491" starttime="20170805 05:07:06.490"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<msg timestamp="20170805 05:07:06.492" level="FAIL">1 != 0</msg>
<status status="FAIL" endtime="20170805 05:07:06.492" starttime="20170805 05:07:06.492"></status>
</kw>
<status status="FAIL" endtime="20170805 05:07:06.492" starttime="20170805 05:06:53.476"></status>
</kw>
<msg timestamp="20170805 05:07:06.493" level="INFO">${l_ping} = False</msg>
<status status="PASS" endtime="20170805 05:07:06.493" starttime="20170805 05:06:53.475"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=Ping Failed</arg>
</arguments>
<msg timestamp="20170805 05:07:06.494" level="FAIL">Ping Failed</msg>
<status status="FAIL" endtime="20170805 05:07:06.494" starttime="20170805 05:07:06.494"></status>
</kw>
<status status="FAIL" endtime="20170805 05:07:06.494" starttime="20170805 05:07:06.493"></status>
</kw>
<status status="FAIL" endtime="20170805 05:07:06.494" starttime="20170805 05:06:53.474"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170805 05:07:16.497" level="INFO">Length is 12</msg>
<status status="PASS" endtime="20170805 05:07:16.497" starttime="20170805 05:07:16.497"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170805 05:07:16.502" level="INFO">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg timestamp="20170805 05:07:29.535" level="INFO">${RC} = 1</msg>
<msg timestamp="20170805 05:07:29.535" level="INFO">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3023ms
</msg>
<status status="PASS" endtime="20170805 05:07:29.537" starttime="20170805 05:07:16.498"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170805 05:07:29.554" level="INFO">RC: 1
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3023ms
</msg>
<status status="PASS" endtime="20170805 05:07:29.554" starttime="20170805 05:07:29.551"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<msg timestamp="20170805 05:07:29.557" level="FAIL">1 != 0</msg>
<status status="FAIL" endtime="20170805 05:07:29.557" starttime="20170805 05:07:29.555"></status>
</kw>
<status status="FAIL" endtime="20170805 05:07:29.557" starttime="20170805 05:07:16.497"></status>
</kw>
<msg timestamp="20170805 05:07:29.559" level="INFO">${l_ping} = False</msg>
<status status="PASS" endtime="20170805 05:07:29.559" starttime="20170805 05:07:16.496"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=Ping Failed</arg>
</arguments>
<msg timestamp="20170805 05:07:29.561" level="FAIL">Ping Failed</msg>
<status status="FAIL" endtime="20170805 05:07:29.561" starttime="20170805 05:07:29.561"></status>
</kw>
<status status="FAIL" endtime="20170805 05:07:29.561" starttime="20170805 05:07:29.560"></status>
</kw>
<status status="FAIL" endtime="20170805 05:07:29.562" starttime="20170805 05:07:16.496"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170805 05:07:39.564" level="INFO">Length is 12</msg>
<status status="PASS" endtime="20170805 05:07:39.582" starttime="20170805 05:07:39.564"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170805 05:07:39.595" level="INFO">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg timestamp="20170805 05:07:52.591" level="INFO">${RC} = 1</msg>
<msg timestamp="20170805 05:07:52.591" level="INFO">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3000ms
</msg>
<status status="PASS" endtime="20170805 05:07:52.591" starttime="20170805 05:07:39.583"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170805 05:07:52.595" level="INFO">RC: 1
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3000ms
</msg>
<status status="PASS" endtime="20170805 05:07:52.595" starttime="20170805 05:07:52.594"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<msg timestamp="20170805 05:07:52.596" level="FAIL">1 != 0</msg>
<status status="FAIL" endtime="20170805 05:07:52.596" starttime="20170805 05:07:52.595"></status>
</kw>
<status status="FAIL" endtime="20170805 05:07:52.596" starttime="20170805 05:07:39.563"></status>
</kw>
<msg timestamp="20170805 05:07:52.596" level="INFO">${l_ping} = False</msg>
<status status="PASS" endtime="20170805 05:07:52.596" starttime="20170805 05:07:39.563"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=Ping Failed</arg>
</arguments>
<msg timestamp="20170805 05:07:52.598" level="FAIL">Ping Failed</msg>
<status status="FAIL" endtime="20170805 05:07:52.598" starttime="20170805 05:07:52.597"></status>
</kw>
<status status="FAIL" endtime="20170805 05:07:52.598" starttime="20170805 05:07:52.597"></status>
</kw>
<status status="FAIL" endtime="20170805 05:07:52.598" starttime="20170805 05:07:39.562"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170805 05:08:02.601" level="INFO">Length is 12</msg>
<status status="PASS" endtime="20170805 05:08:02.601" starttime="20170805 05:08:02.600"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170805 05:08:02.604" level="INFO">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg timestamp="20170805 05:08:15.632" level="INFO">${RC} = 1</msg>
<msg timestamp="20170805 05:08:15.632" level="INFO">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3022ms
</msg>
<status status="PASS" endtime="20170805 05:08:15.633" starttime="20170805 05:08:02.601"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170805 05:08:15.636" level="INFO">RC: 1
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3022ms
</msg>
<status status="PASS" endtime="20170805 05:08:15.636" starttime="20170805 05:08:15.635"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<msg timestamp="20170805 05:08:15.637" level="FAIL">1 != 0</msg>
<status status="FAIL" endtime="20170805 05:08:15.637" starttime="20170805 05:08:15.637"></status>
</kw>
<status status="FAIL" endtime="20170805 05:08:15.638" starttime="20170805 05:08:02.600"></status>
</kw>
<msg timestamp="20170805 05:08:15.638" level="INFO">${l_ping} = False</msg>
<status status="PASS" endtime="20170805 05:08:15.638" starttime="20170805 05:08:02.599"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=Ping Failed</arg>
</arguments>
<msg timestamp="20170805 05:08:15.639" level="FAIL">Ping Failed</msg>
<status status="FAIL" endtime="20170805 05:08:15.639" starttime="20170805 05:08:15.639"></status>
</kw>
<status status="FAIL" endtime="20170805 05:08:15.639" starttime="20170805 05:08:15.638"></status>
</kw>
<status status="FAIL" endtime="20170805 05:08:15.640" starttime="20170805 05:08:02.598"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170805 05:08:25.643" level="INFO">Length is 12</msg>
<status status="PASS" endtime="20170805 05:08:25.643" starttime="20170805 05:08:25.642"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170805 05:08:25.648" level="INFO">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg timestamp="20170805 05:08:38.677" level="INFO">${RC} = 1</msg>
<msg timestamp="20170805 05:08:38.678" level="INFO">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3022ms
</msg>
<status status="PASS" endtime="20170805 05:08:38.678" starttime="20170805 05:08:25.643"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170805 05:08:38.697" level="INFO">RC: 1
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3022ms
</msg>
<status status="PASS" endtime="20170805 05:08:38.697" starttime="20170805 05:08:38.694"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<msg timestamp="20170805 05:08:38.699" level="FAIL">1 != 0</msg>
<status status="FAIL" endtime="20170805 05:08:38.699" starttime="20170805 05:08:38.698"></status>
</kw>
<status status="FAIL" endtime="20170805 05:08:38.699" starttime="20170805 05:08:25.642"></status>
</kw>
<msg timestamp="20170805 05:08:38.700" level="INFO">${l_ping} = False</msg>
<status status="PASS" endtime="20170805 05:08:38.700" starttime="20170805 05:08:25.641"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=Ping Failed</arg>
</arguments>
<msg timestamp="20170805 05:08:38.703" level="FAIL">Ping Failed</msg>
<status status="FAIL" endtime="20170805 05:08:38.703" starttime="20170805 05:08:38.703"></status>
</kw>
<status status="FAIL" endtime="20170805 05:08:38.703" starttime="20170805 05:08:38.702"></status>
</kw>
<status status="FAIL" endtime="20170805 05:08:38.703" starttime="20170805 05:08:25.640"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170805 05:08:48.706" level="INFO">Length is 12</msg>
<status status="PASS" endtime="20170805 05:08:48.706" starttime="20170805 05:08:48.706"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170805 05:08:48.722" level="INFO">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg timestamp="20170805 05:09:01.714" level="INFO">${RC} = 1</msg>
<msg timestamp="20170805 05:09:01.714" level="INFO">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 2999ms
</msg>
<status status="PASS" endtime="20170805 05:09:01.715" starttime="20170805 05:08:48.707"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170805 05:09:01.719" level="INFO">RC: 1
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 2999ms
</msg>
<status status="PASS" endtime="20170805 05:09:01.719" starttime="20170805 05:09:01.718"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<msg timestamp="20170805 05:09:01.721" level="FAIL">1 != 0</msg>
<status status="FAIL" endtime="20170805 05:09:01.721" starttime="20170805 05:09:01.719"></status>
</kw>
<status status="FAIL" endtime="20170805 05:09:01.721" starttime="20170805 05:08:48.705"></status>
</kw>
<msg timestamp="20170805 05:09:01.721" level="INFO">${l_ping} = False</msg>
<status status="PASS" endtime="20170805 05:09:01.721" starttime="20170805 05:08:48.705"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=Ping Failed</arg>
</arguments>
<msg timestamp="20170805 05:09:01.723" level="FAIL">Ping Failed</msg>
<status status="FAIL" endtime="20170805 05:09:01.723" starttime="20170805 05:09:01.723"></status>
</kw>
<status status="FAIL" endtime="20170805 05:09:01.723" starttime="20170805 05:09:01.722"></status>
</kw>
<status status="FAIL" endtime="20170805 05:09:01.723" starttime="20170805 05:08:48.704"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170805 05:09:11.725" level="INFO">Length is 12</msg>
<status status="PASS" endtime="20170805 05:09:11.725" starttime="20170805 05:09:11.725"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170805 05:09:11.729" level="INFO">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg timestamp="20170805 05:09:24.757" level="INFO">${RC} = 1</msg>
<msg timestamp="20170805 05:09:24.757" level="INFO">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3024ms
</msg>
<status status="PASS" endtime="20170805 05:09:24.757" starttime="20170805 05:09:11.726"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170805 05:09:24.761" level="INFO">RC: 1
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3024ms
</msg>
<status status="PASS" endtime="20170805 05:09:24.761" starttime="20170805 05:09:24.760"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<msg timestamp="20170805 05:09:24.762" level="FAIL">1 != 0</msg>
<status status="FAIL" endtime="20170805 05:09:24.762" starttime="20170805 05:09:24.761"></status>
</kw>
<status status="FAIL" endtime="20170805 05:09:24.762" starttime="20170805 05:09:11.724"></status>
</kw>
<msg timestamp="20170805 05:09:24.762" level="INFO">${l_ping} = False</msg>
<status status="PASS" endtime="20170805 05:09:24.762" starttime="20170805 05:09:11.724"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=Ping Failed</arg>
</arguments>
<msg timestamp="20170805 05:09:24.764" level="FAIL">Ping Failed</msg>
<status status="FAIL" endtime="20170805 05:09:24.764" starttime="20170805 05:09:24.764"></status>
</kw>
<status status="FAIL" endtime="20170805 05:09:24.764" starttime="20170805 05:09:24.763"></status>
</kw>
<status status="FAIL" endtime="20170805 05:09:24.764" starttime="20170805 05:09:11.723"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170805 05:09:34.767" level="INFO">Length is 12</msg>
<status status="PASS" endtime="20170805 05:09:34.767" starttime="20170805 05:09:34.766"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170805 05:09:34.771" level="INFO">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg timestamp="20170805 05:09:47.783" level="INFO">${RC} = 1</msg>
<msg timestamp="20170805 05:09:47.783" level="INFO">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3000ms
</msg>
<status status="PASS" endtime="20170805 05:09:47.784" starttime="20170805 05:09:34.767"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170805 05:09:47.803" level="INFO">RC: 1
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3000ms
</msg>
<status status="PASS" endtime="20170805 05:09:47.803" starttime="20170805 05:09:47.800"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<msg timestamp="20170805 05:09:47.806" level="FAIL">1 != 0</msg>
<status status="FAIL" endtime="20170805 05:09:47.806" starttime="20170805 05:09:47.805"></status>
</kw>
<status status="FAIL" endtime="20170805 05:09:47.806" starttime="20170805 05:09:34.766"></status>
</kw>
<msg timestamp="20170805 05:09:47.807" level="INFO">${l_ping} = False</msg>
<status status="PASS" endtime="20170805 05:09:47.807" starttime="20170805 05:09:34.765"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=Ping Failed</arg>
</arguments>
<msg timestamp="20170805 05:09:47.810" level="FAIL">Ping Failed</msg>
<status status="FAIL" endtime="20170805 05:09:47.810" starttime="20170805 05:09:47.810"></status>
</kw>
<status status="FAIL" endtime="20170805 05:09:47.810" starttime="20170805 05:09:47.809"></status>
</kw>
<status status="FAIL" endtime="20170805 05:09:47.810" starttime="20170805 05:09:34.765"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170805 05:09:57.814" level="INFO">Length is 12</msg>
<status status="PASS" endtime="20170805 05:09:57.814" starttime="20170805 05:09:57.814"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170805 05:09:57.826" level="INFO">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg timestamp="20170805 05:10:10.849" level="INFO">${RC} = 1</msg>
<msg timestamp="20170805 05:10:10.849" level="INFO">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3024ms
</msg>
<status status="PASS" endtime="20170805 05:10:10.849" starttime="20170805 05:09:57.815"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170805 05:10:10.853" level="INFO">RC: 1
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3024ms
</msg>
<status status="PASS" endtime="20170805 05:10:10.853" starttime="20170805 05:10:10.852"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<msg timestamp="20170805 05:10:10.854" level="FAIL">1 != 0</msg>
<status status="FAIL" endtime="20170805 05:10:10.854" starttime="20170805 05:10:10.853"></status>
</kw>
<status status="FAIL" endtime="20170805 05:10:10.854" starttime="20170805 05:09:57.813"></status>
</kw>
<msg timestamp="20170805 05:10:10.854" level="INFO">${l_ping} = False</msg>
<status status="PASS" endtime="20170805 05:10:10.854" starttime="20170805 05:09:57.813"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=Ping Failed</arg>
</arguments>
<msg timestamp="20170805 05:10:10.856" level="FAIL">Ping Failed</msg>
<status status="FAIL" endtime="20170805 05:10:10.856" starttime="20170805 05:10:10.856"></status>
</kw>
<status status="FAIL" endtime="20170805 05:10:10.856" starttime="20170805 05:10:10.855"></status>
</kw>
<status status="FAIL" endtime="20170805 05:10:10.857" starttime="20170805 05:09:57.811"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170805 05:10:20.860" level="INFO">Length is 12</msg>
<status status="PASS" endtime="20170805 05:10:20.860" starttime="20170805 05:10:20.859"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170805 05:10:20.876" level="INFO">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg timestamp="20170805 05:10:33.870" level="INFO">${RC} = 1</msg>
<msg timestamp="20170805 05:10:33.870" level="INFO">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3001ms
</msg>
<status status="PASS" endtime="20170805 05:10:33.871" starttime="20170805 05:10:20.860"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170805 05:10:33.874" level="INFO">RC: 1
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3001ms
</msg>
<status status="PASS" endtime="20170805 05:10:33.874" starttime="20170805 05:10:33.873"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<msg timestamp="20170805 05:10:33.875" level="FAIL">1 != 0</msg>
<status status="FAIL" endtime="20170805 05:10:33.875" starttime="20170805 05:10:33.875"></status>
</kw>
<status status="FAIL" endtime="20170805 05:10:33.876" starttime="20170805 05:10:20.859"></status>
</kw>
<msg timestamp="20170805 05:10:33.876" level="INFO">${l_ping} = False</msg>
<status status="PASS" endtime="20170805 05:10:33.876" starttime="20170805 05:10:20.858"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=Ping Failed</arg>
</arguments>
<msg timestamp="20170805 05:10:33.877" level="FAIL">Ping Failed</msg>
<status status="FAIL" endtime="20170805 05:10:33.877" starttime="20170805 05:10:33.877"></status>
</kw>
<status status="FAIL" endtime="20170805 05:10:33.878" starttime="20170805 05:10:33.876"></status>
</kw>
<status status="FAIL" endtime="20170805 05:10:33.878" starttime="20170805 05:10:20.857"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170805 05:10:43.881" level="INFO">Length is 12</msg>
<status status="PASS" endtime="20170805 05:10:43.882" starttime="20170805 05:10:43.881"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170805 05:10:43.885" level="INFO">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg timestamp="20170805 05:10:56.912" level="INFO">${RC} = 1</msg>
<msg timestamp="20170805 05:10:56.912" level="INFO">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3024ms
</msg>
<status status="PASS" endtime="20170805 05:10:56.912" starttime="20170805 05:10:43.882"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170805 05:10:56.916" level="INFO">RC: 1
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3024ms
</msg>
<status status="PASS" endtime="20170805 05:10:56.916" starttime="20170805 05:10:56.915"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<msg timestamp="20170805 05:10:56.917" level="FAIL">1 != 0</msg>
<status status="FAIL" endtime="20170805 05:10:56.917" starttime="20170805 05:10:56.917"></status>
</kw>
<status status="FAIL" endtime="20170805 05:10:56.917" starttime="20170805 05:10:43.881"></status>
</kw>
<msg timestamp="20170805 05:10:56.918" level="INFO">${l_ping} = False</msg>
<status status="PASS" endtime="20170805 05:10:56.918" starttime="20170805 05:10:43.880"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=Ping Failed</arg>
</arguments>
<msg timestamp="20170805 05:10:56.919" level="FAIL">Ping Failed</msg>
<status status="FAIL" endtime="20170805 05:10:56.919" starttime="20170805 05:10:56.919"></status>
</kw>
<status status="FAIL" endtime="20170805 05:10:56.919" starttime="20170805 05:10:56.918"></status>
</kw>
<status status="FAIL" endtime="20170805 05:10:56.920" starttime="20170805 05:10:43.879"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170805 05:11:06.923" level="INFO">Length is 12</msg>
<status status="PASS" endtime="20170805 05:11:06.924" starttime="20170805 05:11:06.923"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170805 05:11:06.932" level="INFO">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg timestamp="20170805 05:11:19.963" level="INFO">${RC} = 1</msg>
<msg timestamp="20170805 05:11:19.963" level="INFO">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3023ms
</msg>
<status status="PASS" endtime="20170805 05:11:19.963" starttime="20170805 05:11:06.924"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170805 05:11:19.983" level="INFO">RC: 1
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3023ms
</msg>
<status status="PASS" endtime="20170805 05:11:19.983" starttime="20170805 05:11:19.980"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<msg timestamp="20170805 05:11:19.985" level="FAIL">1 != 0</msg>
<status status="FAIL" endtime="20170805 05:11:19.985" starttime="20170805 05:11:19.984"></status>
</kw>
<status status="FAIL" endtime="20170805 05:11:19.986" starttime="20170805 05:11:06.923"></status>
</kw>
<msg timestamp="20170805 05:11:19.986" level="INFO">${l_ping} = False</msg>
<status status="PASS" endtime="20170805 05:11:19.986" starttime="20170805 05:11:06.922"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=Ping Failed</arg>
</arguments>
<msg timestamp="20170805 05:11:19.989" level="FAIL">Ping Failed</msg>
<status status="FAIL" endtime="20170805 05:11:19.989" starttime="20170805 05:11:19.989"></status>
</kw>
<status status="FAIL" endtime="20170805 05:11:19.989" starttime="20170805 05:11:19.988"></status>
</kw>
<status status="FAIL" endtime="20170805 05:11:19.989" starttime="20170805 05:11:06.920"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170805 05:11:29.993" level="INFO">Length is 12</msg>
<status status="PASS" endtime="20170805 05:11:29.993" starttime="20170805 05:11:29.993"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170805 05:11:30.002" level="INFO">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg timestamp="20170805 05:11:43.024" level="INFO">${RC} = 1</msg>
<msg timestamp="20170805 05:11:43.024" level="INFO">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3023ms
</msg>
<status status="PASS" endtime="20170805 05:11:43.024" starttime="20170805 05:11:29.994"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170805 05:11:43.028" level="INFO">RC: 1
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3023ms
</msg>
<status status="PASS" endtime="20170805 05:11:43.028" starttime="20170805 05:11:43.027"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<msg timestamp="20170805 05:11:43.029" level="FAIL">1 != 0</msg>
<status status="FAIL" endtime="20170805 05:11:43.029" starttime="20170805 05:11:43.028"></status>
</kw>
<status status="FAIL" endtime="20170805 05:11:43.029" starttime="20170805 05:11:29.992"></status>
</kw>
<msg timestamp="20170805 05:11:43.029" level="INFO">${l_ping} = False</msg>
<status status="PASS" endtime="20170805 05:11:43.029" starttime="20170805 05:11:29.991"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=Ping Failed</arg>
</arguments>
<msg timestamp="20170805 05:11:43.031" level="FAIL">Ping Failed</msg>
<status status="FAIL" endtime="20170805 05:11:43.031" starttime="20170805 05:11:43.030"></status>
</kw>
<status status="FAIL" endtime="20170805 05:11:43.031" starttime="20170805 05:11:43.030"></status>
</kw>
<status status="FAIL" endtime="20170805 05:11:43.031" starttime="20170805 05:11:29.990"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170805 05:11:53.033" level="INFO">Length is 12</msg>
<status status="PASS" endtime="20170805 05:11:53.033" starttime="20170805 05:11:53.033"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170805 05:11:53.046" level="INFO">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg timestamp="20170805 05:12:06.065" level="INFO">${RC} = 1</msg>
<msg timestamp="20170805 05:12:06.065" level="INFO">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3023ms
</msg>
<status status="PASS" endtime="20170805 05:12:06.065" starttime="20170805 05:11:53.034"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170805 05:12:06.069" level="INFO">RC: 1
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3023ms
</msg>
<status status="PASS" endtime="20170805 05:12:06.069" starttime="20170805 05:12:06.068"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<msg timestamp="20170805 05:12:06.070" level="FAIL">1 != 0</msg>
<status status="FAIL" endtime="20170805 05:12:06.070" starttime="20170805 05:12:06.069"></status>
</kw>
<status status="FAIL" endtime="20170805 05:12:06.070" starttime="20170805 05:11:53.032"></status>
</kw>
<msg timestamp="20170805 05:12:06.071" level="INFO">${l_ping} = False</msg>
<status status="PASS" endtime="20170805 05:12:06.071" starttime="20170805 05:11:53.032"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=Ping Failed</arg>
</arguments>
<msg timestamp="20170805 05:12:06.072" level="FAIL">Ping Failed</msg>
<status status="FAIL" endtime="20170805 05:12:06.072" starttime="20170805 05:12:06.072"></status>
</kw>
<status status="FAIL" endtime="20170805 05:12:06.072" starttime="20170805 05:12:06.071"></status>
</kw>
<status status="FAIL" endtime="20170805 05:12:06.073" starttime="20170805 05:11:53.031"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170805 05:12:16.075" level="INFO">Length is 12</msg>
<status status="PASS" endtime="20170805 05:12:16.075" starttime="20170805 05:12:16.075"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170805 05:12:16.079" level="INFO">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg timestamp="20170805 05:12:29.088" level="INFO">${RC} = 1</msg>
<msg timestamp="20170805 05:12:29.088" level="INFO">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3000ms
</msg>
<status status="PASS" endtime="20170805 05:12:29.089" starttime="20170805 05:12:16.075"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170805 05:12:29.108" level="INFO">RC: 1
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3000ms
</msg>
<status status="PASS" endtime="20170805 05:12:29.108" starttime="20170805 05:12:29.105"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<msg timestamp="20170805 05:12:29.110" level="FAIL">1 != 0</msg>
<status status="FAIL" endtime="20170805 05:12:29.110" starttime="20170805 05:12:29.109"></status>
</kw>
<status status="FAIL" endtime="20170805 05:12:29.111" starttime="20170805 05:12:16.074"></status>
</kw>
<msg timestamp="20170805 05:12:29.112" level="INFO">${l_ping} = False</msg>
<status status="PASS" endtime="20170805 05:12:29.112" starttime="20170805 05:12:16.074"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=Ping Failed</arg>
</arguments>
<msg timestamp="20170805 05:12:29.115" level="FAIL">Ping Failed</msg>
<status status="FAIL" endtime="20170805 05:12:29.115" starttime="20170805 05:12:29.115"></status>
</kw>
<status status="FAIL" endtime="20170805 05:12:29.115" starttime="20170805 05:12:29.113"></status>
</kw>
<status status="FAIL" endtime="20170805 05:12:29.115" starttime="20170805 05:12:16.073"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170805 05:12:39.118" level="INFO">Length is 12</msg>
<status status="PASS" endtime="20170805 05:12:39.119" starttime="20170805 05:12:39.118"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170805 05:12:39.130" level="INFO">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg timestamp="20170805 05:12:52.131" level="INFO">${RC} = 1</msg>
<msg timestamp="20170805 05:12:52.132" level="INFO">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3000ms
</msg>
<status status="PASS" endtime="20170805 05:12:52.133" starttime="20170805 05:12:39.120"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170805 05:12:52.151" level="INFO">RC: 1
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3000ms
</msg>
<status status="PASS" endtime="20170805 05:12:52.151" starttime="20170805 05:12:52.148"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<msg timestamp="20170805 05:12:52.153" level="FAIL">1 != 0</msg>
<status status="FAIL" endtime="20170805 05:12:52.153" starttime="20170805 05:12:52.152"></status>
</kw>
<status status="FAIL" endtime="20170805 05:12:52.153" starttime="20170805 05:12:39.117"></status>
</kw>
<msg timestamp="20170805 05:12:52.155" level="INFO">${l_ping} = False</msg>
<status status="PASS" endtime="20170805 05:12:52.155" starttime="20170805 05:12:39.117"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=Ping Failed</arg>
</arguments>
<msg timestamp="20170805 05:12:52.157" level="FAIL">Ping Failed</msg>
<status status="FAIL" endtime="20170805 05:12:52.157" starttime="20170805 05:12:52.157"></status>
</kw>
<status status="FAIL" endtime="20170805 05:12:52.157" starttime="20170805 05:12:52.155"></status>
</kw>
<status status="FAIL" endtime="20170805 05:12:52.158" starttime="20170805 05:12:39.116"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170805 05:13:02.160" level="INFO">Length is 12</msg>
<status status="PASS" endtime="20170805 05:13:02.160" starttime="20170805 05:13:02.160"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170805 05:13:02.172" level="INFO">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg timestamp="20170805 05:13:15.203" level="INFO">${RC} = 1</msg>
<msg timestamp="20170805 05:13:15.203" level="INFO">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3024ms
</msg>
<status status="PASS" endtime="20170805 05:13:15.204" starttime="20170805 05:13:02.161"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170805 05:13:15.222" level="INFO">RC: 1
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3024ms
</msg>
<status status="PASS" endtime="20170805 05:13:15.222" starttime="20170805 05:13:15.219"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<msg timestamp="20170805 05:13:15.225" level="FAIL">1 != 0</msg>
<status status="FAIL" endtime="20170805 05:13:15.225" starttime="20170805 05:13:15.224"></status>
</kw>
<status status="FAIL" endtime="20170805 05:13:15.226" starttime="20170805 05:13:02.159"></status>
</kw>
<msg timestamp="20170805 05:13:15.227" level="INFO">${l_ping} = False</msg>
<status status="PASS" endtime="20170805 05:13:15.227" starttime="20170805 05:13:02.159"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=Ping Failed</arg>
</arguments>
<msg timestamp="20170805 05:13:15.229" level="FAIL">Ping Failed</msg>
<status status="FAIL" endtime="20170805 05:13:15.229" starttime="20170805 05:13:15.229"></status>
</kw>
<status status="FAIL" endtime="20170805 05:13:15.229" starttime="20170805 05:13:15.228"></status>
</kw>
<status status="FAIL" endtime="20170805 05:13:15.229" starttime="20170805 05:13:02.158"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170805 05:13:25.232" level="INFO">Length is 12</msg>
<status status="PASS" endtime="20170805 05:13:25.232" starttime="20170805 05:13:25.232"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170805 05:13:25.244" level="INFO">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg timestamp="20170805 05:13:38.264" level="INFO">${RC} = 1</msg>
<msg timestamp="20170805 05:13:38.264" level="INFO">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3024ms
</msg>
<status status="PASS" endtime="20170805 05:13:38.264" starttime="20170805 05:13:25.233"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170805 05:13:38.268" level="INFO">RC: 1
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3024ms
</msg>
<status status="PASS" endtime="20170805 05:13:38.268" starttime="20170805 05:13:38.267"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<msg timestamp="20170805 05:13:38.269" level="FAIL">1 != 0</msg>
<status status="FAIL" endtime="20170805 05:13:38.269" starttime="20170805 05:13:38.268"></status>
</kw>
<status status="FAIL" endtime="20170805 05:13:38.269" starttime="20170805 05:13:25.231"></status>
</kw>
<msg timestamp="20170805 05:13:38.269" level="INFO">${l_ping} = False</msg>
<status status="PASS" endtime="20170805 05:13:38.269" starttime="20170805 05:13:25.231"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=Ping Failed</arg>
</arguments>
<msg timestamp="20170805 05:13:38.271" level="FAIL">Ping Failed</msg>
<status status="FAIL" endtime="20170805 05:13:38.271" starttime="20170805 05:13:38.271"></status>
</kw>
<status status="FAIL" endtime="20170805 05:13:38.271" starttime="20170805 05:13:38.270"></status>
</kw>
<status status="FAIL" endtime="20170805 05:13:38.271" starttime="20170805 05:13:25.230"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170805 05:13:48.274" level="INFO">Length is 12</msg>
<status status="PASS" endtime="20170805 05:13:48.274" starttime="20170805 05:13:48.274"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170805 05:13:48.278" level="INFO">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg timestamp="20170805 05:14:01.314" level="INFO">${RC} = 1</msg>
<msg timestamp="20170805 05:14:01.315" level="INFO">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3022ms
</msg>
<status status="PASS" endtime="20170805 05:14:01.317" starttime="20170805 05:13:48.274"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170805 05:14:01.335" level="INFO">RC: 1
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3022ms
</msg>
<status status="PASS" endtime="20170805 05:14:01.335" starttime="20170805 05:14:01.332"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<msg timestamp="20170805 05:14:01.342" level="FAIL">1 != 0</msg>
<status status="FAIL" endtime="20170805 05:14:01.342" starttime="20170805 05:14:01.335"></status>
</kw>
<status status="FAIL" endtime="20170805 05:14:01.343" starttime="20170805 05:13:48.273"></status>
</kw>
<msg timestamp="20170805 05:14:01.343" level="INFO">${l_ping} = False</msg>
<status status="PASS" endtime="20170805 05:14:01.343" starttime="20170805 05:13:48.273"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=Ping Failed</arg>
</arguments>
<msg timestamp="20170805 05:14:01.345" level="FAIL">Ping Failed</msg>
<status status="FAIL" endtime="20170805 05:14:01.345" starttime="20170805 05:14:01.344"></status>
</kw>
<status status="FAIL" endtime="20170805 05:14:01.345" starttime="20170805 05:14:01.344"></status>
</kw>
<status status="FAIL" endtime="20170805 05:14:01.345" starttime="20170805 05:13:48.272"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170805 05:14:11.347" level="INFO">Length is 12</msg>
<status status="PASS" endtime="20170805 05:14:11.348" starttime="20170805 05:14:11.347"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170805 05:14:11.360" level="INFO">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg timestamp="20170805 05:14:24.380" level="INFO">${RC} = 1</msg>
<msg timestamp="20170805 05:14:24.380" level="INFO">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3023ms
</msg>
<status status="PASS" endtime="20170805 05:14:24.380" starttime="20170805 05:14:11.348"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170805 05:14:24.384" level="INFO">RC: 1
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3023ms
</msg>
<status status="PASS" endtime="20170805 05:14:24.384" starttime="20170805 05:14:24.383"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<msg timestamp="20170805 05:14:24.385" level="FAIL">1 != 0</msg>
<status status="FAIL" endtime="20170805 05:14:24.385" starttime="20170805 05:14:24.384"></status>
</kw>
<status status="FAIL" endtime="20170805 05:14:24.385" starttime="20170805 05:14:11.347"></status>
</kw>
<msg timestamp="20170805 05:14:24.385" level="INFO">${l_ping} = False</msg>
<status status="PASS" endtime="20170805 05:14:24.385" starttime="20170805 05:14:11.346"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=Ping Failed</arg>
</arguments>
<msg timestamp="20170805 05:14:24.387" level="FAIL">Ping Failed</msg>
<status status="FAIL" endtime="20170805 05:14:24.387" starttime="20170805 05:14:24.386"></status>
</kw>
<status status="FAIL" endtime="20170805 05:14:24.387" starttime="20170805 05:14:24.386"></status>
</kw>
<status status="FAIL" endtime="20170805 05:14:24.387" starttime="20170805 05:14:11.345"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170805 05:14:34.390" level="INFO">Length is 12</msg>
<status status="PASS" endtime="20170805 05:14:34.391" starttime="20170805 05:14:34.390"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170805 05:14:34.403" level="INFO">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg timestamp="20170805 05:14:47.398" level="INFO">${RC} = 1</msg>
<msg timestamp="20170805 05:14:47.398" level="INFO">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 2999ms
</msg>
<status status="PASS" endtime="20170805 05:14:47.399" starttime="20170805 05:14:34.391"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170805 05:14:47.403" level="INFO">RC: 1
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 2999ms
</msg>
<status status="PASS" endtime="20170805 05:14:47.403" starttime="20170805 05:14:47.402"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<msg timestamp="20170805 05:14:47.403" level="FAIL">1 != 0</msg>
<status status="FAIL" endtime="20170805 05:14:47.404" starttime="20170805 05:14:47.403"></status>
</kw>
<status status="FAIL" endtime="20170805 05:14:47.404" starttime="20170805 05:14:34.389"></status>
</kw>
<msg timestamp="20170805 05:14:47.404" level="INFO">${l_ping} = False</msg>
<status status="PASS" endtime="20170805 05:14:47.404" starttime="20170805 05:14:34.389"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=Ping Failed</arg>
</arguments>
<msg timestamp="20170805 05:14:47.406" level="FAIL">Ping Failed</msg>
<status status="FAIL" endtime="20170805 05:14:47.406" starttime="20170805 05:14:47.406"></status>
</kw>
<status status="FAIL" endtime="20170805 05:14:47.406" starttime="20170805 05:14:47.405"></status>
</kw>
<status status="FAIL" endtime="20170805 05:14:47.406" starttime="20170805 05:14:34.388"></status>
</kw>
<msg timestamp="20170805 05:14:47.407" level="FAIL">Keyword 'Verify Ping and REST Authentication' failed after retrying for 20 minutes. The last error was: Ping Failed</msg>
<status status="FAIL" endtime="20170805 05:14:47.407" starttime="20170805 04:54:36.694"></status>
</kw>
<status status="FAIL" endtime="20170805 05:14:47.407" starttime="20170805 04:54:36.693"></status>
</kw>
<status status="FAIL" endtime="20170805 05:14:47.407" starttime="20170805 04:54:14.540"></status>
</kw>
<status status="FAIL" endtime="20170805 05:14:47.407" starttime="20170805 04:54:14.539"></status>
</kw>
<kw type="teardown" name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>FFDC On Test Case Fail</arg>
</arguments>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170805 05:14:47.436" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170805 05:14:47.437" starttime="20170805 05:14:47.435"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 05:14:47.437" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 05:14:47.437" starttime="20170805 05:14:47.437"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170805 05:14:47.438" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170805 05:14:47.438" starttime="20170805 05:14:47.438"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 05:14:47.439" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170805 05:14:47.439" starttime="20170805 05:14:47.438"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170805 05:14:57.454" level="WARN">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff760ac310&gt;, 'Connection to 9.41.166.169 timed out. (connect timeout=10.0)')': /login</msg>
<msg timestamp="20170805 05:15:07.665" level="WARN">Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff760ac3d0&gt;, 'Connection to 9.41.166.169 timed out. (connect timeout=10.0)')': /login</msg>
<msg timestamp="20170805 05:15:18.076" level="WARN">Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff76061a10&gt;, 'Connection to 9.41.166.169 timed out. (connect timeout=10.0)')': /login</msg>
<msg timestamp="20170805 05:15:28.088" level="FAIL">ConnectTimeout: HTTPSConnectionPool(host='9.41.166.169', port=443): Max retries exceeded with url: /login (Caused by ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff76061fd0&gt;, 'Connection to 9.41.166.169 timed out. (connect timeout=10.0)'))</msg>
<status status="FAIL" endtime="20170805 05:15:28.088" starttime="20170805 05:14:47.439"></status>
</kw>
<msg timestamp="20170805 05:15:28.088" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170805 05:15:28.088" level="INFO">${resp} = ConnectTimeout: HTTPSConnectionPool(host='9.41.166.169', port=443): Max retries exceeded with url: /login (Caused by ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff760...</msg>
<status status="PASS" endtime="20170805 05:15:28.088" starttime="20170805 05:14:47.439"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170805 05:15:28.089" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170805 05:15:28.089" level="FAIL">ConnectTimeout: HTTPSConnectionPool(host='9.41.166.169', port=443): Max retries exceeded with url: /login (Caused by ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff76061fd0&gt;, 'Connection to 9.41.166.169 timed out. (connect timeout=10.0)')): FAIL != PASS</msg>
<status status="FAIL" endtime="20170805 05:15:28.089" starttime="20170805 05:15:28.089"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 05:15:28.090" level="FAIL">Resolving variable '${resp.status_code}' failed: AttributeError: 'unicode' object has no attribute 'status_code'</msg>
<status status="FAIL" endtime="20170805 05:15:28.090" starttime="20170805 05:15:28.090"></status>
</kw>
<status status="FAIL" endtime="20170805 05:15:28.091" starttime="20170805 05:14:47.435"></status>
</kw>
<msg timestamp="20170805 05:15:28.091" level="FAIL">Keyword 'Post Login Request' failed after retrying for 40 seconds. The last error was: Several failures occurred:

1) ConnectTimeout: HTTPSConnectionPool(host='9.41.166.169', port=443): Max retries exceeded with url: /login (Caused by ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff76061fd0&gt;, 'Connection to 9.41.166.169 timed out. (connect timeout=10.0)')): FAIL != PASS

2) Resolving variable '${resp.status_code}' failed: AttributeError: 'unicode' object has no attribute 'status_code'</msg>
<status status="FAIL" endtime="20170805 05:15:28.091" starttime="20170805 05:14:47.434"></status>
</kw>
<status status="FAIL" endtime="20170805 05:15:28.091" starttime="20170805 05:14:47.433"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170805 05:15:28.092" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170805 05:15:28.092" starttime="20170805 05:15:28.091"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170805 05:15:28.092" starttime="20170805 05:15:28.092"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170805 05:15:38.104" level="WARN">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff76061a10&gt;, 'Connection to 9.41.166.169 timed out. (connect timeout=10.0)')': /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<msg timestamp="20170805 05:15:48.315" level="WARN">Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff76061a90&gt;, 'Connection to 9.41.166.169 timed out. (connect timeout=10.0)')': /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<msg timestamp="20170805 05:15:58.727" level="WARN">Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff76113e50&gt;, 'Connection to 9.41.166.169 timed out. (connect timeout=10.0)')': /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<msg timestamp="20170805 05:16:08.738" level="INFO">${ret} = None</msg>
<msg timestamp="20170805 05:16:08.739" level="FAIL">ConnectTimeout: HTTPSConnectionPool(host='9.41.166.169', port=443): Max retries exceeded with url: /xyz/openbmc_project/state/host0//attr/CurrentHostState (Caused by ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff760c7d50&gt;, 'Connection to 9.41.166.169 timed out. (connect timeout=10.0)'))</msg>
<status status="FAIL" endtime="20170805 05:16:08.739" starttime="20170805 05:15:28.093"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170805 05:16:08.740" starttime="20170805 05:16:08.739"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170805 05:16:08.740" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170805 05:16:08.740" starttime="20170805 05:16:08.740"></status>
</kw>
<msg timestamp="20170805 05:16:08.741" level="INFO">${resp} = None</msg>
<status status="FAIL" endtime="20170805 05:16:08.741" starttime="20170805 05:14:47.432"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 05:16:08.741" level="FAIL">Resolving variable '${resp.status_code}' failed: AttributeError: 'NoneType' object has no attribute 'status_code'</msg>
<status status="FAIL" endtime="20170805 05:16:08.741" starttime="20170805 05:16:08.741"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170805 05:16:08.742" level="INFO">${content} = None</msg>
<msg timestamp="20170805 05:16:08.742" level="FAIL">Resolving variable '${resp.content}' failed: AttributeError: 'NoneType' object has no attribute 'content'</msg>
<status status="FAIL" endtime="20170805 05:16:08.742" starttime="20170805 05:16:08.742"></status>
</kw>
<msg timestamp="20170805 05:16:08.743" level="INFO">${state} = None</msg>
<msg timestamp="20170805 05:16:08.743" level="FAIL">Replacing variables from keyword return value failed: Resolving variable '${content["data"]}' failed: TypeError: 'NoneType' object has no attribute '__getitem__'</msg>
<status status="FAIL" endtime="20170805 05:16:08.743" starttime="20170805 05:14:47.432"></status>
</kw>
<msg timestamp="20170805 05:16:08.743" level="INFO">${host_state} = None</msg>
<msg timestamp="20170805 05:16:08.743" level="FAIL">Replacing variables from keyword return value failed: Resolving variable '${state.rsplit('.', 1)[1]}' failed: AttributeError: 'NoneType' object has no attribute 'rsplit'</msg>
<status status="FAIL" endtime="20170805 05:16:08.743" starttime="20170805 05:14:47.431"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg timestamp="20170805 05:16:08.744" level="INFO">Argument types are:
&lt;type 'NoneType'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170805 05:16:08.745" level="FAIL">None != Quiesced</msg>
<status status="FAIL" endtime="20170805 05:16:08.745" starttime="20170805 05:16:08.744"></status>
</kw>
<msg timestamp="20170805 05:16:08.745" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170805 05:16:08.745" starttime="20170805 05:16:08.744"></status>
</kw>
<msg timestamp="20170805 05:16:08.745" level="INFO">${status} = False</msg>
<status status="FAIL" endtime="20170805 05:16:08.745" starttime="20170805 05:14:47.431"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.41.166.169</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170805 05:16:08.762" level="INFO">Length is 12</msg>
<status status="PASS" endtime="20170805 05:16:08.763" starttime="20170805 05:16:08.762"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170805 05:16:08.767" level="INFO">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg timestamp="20170805 05:16:21.797" level="INFO">${RC} = 1</msg>
<msg timestamp="20170805 05:16:21.797" level="INFO">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3022ms
</msg>
<status status="PASS" endtime="20170805 05:16:21.798" starttime="20170805 05:16:08.763"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170805 05:16:21.816" level="INFO">RC: 1
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3022ms
</msg>
<status status="PASS" endtime="20170805 05:16:21.816" starttime="20170805 05:16:21.813"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<msg timestamp="20170805 05:16:21.819" level="FAIL">1 != 0</msg>
<status status="FAIL" endtime="20170805 05:16:21.819" starttime="20170805 05:16:21.817"></status>
</kw>
<status status="FAIL" endtime="20170805 05:16:21.819" starttime="20170805 05:16:08.761"></status>
</kw>
<msg timestamp="20170805 05:16:21.821" level="FAIL">1 != 0</msg>
<status status="FAIL" endtime="20170805 05:16:21.821" starttime="20170805 05:16:08.746"></status>
</kw>
<status status="FAIL" endtime="20170805 05:16:21.821" starttime="20170805 05:16:08.745"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status status="PASS" endtime="20170805 05:16:21.822" starttime="20170805 05:16:21.822"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170805 05:16:21.823" level="INFO">${FFDC_DIR_PATH_STYLE} = </msg>
<status status="PASS" endtime="20170805 05:16:21.823" starttime="20170805 05:16:21.823"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170805 05:16:21.839" level="INFO">${FFDC_DIR_PATH} = </msg>
<status status="PASS" endtime="20170805 05:16:21.839" starttime="20170805 05:16:21.824"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<kw name="Set Ffdc Defaults" library="openbmc_ffdc">
<doc>Set a default value for ffdc_dir_path and ffdc_prefix if they don't</doc>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170805 05:16:21.842" level="INFO">${cur_time} = 2017-08-05 05:16:21:841471</msg>
<status status="PASS" endtime="20170805 05:16:21.842" starttime="20170805 05:16:21.841"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170805 05:16:21.843" level="INFO">${cur_time} = 20170805051621841471</msg>
<status status="PASS" endtime="20170805 05:16:21.843" starttime="20170805 05:16:21.842"></status>
</kw>
<status status="PASS" endtime="20170805 05:16:21.843" starttime="20170805 05:16:21.841"></status>
</kw>
<msg timestamp="20170805 05:16:21.847" level="INFO">${FFDC_TIME} = 20170805051621841471</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170805 05:16:21.849" level="INFO">${suite_name} = UpdateBmc</msg>
<status status="PASS" endtime="20170805 05:16:21.849" starttime="20170805 05:16:21.849"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170805 05:16:21.849" level="INFO">${suite_name} = 20170805051621841471_UpdateBmc</msg>
<status status="PASS" endtime="20170805 05:16:21.850" starttime="20170805 05:16:21.849"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170805 05:16:21.850" level="INFO">${test_name} = InitiateCodeUpdateBMC</msg>
<status status="PASS" endtime="20170805 05:16:21.850" starttime="20170805 05:16:21.850"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170805 05:16:21.851" level="INFO">${test_name} = 20170805051621841471_InitiateCodeUpdateBMC</msg>
<status status="PASS" endtime="20170805 05:16:21.851" starttime="20170805 05:16:21.850"></status>
</kw>
<status status="PASS" endtime="20170805 05:16:21.851" starttime="20170805 05:16:21.848"></status>
</kw>
<msg timestamp="20170805 05:16:21.851" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20170805051621841471_UpdateBmc/20170805051621841471_InitiateCodeUpdateBMC/</msg>
<msg timestamp="20170805 05:16:21.856" level="INFO">${FFDC_PREFIX} = 20170805051621841471_</msg>
<status status="PASS" endtime="20170805 05:16:21.856" starttime="20170805 05:16:21.840"></status>
</kw>
<status status="PASS" endtime="20170805 05:16:21.856" starttime="20170805 05:16:21.840"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" endtime="20170805 05:16:21.857" starttime="20170805 05:16:21.857"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20170805 05:16:21.858" html="yes" level="INFO">Directory '&lt;a href="file:///home/fspcibld/logs"&gt;/home/fspcibld/logs&lt;/a&gt;' already exists.</msg>
<status status="PASS" endtime="20170805 05:16:21.858" starttime="20170805 05:16:21.857"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170805 05:16:21.859" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20170805 05:16:21.859" starttime="20170805 05:16:21.859"></status>
</kw>
<msg timestamp="20170805 05:16:21.859" level="INFO">${exist} = True</msg>
<status status="PASS" endtime="20170805 05:16:21.859" starttime="20170805 05:16:21.858"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status status="PASS" endtime="20170805 05:16:21.860" starttime="20170805 05:16:21.860"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" endtime="20170805 05:16:21.860" starttime="20170805 05:16:21.860"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170805 05:16:21.861" level="INFO">${cur_time} = 2017-08-05 05:16:21:861252</msg>
<status status="PASS" endtime="20170805 05:16:21.861" starttime="20170805 05:16:21.861"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170805 05:16:21.862" level="INFO">${cur_time} = 20170805051621861252</msg>
<status status="PASS" endtime="20170805 05:16:21.862" starttime="20170805 05:16:21.862"></status>
</kw>
<msg timestamp="20170805 05:16:21.862" level="INFO">${cur_time} = 20170805051621861252</msg>
<status status="PASS" endtime="20170805 05:16:21.862" starttime="20170805 05:16:21.861"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20170805 05:16:21.864" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 05:16:21.864" starttime="20170805 05:16:21.863"></status>
</kw>
<status status="PASS" endtime="20170805 05:16:21.865" starttime="20170805 05:16:21.822"></status>
</kw>
<status status="FAIL" endtime="20170805 05:16:21.865" starttime="20170805 05:14:47.430"></status>
</kw>
<msg timestamp="20170805 05:16:21.865" level="FAIL">Several failures occurred:

1) Replacing variables from keyword return value failed: Resolving variable '${state.rsplit('.', 1)[1]}' failed: AttributeError: 'NoneType' object has no attribute 'rsplit'

2) 1 != 0</msg>
<status status="FAIL" endtime="20170805 05:16:21.865" starttime="20170805 05:14:47.418">Several failures occurred:

1) Replacing variables from keyword return value failed: Resolving variable '${state.rsplit('.', 1)[1]}' failed: AttributeError: 'NoneType' object has no attribute 'rsplit'

2) 1 != 0</status>
</kw>
<doc>Initiate a code update on the BMC.</doc>
<tags>
<tag>Initiate_Code_Update_BMC</tag>
</tags>
<status status="FAIL" endtime="20170805 05:16:21.866" critical="yes" starttime="20170805 04:54:14.536">Keyword 'Verify Ping and REST Authentication' failed after retrying for 20 minutes. The last error was: Ping Failed

Also teardown failed:
Several failures occurred:

1) Replacing variables from keyword return value failed: Resolving variable '${state.rsplit('.', 1)[1]}' failed: AttributeError: 'NoneType' object has no attribute 'rsplit'

2) 1 != 0</status>
</test>
<doc>Trigger code update to a target BMC.
Execution Method :
python -m robot -v OPENBMC_HOST:&lt;hostname&gt;
-v FILE_PATH:&lt;path/*all.tar&gt; update_bmc.robot

Code update method BMC using REST
Update work flow sequence:
- User input BMC File existence check
- Ping Test and REST authentication
- Set Host Power host setting Policy to RESTORE_LAST_STATE
On reboot this policy would ensure the BMC comes
online and stays at HOST_POWERED_OFF state.
- Issue poweroff
- Prune archived journal logs
- Prepare for Update
- Wait for BMC to come online clean
- Wait for BMC_READY state
- Apply preserve BMC Network setting
- SCP image to BMC
- Activate the flash image
- Warm Reset BMC to activate code
- Wait for BMC to come online time out 30 minutes
- Version check post update
- Identify REST url post update</doc>
<status status="FAIL" endtime="20170805 05:16:21.869" starttime="20170805 04:54:13.423"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="0">Critical Tests</stat>
<stat fail="1" pass="0">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">Initiate_Code_Update_BMC</stat>
</tag>
<suite>
<stat fail="1" id="s1" name="Update Bmc" pass="0">Update Bmc</stat>
</suite>
</statistics>
<errors>
<msg timestamp="20170805 04:54:39.749" level="WARN">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff76113590&gt;: Failed to establish a new connection: [Errno 111] Connection refused',)': /login</msg>
<msg timestamp="20170805 04:54:39.958" level="WARN">Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff761133d0&gt;: Failed to establish a new connection: [Errno 111] Connection refused',)': /login</msg>
<msg timestamp="20170805 04:54:40.367" level="WARN">Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff76113a10&gt;: Failed to establish a new connection: [Errno 111] Connection refused',)': /login</msg>
<msg timestamp="20170805 04:55:20.410" level="WARN">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff7692f310&gt;, 'Connection to 9.41.166.169 timed out. (connect timeout=20.0)')': /login</msg>
<msg timestamp="20170805 04:55:40.632" level="WARN">Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff76113990&gt;, 'Connection to 9.41.166.169 timed out. (connect timeout=20.0)')': /login</msg>
<msg timestamp="20170805 04:56:01.054" level="WARN">Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff760a4690&gt;, 'Connection to 9.41.166.169 timed out. (connect timeout=20.0)')': /login</msg>
<msg timestamp="20170805 05:14:57.454" level="WARN">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff760ac310&gt;, 'Connection to 9.41.166.169 timed out. (connect timeout=10.0)')': /login</msg>
<msg timestamp="20170805 05:15:07.665" level="WARN">Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff760ac3d0&gt;, 'Connection to 9.41.166.169 timed out. (connect timeout=10.0)')': /login</msg>
<msg timestamp="20170805 05:15:18.076" level="WARN">Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff76061a10&gt;, 'Connection to 9.41.166.169 timed out. (connect timeout=10.0)')': /login</msg>
<msg timestamp="20170805 05:15:38.104" level="WARN">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff76061a10&gt;, 'Connection to 9.41.166.169 timed out. (connect timeout=10.0)')': /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<msg timestamp="20170805 05:15:48.315" level="WARN">Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff76061a90&gt;, 'Connection to 9.41.166.169 timed out. (connect timeout=10.0)')': /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<msg timestamp="20170805 05:15:58.727" level="WARN">Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff76113e50&gt;, 'Connection to 9.41.166.169 timed out. (connect timeout=10.0)')': /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
</errors>
</robot>
