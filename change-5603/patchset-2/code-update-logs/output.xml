<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170728 17:42:29.032" generator="Robot 3.0.2 (Python 2.7.12 on linux2)">
<suite source="/home/fspcibld/openbmc-test-automation/extended/test_bios_update.robot" id="s1" name="Test Bios Update">
<test id="s1-t1" name="Host BIOS Update">
<kw name="Validate Parameters">
<doc>Validate parameter and file existence.</doc>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${PNOR_IMAGE_PATH}</arg>
<arg>msg=PNOR image path not set</arg>
</arguments>
<msg timestamp="20170728 17:42:29.855" level="INFO">Length is 42</msg>
<status status="PASS" endtime="20170728 17:42:29.855" starttime="20170728 17:42:29.855"></status>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${PNOR_IMAGE_PATH}</arg>
<arg>msg=${PNOR_IMAGE_PATH} File not found</arg>
</arguments>
<msg timestamp="20170728 17:42:29.856" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/witherspoon_910_golden.pnor"&gt;/home/fspcibld/witherspoon_910_golden.pnor&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20170728 17:42:29.856" starttime="20170728 17:42:29.856"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:29.856" starttime="20170728 17:42:29.854"></status>
</kw>
<kw name="Prepare BMC For Update">
<doc>Prepare system for PNOR update.</doc>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>OBMC Boot Test \ REST Power Off</arg>
</arguments>
<kw name="OBMC Boot Test" library="obmc_boot_test_resource">
<arguments>
<arg>REST Power Off</arg>
</arguments>
<kw name="Obmc Boot Test Py" library="obmc_boot_test">
<doc>Do main program processing.</doc>
<arguments>
<arg>@{arguments}</arg>
</arguments>
<msg timestamp="20170728 17:42:29.863" level="INFO">${boot_stack} = REST Power Off</msg>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170728 17:42:29.917" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170728 17:42:29.917" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170728 17:42:30.649" level="INFO">Read output: root@witherspoon:~#</msg>
<msg timestamp="20170728 17:42:30.649" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170728 17:42:30.727" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170728 17:42:30.736" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170728 17:42:30.738" level="INFO">${stderr} = </msg>
<msg timestamp="20170728 17:42:30.738" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20170728 17:42:30.738" starttime="20170728 17:42:29.901"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170728 17:42:30.739" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170728 17:42:30.739" starttime="20170728 17:42:30.739"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170728 17:42:30.739" level="INFO">Length is 11</msg>
<status status="PASS" endtime="20170728 17:42:30.739" starttime="20170728 17:42:30.739"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:30.740" starttime="20170728 17:42:29.900"></status>
</kw>
<msg timestamp="20170728 17:42:30.740" level="INFO">${openbmc_model} = Witherspoon</msg>
<msg timestamp="20170728 17:42:30.948" level="INFO">${plug_in_packages_list} = []</msg>
<kw name="Set BMC Power Policy" library="utils">
<doc>Set the given BMC power policy.</doc>
<arguments>
<arg>RESTORE_LAST_STATE</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${policy}</arg>
</arguments>
<assign>
<var>${valueDict}</var>
</assign>
<msg timestamp="20170728 17:42:30.962" level="INFO">${valueDict} = {u'data': 'RESTORE_LAST_STATE'}</msg>
<status status="PASS" endtime="20170728 17:42:30.962" starttime="20170728 17:42:30.961"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_SETTING}</arg>
<arg>power_policy</arg>
<arg>data=${valueDict}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170728 17:42:30.963" level="INFO">${base_uri} = /org/openbmc/settings/host0</msg>
<status status="PASS" endtime="20170728 17:42:30.964" starttime="20170728 17:42:30.963"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170728 17:42:30.966" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170728 17:42:30.967" starttime="20170728 17:42:30.966"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170728 17:42:30.968" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170728 17:42:30.968" starttime="20170728 17:42:30.967"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170728 17:42:30.968" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170728 17:42:30.968" starttime="20170728 17:42:30.968"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170728 17:42:30.969" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170728 17:42:30.969" starttime="20170728 17:42:30.969"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170728 17:42:31.203" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170728 17:42:31.203" starttime="20170728 17:42:30.970"></status>
</kw>
<msg timestamp="20170728 17:42:31.204" level="INFO">${status} = PASS</msg>
<msg timestamp="20170728 17:42:31.204" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170728 17:42:31.204" starttime="20170728 17:42:30.969"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170728 17:42:31.204" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170728 17:42:31.204" starttime="20170728 17:42:31.204"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170728 17:42:31.205" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170728 17:42:31.205" starttime="20170728 17:42:31.205"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:31.205" starttime="20170728 17:42:30.965"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:31.205" starttime="20170728 17:42:30.965"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:31.205" starttime="20170728 17:42:30.964"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170728 17:42:31.206" level="INFO">${base_uri} = /org/openbmc/settings/host0/attr/power_policy</msg>
<status status="PASS" endtime="20170728 17:42:31.206" starttime="20170728 17:42:31.206"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170728 17:42:31.207" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170728 17:42:31.207" starttime="20170728 17:42:31.206"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170728 17:42:31.207" starttime="20170728 17:42:31.207"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170728 17:42:31.209" level="INFO">${msg} = URI:https://9.3.86.161/org/openbmc/settings/host0/attr/power_policy, method:Put, args:{u'data': {u'data': 'RESTORE_LAST_STATE'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170728 17:42:31.209" starttime="20170728 17:42:31.208"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170728 17:42:31.210" level="INFO">URI:https://9.3.86.161/org/openbmc/settings/host0/attr/power_policy, method:Put, args:{u'data': {u'data': 'RESTORE_LAST_STATE'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170728 17:42:31.210" starttime="20170728 17:42:31.210"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:31.210" starttime="20170728 17:42:31.209"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:31.210" starttime="20170728 17:42:31.207"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170728 17:42:31.403" level="INFO">Put Request using : alias=openbmc, uri=/org/openbmc/settings/host0/attr/power_policy, data={"data": "RESTORE_LAST_STATE"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170728 17:42:31.403" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170728 17:42:31.403" starttime="20170728 17:42:31.210"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170728 17:42:31.404" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170728 17:42:31.404" starttime="20170728 17:42:31.404"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170728 17:42:31.405" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170728 17:42:31.405" starttime="20170728 17:42:31.405"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:31.405" starttime="20170728 17:42:31.404"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:31.406" starttime="20170728 17:42:31.403"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170728 17:42:31.406" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170728 17:42:31.406" starttime="20170728 17:42:31.406"></status>
</kw>
<msg timestamp="20170728 17:42:31.406" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170728 17:42:31.406" starttime="20170728 17:42:30.964"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170728 17:42:31.407" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170728 17:42:31.407" starttime="20170728 17:42:31.407"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170728 17:42:31.408" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170728 17:42:31.408" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170728 17:42:31.408" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170728 17:42:31.408" starttime="20170728 17:42:31.407"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:31.408" starttime="20170728 17:42:30.962"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_SETTING}</arg>
<arg>power_policy</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170728 17:42:31.411" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170728 17:42:31.412" starttime="20170728 17:42:31.411"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170728 17:42:31.412" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170728 17:42:31.412" starttime="20170728 17:42:31.412"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170728 17:42:31.413" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170728 17:42:31.413" starttime="20170728 17:42:31.412"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170728 17:42:31.413" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170728 17:42:31.413" starttime="20170728 17:42:31.413"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170728 17:42:31.600" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170728 17:42:31.600" starttime="20170728 17:42:31.414"></status>
</kw>
<msg timestamp="20170728 17:42:31.600" level="INFO">${status} = PASS</msg>
<msg timestamp="20170728 17:42:31.600" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170728 17:42:31.600" starttime="20170728 17:42:31.414"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170728 17:42:31.601" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170728 17:42:31.601" starttime="20170728 17:42:31.601"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170728 17:42:31.602" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170728 17:42:31.602" starttime="20170728 17:42:31.601"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:31.602" starttime="20170728 17:42:31.410"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:31.602" starttime="20170728 17:42:31.410"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:31.602" starttime="20170728 17:42:31.409"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170728 17:42:31.603" level="INFO">${base_uri} = /org/openbmc/settings/host0/attr/power_policy</msg>
<status status="PASS" endtime="20170728 17:42:31.603" starttime="20170728 17:42:31.602"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170728 17:42:31.603" starttime="20170728 17:42:31.603"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170728 17:42:31.687" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/settings/host0/attr/power_policy, headers=None json=None</msg>
<msg timestamp="20170728 17:42:31.687" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170728 17:42:31.687" starttime="20170728 17:42:31.604"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170728 17:42:31.688" starttime="20170728 17:42:31.688"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170728 17:42:31.688" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170728 17:42:31.689" starttime="20170728 17:42:31.688"></status>
</kw>
<msg timestamp="20170728 17:42:31.689" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170728 17:42:31.689" starttime="20170728 17:42:31.409"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170728 17:42:31.689" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170728 17:42:31.689" starttime="20170728 17:42:31.689"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170728 17:42:31.690" level="INFO">To JSON using : content={
  "data": "RESTORE_LAST_STATE", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170728 17:42:31.690" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170728 17:42:31.690" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'RESTORE_LAST_STATE'}</msg>
<status status="PASS" endtime="20170728 17:42:31.690" starttime="20170728 17:42:31.690"></status>
</kw>
<msg timestamp="20170728 17:42:31.690" level="INFO">${currentPolicy} = RESTORE_LAST_STATE</msg>
<status status="PASS" endtime="20170728 17:42:31.691" starttime="20170728 17:42:31.408"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${currentPolicy}</arg>
<arg>${policy}</arg>
</arguments>
<msg timestamp="20170728 17:42:31.691" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20170728 17:42:31.691" starttime="20170728 17:42:31.691"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:31.691" starttime="20170728 17:42:30.960"></status>
</kw>
<msg timestamp="20170728 17:42:31.774" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20170728 17:42:31.801" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20170728 17:42:31.809" level="INFO">${TEST_MESSAGE} = </msg>
<msg timestamp="20170728 17:42:31.809" level="INFO">${FFDC_LOG_PATH} = ./</msg>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170728 17:42:31.845" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170728 17:42:31.846" starttime="20170728 17:42:31.844"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170728 17:42:31.847" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170728 17:42:31.847" starttime="20170728 17:42:31.846"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170728 17:42:31.848" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170728 17:42:31.848" starttime="20170728 17:42:31.847"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170728 17:42:31.848" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170728 17:42:31.849" starttime="20170728 17:42:31.848"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170728 17:42:32.038" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170728 17:42:32.039" starttime="20170728 17:42:31.849"></status>
</kw>
<msg timestamp="20170728 17:42:32.039" level="INFO">${status} = PASS</msg>
<msg timestamp="20170728 17:42:32.039" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170728 17:42:32.039" starttime="20170728 17:42:31.849"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170728 17:42:32.040" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170728 17:42:32.040" starttime="20170728 17:42:32.040"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170728 17:42:32.041" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170728 17:42:32.041" starttime="20170728 17:42:32.040"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:32.041" starttime="20170728 17:42:31.843"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:32.041" starttime="20170728 17:42:31.843"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:32.042" starttime="20170728 17:42:31.842"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170728 17:42:32.042" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170728 17:42:32.042" starttime="20170728 17:42:32.042"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170728 17:42:32.043" starttime="20170728 17:42:32.043"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170728 17:42:32.128" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170728 17:42:32.129" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170728 17:42:32.129" starttime="20170728 17:42:32.044"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170728 17:42:32.130" starttime="20170728 17:42:32.129"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170728 17:42:32.130" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170728 17:42:32.130" starttime="20170728 17:42:32.130"></status>
</kw>
<msg timestamp="20170728 17:42:32.130" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170728 17:42:32.130" starttime="20170728 17:42:31.841"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170728 17:42:32.131" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170728 17:42:32.131" starttime="20170728 17:42:32.131"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170728 17:42:32.131" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170728 17:42:32.132" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170728 17:42:32.132" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status status="PASS" endtime="20170728 17:42:32.132" starttime="20170728 17:42:32.131"></status>
</kw>
<msg timestamp="20170728 17:42:32.132" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170728 17:42:32.132" starttime="20170728 17:42:31.840"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:32.132" starttime="20170728 17:42:31.838"></status>
</kw>
<kw name="Get BMC State" library="state_manager">
<doc>Return the state of the BMC.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${BMC_STATE_URI}</arg>
<arg>CurrentBMCState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170728 17:42:32.136" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170728 17:42:32.137" starttime="20170728 17:42:32.136"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170728 17:42:32.137" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170728 17:42:32.137" starttime="20170728 17:42:32.137"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170728 17:42:32.138" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170728 17:42:32.138" starttime="20170728 17:42:32.138"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170728 17:42:32.139" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170728 17:42:32.139" starttime="20170728 17:42:32.138"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170728 17:42:32.358" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170728 17:42:32.358" starttime="20170728 17:42:32.139"></status>
</kw>
<msg timestamp="20170728 17:42:32.358" level="INFO">${status} = PASS</msg>
<msg timestamp="20170728 17:42:32.358" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170728 17:42:32.358" starttime="20170728 17:42:32.139"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170728 17:42:32.359" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170728 17:42:32.359" starttime="20170728 17:42:32.358"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170728 17:42:32.359" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170728 17:42:32.359" starttime="20170728 17:42:32.359"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:32.360" starttime="20170728 17:42:32.135"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:32.360" starttime="20170728 17:42:32.135"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:32.360" starttime="20170728 17:42:32.134"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170728 17:42:32.360" level="INFO">${base_uri} = /xyz/openbmc_project/state/bmc0//attr/CurrentBMCState</msg>
<status status="PASS" endtime="20170728 17:42:32.361" starttime="20170728 17:42:32.360"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170728 17:42:32.361" starttime="20170728 17:42:32.361"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170728 17:42:32.424" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/bmc0//attr/CurrentBMCState, headers=None json=None</msg>
<msg timestamp="20170728 17:42:32.424" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170728 17:42:32.424" starttime="20170728 17:42:32.361"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170728 17:42:32.425" starttime="20170728 17:42:32.425"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170728 17:42:32.426" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170728 17:42:32.426" starttime="20170728 17:42:32.425"></status>
</kw>
<msg timestamp="20170728 17:42:32.426" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170728 17:42:32.426" starttime="20170728 17:42:32.134"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170728 17:42:32.427" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170728 17:42:32.427" starttime="20170728 17:42:32.426"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170728 17:42:32.427" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170728 17:42:32.427" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170728 17:42:32.427" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.BMC.BMCState.Ready'}</msg>
<status status="PASS" endtime="20170728 17:42:32.427" starttime="20170728 17:42:32.427"></status>
</kw>
<msg timestamp="20170728 17:42:32.428" level="INFO">${state} = xyz.openbmc_project.State.BMC.BMCState.Ready</msg>
<status status="PASS" endtime="20170728 17:42:32.428" starttime="20170728 17:42:32.133"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:32.428" starttime="20170728 17:42:32.133"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170728 17:42:32.432" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170728 17:42:32.432" starttime="20170728 17:42:32.431"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170728 17:42:32.433" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170728 17:42:32.433" starttime="20170728 17:42:32.433"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170728 17:42:32.434" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170728 17:42:32.434" starttime="20170728 17:42:32.433"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170728 17:42:32.434" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170728 17:42:32.434" starttime="20170728 17:42:32.434"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170728 17:42:32.616" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170728 17:42:32.616" starttime="20170728 17:42:32.435"></status>
</kw>
<msg timestamp="20170728 17:42:32.616" level="INFO">${status} = PASS</msg>
<msg timestamp="20170728 17:42:32.616" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170728 17:42:32.616" starttime="20170728 17:42:32.435"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170728 17:42:32.617" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170728 17:42:32.617" starttime="20170728 17:42:32.617"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170728 17:42:32.618" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170728 17:42:32.618" starttime="20170728 17:42:32.617"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:32.618" starttime="20170728 17:42:32.431"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:32.618" starttime="20170728 17:42:32.430"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:32.618" starttime="20170728 17:42:32.430"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170728 17:42:32.619" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170728 17:42:32.619" starttime="20170728 17:42:32.619"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170728 17:42:32.620" starttime="20170728 17:42:32.619"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170728 17:42:32.687" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170728 17:42:32.687" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170728 17:42:32.687" starttime="20170728 17:42:32.620"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170728 17:42:32.688" starttime="20170728 17:42:32.687"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170728 17:42:32.688" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170728 17:42:32.688" starttime="20170728 17:42:32.688"></status>
</kw>
<msg timestamp="20170728 17:42:32.688" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170728 17:42:32.688" starttime="20170728 17:42:32.429"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170728 17:42:32.689" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170728 17:42:32.689" starttime="20170728 17:42:32.689"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170728 17:42:32.690" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170728 17:42:32.690" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170728 17:42:32.690" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170728 17:42:32.690" starttime="20170728 17:42:32.689"></status>
</kw>
<msg timestamp="20170728 17:42:32.690" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170728 17:42:32.690" starttime="20170728 17:42:32.429"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:32.690" starttime="20170728 17:42:32.428"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170728 17:42:32.694" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170728 17:42:32.695" starttime="20170728 17:42:32.694"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170728 17:42:32.695" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170728 17:42:32.695" starttime="20170728 17:42:32.695"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170728 17:42:32.696" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170728 17:42:32.696" starttime="20170728 17:42:32.696"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170728 17:42:32.697" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170728 17:42:32.697" starttime="20170728 17:42:32.696"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170728 17:42:32.885" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170728 17:42:32.885" starttime="20170728 17:42:32.697"></status>
</kw>
<msg timestamp="20170728 17:42:32.885" level="INFO">${status} = PASS</msg>
<msg timestamp="20170728 17:42:32.885" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170728 17:42:32.885" starttime="20170728 17:42:32.697"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170728 17:42:32.886" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170728 17:42:32.886" starttime="20170728 17:42:32.885"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170728 17:42:32.886" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170728 17:42:32.886" starttime="20170728 17:42:32.886"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:32.887" starttime="20170728 17:42:32.693"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:32.887" starttime="20170728 17:42:32.693"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:32.887" starttime="20170728 17:42:32.692"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170728 17:42:32.887" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170728 17:42:32.887" starttime="20170728 17:42:32.887"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170728 17:42:32.888" starttime="20170728 17:42:32.888"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170728 17:42:32.964" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170728 17:42:32.964" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170728 17:42:32.964" starttime="20170728 17:42:32.888"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170728 17:42:32.964" starttime="20170728 17:42:32.964"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170728 17:42:32.965" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170728 17:42:32.965" starttime="20170728 17:42:32.965"></status>
</kw>
<msg timestamp="20170728 17:42:32.965" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170728 17:42:32.965" starttime="20170728 17:42:32.692"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170728 17:42:32.966" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170728 17:42:32.966" starttime="20170728 17:42:32.965"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170728 17:42:32.966" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170728 17:42:32.966" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170728 17:42:32.966" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170728 17:42:32.967" starttime="20170728 17:42:32.966"></status>
</kw>
<msg timestamp="20170728 17:42:32.967" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170728 17:42:32.967" starttime="20170728 17:42:32.691"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:32.967" starttime="20170728 17:42:32.691"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:32.995" starttime="20170728 17:42:29.863"></status>
</kw>
<kw type="teardown" name="Obmc Boot Test Teardown" library="obmc_boot_test">
<doc>Clean up after the Main keyword.</doc>
<msg timestamp="20170728 17:42:32.999" level="INFO">Log level changed from NONE to INFO.</msg>
<status status="PASS" endtime="20170728 17:42:33.001" starttime="20170728 17:42:32.995"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:33.001" starttime="20170728 17:42:29.862"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:33.001" starttime="20170728 17:42:29.857"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>Delete Error logs</arg>
</arguments>
<kw name="Delete Error Logs" library="utils">
<doc>Delete error logs.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}${/}list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170728 17:42:33.011" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170728 17:42:33.011" starttime="20170728 17:42:33.011"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170728 17:42:33.012" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170728 17:42:33.012" starttime="20170728 17:42:33.012"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170728 17:42:33.013" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170728 17:42:33.013" starttime="20170728 17:42:33.012"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170728 17:42:33.013" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170728 17:42:33.013" starttime="20170728 17:42:33.013"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170728 17:42:33.227" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170728 17:42:33.227" starttime="20170728 17:42:33.014"></status>
</kw>
<msg timestamp="20170728 17:42:33.227" level="INFO">${status} = PASS</msg>
<msg timestamp="20170728 17:42:33.227" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170728 17:42:33.227" starttime="20170728 17:42:33.014"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170728 17:42:33.228" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170728 17:42:33.228" starttime="20170728 17:42:33.227"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170728 17:42:33.229" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170728 17:42:33.229" starttime="20170728 17:42:33.228"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:33.229" starttime="20170728 17:42:33.010"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:33.229" starttime="20170728 17:42:33.010"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:33.229" starttime="20170728 17:42:33.009"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170728 17:42:33.230" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//list</msg>
<status status="PASS" endtime="20170728 17:42:33.230" starttime="20170728 17:42:33.229"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170728 17:42:33.230" starttime="20170728 17:42:33.230"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170728 17:42:33.274" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//list, headers=None json=None</msg>
<msg timestamp="20170728 17:42:33.274" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170728 17:42:33.274" starttime="20170728 17:42:33.230"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170728 17:42:33.275" starttime="20170728 17:42:33.275"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170728 17:42:33.275" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170728 17:42:33.276" starttime="20170728 17:42:33.275"></status>
</kw>
<msg timestamp="20170728 17:42:33.276" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170728 17:42:33.276" starttime="20170728 17:42:33.008"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} == ${HTTP_NOT_FOUND}</arg>
</arguments>
<msg timestamp="20170728 17:42:33.276" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170728 17:42:33.276" starttime="20170728 17:42:33.276"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:33.277" starttime="20170728 17:42:33.008"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:33.277" starttime="20170728 17:42:33.002"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:33.277" starttime="20170728 17:42:29.856"></status>
</kw>
<kw name="Update PNOR Image">
<doc>Copy the PNOR image to the BMC /tmp dir and flash it.</doc>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>Copy PNOR to BMC</arg>
</arguments>
<kw name="Copy PNOR to BMC" library="utils">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20170728 17:42:33.292" starttime="20170728 17:42:33.286"></status>
</kw>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20170728 17:42:33.294" starttime="20170728 17:42:33.293"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" endtime="20170728 17:42:33.993" starttime="20170728 17:42:33.295"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:33.993" starttime="20170728 17:42:33.294"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:33.993" starttime="20170728 17:42:33.293"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Copying ${PNOR_IMAGE_PATH} to /tmp</arg>
</arguments>
<msg timestamp="20170728 17:42:33.994" level="INFO">Copying /home/fspcibld/witherspoon_910_golden.pnor to /tmp</msg>
<status status="PASS" endtime="20170728 17:42:33.994" starttime="20170728 17:42:33.994"></status>
</kw>
<kw name="Put File" library="scp">
<doc>Uploads a file to the remote machine from the local machine.</doc>
<arguments>
<arg>${PNOR_IMAGE_PATH}</arg>
<arg>/tmp</arg>
</arguments>
<msg timestamp="20170728 17:42:53.555" level="FAIL">timeout</msg>
<status status="FAIL" endtime="20170728 17:42:53.555" starttime="20170728 17:42:33.994"></status>
</kw>
<status status="FAIL" endtime="20170728 17:42:53.555" starttime="20170728 17:42:33.285"></status>
</kw>
<msg timestamp="20170728 17:42:53.556" level="FAIL">timeout</msg>
<status status="FAIL" endtime="20170728 17:42:53.557" starttime="20170728 17:42:33.277"></status>
</kw>
<status status="FAIL" endtime="20170728 17:42:53.557" starttime="20170728 17:42:33.277"></status>
</kw>
<kw type="teardown" name="Test Bios Teardown">
<doc>Log FFDC if test suite fails and collect SOL log for</doc>
<kw name="Printn" library="gen_print">
<status status="PASS" endtime="20170728 17:42:53.559" starttime="20170728 17:42:53.559"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>FFDC On Test Case Fail</arg>
</arguments>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170728 17:42:53.573" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170728 17:42:53.576" starttime="20170728 17:42:53.572"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170728 17:42:53.577" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170728 17:42:53.577" starttime="20170728 17:42:53.576"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170728 17:42:53.577" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170728 17:42:53.577" starttime="20170728 17:42:53.577"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170728 17:42:53.578" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170728 17:42:53.578" starttime="20170728 17:42:53.578"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170728 17:42:53.777" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170728 17:42:53.777" starttime="20170728 17:42:53.579"></status>
</kw>
<msg timestamp="20170728 17:42:53.777" level="INFO">${status} = PASS</msg>
<msg timestamp="20170728 17:42:53.777" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170728 17:42:53.777" starttime="20170728 17:42:53.579"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170728 17:42:53.778" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170728 17:42:53.778" starttime="20170728 17:42:53.778"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170728 17:42:53.779" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170728 17:42:53.779" starttime="20170728 17:42:53.778"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:53.779" starttime="20170728 17:42:53.572"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:53.779" starttime="20170728 17:42:53.571"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:53.779" starttime="20170728 17:42:53.571"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170728 17:42:53.780" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170728 17:42:53.780" starttime="20170728 17:42:53.779"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170728 17:42:53.781" starttime="20170728 17:42:53.780"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170728 17:42:53.846" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170728 17:42:53.846" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170728 17:42:53.846" starttime="20170728 17:42:53.781"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170728 17:42:53.847" starttime="20170728 17:42:53.847"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170728 17:42:53.847" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170728 17:42:53.847" starttime="20170728 17:42:53.847"></status>
</kw>
<msg timestamp="20170728 17:42:53.848" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170728 17:42:53.848" starttime="20170728 17:42:53.570"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170728 17:42:53.848" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170728 17:42:53.848" starttime="20170728 17:42:53.848"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170728 17:42:53.849" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170728 17:42:53.849" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170728 17:42:53.849" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170728 17:42:53.849" starttime="20170728 17:42:53.849"></status>
</kw>
<msg timestamp="20170728 17:42:53.849" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170728 17:42:53.849" starttime="20170728 17:42:53.569"></status>
</kw>
<msg timestamp="20170728 17:42:53.850" level="INFO">${host_state} = Off</msg>
<status status="PASS" endtime="20170728 17:42:53.850" starttime="20170728 17:42:53.569"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg timestamp="20170728 17:42:53.851" level="FAIL">Off != Quiesced</msg>
<status status="FAIL" endtime="20170728 17:42:53.851" starttime="20170728 17:42:53.850"></status>
</kw>
<msg timestamp="20170728 17:42:53.851" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170728 17:42:53.851" starttime="20170728 17:42:53.850"></status>
</kw>
<msg timestamp="20170728 17:42:53.851" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170728 17:42:53.851" starttime="20170728 17:42:53.569"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.3.86.161</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170728 17:42:53.863" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20170728 17:42:53.863" starttime="20170728 17:42:53.862"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170728 17:42:53.867" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20170728 17:42:56.871" level="INFO">${RC} = 0</msg>
<msg timestamp="20170728 17:42:56.871" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.768 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.584 ms
64 bytes from 9.3.86.161: icmp_se...</msg>
<status status="PASS" endtime="20170728 17:42:56.871" starttime="20170728 17:42:53.863"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170728 17:42:56.875" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.768 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.584 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.605 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=1.18 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3000ms
rtt min/avg/max/mdev = 0.584/0.785/1.183/0.240 ms</msg>
<status status="PASS" endtime="20170728 17:42:56.876" starttime="20170728 17:42:56.874"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170728 17:42:56.876" starttime="20170728 17:42:56.876"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:56.877" starttime="20170728 17:42:53.862"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170728 17:42:56.892" level="INFO">${cur_time} = 2017-07-28 17:42:56:891457</msg>
<status status="PASS" endtime="20170728 17:42:56.892" starttime="20170728 17:42:56.891"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170728 17:42:56.892" level="INFO">${cur_time} = 20170728174256891457</msg>
<status status="PASS" endtime="20170728 17:42:56.892" starttime="20170728 17:42:56.892"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:56.893" starttime="20170728 17:42:56.890"></status>
</kw>
<msg timestamp="20170728 17:42:56.899" level="INFO">${FFDC_TIME} = 20170728174256891457</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170728 17:42:56.900" level="INFO">${suite_name} = TestBiosUpdate</msg>
<status status="PASS" endtime="20170728 17:42:56.900" starttime="20170728 17:42:56.900"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170728 17:42:56.901" level="INFO">${suite_name} = 20170728174256891457_TestBiosUpdate</msg>
<status status="PASS" endtime="20170728 17:42:56.901" starttime="20170728 17:42:56.901"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170728 17:42:56.902" level="INFO">${test_name} = HostBIOSUpdate</msg>
<status status="PASS" endtime="20170728 17:42:56.902" starttime="20170728 17:42:56.901"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170728 17:42:56.902" level="INFO">${test_name} = 20170728174256891457_HostBIOSUpdate</msg>
<status status="PASS" endtime="20170728 17:42:56.902" starttime="20170728 17:42:56.902"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:56.902" starttime="20170728 17:42:56.899"></status>
</kw>
<msg timestamp="20170728 17:42:56.903" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/</msg>
<msg timestamp="20170728 17:42:56.903" level="INFO">${FFDC_PREFIX} = 20170728174256891457_</msg>
<msg timestamp="20170728 17:42:56.923" level="INFO">${LOG_PREFIX} = /home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/</arg>
</arguments>
<msg timestamp="20170728 17:42:56.924" html="yes" level="INFO">Created directory '&lt;a href="file:///home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate"&gt;/home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170728 17:42:56.924" starttime="20170728 17:42:56.924"></status>
</kw>
<msg timestamp="20170728 17:42:56.929" level="INFO">${FFDC_FILE_PATH} = /home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170728 17:42:56.940" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_general.txt"&gt;/home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170728 17:42:56.940" starttime="20170728 17:42:56.940"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:56.941" starttime="20170728 17:42:56.939"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170728 17:42:56.942" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_general.txt"&gt;/home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170728 17:42:56.942" starttime="20170728 17:42:56.941"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:56.942" starttime="20170728 17:42:56.941"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170728 17:42:56.943" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_general.txt"&gt;/home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170728 17:42:56.943" starttime="20170728 17:42:56.943"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:56.943" starttime="20170728 17:42:56.942"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170728 17:42:56.944" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_general.txt"&gt;/home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170728 17:42:56.944" starttime="20170728 17:42:56.944"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:56.945" starttime="20170728 17:42:56.943"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170728 17:42:56.946" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_general.txt"&gt;/home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170728 17:42:56.946" starttime="20170728 17:42:56.945"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:56.946" starttime="20170728 17:42:56.945"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170728 17:42:56.947" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_general.txt"&gt;/home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170728 17:42:56.947" starttime="20170728 17:42:56.947"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:56.947" starttime="20170728 17:42:56.946"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170728 17:42:56.949" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_general.txt"&gt;/home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170728 17:42:56.949" starttime="20170728 17:42:56.948"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:56.949" starttime="20170728 17:42:56.947"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170728 17:42:56.950" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_general.txt"&gt;/home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170728 17:42:56.951" starttime="20170728 17:42:56.950"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:56.951" starttime="20170728 17:42:56.949"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170728 17:42:56.952" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_general.txt"&gt;/home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170728 17:42:56.952" starttime="20170728 17:42:56.951"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:56.952" starttime="20170728 17:42:56.951"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170728 17:42:56.953" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_general.txt"&gt;/home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170728 17:42:56.953" starttime="20170728 17:42:56.953"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:56.954" starttime="20170728 17:42:56.952"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170728 17:42:56.954" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_general.txt"&gt;/home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170728 17:42:56.955" starttime="20170728 17:42:56.954"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:56.955" starttime="20170728 17:42:56.954"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170728 17:42:56.956" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_general.txt"&gt;/home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170728 17:42:56.956" starttime="20170728 17:42:56.955"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:56.956" starttime="20170728 17:42:56.955"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170728 17:42:56.957" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_general.txt"&gt;/home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170728 17:42:56.957" starttime="20170728 17:42:56.957"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:56.957" starttime="20170728 17:42:56.956"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170728 17:42:56.975" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170728 17:42:56.976" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170728 17:42:57.063" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170728 17:42:57.076" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170728 17:42:57.076" level="INFO">${stderr} = </msg>
<msg timestamp="20170728 17:42:57.076" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20170728 17:42:57.076" starttime="20170728 17:42:56.958"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170728 17:42:57.077" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170728 17:42:57.077" starttime="20170728 17:42:57.076"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170728 17:42:57.078" level="INFO">Length is 11</msg>
<status status="PASS" endtime="20170728 17:42:57.078" starttime="20170728 17:42:57.077"></status>
</kw>
<msg timestamp="20170728 17:42:57.078" level="INFO">${model_name} = Witherspoon</msg>
<status status="PASS" endtime="20170728 17:42:57.078" starttime="20170728 17:42:56.957"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170728 17:42:57.080" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_general.txt"&gt;/home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170728 17:42:57.080" starttime="20170728 17:42:57.079"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:57.080" starttime="20170728 17:42:57.078"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:57.080" starttime="20170728 17:42:56.952"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170728 17:42:57.082" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_general.txt"&gt;/home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170728 17:42:57.082" starttime="20170728 17:42:57.081"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:57.082" starttime="20170728 17:42:57.080"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170728 17:42:57.082" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170728 17:42:57.082" starttime="20170728 17:42:57.082"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170728 17:42:57.084" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_general.txt"&gt;/home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170728 17:42:57.084" starttime="20170728 17:42:57.084"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:57.084" starttime="20170728 17:42:57.083"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170728 17:42:57.085" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_general.txt"&gt;/home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170728 17:42:57.085" starttime="20170728 17:42:57.085"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:57.086" starttime="20170728 17:42:57.084"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:57.086" starttime="20170728 17:42:57.083"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170728 17:42:57.087" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_general.txt"&gt;/home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170728 17:42:57.087" starttime="20170728 17:42:57.086"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:57.087" starttime="20170728 17:42:57.086"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170728 17:42:57.088" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_general.txt"&gt;/home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170728 17:42:57.088" starttime="20170728 17:42:57.088"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:57.088" starttime="20170728 17:42:57.087"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:57.088" starttime="20170728 17:42:57.086"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170728 17:42:57.090" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_general.txt"&gt;/home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170728 17:42:57.090" starttime="20170728 17:42:57.089"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:57.090" starttime="20170728 17:42:57.089"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170728 17:42:57.091" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_general.txt"&gt;/home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170728 17:42:57.091" starttime="20170728 17:42:57.090"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:57.091" starttime="20170728 17:42:57.090"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:57.091" starttime="20170728 17:42:57.088"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:57.091" starttime="20170728 17:42:57.082"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170728 17:42:57.092" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_general.txt"&gt;/home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170728 17:42:57.092" starttime="20170728 17:42:57.092"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:57.092" starttime="20170728 17:42:57.091"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:57.093" starttime="20170728 17:42:56.939"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170728 17:42:57.099" level="INFO">@{entries} = [ BMC LOGS ]</msg>
<status status="PASS" endtime="20170728 17:42:57.099" starttime="20170728 17:42:57.098"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg timestamp="20170728 17:42:57.100" level="INFO">@{method_list} = [ ('FFDC Generic Report', 'BMC FFDC Manifest') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('Core Files', 'SCP Coredump Files') | ('BMC Specific Files', 'BMC FFDC Files') | ('SEL Log', 'Collect ...</msg>
<status status="PASS" endtime="20170728 17:42:57.100" starttime="20170728 17:42:57.100"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw name="Get Ffdc Method Desc" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status status="PASS" endtime="20170728 17:42:57.101" starttime="20170728 17:42:57.101"></status>
</kw>
<msg timestamp="20170728 17:42:57.101" level="INFO">@{ffdc_function_list} = [ FFDC Generic Report | Get Request FFDC | Core Files | BMC Specific Files | SEL Log | OS FFDC ]</msg>
<status status="PASS" endtime="20170728 17:42:57.101" starttime="20170728 17:42:57.100"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170728 17:42:57.103" starttime="20170728 17:42:57.103"></status>
</kw>
<msg timestamp="20170728 17:42:57.104" level="INFO">${status} = PASS</msg>
<msg timestamp="20170728 17:42:57.104" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170728 17:42:57.104" starttime="20170728 17:42:57.102"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170728 17:42:57.104" starttime="20170728 17:42:57.104"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170728 17:42:57.119" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170728 17:42:57.119" starttime="20170728 17:42:57.119"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170728 17:42:57.120" level="INFO">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil state') ]</msg>
<status status="PASS" endtime="20170728 17:42:57.121" starttime="20170728 17:42:57.120"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170728 17:42:57.126" level="INFO">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status status="PASS" endtime="20170728 17:42:57.126" starttime="20170728 17:42:57.121"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil state')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170728 17:42:57.129" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_general.txt"&gt;/home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170728 17:42:57.129" starttime="20170728 17:42:57.129"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:57.129" starttime="20170728 17:42:57.128"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170728 17:42:57.130" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_general.txt"&gt;/home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170728 17:42:57.130" starttime="20170728 17:42:57.130"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:57.131" starttime="20170728 17:42:57.129"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170728 17:42:57.132" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_general.txt"&gt;/home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170728 17:42:57.132" starttime="20170728 17:42:57.131"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:57.132" starttime="20170728 17:42:57.131"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170728 17:42:57.133" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_general.txt"&gt;/home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170728 17:42:57.133" starttime="20170728 17:42:57.133"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:57.133" starttime="20170728 17:42:57.132"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:57.134" starttime="20170728 17:42:57.128"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:57.134" starttime="20170728 17:42:57.127"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170728 17:42:57.134" level="INFO">${cmd_buf} = BMC Execute Command  /usr/sbin/obmcutil state  ignore_err=1</msg>
<status status="PASS" endtime="20170728 17:42:57.134" starttime="20170728 17:42:57.134"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>/usr/sbin/obmcutil state</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170728 17:42:57.176" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170728 17:42:57.177" level="INFO">Executing command '/usr/sbin/obmcutil state'.</msg>
<msg timestamp="20170728 17:42:58.543" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170728 17:42:58.543" starttime="20170728 17:42:57.153"></status>
</kw>
<msg timestamp="20170728 17:42:58.544" level="INFO">${status} = PASS</msg>
<msg timestamp="20170728 17:42:58.544" level="INFO">${ret_values} = (u'CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready\nCurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off\nCurrentHostState:   xyz.openbmc_project.State.Host.HostState....</msg>
<status status="PASS" endtime="20170728 17:42:58.544" starttime="20170728 17:42:57.135"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170728 17:42:58.545" level="INFO">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170728 17:42:58.545" starttime="20170728 17:42:58.544"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170728 17:42:58.545" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170728 17:42:58.545" starttime="20170728 17:42:58.545"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170728 17:42:58.555" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_general.txt"&gt;/home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170728 17:42:58.555" starttime="20170728 17:42:58.555"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:58.556" starttime="20170728 17:42:58.554"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:58.556" starttime="20170728 17:42:58.546"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:58.556" starttime="20170728 17:42:57.126"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:58.556" starttime="20170728 17:42:57.126"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:58.556" starttime="20170728 17:42:57.126"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:58.556" starttime="20170728 17:42:57.120"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:58.556" starttime="20170728 17:42:57.119"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170728 17:42:58.558" level="INFO">@{cmd_list} = [ ('FW Level', 'cat /etc/os-release') ]</msg>
<status status="PASS" endtime="20170728 17:42:58.558" starttime="20170728 17:42:58.557"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170728 17:42:58.558" level="INFO">${ENTRY_INDEX} = DRIVER INFO</msg>
<status status="PASS" endtime="20170728 17:42:58.558" starttime="20170728 17:42:58.558"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170728 17:42:58.561" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_general.txt"&gt;/home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170728 17:42:58.562" starttime="20170728 17:42:58.561"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:58.562" starttime="20170728 17:42:58.561"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170728 17:42:58.563" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_general.txt"&gt;/home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170728 17:42:58.563" starttime="20170728 17:42:58.563"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:58.563" starttime="20170728 17:42:58.562"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170728 17:42:58.565" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_general.txt"&gt;/home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170728 17:42:58.565" starttime="20170728 17:42:58.564"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:58.565" starttime="20170728 17:42:58.563"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170728 17:42:58.566" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_general.txt"&gt;/home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170728 17:42:58.566" starttime="20170728 17:42:58.566"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:58.566" starttime="20170728 17:42:58.565"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:58.566" starttime="20170728 17:42:58.560"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:58.566" starttime="20170728 17:42:58.560"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170728 17:42:58.567" level="INFO">${cmd_buf} = BMC Execute Command  cat /etc/os-release  ignore_err=1</msg>
<status status="PASS" endtime="20170728 17:42:58.567" starttime="20170728 17:42:58.567"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/os-release</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170728 17:42:58.609" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170728 17:42:58.610" level="INFO">Executing command 'cat /etc/os-release'.</msg>
<msg timestamp="20170728 17:42:58.666" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170728 17:42:58.666" starttime="20170728 17:42:58.586"></status>
</kw>
<msg timestamp="20170728 17:42:58.666" level="INFO">${status} = PASS</msg>
<msg timestamp="20170728 17:42:58.666" level="INFO">${ret_values} = (u'ID="openbmc-phosphor"\nNAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"\nVERSION="v1.99.8-106"\nVERSION_ID="v1.99.8-106-g8ee4f37"\nPRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC...</msg>
<status status="PASS" endtime="20170728 17:42:58.667" starttime="20170728 17:42:58.567"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170728 17:42:58.667" level="INFO">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.8-106"
VERSION_ID="v1.99.8-106-g8ee4f37"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Projec...</msg>
<status status="PASS" endtime="20170728 17:42:58.667" starttime="20170728 17:42:58.667"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170728 17:42:58.668" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170728 17:42:58.668" starttime="20170728 17:42:58.667"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170728 17:42:58.677" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_general.txt"&gt;/home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170728 17:42:58.677" starttime="20170728 17:42:58.676"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:58.677" starttime="20170728 17:42:58.675"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:58.677" starttime="20170728 17:42:58.668"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:58.677" starttime="20170728 17:42:58.559"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:58.677" starttime="20170728 17:42:58.559"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:58.677" starttime="20170728 17:42:58.558"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:58.677" starttime="20170728 17:42:58.557"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:58.678" starttime="20170728 17:42:58.556"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170728 17:42:58.679" level="INFO">@{cmd_list} = [ ('BMC Uptime', 'uptime') | ('BMC File System Disk Space Usage', 'df -hT') | ('BMC OS', 'uname -a') ]</msg>
<status status="PASS" endtime="20170728 17:42:58.679" starttime="20170728 17:42:58.679"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170728 17:42:58.680" level="INFO">${ENTRY_INDEX} = BMC DATA</msg>
<status status="PASS" endtime="20170728 17:42:58.680" starttime="20170728 17:42:58.680"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170728 17:42:58.685" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_general.txt"&gt;/home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170728 17:42:58.685" starttime="20170728 17:42:58.684"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:58.685" starttime="20170728 17:42:58.683"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170728 17:42:58.686" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_general.txt"&gt;/home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170728 17:42:58.687" starttime="20170728 17:42:58.686"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:58.687" starttime="20170728 17:42:58.685"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170728 17:42:58.688" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_general.txt"&gt;/home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170728 17:42:58.689" starttime="20170728 17:42:58.688"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:58.689" starttime="20170728 17:42:58.687"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170728 17:42:58.690" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_general.txt"&gt;/home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170728 17:42:58.691" starttime="20170728 17:42:58.690"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:58.691" starttime="20170728 17:42:58.689"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:58.691" starttime="20170728 17:42:58.683"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:58.691" starttime="20170728 17:42:58.682"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170728 17:42:58.692" level="INFO">${cmd_buf} = BMC Execute Command  uptime  ignore_err=1</msg>
<status status="PASS" endtime="20170728 17:42:58.692" starttime="20170728 17:42:58.691"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uptime</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170728 17:42:58.745" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170728 17:42:58.746" level="INFO">Executing command 'uptime'.</msg>
<msg timestamp="20170728 17:42:58.802" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170728 17:42:58.802" starttime="20170728 17:42:58.720"></status>
</kw>
<msg timestamp="20170728 17:42:58.802" level="INFO">${status} = PASS</msg>
<msg timestamp="20170728 17:42:58.803" level="INFO">${ret_values} = (u' 17:43:01 up 2 min,  load average: 2.98, 1.85, 0.74', u'', 0)</msg>
<status status="PASS" endtime="20170728 17:42:58.803" starttime="20170728 17:42:58.692"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170728 17:42:58.803" level="INFO">${stdout} =  17:43:01 up 2 min,  load average: 2.98, 1.85, 0.74</msg>
<status status="PASS" endtime="20170728 17:42:58.803" starttime="20170728 17:42:58.803"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170728 17:42:58.804" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170728 17:42:58.804" starttime="20170728 17:42:58.804"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170728 17:42:58.811" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_general.txt"&gt;/home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170728 17:42:58.811" starttime="20170728 17:42:58.810"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:58.811" starttime="20170728 17:42:58.810"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:58.811" starttime="20170728 17:42:58.804"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:58.811" starttime="20170728 17:42:58.681"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:58.811" starttime="20170728 17:42:58.681"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170728 17:42:58.814" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_general.txt"&gt;/home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170728 17:42:58.814" starttime="20170728 17:42:58.814"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:58.814" starttime="20170728 17:42:58.813"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170728 17:42:58.815" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_general.txt"&gt;/home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170728 17:42:58.815" starttime="20170728 17:42:58.815"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:58.816" starttime="20170728 17:42:58.814"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170728 17:42:58.817" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_general.txt"&gt;/home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170728 17:42:58.817" starttime="20170728 17:42:58.816"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:58.817" starttime="20170728 17:42:58.816"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170728 17:42:58.818" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_general.txt"&gt;/home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170728 17:42:58.818" starttime="20170728 17:42:58.818"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:58.818" starttime="20170728 17:42:58.817"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:58.818" starttime="20170728 17:42:58.813"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:58.818" starttime="20170728 17:42:58.812"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170728 17:42:58.819" level="INFO">${cmd_buf} = BMC Execute Command  df -hT  ignore_err=1</msg>
<status status="PASS" endtime="20170728 17:42:58.819" starttime="20170728 17:42:58.819"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>df -hT</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170728 17:42:58.862" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170728 17:42:58.862" level="INFO">Executing command 'df -hT'.</msg>
<msg timestamp="20170728 17:42:58.920" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170728 17:42:58.920" starttime="20170728 17:42:58.838"></status>
</kw>
<msg timestamp="20170728 17:42:58.920" level="INFO">${status} = PASS</msg>
<msg timestamp="20170728 17:42:58.920" level="INFO">${ret_values} = (u'Filesystem           Type            Size      Used Available Use% Mounted on\ndev                  devtmpfs      210.2M         0    210.2M   0% /dev\ntmpfs                tmpfs         211.1M    ...</msg>
<status status="PASS" endtime="20170728 17:42:58.920" starttime="20170728 17:42:58.819"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170728 17:42:58.921" level="INFO">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.2M         0    210.2M   0% /dev
tmpfs                tmpfs         211.1M     14.1...</msg>
<status status="PASS" endtime="20170728 17:42:58.921" starttime="20170728 17:42:58.920"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170728 17:42:58.921" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170728 17:42:58.921" starttime="20170728 17:42:58.921"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170728 17:42:58.928" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_general.txt"&gt;/home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170728 17:42:58.928" starttime="20170728 17:42:58.928"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:58.928" starttime="20170728 17:42:58.927"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:58.928" starttime="20170728 17:42:58.922"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:58.929" starttime="20170728 17:42:58.811"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:58.929" starttime="20170728 17:42:58.811"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170728 17:42:58.932" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_general.txt"&gt;/home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170728 17:42:58.932" starttime="20170728 17:42:58.931"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:58.932" starttime="20170728 17:42:58.931"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170728 17:42:58.933" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_general.txt"&gt;/home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170728 17:42:58.933" starttime="20170728 17:42:58.933"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:58.933" starttime="20170728 17:42:58.932"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170728 17:42:58.934" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_general.txt"&gt;/home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170728 17:42:58.935" starttime="20170728 17:42:58.934"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:58.935" starttime="20170728 17:42:58.934"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170728 17:42:58.936" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_general.txt"&gt;/home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170728 17:42:58.936" starttime="20170728 17:42:58.935"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:58.936" starttime="20170728 17:42:58.935"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:58.936" starttime="20170728 17:42:58.930"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:58.936" starttime="20170728 17:42:58.930"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170728 17:42:58.937" level="INFO">${cmd_buf} = BMC Execute Command  uname -a  ignore_err=1</msg>
<status status="PASS" endtime="20170728 17:42:58.937" starttime="20170728 17:42:58.936"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uname -a</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170728 17:42:58.980" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170728 17:42:58.980" level="INFO">Executing command 'uname -a'.</msg>
<msg timestamp="20170728 17:42:59.047" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170728 17:42:59.047" starttime="20170728 17:42:58.956"></status>
</kw>
<msg timestamp="20170728 17:42:59.047" level="INFO">${status} = PASS</msg>
<msg timestamp="20170728 17:42:59.047" level="INFO">${ret_values} = (u'Linux witherspoon 4.10.17-44f0dc8ac43162c4f7082884d6cd79400341bf5b #1 Fri Jul 28 16:38:12 UTC 2017 armv6l GNU/Linux', u'', 0)</msg>
<status status="PASS" endtime="20170728 17:42:59.047" starttime="20170728 17:42:58.937"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170728 17:42:59.048" level="INFO">${stdout} = Linux witherspoon 4.10.17-44f0dc8ac43162c4f7082884d6cd79400341bf5b #1 Fri Jul 28 16:38:12 UTC 2017 armv6l GNU/Linux</msg>
<status status="PASS" endtime="20170728 17:42:59.048" starttime="20170728 17:42:59.047"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170728 17:42:59.048" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170728 17:42:59.048" starttime="20170728 17:42:59.048"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170728 17:42:59.057" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_general.txt"&gt;/home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170728 17:42:59.057" starttime="20170728 17:42:59.057"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:59.058" starttime="20170728 17:42:59.055"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:59.058" starttime="20170728 17:42:59.049"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:59.058" starttime="20170728 17:42:58.929"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:59.058" starttime="20170728 17:42:58.929"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:59.058" starttime="20170728 17:42:58.680"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:59.058" starttime="20170728 17:42:58.678"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:59.058" starttime="20170728 17:42:58.678"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:59.058" starttime="20170728 17:42:57.119"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:59.058" starttime="20170728 17:42:57.119"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:59.058" starttime="20170728 17:42:57.104"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:59.059" starttime="20170728 17:42:57.102"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:59.059" starttime="20170728 17:42:57.101"></status>
</kw>
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170728 17:42:59.060" starttime="20170728 17:42:59.060"></status>
</kw>
<msg timestamp="20170728 17:42:59.061" level="INFO">${status} = PASS</msg>
<msg timestamp="20170728 17:42:59.061" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170728 17:42:59.061" starttime="20170728 17:42:59.060"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170728 17:42:59.061" starttime="20170728 17:42:59.061"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170728 17:42:59.076" level="INFO">@{entries} = [ GET REQUESTS ]</msg>
<status status="PASS" endtime="20170728 17:42:59.076" starttime="20170728 17:42:59.076"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170728 17:42:59.078" level="INFO">@{cmd_list} = [ ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate') | ('BMC_sensor_list', '/org/openbmc/sensors/enumerate') | ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate') | ('BMC_led', '/o...</msg>
<status status="PASS" endtime="20170728 17:42:59.078" starttime="20170728 17:42:59.077"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170728 17:42:59.079" level="INFO">${logpath} = /home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_elog.txt</msg>
<status status="PASS" endtime="20170728 17:42:59.079" starttime="20170728 17:42:59.078"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170728 17:42:59.081" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170728 17:42:59.082" starttime="20170728 17:42:59.081"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170728 17:42:59.083" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170728 17:42:59.083" starttime="20170728 17:42:59.082"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170728 17:42:59.083" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170728 17:42:59.083" starttime="20170728 17:42:59.083"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170728 17:42:59.084" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170728 17:42:59.084" starttime="20170728 17:42:59.084"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170728 17:42:59.307" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170728 17:42:59.307" starttime="20170728 17:42:59.085"></status>
</kw>
<msg timestamp="20170728 17:42:59.307" level="INFO">${status} = PASS</msg>
<msg timestamp="20170728 17:42:59.307" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170728 17:42:59.307" starttime="20170728 17:42:59.084"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170728 17:42:59.308" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170728 17:42:59.308" starttime="20170728 17:42:59.307"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170728 17:42:59.308" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170728 17:42:59.308" starttime="20170728 17:42:59.308"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:59.309" starttime="20170728 17:42:59.081"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:59.309" starttime="20170728 17:42:59.080"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:59.309" starttime="20170728 17:42:59.080"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170728 17:42:59.309" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status status="PASS" endtime="20170728 17:42:59.309" starttime="20170728 17:42:59.309"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170728 17:42:59.310" starttime="20170728 17:42:59.310"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170728 17:42:59.353" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg timestamp="20170728 17:42:59.353" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170728 17:42:59.353" starttime="20170728 17:42:59.310"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170728 17:42:59.354" starttime="20170728 17:42:59.353"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170728 17:42:59.354" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170728 17:42:59.354" starttime="20170728 17:42:59.354"></status>
</kw>
<msg timestamp="20170728 17:42:59.354" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170728 17:42:59.354" starttime="20170728 17:42:59.079"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170728 17:42:59.355" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170728 17:42:59.356" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170728 17:42:59.356" starttime="20170728 17:42:59.355"></status>
</kw>
<msg timestamp="20170728 17:42:59.356" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170728 17:42:59.356" starttime="20170728 17:42:59.355"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170728 17:42:59.357" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170728 17:42:59.357" starttime="20170728 17:42:59.357"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:59.357" starttime="20170728 17:42:59.356"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:59.357" starttime="20170728 17:42:59.078"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170728 17:42:59.358" level="INFO">${logpath} = /home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_sensor_list.txt</msg>
<status status="PASS" endtime="20170728 17:42:59.358" starttime="20170728 17:42:59.357"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170728 17:42:59.362" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170728 17:42:59.363" starttime="20170728 17:42:59.362"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170728 17:42:59.364" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170728 17:42:59.364" starttime="20170728 17:42:59.363"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170728 17:42:59.365" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170728 17:42:59.365" starttime="20170728 17:42:59.364"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170728 17:42:59.365" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170728 17:42:59.365" starttime="20170728 17:42:59.365"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170728 17:42:59.549" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170728 17:42:59.549" starttime="20170728 17:42:59.366"></status>
</kw>
<msg timestamp="20170728 17:42:59.550" level="INFO">${status} = PASS</msg>
<msg timestamp="20170728 17:42:59.550" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170728 17:42:59.550" starttime="20170728 17:42:59.366"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170728 17:42:59.550" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170728 17:42:59.550" starttime="20170728 17:42:59.550"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170728 17:42:59.551" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170728 17:42:59.551" starttime="20170728 17:42:59.551"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:59.551" starttime="20170728 17:42:59.361"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:59.551" starttime="20170728 17:42:59.360"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:59.552" starttime="20170728 17:42:59.359"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170728 17:42:59.552" level="INFO">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status status="PASS" endtime="20170728 17:42:59.552" starttime="20170728 17:42:59.552"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170728 17:42:59.553" starttime="20170728 17:42:59.553"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170728 17:42:59.741" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None json=None</msg>
<msg timestamp="20170728 17:42:59.741" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170728 17:42:59.741" starttime="20170728 17:42:59.553"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170728 17:42:59.742" starttime="20170728 17:42:59.741"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170728 17:42:59.742" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170728 17:42:59.742" starttime="20170728 17:42:59.742"></status>
</kw>
<msg timestamp="20170728 17:42:59.743" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170728 17:42:59.743" starttime="20170728 17:42:59.358"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170728 17:42:59.744" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170728 17:42:59.744" starttime="20170728 17:42:59.743"></status>
</kw>
<msg timestamp="20170728 17:42:59.744" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170728 17:42:59.744" starttime="20170728 17:42:59.743"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170728 17:42:59.744" starttime="20170728 17:42:59.744"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170728 17:42:59.745" level="INFO">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 3
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/PowerSupplyDerating": {
      "error": 0, 
      "units": "", 
      "value": 10
    }, 
    "/org/openbmc/sensors/host/PowerSupplyRedundancy": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/TurboAllowed": {
      "error": 0, 
      "units": "", 
      "value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170728 17:42:59.746" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170728 17:42:59.746" level="INFO">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/host/BootCount": {
            "error": 0,
            "units": "",
            "value": 3
        },
        "/org/openbmc/sensors/host/BootProgress": {
...</msg>
<status status="PASS" endtime="20170728 17:42:59.746" starttime="20170728 17:42:59.745"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170728 17:42:59.748" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_sensor_list.txt"&gt;/home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170728 17:42:59.748" starttime="20170728 17:42:59.747"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:59.748" starttime="20170728 17:42:59.746"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:59.748" starttime="20170728 17:42:59.357"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170728 17:42:59.749" level="INFO">${logpath} = /home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_inventory.txt</msg>
<status status="PASS" endtime="20170728 17:42:59.749" starttime="20170728 17:42:59.748"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170728 17:42:59.751" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170728 17:42:59.753" starttime="20170728 17:42:59.751"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170728 17:42:59.754" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170728 17:42:59.754" starttime="20170728 17:42:59.753"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170728 17:42:59.754" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170728 17:42:59.754" starttime="20170728 17:42:59.754"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170728 17:42:59.755" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170728 17:42:59.755" starttime="20170728 17:42:59.755"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170728 17:42:59.930" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170728 17:42:59.931" starttime="20170728 17:42:59.756"></status>
</kw>
<msg timestamp="20170728 17:42:59.931" level="INFO">${status} = PASS</msg>
<msg timestamp="20170728 17:42:59.931" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170728 17:42:59.931" starttime="20170728 17:42:59.756"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170728 17:42:59.931" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170728 17:42:59.931" starttime="20170728 17:42:59.931"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170728 17:42:59.932" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170728 17:42:59.932" starttime="20170728 17:42:59.932"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:59.932" starttime="20170728 17:42:59.751"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:59.932" starttime="20170728 17:42:59.750"></status>
</kw>
<status status="PASS" endtime="20170728 17:42:59.933" starttime="20170728 17:42:59.750"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170728 17:42:59.933" level="INFO">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status status="PASS" endtime="20170728 17:42:59.933" starttime="20170728 17:42:59.933"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170728 17:42:59.934" starttime="20170728 17:42:59.933"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170728 17:43:00.086" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg timestamp="20170728 17:43:00.087" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170728 17:43:00.087" starttime="20170728 17:42:59.934"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170728 17:43:00.087" starttime="20170728 17:43:00.087"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170728 17:43:00.088" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170728 17:43:00.088" starttime="20170728 17:43:00.088"></status>
</kw>
<msg timestamp="20170728 17:43:00.088" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170728 17:43:00.088" starttime="20170728 17:42:59.749"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170728 17:43:00.089" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170728 17:43:00.090" starttime="20170728 17:43:00.089"></status>
</kw>
<msg timestamp="20170728 17:43:00.090" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170728 17:43:00.090" starttime="20170728 17:43:00.089"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170728 17:43:00.090" starttime="20170728 17:43:00.090"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170728 17:43:00.091" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 1
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH051", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "00:00:00:00:00:00", 
      "Present": 1, 
      "PrettyName": ""
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170728 17:43:00.091" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170728 17:43:00.091" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system/chassis": {
            "AirCooled": 1,
            "WaterCooled": 1
        },
        "/xyz/openbmc_project/inventory/system/chassis/mo...</msg>
<status status="PASS" endtime="20170728 17:43:00.091" starttime="20170728 17:43:00.090"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170728 17:43:00.092" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_inventory.txt"&gt;/home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170728 17:43:00.093" starttime="20170728 17:43:00.092"></status>
</kw>
<status status="PASS" endtime="20170728 17:43:00.093" starttime="20170728 17:43:00.091"></status>
</kw>
<status status="PASS" endtime="20170728 17:43:00.093" starttime="20170728 17:42:59.748"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170728 17:43:00.093" level="INFO">${logpath} = /home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_led.txt</msg>
<status status="PASS" endtime="20170728 17:43:00.093" starttime="20170728 17:43:00.093"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170728 17:43:00.096" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170728 17:43:00.097" starttime="20170728 17:43:00.096"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170728 17:43:00.098" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170728 17:43:00.098" starttime="20170728 17:43:00.097"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170728 17:43:00.098" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170728 17:43:00.098" starttime="20170728 17:43:00.098"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170728 17:43:00.099" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170728 17:43:00.099" starttime="20170728 17:43:00.099"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170728 17:43:00.347" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170728 17:43:00.347" starttime="20170728 17:43:00.100"></status>
</kw>
<msg timestamp="20170728 17:43:00.347" level="INFO">${status} = PASS</msg>
<msg timestamp="20170728 17:43:00.347" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170728 17:43:00.347" starttime="20170728 17:43:00.099"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170728 17:43:00.348" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170728 17:43:00.348" starttime="20170728 17:43:00.348"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170728 17:43:00.349" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170728 17:43:00.349" starttime="20170728 17:43:00.349"></status>
</kw>
<status status="PASS" endtime="20170728 17:43:00.350" starttime="20170728 17:43:00.095"></status>
</kw>
<status status="PASS" endtime="20170728 17:43:00.350" starttime="20170728 17:43:00.095"></status>
</kw>
<status status="PASS" endtime="20170728 17:43:00.350" starttime="20170728 17:43:00.094"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170728 17:43:00.351" level="INFO">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status status="PASS" endtime="20170728 17:43:00.351" starttime="20170728 17:43:00.350"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170728 17:43:00.352" starttime="20170728 17:43:00.351"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170728 17:43:00.394" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None json=None</msg>
<msg timestamp="20170728 17:43:00.394" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170728 17:43:00.395" starttime="20170728 17:43:00.352"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170728 17:43:00.395" starttime="20170728 17:43:00.395"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170728 17:43:00.396" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170728 17:43:00.396" starttime="20170728 17:43:00.395"></status>
</kw>
<msg timestamp="20170728 17:43:00.396" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170728 17:43:00.396" starttime="20170728 17:43:00.094"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170728 17:43:00.397" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170728 17:43:00.397" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170728 17:43:00.397" starttime="20170728 17:43:00.397"></status>
</kw>
<msg timestamp="20170728 17:43:00.397" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170728 17:43:00.397" starttime="20170728 17:43:00.396"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170728 17:43:00.398" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170728 17:43:00.398" starttime="20170728 17:43:00.398"></status>
</kw>
<status status="PASS" endtime="20170728 17:43:00.398" starttime="20170728 17:43:00.398"></status>
</kw>
<status status="PASS" endtime="20170728 17:43:00.398" starttime="20170728 17:43:00.093"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170728 17:43:00.399" level="INFO">${logpath} = /home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_record_log.txt</msg>
<status status="PASS" endtime="20170728 17:43:00.399" starttime="20170728 17:43:00.399"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170728 17:43:00.402" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170728 17:43:00.402" starttime="20170728 17:43:00.402"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170728 17:43:00.403" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170728 17:43:00.403" starttime="20170728 17:43:00.403"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170728 17:43:00.404" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170728 17:43:00.404" starttime="20170728 17:43:00.403"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170728 17:43:00.405" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170728 17:43:00.405" starttime="20170728 17:43:00.404"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170728 17:43:00.617" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170728 17:43:00.617" starttime="20170728 17:43:00.405"></status>
</kw>
<msg timestamp="20170728 17:43:00.618" level="INFO">${status} = PASS</msg>
<msg timestamp="20170728 17:43:00.618" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170728 17:43:00.618" starttime="20170728 17:43:00.405"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170728 17:43:00.618" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170728 17:43:00.618" starttime="20170728 17:43:00.618"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170728 17:43:00.619" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170728 17:43:00.619" starttime="20170728 17:43:00.619"></status>
</kw>
<status status="PASS" endtime="20170728 17:43:00.619" starttime="20170728 17:43:00.401"></status>
</kw>
<status status="PASS" endtime="20170728 17:43:00.619" starttime="20170728 17:43:00.401"></status>
</kw>
<status status="PASS" endtime="20170728 17:43:00.619" starttime="20170728 17:43:00.400"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170728 17:43:00.620" level="INFO">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status status="PASS" endtime="20170728 17:43:00.620" starttime="20170728 17:43:00.620"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170728 17:43:00.621" starttime="20170728 17:43:00.620"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170728 17:43:00.664" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None json=None</msg>
<msg timestamp="20170728 17:43:00.664" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170728 17:43:00.664" starttime="20170728 17:43:00.621"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170728 17:43:00.664" starttime="20170728 17:43:00.664"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170728 17:43:00.665" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170728 17:43:00.665" starttime="20170728 17:43:00.665"></status>
</kw>
<msg timestamp="20170728 17:43:00.665" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170728 17:43:00.665" starttime="20170728 17:43:00.399"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170728 17:43:00.666" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170728 17:43:00.666" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170728 17:43:00.666" starttime="20170728 17:43:00.666"></status>
</kw>
<msg timestamp="20170728 17:43:00.667" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170728 17:43:00.667" starttime="20170728 17:43:00.665"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170728 17:43:00.668" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170728 17:43:00.668" starttime="20170728 17:43:00.668"></status>
</kw>
<status status="PASS" endtime="20170728 17:43:00.668" starttime="20170728 17:43:00.667"></status>
</kw>
<status status="PASS" endtime="20170728 17:43:00.668" starttime="20170728 17:43:00.399"></status>
</kw>
<status status="PASS" endtime="20170728 17:43:00.668" starttime="20170728 17:42:59.078"></status>
</kw>
<status status="PASS" endtime="20170728 17:43:00.669" starttime="20170728 17:42:59.077"></status>
</kw>
<status status="PASS" endtime="20170728 17:43:00.669" starttime="20170728 17:42:59.077"></status>
</kw>
<status status="PASS" endtime="20170728 17:43:00.669" starttime="20170728 17:42:59.077"></status>
</kw>
<status status="PASS" endtime="20170728 17:43:00.669" starttime="20170728 17:42:59.076"></status>
</kw>
<status status="PASS" endtime="20170728 17:43:00.669" starttime="20170728 17:42:59.061"></status>
</kw>
<status status="PASS" endtime="20170728 17:43:00.669" starttime="20170728 17:42:59.059"></status>
</kw>
<status status="PASS" endtime="20170728 17:43:00.669" starttime="20170728 17:42:59.059"></status>
</kw>
<kw type="foritem" name="${method} = ('Core Files', 'SCP Coredump Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170728 17:43:00.671" starttime="20170728 17:43:00.671"></status>
</kw>
<msg timestamp="20170728 17:43:00.671" level="INFO">${status} = PASS</msg>
<msg timestamp="20170728 17:43:00.671" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170728 17:43:00.672" starttime="20170728 17:43:00.671"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170728 17:43:00.672" starttime="20170728 17:43:00.672"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170728 17:43:00.707" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170728 17:43:00.707" level="INFO">Executing command 'ls /tmp/core_*'.</msg>
<msg timestamp="20170728 17:43:00.756" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170728 17:43:00.767" level="INFO">${core_files} = None</msg>
<msg timestamp="20170728 17:43:00.767" level="INFO">${stderr} = None</msg>
<msg timestamp="20170728 17:43:00.767" level="INFO">${rc} = None</msg>
<msg timestamp="20170728 17:43:00.767" level="FAIL">#(UTC) 2017/07/28 17:43:00.765478 -    3.690117 - **ERROR** The prior SSH command returned a non-zero return code:
rc:                                               0x00000001
ls: /tmp/core_*: No such file or directory
: 1 != 0</msg>
<status status="FAIL" endtime="20170728 17:43:00.767" starttime="20170728 17:43:00.687"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg timestamp="20170728 17:43:00.768" level="INFO">@{core_list} = [ ]</msg>
<msg timestamp="20170728 17:43:00.768" level="FAIL">AttributeError: 'NoneType' object has no attribute 'split'</msg>
<status status="FAIL" endtime="20170728 17:43:00.768" starttime="20170728 17:43:00.768"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Open Connection for SCP</arg>
</arguments>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20170728 17:43:00.779" starttime="20170728 17:43:00.777"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" endtime="20170728 17:43:01.415" starttime="20170728 17:43:00.779"></status>
</kw>
<status status="PASS" endtime="20170728 17:43:01.415" starttime="20170728 17:43:00.779"></status>
</kw>
<status status="PASS" endtime="20170728 17:43:01.415" starttime="20170728 17:43:00.777"></status>
</kw>
<status status="PASS" endtime="20170728 17:43:01.416" starttime="20170728 17:43:00.768"></status>
</kw>
<kw type="for" name="${index} IN [ @{core_list} ]">
<status status="PASS" endtime="20170728 17:43:01.416" starttime="20170728 17:43:01.416"></status>
</kw>
<status status="FAIL" endtime="20170728 17:43:01.416" starttime="20170728 17:43:00.686"></status>
</kw>
<status status="PASS" endtime="20170728 17:43:01.416" starttime="20170728 17:43:00.672"></status>
</kw>
<status status="PASS" endtime="20170728 17:43:01.416" starttime="20170728 17:43:00.670"></status>
</kw>
<status status="PASS" endtime="20170728 17:43:01.416" starttime="20170728 17:43:00.669"></status>
</kw>
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170728 17:43:01.419" starttime="20170728 17:43:01.418"></status>
</kw>
<msg timestamp="20170728 17:43:01.419" level="INFO">${status} = PASS</msg>
<msg timestamp="20170728 17:43:01.419" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170728 17:43:01.419" starttime="20170728 17:43:01.418"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170728 17:43:01.419" starttime="20170728 17:43:01.419"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170728 17:43:01.435" level="INFO">@{entries} = [ BMC FILES ]</msg>
<status status="PASS" endtime="20170728 17:43:01.435" starttime="20170728 17:43:01.434"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170728 17:43:01.436" level="INFO">@{cmd_list} = [ ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/') | ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_proc_list', 'top -n 1 -b') | ('BMC_dmesg', 'dmesg') | ('BMC_j...</msg>
<status status="PASS" endtime="20170728 17:43:01.436" starttime="20170728 17:43:01.436"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170728 17:43:01.437" level="INFO">${logpath} = /home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_proc_fd_active_list.txt</msg>
<status status="PASS" endtime="20170728 17:43:01.437" starttime="20170728 17:43:01.436"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170728 17:43:01.438" starttime="20170728 17:43:01.438"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170728 17:43:01.439" level="INFO">${cmd_buf} = BMC Execute Command  ls -Al /proc/*/fd/  ignore_err=1</msg>
<status status="PASS" endtime="20170728 17:43:01.439" starttime="20170728 17:43:01.438"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls -Al /proc/*/fd/</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170728 17:43:01.482" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170728 17:43:01.482" level="INFO">Executing command 'ls -Al /proc/*/fd/'.</msg>
<msg timestamp="20170728 17:43:01.995" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170728 17:43:01.995" starttime="20170728 17:43:01.458"></status>
</kw>
<msg timestamp="20170728 17:43:01.995" level="INFO">${status} = PASS</msg>
<msg timestamp="20170728 17:43:01.996" level="INFO">${ret_values} = (u'/proc/1/fd/:\ntotal 0\nlrwx------    1 root     root            64 Jul 28 17:43 0 -&gt; /dev/null\nlrwx------    1 root     root            64 Jul 28 17:43 1 -&gt; /dev/null\nlr-x------    1 root     roo...</msg>
<status status="PASS" endtime="20170728 17:43:01.996" starttime="20170728 17:43:01.439"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170728 17:43:01.997" level="INFO">${stdout} = /proc/1/fd/:
total 0
lrwx------    1 root     root            64 Jul 28 17:43 0 -&gt; /dev/null
lrwx------    1 root     root            64 Jul 28 17:43 1 -&gt; /dev/null
lr-x------    1 root     root      ...</msg>
<status status="PASS" endtime="20170728 17:43:01.997" starttime="20170728 17:43:01.996"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170728 17:43:01.997" level="INFO">${stderr} = ls: /proc/1152/fd/3: cannot read link: No such file or directory
ls: /proc/self/fd/3: cannot read link: No such file or directory
ls: /proc/thread-self/fd/3: cannot read link: No such file or director...</msg>
<status status="PASS" endtime="20170728 17:43:01.998" starttime="20170728 17:43:01.997"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170728 17:43:02.006" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_proc_fd_active_list.txt"&gt;/home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_proc_fd_active_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170728 17:43:02.006" starttime="20170728 17:43:02.005"></status>
</kw>
<status status="PASS" endtime="20170728 17:43:02.006" starttime="20170728 17:43:02.003"></status>
</kw>
<status status="PASS" endtime="20170728 17:43:02.006" starttime="20170728 17:43:01.998"></status>
</kw>
<status status="PASS" endtime="20170728 17:43:02.006" starttime="20170728 17:43:01.437"></status>
</kw>
<status status="PASS" endtime="20170728 17:43:02.006" starttime="20170728 17:43:01.436"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170728 17:43:02.007" level="INFO">${logpath} = /home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_procinfo.txt</msg>
<status status="PASS" endtime="20170728 17:43:02.007" starttime="20170728 17:43:02.007"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170728 17:43:02.009" starttime="20170728 17:43:02.008"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170728 17:43:02.009" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/cpuinfo  ignore_err=1</msg>
<status status="PASS" endtime="20170728 17:43:02.010" starttime="20170728 17:43:02.009"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/cpuinfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170728 17:43:02.052" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170728 17:43:02.052" level="INFO">Executing command 'cat /proc/cpuinfo'.</msg>
<msg timestamp="20170728 17:43:02.099" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170728 17:43:02.100" starttime="20170728 17:43:02.028"></status>
</kw>
<msg timestamp="20170728 17:43:02.100" level="INFO">${status} = PASS</msg>
<msg timestamp="20170728 17:43:02.100" level="INFO">${ret_values} = (u'processor\t: 0\nmodel name\t: ARMv6-compatible processor rev 7 (v6l)\nBogoMIPS\t: 789.70\nFeatures\t: half thumb fastmult edsp java tls \nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t...</msg>
<status status="PASS" endtime="20170728 17:43:02.100" starttime="20170728 17:43:02.010"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170728 17:43:02.100" level="INFO">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<status status="PASS" endtime="20170728 17:43:02.101" starttime="20170728 17:43:02.100"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170728 17:43:02.101" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170728 17:43:02.101" starttime="20170728 17:43:02.101"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170728 17:43:02.108" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_procinfo.txt"&gt;/home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170728 17:43:02.108" starttime="20170728 17:43:02.107"></status>
</kw>
<status status="PASS" endtime="20170728 17:43:02.108" starttime="20170728 17:43:02.107"></status>
</kw>
<status status="PASS" endtime="20170728 17:43:02.108" starttime="20170728 17:43:02.101"></status>
</kw>
<status status="PASS" endtime="20170728 17:43:02.108" starttime="20170728 17:43:02.007"></status>
</kw>
<status status="PASS" endtime="20170728 17:43:02.108" starttime="20170728 17:43:02.006"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170728 17:43:02.109" level="INFO">${logpath} = /home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_meminfo.txt</msg>
<status status="PASS" endtime="20170728 17:43:02.109" starttime="20170728 17:43:02.109"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170728 17:43:02.110" starttime="20170728 17:43:02.110"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170728 17:43:02.111" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/meminfo  ignore_err=1</msg>
<status status="PASS" endtime="20170728 17:43:02.111" starttime="20170728 17:43:02.111"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/meminfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170728 17:43:02.155" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170728 17:43:02.155" level="INFO">Executing command 'cat /proc/meminfo'.</msg>
<msg timestamp="20170728 17:43:02.202" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170728 17:43:02.202" starttime="20170728 17:43:02.130"></status>
</kw>
<msg timestamp="20170728 17:43:02.203" level="INFO">${status} = PASS</msg>
<msg timestamp="20170728 17:43:02.203" level="INFO">${ret_values} = (u'MemTotal:         432268 kB\nMemFree:          250516 kB\nMemAvailable:     295668 kB\nBuffers:           11072 kB\nCached:            83800 kB\nSwapCached:            0 kB\nActive:            9453...</msg>
<status status="PASS" endtime="20170728 17:43:02.203" starttime="20170728 17:43:02.111"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170728 17:43:02.203" level="INFO">${stdout} = MemTotal:         432268 kB
MemFree:          250516 kB
MemAvailable:     295668 kB
Buffers:           11072 kB
Cached:            83800 kB
SwapCached:            0 kB
Active:            94532 kB
Inac...</msg>
<status status="PASS" endtime="20170728 17:43:02.203" starttime="20170728 17:43:02.203"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170728 17:43:02.204" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170728 17:43:02.204" starttime="20170728 17:43:02.204"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170728 17:43:02.211" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_meminfo.txt"&gt;/home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170728 17:43:02.211" starttime="20170728 17:43:02.210"></status>
</kw>
<status status="PASS" endtime="20170728 17:43:02.211" starttime="20170728 17:43:02.210"></status>
</kw>
<status status="PASS" endtime="20170728 17:43:02.211" starttime="20170728 17:43:02.204"></status>
</kw>
<status status="PASS" endtime="20170728 17:43:02.211" starttime="20170728 17:43:02.109"></status>
</kw>
<status status="PASS" endtime="20170728 17:43:02.212" starttime="20170728 17:43:02.108"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170728 17:43:02.212" level="INFO">${logpath} = /home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_proc_list.txt</msg>
<status status="PASS" endtime="20170728 17:43:02.212" starttime="20170728 17:43:02.212"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170728 17:43:02.214" starttime="20170728 17:43:02.213"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170728 17:43:02.215" level="INFO">${cmd_buf} = BMC Execute Command  top -n 1 -b  ignore_err=1</msg>
<status status="PASS" endtime="20170728 17:43:02.215" starttime="20170728 17:43:02.214"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>top -n 1 -b</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170728 17:43:02.257" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170728 17:43:02.258" level="INFO">Executing command 'top -n 1 -b'.</msg>
<msg timestamp="20170728 17:43:02.568" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170728 17:43:02.568" starttime="20170728 17:43:02.234"></status>
</kw>
<msg timestamp="20170728 17:43:02.569" level="INFO">${status} = PASS</msg>
<msg timestamp="20170728 17:43:02.569" level="INFO">${ret_values} = (u'Mem: 181876K used, 250392K free, 46948K shrd, 11072K buff, 83804K cached\nCPU:   7% usr  23% sys   0% nic  69% idle   0% io   0% irq   0% sirq\nLoad average: 2.98 1.85 0.74 2/147 1155\n  PID  PPID ...</msg>
<status status="PASS" endtime="20170728 17:43:02.569" starttime="20170728 17:43:02.215"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170728 17:43:02.570" level="INFO">${stdout} = Mem: 181876K used, 250392K free, 46948K shrd, 11072K buff, 83804K cached
CPU:   7% usr  23% sys   0% nic  69% idle   0% io   0% irq   0% sirq
Load average: 2.98 1.85 0.74 2/147 1155
  PID  PPID USER  ...</msg>
<status status="PASS" endtime="20170728 17:43:02.570" starttime="20170728 17:43:02.569"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170728 17:43:02.570" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170728 17:43:02.570" starttime="20170728 17:43:02.570"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170728 17:43:02.580" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_proc_list.txt"&gt;/home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170728 17:43:02.580" starttime="20170728 17:43:02.579"></status>
</kw>
<status status="PASS" endtime="20170728 17:43:02.580" starttime="20170728 17:43:02.578"></status>
</kw>
<status status="PASS" endtime="20170728 17:43:02.580" starttime="20170728 17:43:02.571"></status>
</kw>
<status status="PASS" endtime="20170728 17:43:02.580" starttime="20170728 17:43:02.213"></status>
</kw>
<status status="PASS" endtime="20170728 17:43:02.580" starttime="20170728 17:43:02.212"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170728 17:43:02.581" level="INFO">${logpath} = /home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_dmesg.txt</msg>
<status status="PASS" endtime="20170728 17:43:02.581" starttime="20170728 17:43:02.581"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170728 17:43:02.583" starttime="20170728 17:43:02.582"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170728 17:43:02.583" level="INFO">${cmd_buf} = BMC Execute Command  dmesg  ignore_err=1</msg>
<status status="PASS" endtime="20170728 17:43:02.583" starttime="20170728 17:43:02.583"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>dmesg</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170728 17:43:02.627" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170728 17:43:02.628" level="INFO">Executing command 'dmesg'.</msg>
<msg timestamp="20170728 17:43:02.715" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170728 17:43:02.715" starttime="20170728 17:43:02.603"></status>
</kw>
<msg timestamp="20170728 17:43:02.715" level="INFO">${status} = PASS</msg>
<msg timestamp="20170728 17:43:02.715" level="INFO">${ret_values} = (u'[    0.000000] Booting Linux on physical CPU 0x0\n[    0.000000] Linux version 4.10.17-44f0dc8ac43162c4f7082884d6cd79400341bf5b (jenkins@hudson) (gcc version 6.2.0 (GCC) ) #1 Fri Jul 28 16:38:12 UT...</msg>
<status status="PASS" endtime="20170728 17:43:02.716" starttime="20170728 17:43:02.584"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170728 17:43:02.716" level="INFO">${stdout} = [    0.000000] Booting Linux on physical CPU 0x0
[    0.000000] Linux version 4.10.17-44f0dc8ac43162c4f7082884d6cd79400341bf5b (jenkins@hudson) (gcc version 6.2.0 (GCC) ) #1 Fri Jul 28 16:38:12 UTC 20...</msg>
<status status="PASS" endtime="20170728 17:43:02.716" starttime="20170728 17:43:02.716"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170728 17:43:02.717" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170728 17:43:02.717" starttime="20170728 17:43:02.717"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170728 17:43:02.724" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_dmesg.txt"&gt;/home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170728 17:43:02.724" starttime="20170728 17:43:02.723"></status>
</kw>
<status status="PASS" endtime="20170728 17:43:02.724" starttime="20170728 17:43:02.723"></status>
</kw>
<status status="PASS" endtime="20170728 17:43:02.724" starttime="20170728 17:43:02.717"></status>
</kw>
<status status="PASS" endtime="20170728 17:43:02.725" starttime="20170728 17:43:02.581"></status>
</kw>
<status status="PASS" endtime="20170728 17:43:02.725" starttime="20170728 17:43:02.580"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170728 17:43:02.725" level="INFO">${logpath} = /home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_journalctl.txt</msg>
<status status="PASS" endtime="20170728 17:43:02.725" starttime="20170728 17:43:02.725"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170728 17:43:02.727" starttime="20170728 17:43:02.726"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170728 17:43:02.727" level="INFO">${cmd_buf} = BMC Execute Command  journalctl --no-pager  ignore_err=1</msg>
<status status="PASS" endtime="20170728 17:43:02.727" starttime="20170728 17:43:02.727"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl --no-pager</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170728 17:43:02.770" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170728 17:43:02.771" level="INFO">Executing command 'journalctl --no-pager'.</msg>
<msg timestamp="20170728 17:43:03.490" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170728 17:43:03.490" starttime="20170728 17:43:02.747"></status>
</kw>
<msg timestamp="20170728 17:43:03.490" level="INFO">${status} = PASS</msg>
<msg timestamp="20170728 17:43:03.492" level="INFO">${ret_values} = (u'-- Logs begin at Fri 2017-07-28 17:40:29 UTC, end at Fri 2017-07-28 17:43:04 UTC. --\nJul 28 17:40:29 witherspoon kernel: Booting Linux on physical CPU 0x0\nJul 28 17:40:29 witherspoon kernel: Linu...</msg>
<status status="PASS" endtime="20170728 17:43:03.492" starttime="20170728 17:43:02.728"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170728 17:43:03.493" level="INFO">${stdout} = -- Logs begin at Fri 2017-07-28 17:40:29 UTC, end at Fri 2017-07-28 17:43:04 UTC. --
Jul 28 17:40:29 witherspoon kernel: Booting Linux on physical CPU 0x0
Jul 28 17:40:29 witherspoon kernel: Linux ver...</msg>
<status status="PASS" endtime="20170728 17:43:03.493" starttime="20170728 17:43:03.492"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170728 17:43:03.493" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170728 17:43:03.493" starttime="20170728 17:43:03.493"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170728 17:43:03.501" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_journalctl.txt"&gt;/home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/20170728174256891457_BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170728 17:43:03.501" starttime="20170728 17:43:03.500"></status>
</kw>
<status status="PASS" endtime="20170728 17:43:03.501" starttime="20170728 17:43:03.499"></status>
</kw>
<status status="PASS" endtime="20170728 17:43:03.501" starttime="20170728 17:43:03.494"></status>
</kw>
<status status="PASS" endtime="20170728 17:43:03.501" starttime="20170728 17:43:02.726"></status>
</kw>
<status status="PASS" endtime="20170728 17:43:03.501" starttime="20170728 17:43:02.725"></status>
</kw>
<status status="PASS" endtime="20170728 17:43:03.501" starttime="20170728 17:43:01.436"></status>
</kw>
<status status="PASS" endtime="20170728 17:43:03.502" starttime="20170728 17:43:01.435"></status>
</kw>
<status status="PASS" endtime="20170728 17:43:03.502" starttime="20170728 17:43:01.435"></status>
</kw>
<status status="PASS" endtime="20170728 17:43:03.502" starttime="20170728 17:43:01.435"></status>
</kw>
<status status="PASS" endtime="20170728 17:43:03.502" starttime="20170728 17:43:01.434"></status>
</kw>
<status status="PASS" endtime="20170728 17:43:03.502" starttime="20170728 17:43:01.420"></status>
</kw>
<status status="PASS" endtime="20170728 17:43:03.502" starttime="20170728 17:43:01.417"></status>
</kw>
<status status="PASS" endtime="20170728 17:43:03.502" starttime="20170728 17:43:01.417"></status>
</kw>
<kw type="foritem" name="${method} = ('SEL Log', 'Collect eSEL Log')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170728 17:43:03.504" starttime="20170728 17:43:03.504"></status>
</kw>
<msg timestamp="20170728 17:43:03.504" level="INFO">${status} = PASS</msg>
<msg timestamp="20170728 17:43:03.504" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170728 17:43:03.504" starttime="20170728 17:43:03.503"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170728 17:43:03.505" starttime="20170728 17:43:03.504"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170728 17:43:03.525" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170728 17:43:03.525" starttime="20170728 17:43:03.524"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170728 17:43:03.526" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170728 17:43:03.526" starttime="20170728 17:43:03.526"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170728 17:43:03.527" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170728 17:43:03.527" starttime="20170728 17:43:03.526"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170728 17:43:03.527" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170728 17:43:03.527" starttime="20170728 17:43:03.527"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170728 17:43:03.740" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170728 17:43:03.740" starttime="20170728 17:43:03.528"></status>
</kw>
<msg timestamp="20170728 17:43:03.740" level="INFO">${status} = PASS</msg>
<msg timestamp="20170728 17:43:03.740" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170728 17:43:03.740" starttime="20170728 17:43:03.528"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170728 17:43:03.741" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170728 17:43:03.741" starttime="20170728 17:43:03.741"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170728 17:43:03.742" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170728 17:43:03.742" starttime="20170728 17:43:03.741"></status>
</kw>
<status status="PASS" endtime="20170728 17:43:03.742" starttime="20170728 17:43:03.523"></status>
</kw>
<status status="PASS" endtime="20170728 17:43:03.742" starttime="20170728 17:43:03.523"></status>
</kw>
<status status="PASS" endtime="20170728 17:43:03.742" starttime="20170728 17:43:03.522"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170728 17:43:03.743" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status status="PASS" endtime="20170728 17:43:03.743" starttime="20170728 17:43:03.742"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170728 17:43:03.743" starttime="20170728 17:43:03.743"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170728 17:43:03.786" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg timestamp="20170728 17:43:03.786" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170728 17:43:03.786" starttime="20170728 17:43:03.744"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170728 17:43:03.787" starttime="20170728 17:43:03.786"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170728 17:43:03.787" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170728 17:43:03.787" starttime="20170728 17:43:03.787"></status>
</kw>
<msg timestamp="20170728 17:43:03.788" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170728 17:43:03.788" starttime="20170728 17:43:03.522"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170728 17:43:03.789" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170728 17:43:03.789" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170728 17:43:03.789" starttime="20170728 17:43:03.788"></status>
</kw>
<msg timestamp="20170728 17:43:03.789" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170728 17:43:03.789" starttime="20170728 17:43:03.788"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg timestamp="20170728 17:43:03.790" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170728 17:43:03.790" starttime="20170728 17:43:03.789"></status>
</kw>
<status status="PASS" endtime="20170728 17:43:03.790" starttime="20170728 17:43:03.521"></status>
</kw>
<status status="PASS" endtime="20170728 17:43:03.790" starttime="20170728 17:43:03.505"></status>
</kw>
<status status="PASS" endtime="20170728 17:43:03.790" starttime="20170728 17:43:03.502"></status>
</kw>
<status status="PASS" endtime="20170728 17:43:03.790" starttime="20170728 17:43:03.502"></status>
</kw>
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170728 17:43:03.792" starttime="20170728 17:43:03.792"></status>
</kw>
<msg timestamp="20170728 17:43:03.792" level="INFO">${status} = PASS</msg>
<msg timestamp="20170728 17:43:03.792" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170728 17:43:03.792" starttime="20170728 17:43:03.791"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170728 17:43:03.793" starttime="20170728 17:43:03.792"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg timestamp="20170728 17:43:03.809" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170728 17:43:03.809" starttime="20170728 17:43:03.808"></status>
</kw>
<status status="PASS" endtime="20170728 17:43:03.809" starttime="20170728 17:43:03.808"></status>
</kw>
<status status="PASS" endtime="20170728 17:43:03.809" starttime="20170728 17:43:03.793"></status>
</kw>
<status status="PASS" endtime="20170728 17:43:03.809" starttime="20170728 17:43:03.790"></status>
</kw>
<status status="PASS" endtime="20170728 17:43:03.809" starttime="20170728 17:43:03.790"></status>
</kw>
<status status="PASS" endtime="20170728 17:43:03.809" starttime="20170728 17:42:57.101"></status>
</kw>
<status status="PASS" endtime="20170728 17:43:03.809" starttime="20170728 17:42:57.099"></status>
</kw>
<status status="PASS" endtime="20170728 17:43:03.809" starttime="20170728 17:42:57.099"></status>
</kw>
<status status="PASS" endtime="20170728 17:43:03.809" starttime="20170728 17:42:57.099"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>SSHLibrary.Close All Connections</arg>
</arguments>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20170728 17:43:03.816" starttime="20170728 17:43:03.816"></status>
</kw>
<status status="PASS" endtime="20170728 17:43:03.816" starttime="20170728 17:43:03.810"></status>
</kw>
<status status="PASS" endtime="20170728 17:43:03.816" starttime="20170728 17:42:57.098"></status>
</kw>
<status status="PASS" endtime="20170728 17:43:03.816" starttime="20170728 17:42:53.852"></status>
</kw>
<status status="PASS" endtime="20170728 17:43:03.816" starttime="20170728 17:42:53.852"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status status="PASS" endtime="20170728 17:43:03.818" starttime="20170728 17:43:03.817"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170728 17:43:03.819" level="INFO">${FFDC_DIR_PATH_STYLE} = 0</msg>
<status status="PASS" endtime="20170728 17:43:03.819" starttime="20170728 17:43:03.819"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170728 17:43:03.820" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/</msg>
<status status="PASS" endtime="20170728 17:43:03.820" starttime="20170728 17:43:03.819"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status status="PASS" endtime="20170728 17:43:03.820" starttime="20170728 17:43:03.820"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" endtime="20170728 17:43:03.821" starttime="20170728 17:43:03.821"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20170728 17:43:03.822" html="yes" level="INFO">Directory '&lt;a href="file:///home/fspcibld"&gt;/home/fspcibld&lt;/a&gt;' already exists.</msg>
<status status="PASS" endtime="20170728 17:43:03.822" starttime="20170728 17:43:03.821"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170728 17:43:03.823" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20170728 17:43:03.823" starttime="20170728 17:43:03.822"></status>
</kw>
<msg timestamp="20170728 17:43:03.823" level="INFO">${exist} = True</msg>
<status status="PASS" endtime="20170728 17:43:03.823" starttime="20170728 17:43:03.822"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status status="PASS" endtime="20170728 17:43:03.823" starttime="20170728 17:43:03.823"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" endtime="20170728 17:43:03.825" starttime="20170728 17:43:03.824"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170728 17:43:03.826" level="INFO">${cur_time} = 2017-07-28 17:43:03:825629</msg>
<status status="PASS" endtime="20170728 17:43:03.826" starttime="20170728 17:43:03.825"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170728 17:43:03.826" level="INFO">${cur_time} = 20170728174303825629</msg>
<status status="PASS" endtime="20170728 17:43:03.826" starttime="20170728 17:43:03.826"></status>
</kw>
<msg timestamp="20170728 17:43:03.827" level="INFO">${cur_time} = 20170728174303825629</msg>
<status status="PASS" endtime="20170728 17:43:03.827" starttime="20170728 17:43:03.825"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20170728 17:43:03.827" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170728 17:43:03.828" starttime="20170728 17:43:03.827"></status>
</kw>
<status status="PASS" endtime="20170728 17:43:03.828" starttime="20170728 17:43:03.818"></status>
</kw>
<status status="PASS" endtime="20170728 17:43:03.828" starttime="20170728 17:42:53.568"></status>
</kw>
<status status="PASS" endtime="20170728 17:43:03.828" starttime="20170728 17:42:53.560"></status>
</kw>
<status status="PASS" endtime="20170728 17:43:03.828" starttime="20170728 17:42:53.558"></status>
</kw>
<doc>Update PNOR image and verify.</doc>
<tags>
<tag>BIOS_Code_Update</tag>
<tag>Host_BIOS_Update</tag>
<tag>open-power</tag>
</tags>
<status status="FAIL" endtime="20170728 17:43:03.828" critical="yes" starttime="20170728 17:42:29.854">timeout</status>
</test>
<test id="s1-t2" name="Host BIOS Power On">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${PREV_TEST_STATUS}' == 'PASS'</arg>
<arg>Validate Power On</arg>
</arguments>
<status status="PASS" endtime="20170728 17:43:03.830" starttime="20170728 17:43:03.830"></status>
</kw>
<kw type="teardown" name="Test Bios Teardown">
<doc>Log FFDC if test suite fails and collect SOL log for</doc>
<kw name="Printn" library="gen_print">
<status status="PASS" endtime="20170728 17:43:03.832" starttime="20170728 17:43:03.832"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>FFDC On Test Case Fail</arg>
</arguments>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170728 17:43:03.844" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170728 17:43:03.844" starttime="20170728 17:43:03.843"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170728 17:43:03.845" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170728 17:43:03.845" starttime="20170728 17:43:03.844"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170728 17:43:03.845" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170728 17:43:03.845" starttime="20170728 17:43:03.845"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170728 17:43:03.846" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170728 17:43:03.846" starttime="20170728 17:43:03.846"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170728 17:43:04.066" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170728 17:43:04.066" starttime="20170728 17:43:03.847"></status>
</kw>
<msg timestamp="20170728 17:43:04.066" level="INFO">${status} = PASS</msg>
<msg timestamp="20170728 17:43:04.066" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170728 17:43:04.066" starttime="20170728 17:43:03.847"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170728 17:43:04.067" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170728 17:43:04.067" starttime="20170728 17:43:04.067"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170728 17:43:04.068" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170728 17:43:04.068" starttime="20170728 17:43:04.067"></status>
</kw>
<status status="PASS" endtime="20170728 17:43:04.068" starttime="20170728 17:43:03.843"></status>
</kw>
<status status="PASS" endtime="20170728 17:43:04.068" starttime="20170728 17:43:03.842"></status>
</kw>
<status status="PASS" endtime="20170728 17:43:04.068" starttime="20170728 17:43:03.842"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170728 17:43:04.069" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170728 17:43:04.069" starttime="20170728 17:43:04.068"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170728 17:43:04.070" starttime="20170728 17:43:04.069"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170728 17:43:04.132" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170728 17:43:04.132" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170728 17:43:04.133" starttime="20170728 17:43:04.070"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170728 17:43:04.133" starttime="20170728 17:43:04.133"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170728 17:43:04.134" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170728 17:43:04.134" starttime="20170728 17:43:04.134"></status>
</kw>
<msg timestamp="20170728 17:43:04.134" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170728 17:43:04.134" starttime="20170728 17:43:03.841"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170728 17:43:04.135" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170728 17:43:04.135" starttime="20170728 17:43:04.134"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170728 17:43:04.135" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170728 17:43:04.135" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170728 17:43:04.135" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170728 17:43:04.135" starttime="20170728 17:43:04.135"></status>
</kw>
<msg timestamp="20170728 17:43:04.136" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170728 17:43:04.136" starttime="20170728 17:43:03.840"></status>
</kw>
<msg timestamp="20170728 17:43:04.136" level="INFO">${host_state} = Off</msg>
<status status="PASS" endtime="20170728 17:43:04.136" starttime="20170728 17:43:03.840"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg timestamp="20170728 17:43:04.137" level="FAIL">Off != Quiesced</msg>
<status status="FAIL" endtime="20170728 17:43:04.137" starttime="20170728 17:43:04.137"></status>
</kw>
<msg timestamp="20170728 17:43:04.137" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170728 17:43:04.137" starttime="20170728 17:43:04.136"></status>
</kw>
<msg timestamp="20170728 17:43:04.138" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170728 17:43:04.138" starttime="20170728 17:43:03.840"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<status status="PASS" endtime="20170728 17:43:04.138" starttime="20170728 17:43:04.138"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status status="PASS" endtime="20170728 17:43:04.139" starttime="20170728 17:43:04.139"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170728 17:43:04.140" level="INFO">${FFDC_DIR_PATH_STYLE} = 0</msg>
<status status="PASS" endtime="20170728 17:43:04.140" starttime="20170728 17:43:04.140"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170728 17:43:04.140" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20170728174256891457_TestBiosUpdate/20170728174256891457_HostBIOSUpdate/</msg>
<status status="PASS" endtime="20170728 17:43:04.141" starttime="20170728 17:43:04.140"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status status="PASS" endtime="20170728 17:43:04.141" starttime="20170728 17:43:04.141"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" endtime="20170728 17:43:04.142" starttime="20170728 17:43:04.141"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20170728 17:43:04.142" html="yes" level="INFO">Directory '&lt;a href="file:///home/fspcibld"&gt;/home/fspcibld&lt;/a&gt;' already exists.</msg>
<status status="PASS" endtime="20170728 17:43:04.142" starttime="20170728 17:43:04.142"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170728 17:43:04.143" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20170728 17:43:04.143" starttime="20170728 17:43:04.143"></status>
</kw>
<msg timestamp="20170728 17:43:04.143" level="INFO">${exist} = True</msg>
<status status="PASS" endtime="20170728 17:43:04.143" starttime="20170728 17:43:04.143"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status status="PASS" endtime="20170728 17:43:04.144" starttime="20170728 17:43:04.144"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" endtime="20170728 17:43:04.145" starttime="20170728 17:43:04.144"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170728 17:43:04.147" level="INFO">${cur_time} = 2017-07-28 17:43:04:146324</msg>
<status status="PASS" endtime="20170728 17:43:04.147" starttime="20170728 17:43:04.146"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170728 17:43:04.147" level="INFO">${cur_time} = 20170728174304146324</msg>
<status status="PASS" endtime="20170728 17:43:04.147" starttime="20170728 17:43:04.147"></status>
</kw>
<msg timestamp="20170728 17:43:04.147" level="INFO">${cur_time} = 20170728174304146324</msg>
<status status="PASS" endtime="20170728 17:43:04.147" starttime="20170728 17:43:04.145"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20170728 17:43:04.148" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170728 17:43:04.148" starttime="20170728 17:43:04.148"></status>
</kw>
<status status="PASS" endtime="20170728 17:43:04.148" starttime="20170728 17:43:04.139"></status>
</kw>
<status status="PASS" endtime="20170728 17:43:04.149" starttime="20170728 17:43:03.839"></status>
</kw>
<status status="PASS" endtime="20170728 17:43:04.149" starttime="20170728 17:43:03.832"></status>
</kw>
<status status="PASS" endtime="20170728 17:43:04.149" starttime="20170728 17:43:03.831"></status>
</kw>
<doc>Power On the system and wait for OS</doc>
<tags>
<tag>BIOS_Code_Update</tag>
<tag>Host_BIOS_Power_On</tag>
<tag>open-power</tag>
</tags>
<status status="PASS" endtime="20170728 17:43:04.149" critical="yes" starttime="20170728 17:43:03.829"></status>
</test>
<doc>Update the PNOR image on the host for hostboot CI purposes.</doc>
<status status="FAIL" endtime="20170728 17:43:04.150" starttime="20170728 17:42:29.034"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="1">Critical Tests</stat>
<stat fail="1" pass="1">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="1">BIOS_Code_Update</stat>
<stat fail="0" pass="1">Host_BIOS_Power_On</stat>
<stat fail="1" pass="0">Host_BIOS_Update</stat>
<stat fail="1" pass="1">open-power</stat>
</tag>
<suite>
<stat fail="1" id="s1" name="Test Bios Update" pass="1">Test Bios Update</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
