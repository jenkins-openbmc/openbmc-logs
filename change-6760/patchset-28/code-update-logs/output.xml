<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20171002 19:43:33.687" generator="Robot 3.0.2 (Python 2.7.12 on linux2)">
<suite source="/home/fspcibld/openbmc-test-automation/extended/code_update/bmc_code_update.robot" id="s1" name="Bmc Code Update">
<test id="s1-t1" name="REST BMC Code Update">
<kw type="setup" name="Code Update Setup">
<doc>Do code update test case setup.</doc>
<kw name="Delete All Dumps" library="dump_utils">
<doc>Delete all dumps.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${DUMP_ENTRY_URI}list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171002 19:43:34.653" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171002 19:43:34.654" starttime="20171002 19:43:34.652"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171002 19:43:34.655" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171002 19:43:34.655" starttime="20171002 19:43:34.654"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171002 19:43:34.655" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171002 19:43:34.655" starttime="20171002 19:43:34.655"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171002 19:43:34.656" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171002 19:43:34.656" starttime="20171002 19:43:34.656"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171002 19:43:34.866" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171002 19:43:34.866" starttime="20171002 19:43:34.657"></status>
</kw>
<msg timestamp="20171002 19:43:34.866" level="INFO">${status} = PASS</msg>
<msg timestamp="20171002 19:43:34.866" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 19:43:34.866" starttime="20171002 19:43:34.656"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171002 19:43:34.867" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 19:43:34.867" starttime="20171002 19:43:34.867"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171002 19:43:34.868" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 19:43:34.868" starttime="20171002 19:43:34.867"></status>
</kw>
<status status="PASS" endtime="20171002 19:43:34.868" starttime="20171002 19:43:34.652"></status>
</kw>
<status status="PASS" endtime="20171002 19:43:34.868" starttime="20171002 19:43:34.651"></status>
</kw>
<status status="PASS" endtime="20171002 19:43:34.868" starttime="20171002 19:43:34.650"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171002 19:43:34.869" level="INFO">${base_uri} = /xyz/openbmc_project/dump/entry/list</msg>
<status status="PASS" endtime="20171002 19:43:34.869" starttime="20171002 19:43:34.868"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171002 19:43:34.870" starttime="20171002 19:43:34.869"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171002 19:43:34.923" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/dump/entry/list, headers=None json=None</msg>
<msg timestamp="20171002 19:43:34.923" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171002 19:43:34.923" starttime="20171002 19:43:34.870"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171002 19:43:34.924" starttime="20171002 19:43:34.923"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171002 19:43:34.924" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171002 19:43:34.924" starttime="20171002 19:43:34.924"></status>
</kw>
<msg timestamp="20171002 19:43:34.924" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171002 19:43:34.924" starttime="20171002 19:43:34.650"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} == ${HTTP_NOT_FOUND}</arg>
</arguments>
<msg timestamp="20171002 19:43:34.925" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20171002 19:43:34.925" starttime="20171002 19:43:34.925"></status>
</kw>
<status status="PASS" endtime="20171002 19:43:34.925" starttime="20171002 19:43:34.649"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Smart Power Off</arg>
</arguments>
<kw name="Smart Power Off" library="boot_utils">
<doc>Do a smart power off.</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${quiet}</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg timestamp="20171002 19:43:34.927" level="INFO">${loc_quiet} = 0</msg>
<status status="PASS" endtime="20171002 19:43:34.927" starttime="20171002 19:43:34.926"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>REST Power Off \ stack_mode=skip</arg>
<arg>\ \ quiet=${loc_quiet}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171002 19:43:34.927" level="INFO">${cmd_buf} = REST Power Off  stack_mode=skip   quiet=0</msg>
<status status="PASS" endtime="20171002 19:43:34.927" starttime="20171002 19:43:34.927"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
<arg>quiet=${loc_quiet}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="REST Power Off" library="boot_utils">
<doc>Do "REST Power Off" boot test.</doc>
<arguments>
<arg>stack_mode=skip</arg>
<arg>quiet=0</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>OBMC Boot Test \ loc_boot_stack=REST Power Off</arg>
<arg>\ loc_stack_mode=${stack_mode} \ loc_quiet=${quiet}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171002 19:43:34.930" level="INFO">${cmd_buf} = OBMC Boot Test  loc_boot_stack=REST Power Off  loc_stack_mode=skip  loc_quiet=0</msg>
<status status="PASS" endtime="20171002 19:43:34.930" starttime="20171002 19:43:34.929"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<kw name="OBMC Boot Test" library="obmc_boot_test_resource">
<arguments>
<arg>loc_boot_stack=REST Power Off</arg>
<arg>loc_stack_mode=skip</arg>
<arg>loc_quiet=0</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${pos_arg1}' != '${EMPTY}'</arg>
<arg>Set To Dictionary</arg>
<arg>${arguments}</arg>
<arg>loc_boot_stack=${pos_arg1}</arg>
</arguments>
<status status="PASS" endtime="20171002 19:43:34.938" starttime="20171002 19:43:34.938"></status>
</kw>
<kw name="Obmc Boot Test Py" library="obmc_boot_test">
<doc>Do main program processing.</doc>
<arguments>
<arg>&amp;{arguments}</arg>
</arguments>
<msg timestamp="20171002 19:43:34.940" level="INFO">${boot_stack} = REST Power Off</msg>
<msg timestamp="20171002 19:43:34.940" level="INFO">${stack_mode} = skip</msg>
<msg timestamp="20171002 19:43:34.941" level="INFO">${quiet} = 0</msg>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20171002 19:43:35.044" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171002 19:43:35.045" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20171002 19:43:35.845" level="INFO">Read output: root@witherspoon:~#</msg>
<msg timestamp="20171002 19:43:35.846" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20171002 19:43:35.922" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20171002 19:43:35.933" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20171002 19:43:35.933" level="INFO">${stderr} = </msg>
<msg timestamp="20171002 19:43:35.933" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20171002 19:43:35.933" starttime="20171002 19:43:35.021"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20171002 19:43:35.934" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20171002 19:43:35.934" starttime="20171002 19:43:35.933"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20171002 19:43:35.934" level="INFO">Length is 11</msg>
<status status="PASS" endtime="20171002 19:43:35.934" starttime="20171002 19:43:35.934"></status>
</kw>
<status status="PASS" endtime="20171002 19:43:35.935" starttime="20171002 19:43:35.019"></status>
</kw>
<msg timestamp="20171002 19:43:35.935" level="INFO">${openbmc_model} = Witherspoon</msg>
<msg timestamp="20171002 19:43:36.142" level="INFO">${plug_in_packages_list} = []</msg>
<msg timestamp="20171002 19:43:36.154" level="INFO">${program_pid} = 1</msg>
<kw name="Set BMC Power Policy" library="utils">
<doc>Set the given BMC power policy.</doc>
<arguments>
<arg>RESTORE_LAST_STATE</arg>
</arguments>
<kw name="Set Power Policy Method" library="utils">
<doc>Set the global bmc_power_policy_method to either 'Old' or 'New'.</doc>
<kw name="New Get Power Policy" library="utils">
<doc>Get the BMC power policy (new method).</doc>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${POWER_RESTORE_URI}</arg>
<arg>PowerRestorePolicy</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171002 19:43:36.185" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171002 19:43:36.186" starttime="20171002 19:43:36.184"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171002 19:43:36.187" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171002 19:43:36.187" starttime="20171002 19:43:36.186"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171002 19:43:36.187" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171002 19:43:36.187" starttime="20171002 19:43:36.187"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171002 19:43:36.188" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171002 19:43:36.188" starttime="20171002 19:43:36.188"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171002 19:43:36.394" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171002 19:43:36.394" starttime="20171002 19:43:36.189"></status>
</kw>
<msg timestamp="20171002 19:43:36.394" level="INFO">${status} = PASS</msg>
<msg timestamp="20171002 19:43:36.394" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 19:43:36.394" starttime="20171002 19:43:36.189"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171002 19:43:36.395" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 19:43:36.395" starttime="20171002 19:43:36.395"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171002 19:43:36.396" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 19:43:36.396" starttime="20171002 19:43:36.395"></status>
</kw>
<status status="PASS" endtime="20171002 19:43:36.396" starttime="20171002 19:43:36.184"></status>
</kw>
<status status="PASS" endtime="20171002 19:43:36.396" starttime="20171002 19:43:36.183"></status>
</kw>
<status status="PASS" endtime="20171002 19:43:36.396" starttime="20171002 19:43:36.182"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171002 19:43:36.397" level="INFO">${base_uri} = /xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy</msg>
<status status="PASS" endtime="20171002 19:43:36.397" starttime="20171002 19:43:36.397"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171002 19:43:36.399" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Get, args:{}</msg>
<status status="PASS" endtime="20171002 19:43:36.399" starttime="20171002 19:43:36.398"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171002 19:43:36.400" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Get, args:{}</msg>
<status status="PASS" endtime="20171002 19:43:36.400" starttime="20171002 19:43:36.400"></status>
</kw>
<status status="PASS" endtime="20171002 19:43:36.400" starttime="20171002 19:43:36.399"></status>
</kw>
<status status="PASS" endtime="20171002 19:43:36.401" starttime="20171002 19:43:36.398"></status>
</kw>
<status status="PASS" endtime="20171002 19:43:36.401" starttime="20171002 19:43:36.397"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171002 19:43:36.465" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, headers=None json=None</msg>
<msg timestamp="20171002 19:43:36.465" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 19:43:36.465" starttime="20171002 19:43:36.401"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171002 19:43:36.467" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171002 19:43:36.467" starttime="20171002 19:43:36.467"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171002 19:43:36.468" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171002 19:43:36.468" starttime="20171002 19:43:36.468"></status>
</kw>
<status status="PASS" endtime="20171002 19:43:36.468" starttime="20171002 19:43:36.467"></status>
</kw>
<status status="PASS" endtime="20171002 19:43:36.469" starttime="20171002 19:43:36.466"></status>
</kw>
<status status="PASS" endtime="20171002 19:43:36.469" starttime="20171002 19:43:36.466"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171002 19:43:36.470" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171002 19:43:36.470" starttime="20171002 19:43:36.470"></status>
</kw>
<msg timestamp="20171002 19:43:36.471" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 19:43:36.471" starttime="20171002 19:43:36.181"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171002 19:43:36.471" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 19:43:36.471" starttime="20171002 19:43:36.471"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171002 19:43:36.472" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171002 19:43:36.472" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171002 19:43:36.472" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore'}</msg>
<status status="PASS" endtime="20171002 19:43:36.472" starttime="20171002 19:43:36.472"></status>
</kw>
<msg timestamp="20171002 19:43:36.473" level="INFO">${currentPolicy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20171002 19:43:36.473" starttime="20171002 19:43:36.180"></status>
</kw>
<status status="PASS" endtime="20171002 19:43:36.473" starttime="20171002 19:43:36.180"></status>
</kw>
<msg timestamp="20171002 19:43:36.491" level="INFO">${bmc_power_policy_method} = New</msg>
<msg timestamp="20171002 19:43:36.492" level="INFO">${power_policy_setup} = 1</msg>
<status status="PASS" endtime="20171002 19:43:36.492" starttime="20171002 19:43:36.172"></status>
</kw>
<kw name="Translate Power Policy Value" library="utils">
<doc>Translate the policy value and return the result.</doc>
<arguments>
<arg>${policy}</arg>
</arguments>
<assign>
<var>${policy}</var>
</assign>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${RESTORE_LAST_STATE}</arg>
</arguments>
<status status="PASS" endtime="20171002 19:43:36.493" starttime="20171002 19:43:36.493"></status>
</kw>
<msg timestamp="20171002 19:43:36.493" level="INFO">${policy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20171002 19:43:36.493" starttime="20171002 19:43:36.492"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${bmc_power_policy_method} Set Power Policy \ ${policy}</arg>
</arguments>
<kw name="New Set Power Policy" library="utils">
<doc>Set the given BMC power policy (new method).</doc>
<arguments>
<arg>xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${policy}</arg>
</arguments>
<assign>
<var>${valueDict}</var>
</assign>
<msg timestamp="20171002 19:43:36.509" level="INFO">${valueDict} = {u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore'}</msg>
<status status="PASS" endtime="20171002 19:43:36.509" starttime="20171002 19:43:36.509"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${POWER_RESTORE_URI}</arg>
<arg>PowerRestorePolicy</arg>
<arg>data=${valueDict}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171002 19:43:36.511" level="INFO">${base_uri} = /xyz/openbmc_project/control/host0/power_restore_policy</msg>
<status status="PASS" endtime="20171002 19:43:36.511" starttime="20171002 19:43:36.510"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171002 19:43:36.514" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171002 19:43:36.514" starttime="20171002 19:43:36.513"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171002 19:43:36.515" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171002 19:43:36.515" starttime="20171002 19:43:36.514"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171002 19:43:36.516" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171002 19:43:36.516" starttime="20171002 19:43:36.515"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171002 19:43:36.516" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171002 19:43:36.516" starttime="20171002 19:43:36.516"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171002 19:43:36.694" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171002 19:43:36.694" starttime="20171002 19:43:36.517"></status>
</kw>
<msg timestamp="20171002 19:43:36.694" level="INFO">${status} = PASS</msg>
<msg timestamp="20171002 19:43:36.694" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 19:43:36.694" starttime="20171002 19:43:36.517"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171002 19:43:36.695" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 19:43:36.695" starttime="20171002 19:43:36.695"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171002 19:43:36.696" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 19:43:36.696" starttime="20171002 19:43:36.695"></status>
</kw>
<status status="PASS" endtime="20171002 19:43:36.696" starttime="20171002 19:43:36.513"></status>
</kw>
<status status="PASS" endtime="20171002 19:43:36.696" starttime="20171002 19:43:36.512"></status>
</kw>
<status status="PASS" endtime="20171002 19:43:36.696" starttime="20171002 19:43:36.512"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171002 19:43:36.697" level="INFO">${base_uri} = /xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy</msg>
<status status="PASS" endtime="20171002 19:43:36.697" starttime="20171002 19:43:36.696"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171002 19:43:36.697" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171002 19:43:36.697" starttime="20171002 19:43:36.697"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20171002 19:43:36.698" starttime="20171002 19:43:36.698"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171002 19:43:36.700" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Put, args:{u'data': {u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Res...</msg>
<status status="PASS" endtime="20171002 19:43:36.700" starttime="20171002 19:43:36.699"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171002 19:43:36.701" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Put, args:{u'data': {u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20171002 19:43:36.701" starttime="20171002 19:43:36.700"></status>
</kw>
<status status="PASS" endtime="20171002 19:43:36.701" starttime="20171002 19:43:36.700"></status>
</kw>
<status status="PASS" endtime="20171002 19:43:36.701" starttime="20171002 19:43:36.698"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171002 19:43:36.884" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, data={"data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20171002 19:43:36.884" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 19:43:36.884" starttime="20171002 19:43:36.701"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171002 19:43:36.885" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171002 19:43:36.885" starttime="20171002 19:43:36.885"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171002 19:43:36.886" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171002 19:43:36.886" starttime="20171002 19:43:36.886"></status>
</kw>
<status status="PASS" endtime="20171002 19:43:36.886" starttime="20171002 19:43:36.885"></status>
</kw>
<status status="PASS" endtime="20171002 19:43:36.887" starttime="20171002 19:43:36.884"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171002 19:43:36.887" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171002 19:43:36.887" starttime="20171002 19:43:36.887"></status>
</kw>
<msg timestamp="20171002 19:43:36.887" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 19:43:36.888" starttime="20171002 19:43:36.511"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171002 19:43:36.888" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 19:43:36.888" starttime="20171002 19:43:36.888"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20171002 19:43:36.889" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171002 19:43:36.889" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171002 19:43:36.889" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20171002 19:43:36.889" starttime="20171002 19:43:36.889"></status>
</kw>
<status status="PASS" endtime="20171002 19:43:36.889" starttime="20171002 19:43:36.510"></status>
</kw>
<status status="PASS" endtime="20171002 19:43:36.889" starttime="20171002 19:43:36.508"></status>
</kw>
<status status="PASS" endtime="20171002 19:43:36.889" starttime="20171002 19:43:36.494"></status>
</kw>
<kw name="Get System Power Policy" library="utils">
<doc>Get the BMC power policy.</doc>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="Set Power Policy Method" library="utils">
<doc>Set the global bmc_power_policy_method to either 'Old' or 'New'.</doc>
<status status="PASS" endtime="20171002 19:43:36.890" starttime="20171002 19:43:36.890"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${bmc_power_policy_method} Get Power Policy</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171002 19:43:36.891" level="INFO">${cmd_buf} = [u'New Get Power Policy']</msg>
<status status="PASS" endtime="20171002 19:43:36.891" starttime="20171002 19:43:36.891"></status>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>@{cmd_buf}</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="New Get Power Policy" library="utils">
<doc>Get the BMC power policy (new method).</doc>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${POWER_RESTORE_URI}</arg>
<arg>PowerRestorePolicy</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171002 19:43:36.896" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171002 19:43:36.896" starttime="20171002 19:43:36.895"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171002 19:43:36.897" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171002 19:43:36.897" starttime="20171002 19:43:36.896"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171002 19:43:36.897" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171002 19:43:36.897" starttime="20171002 19:43:36.897"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171002 19:43:36.898" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171002 19:43:36.898" starttime="20171002 19:43:36.898"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171002 19:43:37.136" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171002 19:43:37.137" starttime="20171002 19:43:36.899"></status>
</kw>
<msg timestamp="20171002 19:43:37.137" level="INFO">${status} = PASS</msg>
<msg timestamp="20171002 19:43:37.137" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 19:43:37.137" starttime="20171002 19:43:36.898"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171002 19:43:37.137" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 19:43:37.138" starttime="20171002 19:43:37.137"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171002 19:43:37.138" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 19:43:37.138" starttime="20171002 19:43:37.138"></status>
</kw>
<status status="PASS" endtime="20171002 19:43:37.138" starttime="20171002 19:43:36.895"></status>
</kw>
<status status="PASS" endtime="20171002 19:43:37.138" starttime="20171002 19:43:36.894"></status>
</kw>
<status status="PASS" endtime="20171002 19:43:37.139" starttime="20171002 19:43:36.894"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171002 19:43:37.139" level="INFO">${base_uri} = /xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy</msg>
<status status="PASS" endtime="20171002 19:43:37.139" starttime="20171002 19:43:37.139"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171002 19:43:37.141" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Get, args:{}</msg>
<status status="PASS" endtime="20171002 19:43:37.141" starttime="20171002 19:43:37.141"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171002 19:43:37.143" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Get, args:{}</msg>
<status status="PASS" endtime="20171002 19:43:37.143" starttime="20171002 19:43:37.142"></status>
</kw>
<status status="PASS" endtime="20171002 19:43:37.143" starttime="20171002 19:43:37.142"></status>
</kw>
<status status="PASS" endtime="20171002 19:43:37.143" starttime="20171002 19:43:37.140"></status>
</kw>
<status status="PASS" endtime="20171002 19:43:37.143" starttime="20171002 19:43:37.140"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171002 19:43:37.225" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, headers=None json=None</msg>
<msg timestamp="20171002 19:43:37.225" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 19:43:37.225" starttime="20171002 19:43:37.144"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171002 19:43:37.227" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171002 19:43:37.227" starttime="20171002 19:43:37.226"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171002 19:43:37.228" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171002 19:43:37.228" starttime="20171002 19:43:37.228"></status>
</kw>
<status status="PASS" endtime="20171002 19:43:37.228" starttime="20171002 19:43:37.227"></status>
</kw>
<status status="PASS" endtime="20171002 19:43:37.228" starttime="20171002 19:43:37.226"></status>
</kw>
<status status="PASS" endtime="20171002 19:43:37.229" starttime="20171002 19:43:37.225"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171002 19:43:37.229" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171002 19:43:37.229" starttime="20171002 19:43:37.229"></status>
</kw>
<msg timestamp="20171002 19:43:37.229" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 19:43:37.229" starttime="20171002 19:43:36.893"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171002 19:43:37.230" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 19:43:37.230" starttime="20171002 19:43:37.230"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171002 19:43:37.231" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171002 19:43:37.231" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171002 19:43:37.231" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore'}</msg>
<status status="PASS" endtime="20171002 19:43:37.231" starttime="20171002 19:43:37.230"></status>
</kw>
<msg timestamp="20171002 19:43:37.231" level="INFO">${currentPolicy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20171002 19:43:37.231" starttime="20171002 19:43:36.892"></status>
</kw>
<status status="PASS" endtime="20171002 19:43:37.231" starttime="20171002 19:43:36.892"></status>
</kw>
<msg timestamp="20171002 19:43:37.232" level="INFO">${currentPolicy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20171002 19:43:37.232" starttime="20171002 19:43:36.891"></status>
</kw>
<msg timestamp="20171002 19:43:37.232" level="INFO">${currentPolicy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20171002 19:43:37.232" starttime="20171002 19:43:36.890"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${currentPolicy}</arg>
<arg>${policy}</arg>
</arguments>
<msg timestamp="20171002 19:43:37.232" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20171002 19:43:37.232" starttime="20171002 19:43:37.232"></status>
</kw>
<status status="PASS" endtime="20171002 19:43:37.233" starttime="20171002 19:43:36.170"></status>
</kw>
<msg timestamp="20171002 19:43:37.275" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20171002 19:43:37.307" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20171002 19:43:37.313" level="INFO">${TEST_MESSAGE} = </msg>
<msg timestamp="20171002 19:43:37.313" level="INFO">${FFDC_LOG_PATH} = ./</msg>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/state/enumerate</arg>
<arg>quiet=${0}</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171002 19:43:37.352" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171002 19:43:37.353" starttime="20171002 19:43:37.352"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171002 19:43:37.354" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171002 19:43:37.354" starttime="20171002 19:43:37.354"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171002 19:43:37.355" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171002 19:43:37.355" starttime="20171002 19:43:37.355"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171002 19:43:37.356" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171002 19:43:37.356" starttime="20171002 19:43:37.355"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171002 19:43:37.545" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171002 19:43:37.545" starttime="20171002 19:43:37.357"></status>
</kw>
<msg timestamp="20171002 19:43:37.545" level="INFO">${status} = PASS</msg>
<msg timestamp="20171002 19:43:37.545" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 19:43:37.545" starttime="20171002 19:43:37.356"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171002 19:43:37.546" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 19:43:37.546" starttime="20171002 19:43:37.546"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171002 19:43:37.547" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 19:43:37.547" starttime="20171002 19:43:37.546"></status>
</kw>
<status status="PASS" endtime="20171002 19:43:37.547" starttime="20171002 19:43:37.350"></status>
</kw>
<status status="PASS" endtime="20171002 19:43:37.547" starttime="20171002 19:43:37.349"></status>
</kw>
<status status="PASS" endtime="20171002 19:43:37.547" starttime="20171002 19:43:37.348"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171002 19:43:37.548" level="INFO">${base_uri} = /xyz/openbmc_project/state/enumerate</msg>
<status status="PASS" endtime="20171002 19:43:37.548" starttime="20171002 19:43:37.547"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171002 19:43:37.550" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/state/enumerate, method:Get, args:{}</msg>
<status status="PASS" endtime="20171002 19:43:37.550" starttime="20171002 19:43:37.549"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171002 19:43:37.551" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/state/enumerate, method:Get, args:{}</msg>
<status status="PASS" endtime="20171002 19:43:37.551" starttime="20171002 19:43:37.551"></status>
</kw>
<status status="PASS" endtime="20171002 19:43:37.551" starttime="20171002 19:43:37.550"></status>
</kw>
<status status="PASS" endtime="20171002 19:43:37.552" starttime="20171002 19:43:37.549"></status>
</kw>
<status status="PASS" endtime="20171002 19:43:37.552" starttime="20171002 19:43:37.548"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171002 19:43:37.750" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/enumerate, headers=None json=None</msg>
<msg timestamp="20171002 19:43:37.751" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 19:43:37.751" starttime="20171002 19:43:37.552"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171002 19:43:37.753" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "/xyz/openbmc_project/state/bmc0": {
      "CurrentBMCState": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
      "RequestedBMCTransition": "xyz.openbmc...</msg>
<status status="PASS" endtime="20171002 19:43:37.753" starttime="20171002 19:43:37.752"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171002 19:43:37.754" level="INFO">Response code:200, Content:{
  "data": {
    "/xyz/openbmc_project/state/bmc0": {
      "CurrentBMCState": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
      "RequestedBMCTransition": "xyz.openbmc_project.State.BMC.Transition.None"
    }, 
    "/xyz/openbmc_project/state/chassis0": {
      "CurrentPowerState": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
      "RequestedPowerTransition": "xyz.openbmc_project.State.Chassis.Transition.Off"
    }, 
    "/xyz/openbmc_project/state/host0": {
      "AttemptsLeft": 3, 
      "BootProgress": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
      "CurrentHostState": "xyz.openbmc_project.State.Host.HostState.Off", 
      "OperatingSystemState": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
      "RequestedHostTransition": "xyz.openbmc_project.State.Host.Transition.Off"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171002 19:43:37.754" starttime="20171002 19:43:37.754"></status>
</kw>
<status status="PASS" endtime="20171002 19:43:37.754" starttime="20171002 19:43:37.753"></status>
</kw>
<status status="PASS" endtime="20171002 19:43:37.755" starttime="20171002 19:43:37.752"></status>
</kw>
<status status="PASS" endtime="20171002 19:43:37.755" starttime="20171002 19:43:37.751"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171002 19:43:37.755" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171002 19:43:37.755" starttime="20171002 19:43:37.755"></status>
</kw>
<msg timestamp="20171002 19:43:37.755" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 19:43:37.755" starttime="20171002 19:43:37.347"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171002 19:43:37.756" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 19:43:37.756" starttime="20171002 19:43:37.756"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171002 19:43:37.757" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/state/bmc0": {
      "CurrentBMCState": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
      "RequestedBMCTransition": "xyz.openbmc_project.State.BMC.Transition.None"
    }, 
    "/xyz/openbmc_project/state/chassis0": {
      "CurrentPowerState": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
      "RequestedPowerTransition": "xyz.openbmc_project.State.Chassis.Transition.Off"
    }, 
    "/xyz/openbmc_project/state/host0": {
      "AttemptsLeft": 3, 
      "BootProgress": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
      "CurrentHostState": "xyz.openbmc_project.State.Host.HostState.Off", 
      "OperatingSystemState": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
      "RequestedHostTransition": "xyz.openbmc_project.State.Host.Transition.Off"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171002 19:43:37.757" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171002 19:43:37.757" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'/xyz/openbmc_project/state/host0': {u'CurrentHostState': u'xyz.openbmc_project.State.Host.HostState.Off', u'RequestedHostTransition': u'xyz.openbm...</msg>
<status status="PASS" endtime="20171002 19:43:37.757" starttime="20171002 19:43:37.756"></status>
</kw>
<status status="PASS" endtime="20171002 19:43:37.757" starttime="20171002 19:43:37.346"></status>
</kw>
<status status="PASS" endtime="20171002 19:43:37.818" starttime="20171002 19:43:34.939"></status>
</kw>
<kw type="teardown" name="Obmc Boot Test Teardown" library="obmc_boot_test">
<doc>Clean up after the Main keyword.</doc>
<msg timestamp="20171002 19:43:37.825" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20171002 19:43:37.836" level="INFO">${boot_stack} = </msg>
<msg timestamp="20171002 19:43:37.836" level="INFO">${stack_mode} = normal</msg>
<msg timestamp="20171002 19:43:37.837" level="INFO">${quiet} = 0</msg>
<status status="PASS" endtime="20171002 19:43:37.837" starttime="20171002 19:43:37.819"></status>
</kw>
<status status="PASS" endtime="20171002 19:43:37.837" starttime="20171002 19:43:34.937"></status>
</kw>
<status status="PASS" endtime="20171002 19:43:37.837" starttime="20171002 19:43:34.930"></status>
</kw>
<status status="PASS" endtime="20171002 19:43:37.837" starttime="20171002 19:43:34.928"></status>
</kw>
<msg timestamp="20171002 19:43:37.837" level="INFO">${status} = PASS</msg>
<msg timestamp="20171002 19:43:37.837" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20171002 19:43:37.837" starttime="20171002 19:43:34.928"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == 'PASS'</arg>
<arg>Return From Keyword</arg>
</arguments>
<kw name="Return From Keyword" library="BuiltIn">
<doc>Returns from the enclosing user keyword.</doc>
<msg timestamp="20171002 19:43:37.839" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20171002 19:43:37.839" starttime="20171002 19:43:37.838"></status>
</kw>
<status status="PASS" endtime="20171002 19:43:37.839" starttime="20171002 19:43:37.838"></status>
</kw>
<status status="PASS" endtime="20171002 19:43:37.839" starttime="20171002 19:43:34.926"></status>
</kw>
<status status="PASS" endtime="20171002 19:43:37.839" starttime="20171002 19:43:34.926"></status>
</kw>
<status status="PASS" endtime="20171002 19:43:37.839" starttime="20171002 19:43:34.649"></status>
</kw>
<kw name="Upload And Activate Image" library="code_update_utils">
<doc>Upload an image to the BMC and activate it with REST.</doc>
<arguments>
<arg>${IMAGE_FILE_PATH}</arg>
<arg>skip_if_active=${SKIP_UPDATE_IF_ACTIVE}</arg>
</arguments>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<msg timestamp="20171002 19:43:37.840" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/obmc-phosphor-image-witherspoon.ubi.mtd.tar"&gt;/home/fspcibld/obmc-phosphor-image-witherspoon.ubi.mtd.tar&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20171002 19:43:37.841" starttime="20171002 19:43:37.840"></status>
</kw>
<kw name="Get Version Tar" library="code_update_utils">
<doc>Read the image version from the MANIFEST inside the tarball.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<assign>
<var>${image_version}</var>
</assign>
<msg timestamp="20171002 19:43:37.858" level="INFO">${image_version} = v1.99.10-84-g6c20acf</msg>
<status status="PASS" endtime="20171002 19:43:37.858" starttime="20171002 19:43:37.841"></status>
</kw>
<kw name="Get Binary File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<assign>
<var>${image_data}</var>
</assign>
<msg timestamp="20171002 19:43:37.859" html="yes" level="INFO">Getting file '&lt;a href="file:///home/fspcibld/obmc-phosphor-image-witherspoon.ubi.mtd.tar"&gt;/home/fspcibld/obmc-phosphor-image-witherspoon.ubi.mtd.tar&lt;/a&gt;'.</msg>
<msg timestamp="20171002 19:43:51.063" level="INFO">${image_data} = image-u-boot0000644000175100017520000113170013151356420013160 0...</msg>
<status status="PASS" endtime="20171002 19:43:51.063" starttime="20171002 19:43:37.858"></status>
</kw>
<kw name="Upload Image To BMC" library="rest_client">
<arguments>
<arg>/upload/image</arg>
<arg>data=${image_data}</arg>
</arguments>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171002 19:43:51.068" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171002 19:43:51.068" starttime="20171002 19:43:51.067"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171002 19:43:51.069" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171002 19:43:51.069" starttime="20171002 19:43:51.068"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171002 19:43:51.070" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171002 19:43:51.070" starttime="20171002 19:43:51.069"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171002 19:43:51.071" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171002 19:43:51.071" starttime="20171002 19:43:51.070"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171002 19:43:51.280" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171002 19:43:51.280" starttime="20171002 19:43:51.071"></status>
</kw>
<msg timestamp="20171002 19:43:51.281" level="INFO">${status} = PASS</msg>
<msg timestamp="20171002 19:43:51.281" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 19:43:51.281" starttime="20171002 19:43:51.071"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171002 19:43:51.281" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 19:43:51.281" starttime="20171002 19:43:51.281"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171002 19:43:51.282" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 19:43:51.282" starttime="20171002 19:43:51.282"></status>
</kw>
<status status="PASS" endtime="20171002 19:43:51.282" starttime="20171002 19:43:51.066"></status>
</kw>
<status status="PASS" endtime="20171002 19:43:51.282" starttime="20171002 19:43:51.066"></status>
</kw>
<status status="PASS" endtime="20171002 19:43:51.282" starttime="20171002 19:43:51.064"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171002 19:43:51.283" level="INFO">${base_uri} = /upload/image</msg>
<status status="PASS" endtime="20171002 19:43:51.283" starttime="20171002 19:43:51.283"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/octet-stream</arg>
<arg>Accept=application/octet-stream</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171002 19:43:51.284" level="INFO">${headers} = {u'Content-Type': u'application/octet-stream', u'Accept': u'application/octet-stream'}</msg>
<status status="PASS" endtime="20171002 19:43:51.284" starttime="20171002 19:43:51.283"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20171002 19:43:51.284" starttime="20171002 19:43:51.284"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171002 19:43:51.285" starttime="20171002 19:43:51.285"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171002 19:43:57.616" level="INFO">Post Request using : alias=openbmc, uri=/upload/image, data=&lt;application/octet-stream&gt;, headers={u'Content-Type': u'application/octet-stream', u'Accept': u'application/octet-stream'}, files=None, allow_redirects=True </msg>
<msg timestamp="20171002 19:43:57.616" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 19:43:57.617" starttime="20171002 19:43:51.285"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171002 19:43:57.617" starttime="20171002 19:43:57.617"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ret.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171002 19:43:57.618" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 19:43:57.618" starttime="20171002 19:43:57.618"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171002 19:43:57.619" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171002 19:43:57.619" starttime="20171002 19:43:57.618"></status>
</kw>
<status status="PASS" endtime="20171002 19:43:57.619" starttime="20171002 19:43:51.063"></status>
</kw>
<kw name="Verify Image Upload" library="code_update_utils">
<doc>Verify the image was uploaded correctly and that it created</doc>
<arguments>
<arg>${image_version}</arg>
</arguments>
<assign>
<var>${ret}</var>
<var>${version_id}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20171002 19:43:57.625" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20171002 19:43:57.626" starttime="20171002 19:43:57.625"></status>
</kw>
<msg timestamp="20171002 19:43:57.626" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20171002 19:43:57.626" starttime="20171002 19:43:57.624"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20171002 19:43:57.627" starttime="20171002 19:43:57.627"></status>
</kw>
<status status="PASS" endtime="20171002 19:43:57.627" starttime="20171002 19:43:57.626"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20171002 19:43:57.628" starttime="20171002 19:43:57.627"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20171002 19:43:57.629" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20171002 19:43:57.629" starttime="20171002 19:43:57.629"></status>
</kw>
<msg timestamp="20171002 19:43:57.629" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20171002 19:43:57.629" starttime="20171002 19:43:57.628"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20171002 19:43:57.631" starttime="20171002 19:43:57.630"></status>
</kw>
<status status="PASS" endtime="20171002 19:43:57.631" starttime="20171002 19:43:57.630"></status>
</kw>
<status status="PASS" endtime="20171002 19:43:57.631" starttime="20171002 19:43:57.629"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20171002 19:43:57.632" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20171002 19:43:59.841" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20171002 19:43:59.842" starttime="20171002 19:43:57.632"></status>
</kw>
<status status="PASS" endtime="20171002 19:43:59.842" starttime="20171002 19:43:57.623"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>ls -d /tmp/images/*/</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20171002 19:43:59.850" level="INFO">Executing command 'ls -d /tmp/images/*/'.</msg>
<msg timestamp="20171002 19:43:59.895" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20171002 19:43:59.895" level="INFO">${stdout} = /tmp/images/f5f60074/</msg>
<msg timestamp="20171002 19:43:59.895" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171002 19:43:59.896" starttime="20171002 19:43:59.850"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20171002 19:43:59.896" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20171002 19:43:59.896" starttime="20171002 19:43:59.896"></status>
</kw>
<status status="PASS" endtime="20171002 19:43:59.896" starttime="20171002 19:43:59.849"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20171002 19:43:59.902" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20171002 19:43:59.902" starttime="20171002 19:43:59.902"></status>
</kw>
<msg timestamp="20171002 19:43:59.902" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20171002 19:43:59.903" starttime="20171002 19:43:59.901"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20171002 19:43:59.904" starttime="20171002 19:43:59.903"></status>
</kw>
<status status="PASS" endtime="20171002 19:43:59.904" starttime="20171002 19:43:59.903"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20171002 19:43:59.905" starttime="20171002 19:43:59.904"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20171002 19:43:59.906" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20171002 19:43:59.906" starttime="20171002 19:43:59.906"></status>
</kw>
<msg timestamp="20171002 19:43:59.906" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20171002 19:43:59.906" starttime="20171002 19:43:59.905"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20171002 19:43:59.908" starttime="20171002 19:43:59.908"></status>
</kw>
<status status="PASS" endtime="20171002 19:43:59.908" starttime="20171002 19:43:59.907"></status>
</kw>
<status status="PASS" endtime="20171002 19:43:59.908" starttime="20171002 19:43:59.906"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20171002 19:43:59.909" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20171002 19:44:01.655" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20171002 19:44:01.655" starttime="20171002 19:43:59.908"></status>
</kw>
<status status="PASS" endtime="20171002 19:44:01.655" starttime="20171002 19:43:59.900"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>cat /tmp/images/f5f60074/MANIFEST | grep "version="</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20171002 19:44:01.663" level="INFO">Executing command 'cat /tmp/images/f5f60074/MANIFEST | grep "version="'.</msg>
<msg timestamp="20171002 19:44:01.740" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20171002 19:44:01.740" level="INFO">${stdout} = version=v1.99.10-84-g6c20acf</msg>
<msg timestamp="20171002 19:44:01.740" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171002 19:44:01.740" starttime="20171002 19:44:01.663"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20171002 19:44:01.741" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20171002 19:44:01.741" starttime="20171002 19:44:01.741"></status>
</kw>
<status status="PASS" endtime="20171002 19:44:01.741" starttime="20171002 19:44:01.662"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20171002 19:44:01.747" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20171002 19:44:01.747" starttime="20171002 19:44:01.746"></status>
</kw>
<msg timestamp="20171002 19:44:01.747" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20171002 19:44:01.747" starttime="20171002 19:44:01.746"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20171002 19:44:01.748" starttime="20171002 19:44:01.748"></status>
</kw>
<status status="PASS" endtime="20171002 19:44:01.748" starttime="20171002 19:44:01.747"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20171002 19:44:01.749" starttime="20171002 19:44:01.749"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20171002 19:44:01.750" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20171002 19:44:01.750" starttime="20171002 19:44:01.750"></status>
</kw>
<msg timestamp="20171002 19:44:01.750" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20171002 19:44:01.750" starttime="20171002 19:44:01.749"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20171002 19:44:01.752" starttime="20171002 19:44:01.752"></status>
</kw>
<status status="PASS" endtime="20171002 19:44:01.752" starttime="20171002 19:44:01.751"></status>
</kw>
<status status="PASS" endtime="20171002 19:44:01.752" starttime="20171002 19:44:01.751"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20171002 19:44:01.753" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20171002 19:44:03.405" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20171002 19:44:03.405" starttime="20171002 19:44:01.752"></status>
</kw>
<status status="PASS" endtime="20171002 19:44:03.405" starttime="20171002 19:44:01.745"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20171002 19:44:03.411" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20171002 19:44:03.411" starttime="20171002 19:44:03.411"></status>
</kw>
<msg timestamp="20171002 19:44:03.411" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20171002 19:44:03.411" starttime="20171002 19:44:03.410"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20171002 19:44:03.412" starttime="20171002 19:44:03.412"></status>
</kw>
<status status="PASS" endtime="20171002 19:44:03.412" starttime="20171002 19:44:03.412"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20171002 19:44:03.413" starttime="20171002 19:44:03.413"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20171002 19:44:03.414" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20171002 19:44:03.414" starttime="20171002 19:44:03.414"></status>
</kw>
<msg timestamp="20171002 19:44:03.415" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20171002 19:44:03.415" starttime="20171002 19:44:03.414"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20171002 19:44:03.416" starttime="20171002 19:44:03.416"></status>
</kw>
<status status="PASS" endtime="20171002 19:44:03.417" starttime="20171002 19:44:03.416"></status>
</kw>
<status status="PASS" endtime="20171002 19:44:03.417" starttime="20171002 19:44:03.415"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20171002 19:44:03.417" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20171002 19:44:05.126" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20171002 19:44:05.126" starttime="20171002 19:44:03.417"></status>
</kw>
<status status="PASS" endtime="20171002 19:44:05.126" starttime="20171002 19:44:03.409"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>cat /tmp/images/f5f60074/MANIFEST | grep "purpose="</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20171002 19:44:05.135" level="INFO">Executing command 'cat /tmp/images/f5f60074/MANIFEST | grep "purpose="'.</msg>
<msg timestamp="20171002 19:44:05.212" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20171002 19:44:05.212" level="INFO">${stdout} = purpose=xyz.openbmc_project.Software.Version.VersionPurpose.BMC</msg>
<msg timestamp="20171002 19:44:05.212" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171002 19:44:05.212" starttime="20171002 19:44:05.134"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20171002 19:44:05.212" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20171002 19:44:05.213" starttime="20171002 19:44:05.212"></status>
</kw>
<status status="PASS" endtime="20171002 19:44:05.213" starttime="20171002 19:44:05.134"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/f5f60074</arg>
<arg>Activation</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171002 19:44:05.223" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171002 19:44:05.224" starttime="20171002 19:44:05.223"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171002 19:44:05.224" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171002 19:44:05.224" starttime="20171002 19:44:05.224"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171002 19:44:05.225" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171002 19:44:05.225" starttime="20171002 19:44:05.225"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171002 19:44:05.226" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171002 19:44:05.226" starttime="20171002 19:44:05.225"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171002 19:44:05.429" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171002 19:44:05.429" starttime="20171002 19:44:05.227"></status>
</kw>
<msg timestamp="20171002 19:44:05.430" level="INFO">${status} = PASS</msg>
<msg timestamp="20171002 19:44:05.430" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 19:44:05.430" starttime="20171002 19:44:05.226"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171002 19:44:05.430" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 19:44:05.430" starttime="20171002 19:44:05.430"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171002 19:44:05.431" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 19:44:05.431" starttime="20171002 19:44:05.431"></status>
</kw>
<status status="PASS" endtime="20171002 19:44:05.431" starttime="20171002 19:44:05.222"></status>
</kw>
<status status="PASS" endtime="20171002 19:44:05.431" starttime="20171002 19:44:05.222"></status>
</kw>
<status status="PASS" endtime="20171002 19:44:05.431" starttime="20171002 19:44:05.221"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171002 19:44:05.432" level="INFO">${base_uri} = /xyz/openbmc_project/software/f5f60074/attr/Activation</msg>
<status status="PASS" endtime="20171002 19:44:05.432" starttime="20171002 19:44:05.432"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171002 19:44:05.434" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/software/f5f60074/attr/Activation, method:Get, args:{}</msg>
<status status="PASS" endtime="20171002 19:44:05.434" starttime="20171002 19:44:05.434"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171002 19:44:05.435" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/software/f5f60074/attr/Activation, method:Get, args:{}</msg>
<status status="PASS" endtime="20171002 19:44:05.436" starttime="20171002 19:44:05.435"></status>
</kw>
<status status="PASS" endtime="20171002 19:44:05.436" starttime="20171002 19:44:05.435"></status>
</kw>
<status status="PASS" endtime="20171002 19:44:05.436" starttime="20171002 19:44:05.433"></status>
</kw>
<status status="PASS" endtime="20171002 19:44:05.436" starttime="20171002 19:44:05.432"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171002 19:44:05.557" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/f5f60074/attr/Activation, headers=None json=None</msg>
<msg timestamp="20171002 19:44:05.557" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 19:44:05.557" starttime="20171002 19:44:05.441"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171002 19:44:05.559" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.Software.Activation.Activations.Ready", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171002 19:44:05.559" starttime="20171002 19:44:05.558"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171002 19:44:05.560" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.Software.Activation.Activations.Ready", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171002 19:44:05.560" starttime="20171002 19:44:05.559"></status>
</kw>
<status status="PASS" endtime="20171002 19:44:05.560" starttime="20171002 19:44:05.559"></status>
</kw>
<status status="PASS" endtime="20171002 19:44:05.560" starttime="20171002 19:44:05.558"></status>
</kw>
<status status="PASS" endtime="20171002 19:44:05.560" starttime="20171002 19:44:05.557"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171002 19:44:05.564" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171002 19:44:05.564" starttime="20171002 19:44:05.561"></status>
</kw>
<msg timestamp="20171002 19:44:05.565" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 19:44:05.565" starttime="20171002 19:44:05.220"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171002 19:44:05.565" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 19:44:05.565" starttime="20171002 19:44:05.565"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171002 19:44:05.566" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.Software.Activation.Activations.Ready", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171002 19:44:05.566" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171002 19:44:05.566" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.Software.Activation.Activations.Ready'}</msg>
<status status="PASS" endtime="20171002 19:44:05.566" starttime="20171002 19:44:05.566"></status>
</kw>
<status status="PASS" endtime="20171002 19:44:05.566" starttime="20171002 19:44:05.220"></status>
</kw>
<msg timestamp="20171002 19:44:05.567" level="INFO">${ret} = True</msg>
<msg timestamp="20171002 19:44:05.567" level="INFO">${version_id} = f5f60074</msg>
<status status="PASS" endtime="20171002 19:44:05.567" starttime="20171002 19:43:57.619"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171002 19:44:05.567" starttime="20171002 19:44:05.567"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${SOFTWARE_VERSION_URI}${version_id}</arg>
</arguments>
<assign>
<var>${software_state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171002 19:44:05.571" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171002 19:44:05.572" starttime="20171002 19:44:05.571"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171002 19:44:05.572" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171002 19:44:05.572" starttime="20171002 19:44:05.572"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171002 19:44:05.573" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171002 19:44:05.573" starttime="20171002 19:44:05.573"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171002 19:44:05.574" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171002 19:44:05.574" starttime="20171002 19:44:05.573"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171002 19:44:05.813" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171002 19:44:05.813" starttime="20171002 19:44:05.575"></status>
</kw>
<msg timestamp="20171002 19:44:05.813" level="INFO">${status} = PASS</msg>
<msg timestamp="20171002 19:44:05.813" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 19:44:05.813" starttime="20171002 19:44:05.574"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171002 19:44:05.814" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 19:44:05.814" starttime="20171002 19:44:05.813"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171002 19:44:05.814" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 19:44:05.814" starttime="20171002 19:44:05.814"></status>
</kw>
<status status="PASS" endtime="20171002 19:44:05.815" starttime="20171002 19:44:05.570"></status>
</kw>
<status status="PASS" endtime="20171002 19:44:05.815" starttime="20171002 19:44:05.570"></status>
</kw>
<status status="PASS" endtime="20171002 19:44:05.815" starttime="20171002 19:44:05.569"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171002 19:44:05.815" level="INFO">${base_uri} = /xyz/openbmc_project/software/f5f60074</msg>
<status status="PASS" endtime="20171002 19:44:05.815" starttime="20171002 19:44:05.815"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171002 19:44:05.818" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/software/f5f60074, method:Get, args:{}</msg>
<status status="PASS" endtime="20171002 19:44:05.818" starttime="20171002 19:44:05.817"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171002 19:44:05.819" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/software/f5f60074, method:Get, args:{}</msg>
<status status="PASS" endtime="20171002 19:44:05.819" starttime="20171002 19:44:05.819"></status>
</kw>
<status status="PASS" endtime="20171002 19:44:05.819" starttime="20171002 19:44:05.818"></status>
</kw>
<status status="PASS" endtime="20171002 19:44:05.819" starttime="20171002 19:44:05.816"></status>
</kw>
<status status="PASS" endtime="20171002 19:44:05.819" starttime="20171002 19:44:05.816"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171002 19:44:05.934" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/f5f60074, headers=None json=None</msg>
<msg timestamp="20171002 19:44:05.934" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 19:44:05.934" starttime="20171002 19:44:05.820"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171002 19:44:05.936" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Ready", 
    "Path": "/tmp/images/f5f60074", 
    "Purpose": "xyz.openbmc_project.Softwa...</msg>
<status status="PASS" endtime="20171002 19:44:05.936" starttime="20171002 19:44:05.935"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171002 19:44:05.937" level="INFO">Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Ready", 
    "Path": "/tmp/images/f5f60074", 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
    "Version": "v1.99.10-84-g6c20acf", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171002 19:44:05.937" starttime="20171002 19:44:05.937"></status>
</kw>
<status status="PASS" endtime="20171002 19:44:05.937" starttime="20171002 19:44:05.936"></status>
</kw>
<status status="PASS" endtime="20171002 19:44:05.937" starttime="20171002 19:44:05.935"></status>
</kw>
<status status="PASS" endtime="20171002 19:44:05.938" starttime="20171002 19:44:05.934"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171002 19:44:05.938" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171002 19:44:05.938" starttime="20171002 19:44:05.938"></status>
</kw>
<msg timestamp="20171002 19:44:05.938" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 19:44:05.939" starttime="20171002 19:44:05.568"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171002 19:44:05.939" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 19:44:05.939" starttime="20171002 19:44:05.939"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171002 19:44:05.940" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Ready", 
    "Path": "/tmp/images/f5f60074", 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
    "Version": "v1.99.10-84-g6c20acf", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171002 19:44:05.940" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171002 19:44:05.940" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20171002 19:44:05.940" starttime="20171002 19:44:05.940"></status>
</kw>
<msg timestamp="20171002 19:44:05.940" level="INFO">${software_state} = {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Ready...</msg>
<status status="PASS" endtime="20171002 19:44:05.940" starttime="20171002 19:44:05.567"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>&amp;{software_state}[Activation]</arg>
</arguments>
<assign>
<var>${activation}</var>
</assign>
<msg timestamp="20171002 19:44:05.941" level="INFO">${activation} = xyz.openbmc_project.Software.Activation.Activations.Ready</msg>
<status status="PASS" endtime="20171002 19:44:05.941" starttime="20171002 19:44:05.941"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${skip_if_active}' == 'true' and '${activation}' == '${ACTIVE}'</arg>
<arg>Switch To Active Image And Pass</arg>
<arg>${SOFTWARE_VERSION_URI}${version_id}</arg>
</arguments>
<status status="PASS" endtime="20171002 19:44:05.942" starttime="20171002 19:44:05.941"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>&amp;{software_state}[Activation]</arg>
<arg>${READY}</arg>
</arguments>
<msg timestamp="20171002 19:44:05.942" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20171002 19:44:05.943" starttime="20171002 19:44:05.942"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${REQUESTED_ACTIVE}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20171002 19:44:05.943" level="INFO">${args} = {u'data': 'xyz.openbmc_project.Software.Activation.RequestedActivations.Active'}</msg>
<status status="PASS" endtime="20171002 19:44:05.944" starttime="20171002 19:44:05.943"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${SOFTWARE_VERSION_URI}${version_id}</arg>
<arg>RequestedActivation</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171002 19:44:05.945" level="INFO">${base_uri} = /xyz/openbmc_project/software/f5f60074</msg>
<status status="PASS" endtime="20171002 19:44:05.946" starttime="20171002 19:44:05.945"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171002 19:44:05.950" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171002 19:44:05.951" starttime="20171002 19:44:05.949"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171002 19:44:05.951" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171002 19:44:05.951" starttime="20171002 19:44:05.951"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171002 19:44:05.952" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171002 19:44:05.953" starttime="20171002 19:44:05.952"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171002 19:44:05.954" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171002 19:44:05.954" starttime="20171002 19:44:05.953"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171002 19:44:06.134" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171002 19:44:06.135" starttime="20171002 19:44:05.955"></status>
</kw>
<msg timestamp="20171002 19:44:06.135" level="INFO">${status} = PASS</msg>
<msg timestamp="20171002 19:44:06.135" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 19:44:06.135" starttime="20171002 19:44:05.954"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171002 19:44:06.135" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 19:44:06.136" starttime="20171002 19:44:06.135"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171002 19:44:06.136" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 19:44:06.136" starttime="20171002 19:44:06.136"></status>
</kw>
<status status="PASS" endtime="20171002 19:44:06.136" starttime="20171002 19:44:05.948"></status>
</kw>
<status status="PASS" endtime="20171002 19:44:06.136" starttime="20171002 19:44:05.948"></status>
</kw>
<status status="PASS" endtime="20171002 19:44:06.137" starttime="20171002 19:44:05.947"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171002 19:44:06.137" level="INFO">${base_uri} = /xyz/openbmc_project/software/f5f60074/attr/RequestedActivation</msg>
<status status="PASS" endtime="20171002 19:44:06.137" starttime="20171002 19:44:06.137"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171002 19:44:06.138" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171002 19:44:06.138" starttime="20171002 19:44:06.138"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20171002 19:44:06.138" starttime="20171002 19:44:06.138"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171002 19:44:06.140" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/software/f5f60074/attr/RequestedActivation, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.Software.Activation.RequestedActivations.Active'}, u'he...</msg>
<status status="PASS" endtime="20171002 19:44:06.140" starttime="20171002 19:44:06.139"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171002 19:44:06.141" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/software/f5f60074/attr/RequestedActivation, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.Software.Activation.RequestedActivations.Active'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20171002 19:44:06.141" starttime="20171002 19:44:06.141"></status>
</kw>
<status status="PASS" endtime="20171002 19:44:06.141" starttime="20171002 19:44:06.140"></status>
</kw>
<status status="PASS" endtime="20171002 19:44:06.141" starttime="20171002 19:44:06.139"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171002 19:44:07.159" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/software/f5f60074/attr/RequestedActivation, data={"data": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20171002 19:44:07.159" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 19:44:07.159" starttime="20171002 19:44:06.142"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171002 19:44:07.160" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171002 19:44:07.160" starttime="20171002 19:44:07.160"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171002 19:44:07.161" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171002 19:44:07.161" starttime="20171002 19:44:07.161"></status>
</kw>
<status status="PASS" endtime="20171002 19:44:07.162" starttime="20171002 19:44:07.161"></status>
</kw>
<status status="PASS" endtime="20171002 19:44:07.162" starttime="20171002 19:44:07.159"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171002 19:44:07.164" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171002 19:44:07.164" starttime="20171002 19:44:07.162"></status>
</kw>
<msg timestamp="20171002 19:44:07.165" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 19:44:07.165" starttime="20171002 19:44:05.946"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171002 19:44:07.165" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 19:44:07.165" starttime="20171002 19:44:07.165"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20171002 19:44:07.166" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171002 19:44:07.166" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171002 19:44:07.166" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20171002 19:44:07.166" starttime="20171002 19:44:07.166"></status>
</kw>
<status status="PASS" endtime="20171002 19:44:07.166" starttime="20171002 19:44:05.944"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${SOFTWARE_VERSION_URI}${version_id}</arg>
</arguments>
<assign>
<var>${software_state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171002 19:44:07.171" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171002 19:44:07.171" starttime="20171002 19:44:07.171"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171002 19:44:07.172" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171002 19:44:07.172" starttime="20171002 19:44:07.172"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171002 19:44:07.173" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171002 19:44:07.173" starttime="20171002 19:44:07.172"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171002 19:44:07.173" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171002 19:44:07.173" starttime="20171002 19:44:07.173"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171002 19:44:07.634" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171002 19:44:07.634" starttime="20171002 19:44:07.174"></status>
</kw>
<msg timestamp="20171002 19:44:07.634" level="INFO">${status} = PASS</msg>
<msg timestamp="20171002 19:44:07.634" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 19:44:07.634" starttime="20171002 19:44:07.174"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171002 19:44:07.635" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 19:44:07.635" starttime="20171002 19:44:07.635"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171002 19:44:07.636" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 19:44:07.636" starttime="20171002 19:44:07.635"></status>
</kw>
<status status="PASS" endtime="20171002 19:44:07.636" starttime="20171002 19:44:07.170"></status>
</kw>
<status status="PASS" endtime="20171002 19:44:07.636" starttime="20171002 19:44:07.170"></status>
</kw>
<status status="PASS" endtime="20171002 19:44:07.636" starttime="20171002 19:44:07.168"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171002 19:44:07.637" level="INFO">${base_uri} = /xyz/openbmc_project/software/f5f60074</msg>
<status status="PASS" endtime="20171002 19:44:07.637" starttime="20171002 19:44:07.636"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171002 19:44:07.639" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/software/f5f60074, method:Get, args:{}</msg>
<status status="PASS" endtime="20171002 19:44:07.639" starttime="20171002 19:44:07.638"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171002 19:44:07.640" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/software/f5f60074, method:Get, args:{}</msg>
<status status="PASS" endtime="20171002 19:44:07.640" starttime="20171002 19:44:07.639"></status>
</kw>
<status status="PASS" endtime="20171002 19:44:07.640" starttime="20171002 19:44:07.639"></status>
</kw>
<status status="PASS" endtime="20171002 19:44:07.640" starttime="20171002 19:44:07.637"></status>
</kw>
<status status="PASS" endtime="20171002 19:44:07.640" starttime="20171002 19:44:07.637"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171002 19:44:08.232" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/f5f60074, headers=None json=None</msg>
<msg timestamp="20171002 19:44:08.232" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 19:44:08.232" starttime="20171002 19:44:07.641"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171002 19:44:08.234" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/f5f60074", 
    "Progress": 10, 
    "Purpose": "...</msg>
<status status="PASS" endtime="20171002 19:44:08.234" starttime="20171002 19:44:08.233"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171002 19:44:08.235" level="INFO">Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/f5f60074", 
    "Progress": 10, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-84-g6c20acf", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171002 19:44:08.235" starttime="20171002 19:44:08.235"></status>
</kw>
<status status="PASS" endtime="20171002 19:44:08.235" starttime="20171002 19:44:08.234"></status>
</kw>
<status status="PASS" endtime="20171002 19:44:08.235" starttime="20171002 19:44:08.233"></status>
</kw>
<status status="PASS" endtime="20171002 19:44:08.235" starttime="20171002 19:44:08.232"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171002 19:44:08.236" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171002 19:44:08.236" starttime="20171002 19:44:08.236"></status>
</kw>
<msg timestamp="20171002 19:44:08.237" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 19:44:08.237" starttime="20171002 19:44:07.167"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171002 19:44:08.237" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 19:44:08.237" starttime="20171002 19:44:08.237"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171002 19:44:08.239" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/f5f60074", 
    "Progress": 10, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-84-g6c20acf", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171002 19:44:08.239" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171002 19:44:08.239" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20171002 19:44:08.239" starttime="20171002 19:44:08.239"></status>
</kw>
<msg timestamp="20171002 19:44:08.240" level="INFO">${software_state} = {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Activ...</msg>
<status status="PASS" endtime="20171002 19:44:08.240" starttime="20171002 19:44:07.166"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>&amp;{software_state}[RequestedActivation]</arg>
<arg>${REQUESTED_ACTIVE}</arg>
</arguments>
<msg timestamp="20171002 19:44:08.240" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20171002 19:44:08.240" starttime="20171002 19:44:08.240"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>${version_id}</arg>
</arguments>
<status status="PASS" endtime="20171002 19:44:08.241" starttime="20171002 19:44:08.241"></status>
</kw>
<kw name="Wait For Activation State Change" library="code_update_utils">
<doc>Wait for the current activation state of ${version_id} to</doc>
<arguments>
<arg>${version_id}</arg>
<arg>${ACTIVATING}</arg>
</arguments>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20171002 19:44:08.247" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20171002 19:44:08.247" starttime="20171002 19:44:08.247"></status>
</kw>
<msg timestamp="20171002 19:44:08.247" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20171002 19:44:08.247" starttime="20171002 19:44:08.246"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20171002 19:44:08.248" starttime="20171002 19:44:08.248"></status>
</kw>
<status status="PASS" endtime="20171002 19:44:08.248" starttime="20171002 19:44:08.247"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20171002 19:44:08.249" starttime="20171002 19:44:08.249"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20171002 19:44:08.250" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20171002 19:44:08.250" starttime="20171002 19:44:08.250"></status>
</kw>
<msg timestamp="20171002 19:44:08.250" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20171002 19:44:08.250" starttime="20171002 19:44:08.249"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20171002 19:44:08.252" starttime="20171002 19:44:08.252"></status>
</kw>
<status status="PASS" endtime="20171002 19:44:08.252" starttime="20171002 19:44:08.251"></status>
</kw>
<status status="PASS" endtime="20171002 19:44:08.252" starttime="20171002 19:44:08.251"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20171002 19:44:08.253" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20171002 19:44:10.499" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20171002 19:44:10.500" starttime="20171002 19:44:08.253"></status>
</kw>
<status status="PASS" endtime="20171002 19:44:10.500" starttime="20171002 19:44:08.245"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/f5f60074</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171002 19:44:10.510" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171002 19:44:10.511" starttime="20171002 19:44:10.510"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171002 19:44:10.512" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171002 19:44:10.512" starttime="20171002 19:44:10.511"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171002 19:44:10.513" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171002 19:44:10.513" starttime="20171002 19:44:10.512"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171002 19:44:10.514" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171002 19:44:10.514" starttime="20171002 19:44:10.513"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171002 19:44:11.065" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171002 19:44:11.065" starttime="20171002 19:44:10.515"></status>
</kw>
<msg timestamp="20171002 19:44:11.065" level="INFO">${status} = PASS</msg>
<msg timestamp="20171002 19:44:11.065" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 19:44:11.065" starttime="20171002 19:44:10.515"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171002 19:44:11.066" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 19:44:11.066" starttime="20171002 19:44:11.066"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171002 19:44:11.067" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 19:44:11.067" starttime="20171002 19:44:11.066"></status>
</kw>
<status status="PASS" endtime="20171002 19:44:11.067" starttime="20171002 19:44:10.509"></status>
</kw>
<status status="PASS" endtime="20171002 19:44:11.067" starttime="20171002 19:44:10.509"></status>
</kw>
<status status="PASS" endtime="20171002 19:44:11.067" starttime="20171002 19:44:10.508"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171002 19:44:11.068" level="INFO">${base_uri} = /xyz/openbmc_project/software/f5f60074</msg>
<status status="PASS" endtime="20171002 19:44:11.068" starttime="20171002 19:44:11.067"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171002 19:44:11.070" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/software/f5f60074, method:Get, args:{}</msg>
<status status="PASS" endtime="20171002 19:44:11.070" starttime="20171002 19:44:11.070"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171002 19:44:11.071" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/software/f5f60074, method:Get, args:{}</msg>
<status status="PASS" endtime="20171002 19:44:11.071" starttime="20171002 19:44:11.071"></status>
</kw>
<status status="PASS" endtime="20171002 19:44:11.071" starttime="20171002 19:44:11.070"></status>
</kw>
<status status="PASS" endtime="20171002 19:44:11.072" starttime="20171002 19:44:11.069"></status>
</kw>
<status status="PASS" endtime="20171002 19:44:11.072" starttime="20171002 19:44:11.068"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171002 19:44:11.692" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/f5f60074, headers=None json=None</msg>
<msg timestamp="20171002 19:44:11.692" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 19:44:11.692" starttime="20171002 19:44:11.072"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171002 19:44:11.694" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/f5f60074", 
    "Progress": 30, 
    "Purpose": "...</msg>
<status status="PASS" endtime="20171002 19:44:11.694" starttime="20171002 19:44:11.694"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171002 19:44:11.695" level="INFO">Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/f5f60074", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-84-g6c20acf", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171002 19:44:11.696" starttime="20171002 19:44:11.695"></status>
</kw>
<status status="PASS" endtime="20171002 19:44:11.696" starttime="20171002 19:44:11.694"></status>
</kw>
<status status="PASS" endtime="20171002 19:44:11.696" starttime="20171002 19:44:11.693"></status>
</kw>
<status status="PASS" endtime="20171002 19:44:11.696" starttime="20171002 19:44:11.692"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171002 19:44:11.697" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171002 19:44:11.701" starttime="20171002 19:44:11.697"></status>
</kw>
<msg timestamp="20171002 19:44:11.701" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 19:44:11.701" starttime="20171002 19:44:10.507"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171002 19:44:11.702" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 19:44:11.702" starttime="20171002 19:44:11.701"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171002 19:44:11.702" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/f5f60074", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-84-g6c20acf", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171002 19:44:11.702" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171002 19:44:11.703" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20171002 19:44:11.703" starttime="20171002 19:44:11.702"></status>
</kw>
<status status="PASS" endtime="20171002 19:44:11.703" starttime="20171002 19:44:10.507"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/f5f60074</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171002 19:44:21.722" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171002 19:44:21.723" starttime="20171002 19:44:21.722"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171002 19:44:21.723" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171002 19:44:21.723" starttime="20171002 19:44:21.723"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171002 19:44:21.724" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171002 19:44:21.724" starttime="20171002 19:44:21.724"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171002 19:44:21.725" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171002 19:44:21.725" starttime="20171002 19:44:21.725"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171002 19:44:21.915" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171002 19:44:21.915" starttime="20171002 19:44:21.726"></status>
</kw>
<msg timestamp="20171002 19:44:21.915" level="INFO">${status} = PASS</msg>
<msg timestamp="20171002 19:44:21.915" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 19:44:21.915" starttime="20171002 19:44:21.725"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171002 19:44:21.916" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 19:44:21.916" starttime="20171002 19:44:21.915"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171002 19:44:21.917" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 19:44:21.917" starttime="20171002 19:44:21.916"></status>
</kw>
<status status="PASS" endtime="20171002 19:44:21.917" starttime="20171002 19:44:21.721"></status>
</kw>
<status status="PASS" endtime="20171002 19:44:21.917" starttime="20171002 19:44:21.721"></status>
</kw>
<status status="PASS" endtime="20171002 19:44:21.917" starttime="20171002 19:44:21.720"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171002 19:44:21.918" level="INFO">${base_uri} = /xyz/openbmc_project/software/f5f60074</msg>
<status status="PASS" endtime="20171002 19:44:21.918" starttime="20171002 19:44:21.917"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171002 19:44:21.920" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/software/f5f60074, method:Get, args:{}</msg>
<status status="PASS" endtime="20171002 19:44:21.920" starttime="20171002 19:44:21.919"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171002 19:44:21.921" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/software/f5f60074, method:Get, args:{}</msg>
<status status="PASS" endtime="20171002 19:44:21.921" starttime="20171002 19:44:21.921"></status>
</kw>
<status status="PASS" endtime="20171002 19:44:21.921" starttime="20171002 19:44:21.920"></status>
</kw>
<status status="PASS" endtime="20171002 19:44:21.922" starttime="20171002 19:44:21.918"></status>
</kw>
<status status="PASS" endtime="20171002 19:44:21.922" starttime="20171002 19:44:21.918"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171002 19:44:22.054" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/f5f60074, headers=None json=None</msg>
<msg timestamp="20171002 19:44:22.054" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 19:44:22.054" starttime="20171002 19:44:21.922"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171002 19:44:22.056" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/f5f60074", 
    "Progress": 30, 
    "Purpose": "...</msg>
<status status="PASS" endtime="20171002 19:44:22.056" starttime="20171002 19:44:22.056"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171002 19:44:22.057" level="INFO">Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/f5f60074", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-84-g6c20acf", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171002 19:44:22.057" starttime="20171002 19:44:22.057"></status>
</kw>
<status status="PASS" endtime="20171002 19:44:22.057" starttime="20171002 19:44:22.056"></status>
</kw>
<status status="PASS" endtime="20171002 19:44:22.058" starttime="20171002 19:44:22.055"></status>
</kw>
<status status="PASS" endtime="20171002 19:44:22.058" starttime="20171002 19:44:22.055"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171002 19:44:22.066" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171002 19:44:22.066" starttime="20171002 19:44:22.065"></status>
</kw>
<msg timestamp="20171002 19:44:22.066" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 19:44:22.066" starttime="20171002 19:44:21.720"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171002 19:44:22.067" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 19:44:22.067" starttime="20171002 19:44:22.066"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171002 19:44:22.067" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/f5f60074", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-84-g6c20acf", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171002 19:44:22.068" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171002 19:44:22.068" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20171002 19:44:22.068" starttime="20171002 19:44:22.067"></status>
</kw>
<status status="PASS" endtime="20171002 19:44:22.068" starttime="20171002 19:44:21.719"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/f5f60074</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171002 19:44:32.097" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171002 19:44:32.098" starttime="20171002 19:44:32.097"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171002 19:44:32.099" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171002 19:44:32.099" starttime="20171002 19:44:32.098"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171002 19:44:32.100" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171002 19:44:32.100" starttime="20171002 19:44:32.099"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171002 19:44:32.101" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171002 19:44:32.101" starttime="20171002 19:44:32.100"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171002 19:44:32.286" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171002 19:44:32.286" starttime="20171002 19:44:32.102"></status>
</kw>
<msg timestamp="20171002 19:44:32.286" level="INFO">${status} = PASS</msg>
<msg timestamp="20171002 19:44:32.286" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 19:44:32.286" starttime="20171002 19:44:32.101"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171002 19:44:32.287" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 19:44:32.287" starttime="20171002 19:44:32.287"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171002 19:44:32.288" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 19:44:32.288" starttime="20171002 19:44:32.288"></status>
</kw>
<status status="PASS" endtime="20171002 19:44:32.288" starttime="20171002 19:44:32.096"></status>
</kw>
<status status="PASS" endtime="20171002 19:44:32.288" starttime="20171002 19:44:32.095"></status>
</kw>
<status status="PASS" endtime="20171002 19:44:32.288" starttime="20171002 19:44:32.087"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171002 19:44:32.289" level="INFO">${base_uri} = /xyz/openbmc_project/software/f5f60074</msg>
<status status="PASS" endtime="20171002 19:44:32.289" starttime="20171002 19:44:32.289"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171002 19:44:32.291" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/software/f5f60074, method:Get, args:{}</msg>
<status status="PASS" endtime="20171002 19:44:32.291" starttime="20171002 19:44:32.290"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171002 19:44:32.292" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/software/f5f60074, method:Get, args:{}</msg>
<status status="PASS" endtime="20171002 19:44:32.292" starttime="20171002 19:44:32.292"></status>
</kw>
<status status="PASS" endtime="20171002 19:44:32.292" starttime="20171002 19:44:32.291"></status>
</kw>
<status status="PASS" endtime="20171002 19:44:32.292" starttime="20171002 19:44:32.290"></status>
</kw>
<status status="PASS" endtime="20171002 19:44:32.293" starttime="20171002 19:44:32.289"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171002 19:44:32.964" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/f5f60074, headers=None json=None</msg>
<msg timestamp="20171002 19:44:32.964" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 19:44:32.964" starttime="20171002 19:44:32.293"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171002 19:44:32.967" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/f5f60074", 
    "Progress": 30, 
    "Purpose": "...</msg>
<status status="PASS" endtime="20171002 19:44:32.967" starttime="20171002 19:44:32.966"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171002 19:44:32.968" level="INFO">Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/f5f60074", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-84-g6c20acf", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171002 19:44:32.968" starttime="20171002 19:44:32.967"></status>
</kw>
<status status="PASS" endtime="20171002 19:44:32.968" starttime="20171002 19:44:32.967"></status>
</kw>
<status status="PASS" endtime="20171002 19:44:32.968" starttime="20171002 19:44:32.966"></status>
</kw>
<status status="PASS" endtime="20171002 19:44:32.968" starttime="20171002 19:44:32.965"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171002 19:44:32.970" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171002 19:44:32.970" starttime="20171002 19:44:32.969"></status>
</kw>
<msg timestamp="20171002 19:44:32.970" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 19:44:32.970" starttime="20171002 19:44:32.087"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171002 19:44:32.971" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 19:44:32.971" starttime="20171002 19:44:32.971"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171002 19:44:32.972" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/f5f60074", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-84-g6c20acf", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171002 19:44:32.972" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171002 19:44:32.972" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20171002 19:44:32.972" starttime="20171002 19:44:32.971"></status>
</kw>
<status status="PASS" endtime="20171002 19:44:32.972" starttime="20171002 19:44:32.085"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/f5f60074</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171002 19:44:42.992" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171002 19:44:42.993" starttime="20171002 19:44:42.992"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171002 19:44:42.994" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171002 19:44:42.994" starttime="20171002 19:44:42.994"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171002 19:44:42.995" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171002 19:44:42.995" starttime="20171002 19:44:42.994"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171002 19:44:42.996" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171002 19:44:42.996" starttime="20171002 19:44:42.995"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171002 19:44:43.179" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171002 19:44:43.179" starttime="20171002 19:44:42.997"></status>
</kw>
<msg timestamp="20171002 19:44:43.179" level="INFO">${status} = PASS</msg>
<msg timestamp="20171002 19:44:43.179" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 19:44:43.179" starttime="20171002 19:44:42.996"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171002 19:44:43.180" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 19:44:43.180" starttime="20171002 19:44:43.179"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171002 19:44:43.181" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 19:44:43.181" starttime="20171002 19:44:43.180"></status>
</kw>
<status status="PASS" endtime="20171002 19:44:43.181" starttime="20171002 19:44:42.991"></status>
</kw>
<status status="PASS" endtime="20171002 19:44:43.181" starttime="20171002 19:44:42.991"></status>
</kw>
<status status="PASS" endtime="20171002 19:44:43.181" starttime="20171002 19:44:42.990"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171002 19:44:43.182" level="INFO">${base_uri} = /xyz/openbmc_project/software/f5f60074</msg>
<status status="PASS" endtime="20171002 19:44:43.182" starttime="20171002 19:44:43.181"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171002 19:44:43.184" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/software/f5f60074, method:Get, args:{}</msg>
<status status="PASS" endtime="20171002 19:44:43.184" starttime="20171002 19:44:43.183"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171002 19:44:43.185" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/software/f5f60074, method:Get, args:{}</msg>
<status status="PASS" endtime="20171002 19:44:43.185" starttime="20171002 19:44:43.185"></status>
</kw>
<status status="PASS" endtime="20171002 19:44:43.185" starttime="20171002 19:44:43.184"></status>
</kw>
<status status="PASS" endtime="20171002 19:44:43.185" starttime="20171002 19:44:43.182"></status>
</kw>
<status status="PASS" endtime="20171002 19:44:43.185" starttime="20171002 19:44:43.182"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171002 19:44:43.322" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/f5f60074, headers=None json=None</msg>
<msg timestamp="20171002 19:44:43.322" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 19:44:43.322" starttime="20171002 19:44:43.186"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171002 19:44:43.325" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/f5f60074", 
    "Progress": 30, 
    "Purpose": "...</msg>
<status status="PASS" endtime="20171002 19:44:43.325" starttime="20171002 19:44:43.324"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171002 19:44:43.326" level="INFO">Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/f5f60074", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-84-g6c20acf", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171002 19:44:43.326" starttime="20171002 19:44:43.326"></status>
</kw>
<status status="PASS" endtime="20171002 19:44:43.326" starttime="20171002 19:44:43.325"></status>
</kw>
<status status="PASS" endtime="20171002 19:44:43.326" starttime="20171002 19:44:43.324"></status>
</kw>
<status status="PASS" endtime="20171002 19:44:43.326" starttime="20171002 19:44:43.323"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171002 19:44:43.332" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171002 19:44:43.332" starttime="20171002 19:44:43.327"></status>
</kw>
<msg timestamp="20171002 19:44:43.332" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 19:44:43.332" starttime="20171002 19:44:42.990"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171002 19:44:43.333" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 19:44:43.333" starttime="20171002 19:44:43.332"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171002 19:44:43.334" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/f5f60074", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-84-g6c20acf", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171002 19:44:43.334" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171002 19:44:43.334" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20171002 19:44:43.334" starttime="20171002 19:44:43.333"></status>
</kw>
<status status="PASS" endtime="20171002 19:44:43.334" starttime="20171002 19:44:42.989"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/f5f60074</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171002 19:44:53.354" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171002 19:44:53.354" starttime="20171002 19:44:53.353"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171002 19:44:53.355" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171002 19:44:53.355" starttime="20171002 19:44:53.355"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171002 19:44:53.357" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171002 19:44:53.357" starttime="20171002 19:44:53.356"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171002 19:44:53.358" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171002 19:44:53.358" starttime="20171002 19:44:53.357"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171002 19:44:54.236" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171002 19:44:54.236" starttime="20171002 19:44:53.359"></status>
</kw>
<msg timestamp="20171002 19:44:54.236" level="INFO">${status} = PASS</msg>
<msg timestamp="20171002 19:44:54.236" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 19:44:54.236" starttime="20171002 19:44:53.358"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171002 19:44:54.237" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 19:44:54.237" starttime="20171002 19:44:54.237"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171002 19:44:54.238" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 19:44:54.238" starttime="20171002 19:44:54.237"></status>
</kw>
<status status="PASS" endtime="20171002 19:44:54.238" starttime="20171002 19:44:53.346"></status>
</kw>
<status status="PASS" endtime="20171002 19:44:54.238" starttime="20171002 19:44:53.346"></status>
</kw>
<status status="PASS" endtime="20171002 19:44:54.238" starttime="20171002 19:44:53.344"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171002 19:44:54.239" level="INFO">${base_uri} = /xyz/openbmc_project/software/f5f60074</msg>
<status status="PASS" endtime="20171002 19:44:54.239" starttime="20171002 19:44:54.238"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171002 19:44:54.241" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/software/f5f60074, method:Get, args:{}</msg>
<status status="PASS" endtime="20171002 19:44:54.241" starttime="20171002 19:44:54.240"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171002 19:44:54.242" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/software/f5f60074, method:Get, args:{}</msg>
<status status="PASS" endtime="20171002 19:44:54.242" starttime="20171002 19:44:54.242"></status>
</kw>
<status status="PASS" endtime="20171002 19:44:54.242" starttime="20171002 19:44:54.241"></status>
</kw>
<status status="PASS" endtime="20171002 19:44:54.243" starttime="20171002 19:44:54.239"></status>
</kw>
<status status="PASS" endtime="20171002 19:44:54.243" starttime="20171002 19:44:54.239"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171002 19:44:54.376" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/f5f60074, headers=None json=None</msg>
<msg timestamp="20171002 19:44:54.376" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 19:44:54.376" starttime="20171002 19:44:54.243"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171002 19:44:54.378" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/f5f60074", 
    "Progress": 30, 
    "Purpose": "...</msg>
<status status="PASS" endtime="20171002 19:44:54.378" starttime="20171002 19:44:54.377"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171002 19:44:54.379" level="INFO">Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/f5f60074", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-84-g6c20acf", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171002 19:44:54.379" starttime="20171002 19:44:54.379"></status>
</kw>
<status status="PASS" endtime="20171002 19:44:54.379" starttime="20171002 19:44:54.378"></status>
</kw>
<status status="PASS" endtime="20171002 19:44:54.379" starttime="20171002 19:44:54.377"></status>
</kw>
<status status="PASS" endtime="20171002 19:44:54.380" starttime="20171002 19:44:54.376"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171002 19:44:54.380" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171002 19:44:54.380" starttime="20171002 19:44:54.380"></status>
</kw>
<msg timestamp="20171002 19:44:54.380" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 19:44:54.380" starttime="20171002 19:44:53.344"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171002 19:44:54.381" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 19:44:54.381" starttime="20171002 19:44:54.381"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171002 19:44:54.382" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/f5f60074", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-84-g6c20acf", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171002 19:44:54.382" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171002 19:44:54.382" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20171002 19:44:54.382" starttime="20171002 19:44:54.381"></status>
</kw>
<status status="PASS" endtime="20171002 19:44:54.382" starttime="20171002 19:44:53.343"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/f5f60074</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171002 19:45:04.403" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171002 19:45:04.403" starttime="20171002 19:45:04.403"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171002 19:45:04.404" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171002 19:45:04.404" starttime="20171002 19:45:04.404"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171002 19:45:04.405" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171002 19:45:04.405" starttime="20171002 19:45:04.404"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171002 19:45:04.406" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171002 19:45:04.406" starttime="20171002 19:45:04.405"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171002 19:45:04.586" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171002 19:45:04.586" starttime="20171002 19:45:04.406"></status>
</kw>
<msg timestamp="20171002 19:45:04.586" level="INFO">${status} = PASS</msg>
<msg timestamp="20171002 19:45:04.586" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 19:45:04.586" starttime="20171002 19:45:04.406"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171002 19:45:04.587" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 19:45:04.587" starttime="20171002 19:45:04.587"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171002 19:45:04.588" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 19:45:04.588" starttime="20171002 19:45:04.588"></status>
</kw>
<status status="PASS" endtime="20171002 19:45:04.589" starttime="20171002 19:45:04.402"></status>
</kw>
<status status="PASS" endtime="20171002 19:45:04.589" starttime="20171002 19:45:04.402"></status>
</kw>
<status status="PASS" endtime="20171002 19:45:04.589" starttime="20171002 19:45:04.401"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171002 19:45:04.590" level="INFO">${base_uri} = /xyz/openbmc_project/software/f5f60074</msg>
<status status="PASS" endtime="20171002 19:45:04.590" starttime="20171002 19:45:04.589"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171002 19:45:04.596" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/software/f5f60074, method:Get, args:{}</msg>
<status status="PASS" endtime="20171002 19:45:04.596" starttime="20171002 19:45:04.592"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171002 19:45:04.597" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/software/f5f60074, method:Get, args:{}</msg>
<status status="PASS" endtime="20171002 19:45:04.597" starttime="20171002 19:45:04.597"></status>
</kw>
<status status="PASS" endtime="20171002 19:45:04.598" starttime="20171002 19:45:04.596"></status>
</kw>
<status status="PASS" endtime="20171002 19:45:04.598" starttime="20171002 19:45:04.591"></status>
</kw>
<status status="PASS" endtime="20171002 19:45:04.598" starttime="20171002 19:45:04.590"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171002 19:45:05.508" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/f5f60074, headers=None json=None</msg>
<msg timestamp="20171002 19:45:05.508" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 19:45:05.508" starttime="20171002 19:45:04.598"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171002 19:45:05.510" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/f5f60074", 
    "Progress": 30, 
    "Purpose": "...</msg>
<status status="PASS" endtime="20171002 19:45:05.510" starttime="20171002 19:45:05.509"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171002 19:45:05.511" level="INFO">Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/f5f60074", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-84-g6c20acf", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171002 19:45:05.511" starttime="20171002 19:45:05.511"></status>
</kw>
<status status="PASS" endtime="20171002 19:45:05.511" starttime="20171002 19:45:05.510"></status>
</kw>
<status status="PASS" endtime="20171002 19:45:05.512" starttime="20171002 19:45:05.509"></status>
</kw>
<status status="PASS" endtime="20171002 19:45:05.512" starttime="20171002 19:45:05.508"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171002 19:45:05.512" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171002 19:45:05.512" starttime="20171002 19:45:05.512"></status>
</kw>
<msg timestamp="20171002 19:45:05.513" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 19:45:05.513" starttime="20171002 19:45:04.400"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171002 19:45:05.514" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 19:45:05.514" starttime="20171002 19:45:05.513"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171002 19:45:05.514" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/f5f60074", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-84-g6c20acf", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171002 19:45:05.514" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171002 19:45:05.515" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20171002 19:45:05.515" starttime="20171002 19:45:05.514"></status>
</kw>
<status status="PASS" endtime="20171002 19:45:05.515" starttime="20171002 19:45:04.399"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/f5f60074</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171002 19:45:15.535" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171002 19:45:15.535" starttime="20171002 19:45:15.535"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171002 19:45:15.536" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171002 19:45:15.536" starttime="20171002 19:45:15.536"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171002 19:45:15.537" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171002 19:45:15.537" starttime="20171002 19:45:15.536"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171002 19:45:15.537" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171002 19:45:15.537" starttime="20171002 19:45:15.537"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171002 19:45:15.727" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171002 19:45:15.728" starttime="20171002 19:45:15.538"></status>
</kw>
<msg timestamp="20171002 19:45:15.728" level="INFO">${status} = PASS</msg>
<msg timestamp="20171002 19:45:15.728" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 19:45:15.728" starttime="20171002 19:45:15.538"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171002 19:45:15.728" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 19:45:15.729" starttime="20171002 19:45:15.728"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171002 19:45:15.729" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 19:45:15.729" starttime="20171002 19:45:15.729"></status>
</kw>
<status status="PASS" endtime="20171002 19:45:15.729" starttime="20171002 19:45:15.534"></status>
</kw>
<status status="PASS" endtime="20171002 19:45:15.729" starttime="20171002 19:45:15.534"></status>
</kw>
<status status="PASS" endtime="20171002 19:45:15.730" starttime="20171002 19:45:15.533"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171002 19:45:15.730" level="INFO">${base_uri} = /xyz/openbmc_project/software/f5f60074</msg>
<status status="PASS" endtime="20171002 19:45:15.730" starttime="20171002 19:45:15.730"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171002 19:45:15.732" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/software/f5f60074, method:Get, args:{}</msg>
<status status="PASS" endtime="20171002 19:45:15.732" starttime="20171002 19:45:15.732"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171002 19:45:15.734" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/software/f5f60074, method:Get, args:{}</msg>
<status status="PASS" endtime="20171002 19:45:15.734" starttime="20171002 19:45:15.733"></status>
</kw>
<status status="PASS" endtime="20171002 19:45:15.734" starttime="20171002 19:45:15.733"></status>
</kw>
<status status="PASS" endtime="20171002 19:45:15.734" starttime="20171002 19:45:15.731"></status>
</kw>
<status status="PASS" endtime="20171002 19:45:15.734" starttime="20171002 19:45:15.731"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171002 19:45:15.875" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/f5f60074, headers=None json=None</msg>
<msg timestamp="20171002 19:45:15.875" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 19:45:15.875" starttime="20171002 19:45:15.734"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171002 19:45:15.877" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/f5f60074", 
    "Progress": 30, 
    "Purpose": "...</msg>
<status status="PASS" endtime="20171002 19:45:15.877" starttime="20171002 19:45:15.876"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171002 19:45:15.878" level="INFO">Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/f5f60074", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-84-g6c20acf", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171002 19:45:15.878" starttime="20171002 19:45:15.877"></status>
</kw>
<status status="PASS" endtime="20171002 19:45:15.878" starttime="20171002 19:45:15.877"></status>
</kw>
<status status="PASS" endtime="20171002 19:45:15.878" starttime="20171002 19:45:15.876"></status>
</kw>
<status status="PASS" endtime="20171002 19:45:15.878" starttime="20171002 19:45:15.875"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171002 19:45:15.878" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171002 19:45:15.879" starttime="20171002 19:45:15.878"></status>
</kw>
<msg timestamp="20171002 19:45:15.879" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 19:45:15.879" starttime="20171002 19:45:15.532"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171002 19:45:15.880" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 19:45:15.880" starttime="20171002 19:45:15.879"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171002 19:45:15.880" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/f5f60074", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-84-g6c20acf", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171002 19:45:15.880" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171002 19:45:15.881" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20171002 19:45:15.881" starttime="20171002 19:45:15.880"></status>
</kw>
<status status="PASS" endtime="20171002 19:45:15.881" starttime="20171002 19:45:15.531"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/f5f60074</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171002 19:45:25.899" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171002 19:45:25.899" starttime="20171002 19:45:25.898"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171002 19:45:25.900" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171002 19:45:25.900" starttime="20171002 19:45:25.900"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171002 19:45:25.901" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171002 19:45:25.901" starttime="20171002 19:45:25.901"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171002 19:45:25.902" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171002 19:45:25.902" starttime="20171002 19:45:25.901"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171002 19:45:26.102" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171002 19:45:26.103" starttime="20171002 19:45:25.903"></status>
</kw>
<msg timestamp="20171002 19:45:26.103" level="INFO">${status} = PASS</msg>
<msg timestamp="20171002 19:45:26.103" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 19:45:26.103" starttime="20171002 19:45:25.902"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171002 19:45:26.103" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 19:45:26.104" starttime="20171002 19:45:26.103"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171002 19:45:26.104" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 19:45:26.104" starttime="20171002 19:45:26.104"></status>
</kw>
<status status="PASS" endtime="20171002 19:45:26.104" starttime="20171002 19:45:25.898"></status>
</kw>
<status status="PASS" endtime="20171002 19:45:26.105" starttime="20171002 19:45:25.897"></status>
</kw>
<status status="PASS" endtime="20171002 19:45:26.105" starttime="20171002 19:45:25.896"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171002 19:45:26.105" level="INFO">${base_uri} = /xyz/openbmc_project/software/f5f60074</msg>
<status status="PASS" endtime="20171002 19:45:26.105" starttime="20171002 19:45:26.105"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171002 19:45:26.107" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/software/f5f60074, method:Get, args:{}</msg>
<status status="PASS" endtime="20171002 19:45:26.108" starttime="20171002 19:45:26.107"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171002 19:45:26.108" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/software/f5f60074, method:Get, args:{}</msg>
<status status="PASS" endtime="20171002 19:45:26.109" starttime="20171002 19:45:26.108"></status>
</kw>
<status status="PASS" endtime="20171002 19:45:26.109" starttime="20171002 19:45:26.108"></status>
</kw>
<status status="PASS" endtime="20171002 19:45:26.109" starttime="20171002 19:45:26.106"></status>
</kw>
<status status="PASS" endtime="20171002 19:45:26.109" starttime="20171002 19:45:26.106"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171002 19:45:26.242" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/f5f60074, headers=None json=None</msg>
<msg timestamp="20171002 19:45:26.242" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 19:45:26.242" starttime="20171002 19:45:26.109"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171002 19:45:26.244" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/f5f60074", 
    "Progress": 30, 
    "Purpose": "...</msg>
<status status="PASS" endtime="20171002 19:45:26.244" starttime="20171002 19:45:26.243"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171002 19:45:26.245" level="INFO">Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/f5f60074", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-84-g6c20acf", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171002 19:45:26.245" starttime="20171002 19:45:26.244"></status>
</kw>
<status status="PASS" endtime="20171002 19:45:26.245" starttime="20171002 19:45:26.244"></status>
</kw>
<status status="PASS" endtime="20171002 19:45:26.245" starttime="20171002 19:45:26.243"></status>
</kw>
<status status="PASS" endtime="20171002 19:45:26.245" starttime="20171002 19:45:26.242"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171002 19:45:26.246" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171002 19:45:26.246" starttime="20171002 19:45:26.246"></status>
</kw>
<msg timestamp="20171002 19:45:26.246" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 19:45:26.246" starttime="20171002 19:45:25.896"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171002 19:45:26.247" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 19:45:26.247" starttime="20171002 19:45:26.247"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171002 19:45:26.248" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/f5f60074", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-84-g6c20acf", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171002 19:45:26.248" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171002 19:45:26.248" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20171002 19:45:26.248" starttime="20171002 19:45:26.247"></status>
</kw>
<status status="PASS" endtime="20171002 19:45:26.248" starttime="20171002 19:45:25.895"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/f5f60074</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171002 19:45:36.271" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171002 19:45:36.271" starttime="20171002 19:45:36.271"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171002 19:45:36.272" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171002 19:45:36.272" starttime="20171002 19:45:36.272"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171002 19:45:36.273" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171002 19:45:36.273" starttime="20171002 19:45:36.272"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171002 19:45:36.273" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171002 19:45:36.273" starttime="20171002 19:45:36.273"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171002 19:45:37.407" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171002 19:45:37.407" starttime="20171002 19:45:36.274"></status>
</kw>
<msg timestamp="20171002 19:45:37.408" level="INFO">${status} = PASS</msg>
<msg timestamp="20171002 19:45:37.408" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 19:45:37.408" starttime="20171002 19:45:36.274"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171002 19:45:37.408" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 19:45:37.408" starttime="20171002 19:45:37.408"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171002 19:45:37.409" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 19:45:37.409" starttime="20171002 19:45:37.409"></status>
</kw>
<status status="PASS" endtime="20171002 19:45:37.409" starttime="20171002 19:45:36.270"></status>
</kw>
<status status="PASS" endtime="20171002 19:45:37.409" starttime="20171002 19:45:36.270"></status>
</kw>
<status status="PASS" endtime="20171002 19:45:37.410" starttime="20171002 19:45:36.267"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171002 19:45:37.410" level="INFO">${base_uri} = /xyz/openbmc_project/software/f5f60074</msg>
<status status="PASS" endtime="20171002 19:45:37.410" starttime="20171002 19:45:37.410"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171002 19:45:37.412" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/software/f5f60074, method:Get, args:{}</msg>
<status status="PASS" endtime="20171002 19:45:37.412" starttime="20171002 19:45:37.412"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171002 19:45:37.413" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/software/f5f60074, method:Get, args:{}</msg>
<status status="PASS" endtime="20171002 19:45:37.414" starttime="20171002 19:45:37.413"></status>
</kw>
<status status="PASS" endtime="20171002 19:45:37.414" starttime="20171002 19:45:37.413"></status>
</kw>
<status status="PASS" endtime="20171002 19:45:37.414" starttime="20171002 19:45:37.411"></status>
</kw>
<status status="PASS" endtime="20171002 19:45:37.414" starttime="20171002 19:45:37.410"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171002 19:45:38.454" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/f5f60074, headers=None json=None</msg>
<msg timestamp="20171002 19:45:38.454" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 19:45:38.454" starttime="20171002 19:45:37.414"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171002 19:45:38.457" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/f5f60074", 
    "Progress": 30, 
    "Purpose": "...</msg>
<status status="PASS" endtime="20171002 19:45:38.457" starttime="20171002 19:45:38.456"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171002 19:45:38.458" level="INFO">Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/f5f60074", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-84-g6c20acf", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171002 19:45:38.458" starttime="20171002 19:45:38.458"></status>
</kw>
<status status="PASS" endtime="20171002 19:45:38.458" starttime="20171002 19:45:38.457"></status>
</kw>
<status status="PASS" endtime="20171002 19:45:38.458" starttime="20171002 19:45:38.455"></status>
</kw>
<status status="PASS" endtime="20171002 19:45:38.458" starttime="20171002 19:45:38.455"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171002 19:45:38.459" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171002 19:45:38.459" starttime="20171002 19:45:38.459"></status>
</kw>
<msg timestamp="20171002 19:45:38.460" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 19:45:38.460" starttime="20171002 19:45:36.267"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171002 19:45:38.461" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 19:45:38.461" starttime="20171002 19:45:38.461"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171002 19:45:38.462" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/f5f60074", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-84-g6c20acf", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171002 19:45:38.462" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171002 19:45:38.462" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20171002 19:45:38.462" starttime="20171002 19:45:38.461"></status>
</kw>
<status status="PASS" endtime="20171002 19:45:38.462" starttime="20171002 19:45:36.266"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/f5f60074</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171002 19:45:48.478" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171002 19:45:48.479" starttime="20171002 19:45:48.478"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171002 19:45:48.479" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171002 19:45:48.479" starttime="20171002 19:45:48.479"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171002 19:45:48.480" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171002 19:45:48.480" starttime="20171002 19:45:48.480"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171002 19:45:48.481" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171002 19:45:48.481" starttime="20171002 19:45:48.480"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171002 19:45:48.665" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171002 19:45:48.665" starttime="20171002 19:45:48.482"></status>
</kw>
<msg timestamp="20171002 19:45:48.665" level="INFO">${status} = PASS</msg>
<msg timestamp="20171002 19:45:48.665" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 19:45:48.665" starttime="20171002 19:45:48.481"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171002 19:45:48.666" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 19:45:48.666" starttime="20171002 19:45:48.666"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171002 19:45:48.667" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 19:45:48.667" starttime="20171002 19:45:48.666"></status>
</kw>
<status status="PASS" endtime="20171002 19:45:48.667" starttime="20171002 19:45:48.477"></status>
</kw>
<status status="PASS" endtime="20171002 19:45:48.667" starttime="20171002 19:45:48.477"></status>
</kw>
<status status="PASS" endtime="20171002 19:45:48.667" starttime="20171002 19:45:48.476"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171002 19:45:48.668" level="INFO">${base_uri} = /xyz/openbmc_project/software/f5f60074</msg>
<status status="PASS" endtime="20171002 19:45:48.668" starttime="20171002 19:45:48.667"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171002 19:45:48.670" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/software/f5f60074, method:Get, args:{}</msg>
<status status="PASS" endtime="20171002 19:45:48.670" starttime="20171002 19:45:48.669"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171002 19:45:48.671" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/software/f5f60074, method:Get, args:{}</msg>
<status status="PASS" endtime="20171002 19:45:48.671" starttime="20171002 19:45:48.671"></status>
</kw>
<status status="PASS" endtime="20171002 19:45:48.671" starttime="20171002 19:45:48.670"></status>
</kw>
<status status="PASS" endtime="20171002 19:45:48.672" starttime="20171002 19:45:48.668"></status>
</kw>
<status status="PASS" endtime="20171002 19:45:48.672" starttime="20171002 19:45:48.668"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171002 19:45:48.806" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/f5f60074, headers=None json=None</msg>
<msg timestamp="20171002 19:45:48.806" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 19:45:48.806" starttime="20171002 19:45:48.672"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171002 19:45:48.808" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/f5f60074", 
    "Progress": 30, 
    "Purpose": "...</msg>
<status status="PASS" endtime="20171002 19:45:48.808" starttime="20171002 19:45:48.807"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171002 19:45:48.809" level="INFO">Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/f5f60074", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-84-g6c20acf", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171002 19:45:48.809" starttime="20171002 19:45:48.808"></status>
</kw>
<status status="PASS" endtime="20171002 19:45:48.809" starttime="20171002 19:45:48.808"></status>
</kw>
<status status="PASS" endtime="20171002 19:45:48.809" starttime="20171002 19:45:48.807"></status>
</kw>
<status status="PASS" endtime="20171002 19:45:48.809" starttime="20171002 19:45:48.806"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171002 19:45:48.810" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171002 19:45:48.811" starttime="20171002 19:45:48.809"></status>
</kw>
<msg timestamp="20171002 19:45:48.811" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 19:45:48.811" starttime="20171002 19:45:48.476"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171002 19:45:48.812" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 19:45:48.812" starttime="20171002 19:45:48.811"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171002 19:45:48.812" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/f5f60074", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-84-g6c20acf", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171002 19:45:48.812" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171002 19:45:48.813" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20171002 19:45:48.813" starttime="20171002 19:45:48.812"></status>
</kw>
<status status="PASS" endtime="20171002 19:45:48.813" starttime="20171002 19:45:48.475"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/f5f60074</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171002 19:45:58.833" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171002 19:45:58.834" starttime="20171002 19:45:58.833"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171002 19:45:58.835" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171002 19:45:58.835" starttime="20171002 19:45:58.834"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171002 19:45:58.836" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171002 19:45:58.836" starttime="20171002 19:45:58.835"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171002 19:45:58.836" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171002 19:45:58.836" starttime="20171002 19:45:58.836"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171002 19:45:59.019" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171002 19:45:59.019" starttime="20171002 19:45:58.837"></status>
</kw>
<msg timestamp="20171002 19:45:59.019" level="INFO">${status} = PASS</msg>
<msg timestamp="20171002 19:45:59.019" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 19:45:59.019" starttime="20171002 19:45:58.837"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171002 19:45:59.020" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 19:45:59.020" starttime="20171002 19:45:59.019"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171002 19:45:59.021" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 19:45:59.021" starttime="20171002 19:45:59.020"></status>
</kw>
<status status="PASS" endtime="20171002 19:45:59.021" starttime="20171002 19:45:58.832"></status>
</kw>
<status status="PASS" endtime="20171002 19:45:59.021" starttime="20171002 19:45:58.832"></status>
</kw>
<status status="PASS" endtime="20171002 19:45:59.021" starttime="20171002 19:45:58.831"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171002 19:45:59.022" level="INFO">${base_uri} = /xyz/openbmc_project/software/f5f60074</msg>
<status status="PASS" endtime="20171002 19:45:59.022" starttime="20171002 19:45:59.021"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171002 19:45:59.024" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/software/f5f60074, method:Get, args:{}</msg>
<status status="PASS" endtime="20171002 19:45:59.024" starttime="20171002 19:45:59.023"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171002 19:45:59.025" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/software/f5f60074, method:Get, args:{}</msg>
<status status="PASS" endtime="20171002 19:45:59.025" starttime="20171002 19:45:59.025"></status>
</kw>
<status status="PASS" endtime="20171002 19:45:59.025" starttime="20171002 19:45:59.024"></status>
</kw>
<status status="PASS" endtime="20171002 19:45:59.025" starttime="20171002 19:45:59.022"></status>
</kw>
<status status="PASS" endtime="20171002 19:45:59.025" starttime="20171002 19:45:59.022"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171002 19:45:59.172" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/f5f60074, headers=None json=None</msg>
<msg timestamp="20171002 19:45:59.172" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 19:45:59.172" starttime="20171002 19:45:59.026"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171002 19:45:59.174" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/f5f60074", 
    "Progress": 30, 
    "Purpose": "...</msg>
<status status="PASS" endtime="20171002 19:45:59.174" starttime="20171002 19:45:59.174"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171002 19:45:59.175" level="INFO">Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/f5f60074", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-84-g6c20acf", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171002 19:45:59.175" starttime="20171002 19:45:59.175"></status>
</kw>
<status status="PASS" endtime="20171002 19:45:59.175" starttime="20171002 19:45:59.174"></status>
</kw>
<status status="PASS" endtime="20171002 19:45:59.176" starttime="20171002 19:45:59.173"></status>
</kw>
<status status="PASS" endtime="20171002 19:45:59.176" starttime="20171002 19:45:59.173"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171002 19:45:59.176" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171002 19:45:59.176" starttime="20171002 19:45:59.176"></status>
</kw>
<msg timestamp="20171002 19:45:59.176" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 19:45:59.176" starttime="20171002 19:45:58.831"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171002 19:45:59.177" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 19:45:59.177" starttime="20171002 19:45:59.177"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171002 19:45:59.178" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/f5f60074", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-84-g6c20acf", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171002 19:45:59.178" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171002 19:45:59.178" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20171002 19:45:59.178" starttime="20171002 19:45:59.177"></status>
</kw>
<status status="PASS" endtime="20171002 19:45:59.178" starttime="20171002 19:45:58.830"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/f5f60074</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171002 19:46:09.195" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171002 19:46:09.196" starttime="20171002 19:46:09.194"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171002 19:46:09.198" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171002 19:46:09.198" starttime="20171002 19:46:09.197"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171002 19:46:09.199" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171002 19:46:09.199" starttime="20171002 19:46:09.198"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171002 19:46:09.199" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171002 19:46:09.199" starttime="20171002 19:46:09.199"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171002 19:46:09.378" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171002 19:46:09.378" starttime="20171002 19:46:09.200"></status>
</kw>
<msg timestamp="20171002 19:46:09.378" level="INFO">${status} = PASS</msg>
<msg timestamp="20171002 19:46:09.378" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 19:46:09.378" starttime="20171002 19:46:09.200"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171002 19:46:09.379" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 19:46:09.379" starttime="20171002 19:46:09.379"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171002 19:46:09.380" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 19:46:09.380" starttime="20171002 19:46:09.380"></status>
</kw>
<status status="PASS" endtime="20171002 19:46:09.380" starttime="20171002 19:46:09.194"></status>
</kw>
<status status="PASS" endtime="20171002 19:46:09.380" starttime="20171002 19:46:09.193"></status>
</kw>
<status status="PASS" endtime="20171002 19:46:09.380" starttime="20171002 19:46:09.192"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171002 19:46:09.381" level="INFO">${base_uri} = /xyz/openbmc_project/software/f5f60074</msg>
<status status="PASS" endtime="20171002 19:46:09.381" starttime="20171002 19:46:09.381"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171002 19:46:09.383" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/software/f5f60074, method:Get, args:{}</msg>
<status status="PASS" endtime="20171002 19:46:09.383" starttime="20171002 19:46:09.382"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171002 19:46:09.384" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/software/f5f60074, method:Get, args:{}</msg>
<status status="PASS" endtime="20171002 19:46:09.384" starttime="20171002 19:46:09.384"></status>
</kw>
<status status="PASS" endtime="20171002 19:46:09.385" starttime="20171002 19:46:09.383"></status>
</kw>
<status status="PASS" endtime="20171002 19:46:09.385" starttime="20171002 19:46:09.382"></status>
</kw>
<status status="PASS" endtime="20171002 19:46:09.385" starttime="20171002 19:46:09.381"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171002 19:46:09.518" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/f5f60074, headers=None json=None</msg>
<msg timestamp="20171002 19:46:09.518" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 19:46:09.518" starttime="20171002 19:46:09.385"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171002 19:46:09.520" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/f5f60074", 
    "Progress": 30, 
    "Purpose": "...</msg>
<status status="PASS" endtime="20171002 19:46:09.520" starttime="20171002 19:46:09.519"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171002 19:46:09.521" level="INFO">Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/f5f60074", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-84-g6c20acf", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171002 19:46:09.521" starttime="20171002 19:46:09.521"></status>
</kw>
<status status="PASS" endtime="20171002 19:46:09.522" starttime="20171002 19:46:09.520"></status>
</kw>
<status status="PASS" endtime="20171002 19:46:09.522" starttime="20171002 19:46:09.519"></status>
</kw>
<status status="PASS" endtime="20171002 19:46:09.522" starttime="20171002 19:46:09.518"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171002 19:46:09.522" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171002 19:46:09.523" starttime="20171002 19:46:09.522"></status>
</kw>
<msg timestamp="20171002 19:46:09.523" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 19:46:09.523" starttime="20171002 19:46:09.192"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171002 19:46:09.524" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 19:46:09.524" starttime="20171002 19:46:09.523"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171002 19:46:09.524" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/f5f60074", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-84-g6c20acf", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171002 19:46:09.524" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171002 19:46:09.525" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20171002 19:46:09.525" starttime="20171002 19:46:09.524"></status>
</kw>
<status status="PASS" endtime="20171002 19:46:09.525" starttime="20171002 19:46:09.191"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/f5f60074</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171002 19:46:19.546" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171002 19:46:19.547" starttime="20171002 19:46:19.546"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171002 19:46:19.547" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171002 19:46:19.548" starttime="20171002 19:46:19.547"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171002 19:46:19.548" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171002 19:46:19.548" starttime="20171002 19:46:19.548"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171002 19:46:19.549" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171002 19:46:19.549" starttime="20171002 19:46:19.549"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171002 19:46:20.923" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171002 19:46:20.923" starttime="20171002 19:46:19.550"></status>
</kw>
<msg timestamp="20171002 19:46:20.923" level="INFO">${status} = PASS</msg>
<msg timestamp="20171002 19:46:20.923" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 19:46:20.923" starttime="20171002 19:46:19.549"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171002 19:46:20.924" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 19:46:20.924" starttime="20171002 19:46:20.924"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171002 19:46:20.925" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 19:46:20.925" starttime="20171002 19:46:20.924"></status>
</kw>
<status status="PASS" endtime="20171002 19:46:20.925" starttime="20171002 19:46:19.546"></status>
</kw>
<status status="PASS" endtime="20171002 19:46:20.925" starttime="20171002 19:46:19.545"></status>
</kw>
<status status="PASS" endtime="20171002 19:46:20.925" starttime="20171002 19:46:19.544"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171002 19:46:20.926" level="INFO">${base_uri} = /xyz/openbmc_project/software/f5f60074</msg>
<status status="PASS" endtime="20171002 19:46:20.926" starttime="20171002 19:46:20.925"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171002 19:46:20.928" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/software/f5f60074, method:Get, args:{}</msg>
<status status="PASS" endtime="20171002 19:46:20.928" starttime="20171002 19:46:20.927"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171002 19:46:20.929" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/software/f5f60074, method:Get, args:{}</msg>
<status status="PASS" endtime="20171002 19:46:20.929" starttime="20171002 19:46:20.929"></status>
</kw>
<status status="PASS" endtime="20171002 19:46:20.929" starttime="20171002 19:46:20.928"></status>
</kw>
<status status="PASS" endtime="20171002 19:46:20.929" starttime="20171002 19:46:20.927"></status>
</kw>
<status status="PASS" endtime="20171002 19:46:20.929" starttime="20171002 19:46:20.926"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171002 19:46:21.062" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/f5f60074, headers=None json=None</msg>
<msg timestamp="20171002 19:46:21.062" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 19:46:21.062" starttime="20171002 19:46:20.930"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171002 19:46:21.064" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/f5f60074", 
    "Progress": 30, 
    "Purpose": "...</msg>
<status status="PASS" endtime="20171002 19:46:21.064" starttime="20171002 19:46:21.063"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171002 19:46:21.065" level="INFO">Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/f5f60074", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-84-g6c20acf", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171002 19:46:21.065" starttime="20171002 19:46:21.065"></status>
</kw>
<status status="PASS" endtime="20171002 19:46:21.065" starttime="20171002 19:46:21.064"></status>
</kw>
<status status="PASS" endtime="20171002 19:46:21.065" starttime="20171002 19:46:21.063"></status>
</kw>
<status status="PASS" endtime="20171002 19:46:21.065" starttime="20171002 19:46:21.062"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171002 19:46:21.066" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171002 19:46:21.066" starttime="20171002 19:46:21.066"></status>
</kw>
<msg timestamp="20171002 19:46:21.066" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 19:46:21.066" starttime="20171002 19:46:19.543"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171002 19:46:21.067" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 19:46:21.067" starttime="20171002 19:46:21.067"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171002 19:46:21.068" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/f5f60074", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-84-g6c20acf", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171002 19:46:21.068" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171002 19:46:21.068" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20171002 19:46:21.068" starttime="20171002 19:46:21.067"></status>
</kw>
<status status="PASS" endtime="20171002 19:46:21.068" starttime="20171002 19:46:19.542"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/f5f60074</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171002 19:46:31.087" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171002 19:46:31.087" starttime="20171002 19:46:31.086"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171002 19:46:31.088" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171002 19:46:31.088" starttime="20171002 19:46:31.087"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171002 19:46:31.089" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171002 19:46:31.089" starttime="20171002 19:46:31.088"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171002 19:46:31.090" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171002 19:46:31.090" starttime="20171002 19:46:31.089"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171002 19:46:31.274" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171002 19:46:31.274" starttime="20171002 19:46:31.091"></status>
</kw>
<msg timestamp="20171002 19:46:31.274" level="INFO">${status} = PASS</msg>
<msg timestamp="20171002 19:46:31.274" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 19:46:31.274" starttime="20171002 19:46:31.090"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171002 19:46:31.274" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 19:46:31.275" starttime="20171002 19:46:31.274"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171002 19:46:31.275" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 19:46:31.275" starttime="20171002 19:46:31.275"></status>
</kw>
<status status="PASS" endtime="20171002 19:46:31.275" starttime="20171002 19:46:31.086"></status>
</kw>
<status status="PASS" endtime="20171002 19:46:31.275" starttime="20171002 19:46:31.085"></status>
</kw>
<status status="PASS" endtime="20171002 19:46:31.276" starttime="20171002 19:46:31.084"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171002 19:46:31.276" level="INFO">${base_uri} = /xyz/openbmc_project/software/f5f60074</msg>
<status status="PASS" endtime="20171002 19:46:31.276" starttime="20171002 19:46:31.276"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171002 19:46:31.279" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/software/f5f60074, method:Get, args:{}</msg>
<status status="PASS" endtime="20171002 19:46:31.279" starttime="20171002 19:46:31.278"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171002 19:46:31.280" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/software/f5f60074, method:Get, args:{}</msg>
<status status="PASS" endtime="20171002 19:46:31.280" starttime="20171002 19:46:31.280"></status>
</kw>
<status status="PASS" endtime="20171002 19:46:31.280" starttime="20171002 19:46:31.279"></status>
</kw>
<status status="PASS" endtime="20171002 19:46:31.280" starttime="20171002 19:46:31.277"></status>
</kw>
<status status="PASS" endtime="20171002 19:46:31.280" starttime="20171002 19:46:31.277"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171002 19:46:31.419" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/f5f60074, headers=None json=None</msg>
<msg timestamp="20171002 19:46:31.419" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 19:46:31.419" starttime="20171002 19:46:31.281"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171002 19:46:31.421" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/f5f60074", 
    "Progress": 30, 
    "Purpose": "...</msg>
<status status="PASS" endtime="20171002 19:46:31.421" starttime="20171002 19:46:31.420"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171002 19:46:31.422" level="INFO">Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/f5f60074", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-84-g6c20acf", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171002 19:46:31.422" starttime="20171002 19:46:31.421"></status>
</kw>
<status status="PASS" endtime="20171002 19:46:31.422" starttime="20171002 19:46:31.421"></status>
</kw>
<status status="PASS" endtime="20171002 19:46:31.422" starttime="20171002 19:46:31.420"></status>
</kw>
<status status="PASS" endtime="20171002 19:46:31.422" starttime="20171002 19:46:31.419"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171002 19:46:31.423" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171002 19:46:31.423" starttime="20171002 19:46:31.422"></status>
</kw>
<msg timestamp="20171002 19:46:31.423" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 19:46:31.423" starttime="20171002 19:46:31.084"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171002 19:46:31.424" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 19:46:31.424" starttime="20171002 19:46:31.423"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171002 19:46:31.424" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/f5f60074", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-84-g6c20acf", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171002 19:46:31.424" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171002 19:46:31.425" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20171002 19:46:31.425" starttime="20171002 19:46:31.424"></status>
</kw>
<status status="PASS" endtime="20171002 19:46:31.425" starttime="20171002 19:46:31.083"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/f5f60074</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171002 19:46:41.442" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171002 19:46:41.443" starttime="20171002 19:46:41.442"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171002 19:46:41.444" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171002 19:46:41.444" starttime="20171002 19:46:41.443"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171002 19:46:41.444" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171002 19:46:41.444" starttime="20171002 19:46:41.444"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171002 19:46:41.445" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171002 19:46:41.445" starttime="20171002 19:46:41.445"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171002 19:46:41.626" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171002 19:46:41.627" starttime="20171002 19:46:41.446"></status>
</kw>
<msg timestamp="20171002 19:46:41.627" level="INFO">${status} = PASS</msg>
<msg timestamp="20171002 19:46:41.627" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 19:46:41.627" starttime="20171002 19:46:41.445"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171002 19:46:41.627" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 19:46:41.628" starttime="20171002 19:46:41.627"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171002 19:46:41.628" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 19:46:41.628" starttime="20171002 19:46:41.628"></status>
</kw>
<status status="PASS" endtime="20171002 19:46:41.628" starttime="20171002 19:46:41.441"></status>
</kw>
<status status="PASS" endtime="20171002 19:46:41.628" starttime="20171002 19:46:41.441"></status>
</kw>
<status status="PASS" endtime="20171002 19:46:41.629" starttime="20171002 19:46:41.440"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171002 19:46:41.629" level="INFO">${base_uri} = /xyz/openbmc_project/software/f5f60074</msg>
<status status="PASS" endtime="20171002 19:46:41.629" starttime="20171002 19:46:41.629"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171002 19:46:41.631" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/software/f5f60074, method:Get, args:{}</msg>
<status status="PASS" endtime="20171002 19:46:41.631" starttime="20171002 19:46:41.631"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171002 19:46:41.632" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/software/f5f60074, method:Get, args:{}</msg>
<status status="PASS" endtime="20171002 19:46:41.633" starttime="20171002 19:46:41.632"></status>
</kw>
<status status="PASS" endtime="20171002 19:46:41.633" starttime="20171002 19:46:41.632"></status>
</kw>
<status status="PASS" endtime="20171002 19:46:41.633" starttime="20171002 19:46:41.630"></status>
</kw>
<status status="PASS" endtime="20171002 19:46:41.633" starttime="20171002 19:46:41.630"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171002 19:46:41.764" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/f5f60074, headers=None json=None</msg>
<msg timestamp="20171002 19:46:41.764" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 19:46:41.764" starttime="20171002 19:46:41.633"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171002 19:46:41.766" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/f5f60074", 
    "Progress": 30, 
    "Purpose": "...</msg>
<status status="PASS" endtime="20171002 19:46:41.766" starttime="20171002 19:46:41.765"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171002 19:46:41.767" level="INFO">Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/f5f60074", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-84-g6c20acf", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171002 19:46:41.767" starttime="20171002 19:46:41.767"></status>
</kw>
<status status="PASS" endtime="20171002 19:46:41.767" starttime="20171002 19:46:41.766"></status>
</kw>
<status status="PASS" endtime="20171002 19:46:41.768" starttime="20171002 19:46:41.765"></status>
</kw>
<status status="PASS" endtime="20171002 19:46:41.768" starttime="20171002 19:46:41.764"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171002 19:46:41.769" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171002 19:46:41.769" starttime="20171002 19:46:41.768"></status>
</kw>
<msg timestamp="20171002 19:46:41.769" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 19:46:41.769" starttime="20171002 19:46:41.440"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171002 19:46:41.770" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 19:46:41.770" starttime="20171002 19:46:41.769"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171002 19:46:41.770" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/f5f60074", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-84-g6c20acf", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171002 19:46:41.770" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171002 19:46:41.770" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20171002 19:46:41.771" starttime="20171002 19:46:41.770"></status>
</kw>
<status status="PASS" endtime="20171002 19:46:41.771" starttime="20171002 19:46:41.439"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/f5f60074</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171002 19:46:51.792" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171002 19:46:51.797" starttime="20171002 19:46:51.791"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171002 19:46:51.798" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171002 19:46:51.798" starttime="20171002 19:46:51.798"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171002 19:46:51.800" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171002 19:46:51.800" starttime="20171002 19:46:51.799"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171002 19:46:51.801" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171002 19:46:51.801" starttime="20171002 19:46:51.800"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171002 19:46:52.011" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171002 19:46:52.011" starttime="20171002 19:46:51.802"></status>
</kw>
<msg timestamp="20171002 19:46:52.011" level="INFO">${status} = PASS</msg>
<msg timestamp="20171002 19:46:52.012" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 19:46:52.012" starttime="20171002 19:46:51.801"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171002 19:46:52.012" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 19:46:52.012" starttime="20171002 19:46:52.012"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171002 19:46:52.013" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 19:46:52.013" starttime="20171002 19:46:52.013"></status>
</kw>
<status status="PASS" endtime="20171002 19:46:52.013" starttime="20171002 19:46:51.791"></status>
</kw>
<status status="PASS" endtime="20171002 19:46:52.013" starttime="20171002 19:46:51.790"></status>
</kw>
<status status="PASS" endtime="20171002 19:46:52.013" starttime="20171002 19:46:51.789"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171002 19:46:52.014" level="INFO">${base_uri} = /xyz/openbmc_project/software/f5f60074</msg>
<status status="PASS" endtime="20171002 19:46:52.014" starttime="20171002 19:46:52.014"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171002 19:46:52.016" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/software/f5f60074, method:Get, args:{}</msg>
<status status="PASS" endtime="20171002 19:46:52.016" starttime="20171002 19:46:52.015"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171002 19:46:52.017" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/software/f5f60074, method:Get, args:{}</msg>
<status status="PASS" endtime="20171002 19:46:52.017" starttime="20171002 19:46:52.017"></status>
</kw>
<status status="PASS" endtime="20171002 19:46:52.018" starttime="20171002 19:46:52.016"></status>
</kw>
<status status="PASS" endtime="20171002 19:46:52.018" starttime="20171002 19:46:52.015"></status>
</kw>
<status status="PASS" endtime="20171002 19:46:52.018" starttime="20171002 19:46:52.014"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171002 19:46:52.165" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/f5f60074, headers=None json=None</msg>
<msg timestamp="20171002 19:46:52.166" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 19:46:52.166" starttime="20171002 19:46:52.018"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171002 19:46:52.167" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/f5f60074", 
    "Progress": 30, 
    "Purpose": "...</msg>
<status status="PASS" endtime="20171002 19:46:52.167" starttime="20171002 19:46:52.167"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171002 19:46:52.168" level="INFO">Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/f5f60074", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-84-g6c20acf", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171002 19:46:52.168" starttime="20171002 19:46:52.168"></status>
</kw>
<status status="PASS" endtime="20171002 19:46:52.169" starttime="20171002 19:46:52.168"></status>
</kw>
<status status="PASS" endtime="20171002 19:46:52.169" starttime="20171002 19:46:52.166"></status>
</kw>
<status status="PASS" endtime="20171002 19:46:52.169" starttime="20171002 19:46:52.166"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171002 19:46:52.169" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171002 19:46:52.170" starttime="20171002 19:46:52.169"></status>
</kw>
<msg timestamp="20171002 19:46:52.170" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 19:46:52.170" starttime="20171002 19:46:51.789"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171002 19:46:52.170" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 19:46:52.170" starttime="20171002 19:46:52.170"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171002 19:46:52.171" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/f5f60074", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-84-g6c20acf", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171002 19:46:52.171" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171002 19:46:52.171" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20171002 19:46:52.171" starttime="20171002 19:46:52.171"></status>
</kw>
<status status="PASS" endtime="20171002 19:46:52.172" starttime="20171002 19:46:51.788"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/f5f60074</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171002 19:47:02.193" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171002 19:47:02.193" starttime="20171002 19:47:02.192"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171002 19:47:02.194" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171002 19:47:02.194" starttime="20171002 19:47:02.194"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171002 19:47:02.195" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171002 19:47:02.195" starttime="20171002 19:47:02.195"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171002 19:47:02.196" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171002 19:47:02.196" starttime="20171002 19:47:02.195"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171002 19:47:02.375" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171002 19:47:02.375" starttime="20171002 19:47:02.197"></status>
</kw>
<msg timestamp="20171002 19:47:02.375" level="INFO">${status} = PASS</msg>
<msg timestamp="20171002 19:47:02.375" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 19:47:02.376" starttime="20171002 19:47:02.196"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171002 19:47:02.376" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 19:47:02.376" starttime="20171002 19:47:02.376"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171002 19:47:02.377" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 19:47:02.377" starttime="20171002 19:47:02.377"></status>
</kw>
<status status="PASS" endtime="20171002 19:47:02.377" starttime="20171002 19:47:02.192"></status>
</kw>
<status status="PASS" endtime="20171002 19:47:02.377" starttime="20171002 19:47:02.191"></status>
</kw>
<status status="PASS" endtime="20171002 19:47:02.377" starttime="20171002 19:47:02.190"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171002 19:47:02.378" level="INFO">${base_uri} = /xyz/openbmc_project/software/f5f60074</msg>
<status status="PASS" endtime="20171002 19:47:02.378" starttime="20171002 19:47:02.378"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171002 19:47:02.380" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/software/f5f60074, method:Get, args:{}</msg>
<status status="PASS" endtime="20171002 19:47:02.380" starttime="20171002 19:47:02.380"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171002 19:47:02.381" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/software/f5f60074, method:Get, args:{}</msg>
<status status="PASS" endtime="20171002 19:47:02.381" starttime="20171002 19:47:02.381"></status>
</kw>
<status status="PASS" endtime="20171002 19:47:02.381" starttime="20171002 19:47:02.380"></status>
</kw>
<status status="PASS" endtime="20171002 19:47:02.382" starttime="20171002 19:47:02.379"></status>
</kw>
<status status="PASS" endtime="20171002 19:47:02.382" starttime="20171002 19:47:02.378"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171002 19:47:02.513" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/f5f60074, headers=None json=None</msg>
<msg timestamp="20171002 19:47:02.513" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 19:47:02.513" starttime="20171002 19:47:02.382"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171002 19:47:02.515" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/f5f60074", 
    "Progress": 30, 
    "Purpose": "...</msg>
<status status="PASS" endtime="20171002 19:47:02.515" starttime="20171002 19:47:02.514"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171002 19:47:02.516" level="INFO">Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/f5f60074", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-84-g6c20acf", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171002 19:47:02.516" starttime="20171002 19:47:02.516"></status>
</kw>
<status status="PASS" endtime="20171002 19:47:02.516" starttime="20171002 19:47:02.515"></status>
</kw>
<status status="PASS" endtime="20171002 19:47:02.517" starttime="20171002 19:47:02.514"></status>
</kw>
<status status="PASS" endtime="20171002 19:47:02.517" starttime="20171002 19:47:02.513"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171002 19:47:02.517" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171002 19:47:02.517" starttime="20171002 19:47:02.517"></status>
</kw>
<msg timestamp="20171002 19:47:02.517" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 19:47:02.517" starttime="20171002 19:47:02.189"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171002 19:47:02.518" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 19:47:02.518" starttime="20171002 19:47:02.518"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171002 19:47:02.519" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/f5f60074", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-84-g6c20acf", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171002 19:47:02.519" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171002 19:47:02.519" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20171002 19:47:02.519" starttime="20171002 19:47:02.518"></status>
</kw>
<status status="PASS" endtime="20171002 19:47:02.519" starttime="20171002 19:47:02.189"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/f5f60074</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171002 19:47:12.540" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171002 19:47:12.540" starttime="20171002 19:47:12.540"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171002 19:47:12.541" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171002 19:47:12.541" starttime="20171002 19:47:12.541"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171002 19:47:12.542" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171002 19:47:12.542" starttime="20171002 19:47:12.541"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171002 19:47:12.542" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171002 19:47:12.542" starttime="20171002 19:47:12.542"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171002 19:47:14.179" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171002 19:47:14.179" starttime="20171002 19:47:12.544"></status>
</kw>
<msg timestamp="20171002 19:47:14.179" level="INFO">${status} = PASS</msg>
<msg timestamp="20171002 19:47:14.179" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 19:47:14.179" starttime="20171002 19:47:12.543"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171002 19:47:14.180" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 19:47:14.180" starttime="20171002 19:47:14.180"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171002 19:47:14.181" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 19:47:14.181" starttime="20171002 19:47:14.180"></status>
</kw>
<status status="PASS" endtime="20171002 19:47:14.181" starttime="20171002 19:47:12.539"></status>
</kw>
<status status="PASS" endtime="20171002 19:47:14.181" starttime="20171002 19:47:12.539"></status>
</kw>
<status status="PASS" endtime="20171002 19:47:14.181" starttime="20171002 19:47:12.538"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171002 19:47:14.182" level="INFO">${base_uri} = /xyz/openbmc_project/software/f5f60074</msg>
<status status="PASS" endtime="20171002 19:47:14.182" starttime="20171002 19:47:14.182"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171002 19:47:14.185" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/software/f5f60074, method:Get, args:{}</msg>
<status status="PASS" endtime="20171002 19:47:14.185" starttime="20171002 19:47:14.184"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171002 19:47:14.186" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/software/f5f60074, method:Get, args:{}</msg>
<status status="PASS" endtime="20171002 19:47:14.186" starttime="20171002 19:47:14.185"></status>
</kw>
<status status="PASS" endtime="20171002 19:47:14.186" starttime="20171002 19:47:14.185"></status>
</kw>
<status status="PASS" endtime="20171002 19:47:14.186" starttime="20171002 19:47:14.183"></status>
</kw>
<status status="PASS" endtime="20171002 19:47:14.186" starttime="20171002 19:47:14.182"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171002 19:47:14.316" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/f5f60074, headers=None json=None</msg>
<msg timestamp="20171002 19:47:14.316" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 19:47:14.316" starttime="20171002 19:47:14.186"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171002 19:47:14.318" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/f5f60074", 
    "Progress": 30, 
    "Purpose": "...</msg>
<status status="PASS" endtime="20171002 19:47:14.318" starttime="20171002 19:47:14.317"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171002 19:47:14.319" level="INFO">Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/f5f60074", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-84-g6c20acf", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171002 19:47:14.319" starttime="20171002 19:47:14.319"></status>
</kw>
<status status="PASS" endtime="20171002 19:47:14.320" starttime="20171002 19:47:14.318"></status>
</kw>
<status status="PASS" endtime="20171002 19:47:14.320" starttime="20171002 19:47:14.317"></status>
</kw>
<status status="PASS" endtime="20171002 19:47:14.320" starttime="20171002 19:47:14.316"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171002 19:47:14.324" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171002 19:47:14.324" starttime="20171002 19:47:14.324"></status>
</kw>
<msg timestamp="20171002 19:47:14.324" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 19:47:14.324" starttime="20171002 19:47:12.537"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171002 19:47:14.325" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 19:47:14.325" starttime="20171002 19:47:14.325"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171002 19:47:14.326" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/f5f60074", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-84-g6c20acf", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171002 19:47:14.326" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171002 19:47:14.326" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20171002 19:47:14.326" starttime="20171002 19:47:14.325"></status>
</kw>
<status status="PASS" endtime="20171002 19:47:14.326" starttime="20171002 19:47:12.537"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/f5f60074</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171002 19:47:24.353" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171002 19:47:24.354" starttime="20171002 19:47:24.353"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171002 19:47:24.354" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171002 19:47:24.354" starttime="20171002 19:47:24.354"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171002 19:47:24.355" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171002 19:47:24.355" starttime="20171002 19:47:24.355"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171002 19:47:24.356" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171002 19:47:24.356" starttime="20171002 19:47:24.355"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171002 19:47:24.536" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171002 19:47:24.537" starttime="20171002 19:47:24.356"></status>
</kw>
<msg timestamp="20171002 19:47:24.537" level="INFO">${status} = PASS</msg>
<msg timestamp="20171002 19:47:24.537" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 19:47:24.537" starttime="20171002 19:47:24.356"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171002 19:47:24.537" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 19:47:24.537" starttime="20171002 19:47:24.537"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171002 19:47:24.538" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 19:47:24.538" starttime="20171002 19:47:24.538"></status>
</kw>
<status status="PASS" endtime="20171002 19:47:24.538" starttime="20171002 19:47:24.352"></status>
</kw>
<status status="PASS" endtime="20171002 19:47:24.538" starttime="20171002 19:47:24.352"></status>
</kw>
<status status="PASS" endtime="20171002 19:47:24.539" starttime="20171002 19:47:24.351"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171002 19:47:24.539" level="INFO">${base_uri} = /xyz/openbmc_project/software/f5f60074</msg>
<status status="PASS" endtime="20171002 19:47:24.539" starttime="20171002 19:47:24.539"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171002 19:47:24.541" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/software/f5f60074, method:Get, args:{}</msg>
<status status="PASS" endtime="20171002 19:47:24.541" starttime="20171002 19:47:24.541"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171002 19:47:24.542" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/software/f5f60074, method:Get, args:{}</msg>
<status status="PASS" endtime="20171002 19:47:24.542" starttime="20171002 19:47:24.542"></status>
</kw>
<status status="PASS" endtime="20171002 19:47:24.543" starttime="20171002 19:47:24.542"></status>
</kw>
<status status="PASS" endtime="20171002 19:47:24.543" starttime="20171002 19:47:24.540"></status>
</kw>
<status status="PASS" endtime="20171002 19:47:24.543" starttime="20171002 19:47:24.540"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171002 19:47:24.647" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/f5f60074, headers=None json=None</msg>
<msg timestamp="20171002 19:47:24.647" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 19:47:24.647" starttime="20171002 19:47:24.543"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171002 19:47:24.649" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
    "Path": "/tmp/images/f5f60074", 
    "Priority": 0, 
    "Purpose": "xyz.o...</msg>
<status status="PASS" endtime="20171002 19:47:24.649" starttime="20171002 19:47:24.649"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171002 19:47:24.650" level="INFO">Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
    "Path": "/tmp/images/f5f60074", 
    "Priority": 0, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-84-g6c20acf", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171002 19:47:24.651" starttime="20171002 19:47:24.650"></status>
</kw>
<status status="PASS" endtime="20171002 19:47:24.651" starttime="20171002 19:47:24.650"></status>
</kw>
<status status="PASS" endtime="20171002 19:47:24.651" starttime="20171002 19:47:24.648"></status>
</kw>
<status status="PASS" endtime="20171002 19:47:24.651" starttime="20171002 19:47:24.648"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171002 19:47:24.652" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171002 19:47:24.652" starttime="20171002 19:47:24.652"></status>
</kw>
<msg timestamp="20171002 19:47:24.652" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 19:47:24.652" starttime="20171002 19:47:24.350"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171002 19:47:24.653" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 19:47:24.653" starttime="20171002 19:47:24.653"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171002 19:47:24.654" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
    "Path": "/tmp/images/f5f60074", 
    "Priority": 0, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-84-g6c20acf", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171002 19:47:24.654" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171002 19:47:24.654" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20171002 19:47:24.654" starttime="20171002 19:47:24.653"></status>
</kw>
<status status="PASS" endtime="20171002 19:47:24.654" starttime="20171002 19:47:24.350"></status>
</kw>
<status status="PASS" endtime="20171002 19:47:24.654" starttime="20171002 19:44:08.241"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${SOFTWARE_VERSION_URI}${version_id}</arg>
</arguments>
<assign>
<var>${software_state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171002 19:47:24.658" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171002 19:47:24.658" starttime="20171002 19:47:24.657"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171002 19:47:24.659" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171002 19:47:24.659" starttime="20171002 19:47:24.658"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171002 19:47:24.660" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171002 19:47:24.660" starttime="20171002 19:47:24.660"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171002 19:47:24.661" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171002 19:47:24.661" starttime="20171002 19:47:24.660"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171002 19:47:24.873" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171002 19:47:24.873" starttime="20171002 19:47:24.661"></status>
</kw>
<msg timestamp="20171002 19:47:24.873" level="INFO">${status} = PASS</msg>
<msg timestamp="20171002 19:47:24.873" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 19:47:24.873" starttime="20171002 19:47:24.661"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171002 19:47:24.874" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 19:47:24.874" starttime="20171002 19:47:24.874"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171002 19:47:24.875" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 19:47:24.875" starttime="20171002 19:47:24.874"></status>
</kw>
<status status="PASS" endtime="20171002 19:47:24.875" starttime="20171002 19:47:24.657"></status>
</kw>
<status status="PASS" endtime="20171002 19:47:24.875" starttime="20171002 19:47:24.656"></status>
</kw>
<status status="PASS" endtime="20171002 19:47:24.875" starttime="20171002 19:47:24.656"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171002 19:47:24.876" level="INFO">${base_uri} = /xyz/openbmc_project/software/f5f60074</msg>
<status status="PASS" endtime="20171002 19:47:24.876" starttime="20171002 19:47:24.875"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171002 19:47:24.878" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/software/f5f60074, method:Get, args:{}</msg>
<status status="PASS" endtime="20171002 19:47:24.878" starttime="20171002 19:47:24.877"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171002 19:47:24.879" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/software/f5f60074, method:Get, args:{}</msg>
<status status="PASS" endtime="20171002 19:47:24.879" starttime="20171002 19:47:24.879"></status>
</kw>
<status status="PASS" endtime="20171002 19:47:24.879" starttime="20171002 19:47:24.878"></status>
</kw>
<status status="PASS" endtime="20171002 19:47:24.879" starttime="20171002 19:47:24.877"></status>
</kw>
<status status="PASS" endtime="20171002 19:47:24.879" starttime="20171002 19:47:24.876"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171002 19:47:25.094" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/f5f60074, headers=None json=None</msg>
<msg timestamp="20171002 19:47:25.094" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 19:47:25.094" starttime="20171002 19:47:24.880"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171002 19:47:25.096" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
    "Path": "/tmp/images/f5f60074", 
    "Priority": 0, 
    "Purpose": "xyz.o...</msg>
<status status="PASS" endtime="20171002 19:47:25.096" starttime="20171002 19:47:25.095"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171002 19:47:25.097" level="INFO">Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
    "Path": "/tmp/images/f5f60074", 
    "Priority": 0, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-84-g6c20acf", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171002 19:47:25.097" starttime="20171002 19:47:25.097"></status>
</kw>
<status status="PASS" endtime="20171002 19:47:25.097" starttime="20171002 19:47:25.096"></status>
</kw>
<status status="PASS" endtime="20171002 19:47:25.097" starttime="20171002 19:47:25.095"></status>
</kw>
<status status="PASS" endtime="20171002 19:47:25.097" starttime="20171002 19:47:25.094"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171002 19:47:25.098" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171002 19:47:25.098" starttime="20171002 19:47:25.098"></status>
</kw>
<msg timestamp="20171002 19:47:25.098" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 19:47:25.098" starttime="20171002 19:47:24.655"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171002 19:47:25.099" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 19:47:25.099" starttime="20171002 19:47:25.098"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171002 19:47:25.099" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
    "Path": "/tmp/images/f5f60074", 
    "Priority": 0, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-84-g6c20acf", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171002 19:47:25.099" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171002 19:47:25.100" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20171002 19:47:25.100" starttime="20171002 19:47:25.099"></status>
</kw>
<msg timestamp="20171002 19:47:25.100" level="INFO">${software_state} = {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Activ...</msg>
<status status="PASS" endtime="20171002 19:47:25.100" starttime="20171002 19:47:24.655"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>&amp;{software_state}[Activation]</arg>
<arg>${ACTIVE}</arg>
</arguments>
<msg timestamp="20171002 19:47:25.101" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20171002 19:47:25.101" starttime="20171002 19:47:25.100"></status>
</kw>
<status status="PASS" endtime="20171002 19:47:25.101" starttime="20171002 19:43:37.839"></status>
</kw>
<kw name="OBMC Reboot (off)" library="boot_utils">
<doc>Do "OBMC Reboot (off)" boot test.</doc>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>OBMC Boot Test \ loc_boot_stack=OBMC Reboot (off)</arg>
<arg>\ loc_stack_mode=${stack_mode} \ loc_quiet=${quiet}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171002 19:47:25.103" level="INFO">${cmd_buf} = OBMC Boot Test  loc_boot_stack=OBMC Reboot (off)  loc_stack_mode=normal  loc_quiet=0</msg>
<status status="PASS" endtime="20171002 19:47:25.103" starttime="20171002 19:47:25.102"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<kw name="OBMC Boot Test" library="obmc_boot_test_resource">
<arguments>
<arg>loc_boot_stack=OBMC Reboot (off)</arg>
<arg>loc_stack_mode=normal</arg>
<arg>loc_quiet=0</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${pos_arg1}' != '${EMPTY}'</arg>
<arg>Set To Dictionary</arg>
<arg>${arguments}</arg>
<arg>loc_boot_stack=${pos_arg1}</arg>
</arguments>
<status status="PASS" endtime="20171002 19:47:25.108" starttime="20171002 19:47:25.108"></status>
</kw>
<kw name="Obmc Boot Test Py" library="obmc_boot_test">
<doc>Do main program processing.</doc>
<arguments>
<arg>&amp;{arguments}</arg>
</arguments>
<msg timestamp="20171002 19:47:25.110" level="INFO">${boot_stack} = OBMC Reboot (off)</msg>
<msg timestamp="20171002 19:47:25.110" level="INFO">${stack_mode} = normal</msg>
<msg timestamp="20171002 19:47:25.111" level="INFO">${quiet} = 0</msg>
<msg timestamp="20171002 19:47:25.395" level="INFO">${plug_in_packages_list} = []</msg>
<msg timestamp="20171002 19:47:25.402" level="INFO">${program_pid} = 1</msg>
<kw name="Set BMC Power Policy" library="utils">
<doc>Set the given BMC power policy.</doc>
<arguments>
<arg>RESTORE_LAST_STATE</arg>
</arguments>
<kw name="Set Power Policy Method" library="utils">
<doc>Set the global bmc_power_policy_method to either 'Old' or 'New'.</doc>
<status status="PASS" endtime="20171002 19:47:25.415" starttime="20171002 19:47:25.415"></status>
</kw>
<kw name="Translate Power Policy Value" library="utils">
<doc>Translate the policy value and return the result.</doc>
<arguments>
<arg>${policy}</arg>
</arguments>
<assign>
<var>${policy}</var>
</assign>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${RESTORE_LAST_STATE}</arg>
</arguments>
<status status="PASS" endtime="20171002 19:47:25.416" starttime="20171002 19:47:25.416"></status>
</kw>
<msg timestamp="20171002 19:47:25.416" level="INFO">${policy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20171002 19:47:25.416" starttime="20171002 19:47:25.415"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${bmc_power_policy_method} Set Power Policy \ ${policy}</arg>
</arguments>
<kw name="New Set Power Policy" library="utils">
<doc>Set the given BMC power policy (new method).</doc>
<arguments>
<arg>xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${policy}</arg>
</arguments>
<assign>
<var>${valueDict}</var>
</assign>
<msg timestamp="20171002 19:47:25.430" level="INFO">${valueDict} = {u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore'}</msg>
<status status="PASS" endtime="20171002 19:47:25.430" starttime="20171002 19:47:25.430"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${POWER_RESTORE_URI}</arg>
<arg>PowerRestorePolicy</arg>
<arg>data=${valueDict}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171002 19:47:25.432" level="INFO">${base_uri} = /xyz/openbmc_project/control/host0/power_restore_policy</msg>
<status status="PASS" endtime="20171002 19:47:25.432" starttime="20171002 19:47:25.431"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171002 19:47:25.437" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171002 19:47:25.438" starttime="20171002 19:47:25.436"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171002 19:47:25.439" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171002 19:47:25.439" starttime="20171002 19:47:25.439"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171002 19:47:25.440" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171002 19:47:25.440" starttime="20171002 19:47:25.440"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171002 19:47:25.441" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171002 19:47:25.441" starttime="20171002 19:47:25.441"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171002 19:47:25.629" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171002 19:47:25.629" starttime="20171002 19:47:25.442"></status>
</kw>
<msg timestamp="20171002 19:47:25.629" level="INFO">${status} = PASS</msg>
<msg timestamp="20171002 19:47:25.629" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 19:47:25.629" starttime="20171002 19:47:25.442"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171002 19:47:25.630" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 19:47:25.630" starttime="20171002 19:47:25.629"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171002 19:47:25.630" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 19:47:25.630" starttime="20171002 19:47:25.630"></status>
</kw>
<status status="PASS" endtime="20171002 19:47:25.631" starttime="20171002 19:47:25.435"></status>
</kw>
<status status="PASS" endtime="20171002 19:47:25.631" starttime="20171002 19:47:25.434"></status>
</kw>
<status status="PASS" endtime="20171002 19:47:25.631" starttime="20171002 19:47:25.433"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171002 19:47:25.631" level="INFO">${base_uri} = /xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy</msg>
<status status="PASS" endtime="20171002 19:47:25.631" starttime="20171002 19:47:25.631"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171002 19:47:25.632" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171002 19:47:25.632" starttime="20171002 19:47:25.632"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20171002 19:47:25.633" starttime="20171002 19:47:25.632"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171002 19:47:25.634" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Put, args:{u'data': {u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Res...</msg>
<status status="PASS" endtime="20171002 19:47:25.634" starttime="20171002 19:47:25.634"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171002 19:47:25.635" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Put, args:{u'data': {u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20171002 19:47:25.636" starttime="20171002 19:47:25.635"></status>
</kw>
<status status="PASS" endtime="20171002 19:47:25.636" starttime="20171002 19:47:25.635"></status>
</kw>
<status status="PASS" endtime="20171002 19:47:25.636" starttime="20171002 19:47:25.633"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171002 19:47:25.770" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, data={"data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20171002 19:47:25.770" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 19:47:25.770" starttime="20171002 19:47:25.636"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171002 19:47:25.771" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171002 19:47:25.771" starttime="20171002 19:47:25.771"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171002 19:47:25.773" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171002 19:47:25.773" starttime="20171002 19:47:25.772"></status>
</kw>
<status status="PASS" endtime="20171002 19:47:25.773" starttime="20171002 19:47:25.771"></status>
</kw>
<status status="PASS" endtime="20171002 19:47:25.773" starttime="20171002 19:47:25.770"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171002 19:47:25.778" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171002 19:47:25.778" starttime="20171002 19:47:25.777"></status>
</kw>
<msg timestamp="20171002 19:47:25.778" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 19:47:25.778" starttime="20171002 19:47:25.432"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171002 19:47:25.779" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 19:47:25.779" starttime="20171002 19:47:25.779"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20171002 19:47:25.780" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171002 19:47:25.780" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171002 19:47:25.780" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20171002 19:47:25.780" starttime="20171002 19:47:25.780"></status>
</kw>
<status status="PASS" endtime="20171002 19:47:25.780" starttime="20171002 19:47:25.430"></status>
</kw>
<status status="PASS" endtime="20171002 19:47:25.780" starttime="20171002 19:47:25.429"></status>
</kw>
<status status="PASS" endtime="20171002 19:47:25.781" starttime="20171002 19:47:25.417"></status>
</kw>
<kw name="Get System Power Policy" library="utils">
<doc>Get the BMC power policy.</doc>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="Set Power Policy Method" library="utils">
<doc>Set the global bmc_power_policy_method to either 'Old' or 'New'.</doc>
<status status="PASS" endtime="20171002 19:47:25.782" starttime="20171002 19:47:25.781"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${bmc_power_policy_method} Get Power Policy</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171002 19:47:25.782" level="INFO">${cmd_buf} = [u'New Get Power Policy']</msg>
<status status="PASS" endtime="20171002 19:47:25.782" starttime="20171002 19:47:25.782"></status>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>@{cmd_buf}</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="New Get Power Policy" library="utils">
<doc>Get the BMC power policy (new method).</doc>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${POWER_RESTORE_URI}</arg>
<arg>PowerRestorePolicy</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171002 19:47:25.786" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171002 19:47:25.787" starttime="20171002 19:47:25.786"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171002 19:47:25.787" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171002 19:47:25.787" starttime="20171002 19:47:25.787"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171002 19:47:25.788" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171002 19:47:25.788" starttime="20171002 19:47:25.788"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171002 19:47:25.789" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171002 19:47:25.789" starttime="20171002 19:47:25.788"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171002 19:47:26.139" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171002 19:47:26.139" starttime="20171002 19:47:25.790"></status>
</kw>
<msg timestamp="20171002 19:47:26.139" level="INFO">${status} = PASS</msg>
<msg timestamp="20171002 19:47:26.139" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 19:47:26.139" starttime="20171002 19:47:25.789"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171002 19:47:26.140" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 19:47:26.140" starttime="20171002 19:47:26.139"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171002 19:47:26.140" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 19:47:26.141" starttime="20171002 19:47:26.140"></status>
</kw>
<status status="PASS" endtime="20171002 19:47:26.141" starttime="20171002 19:47:25.786"></status>
</kw>
<status status="PASS" endtime="20171002 19:47:26.141" starttime="20171002 19:47:25.785"></status>
</kw>
<status status="PASS" endtime="20171002 19:47:26.141" starttime="20171002 19:47:25.784"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171002 19:47:26.141" level="INFO">${base_uri} = /xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy</msg>
<status status="PASS" endtime="20171002 19:47:26.142" starttime="20171002 19:47:26.141"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171002 19:47:26.144" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Get, args:{}</msg>
<status status="PASS" endtime="20171002 19:47:26.144" starttime="20171002 19:47:26.143"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171002 19:47:26.145" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Get, args:{}</msg>
<status status="PASS" endtime="20171002 19:47:26.146" starttime="20171002 19:47:26.145"></status>
</kw>
<status status="PASS" endtime="20171002 19:47:26.146" starttime="20171002 19:47:26.144"></status>
</kw>
<status status="PASS" endtime="20171002 19:47:26.146" starttime="20171002 19:47:26.142"></status>
</kw>
<status status="PASS" endtime="20171002 19:47:26.146" starttime="20171002 19:47:26.142"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171002 19:47:26.262" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, headers=None json=None</msg>
<msg timestamp="20171002 19:47:26.262" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 19:47:26.262" starttime="20171002 19:47:26.146"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171002 19:47:26.264" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171002 19:47:26.264" starttime="20171002 19:47:26.263"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171002 19:47:26.265" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171002 19:47:26.265" starttime="20171002 19:47:26.265"></status>
</kw>
<status status="PASS" endtime="20171002 19:47:26.265" starttime="20171002 19:47:26.264"></status>
</kw>
<status status="PASS" endtime="20171002 19:47:26.265" starttime="20171002 19:47:26.263"></status>
</kw>
<status status="PASS" endtime="20171002 19:47:26.265" starttime="20171002 19:47:26.262"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171002 19:47:26.266" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171002 19:47:26.266" starttime="20171002 19:47:26.266"></status>
</kw>
<msg timestamp="20171002 19:47:26.266" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 19:47:26.266" starttime="20171002 19:47:25.784"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171002 19:47:26.267" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 19:47:26.267" starttime="20171002 19:47:26.266"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171002 19:47:26.268" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171002 19:47:26.268" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171002 19:47:26.268" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore'}</msg>
<status status="PASS" endtime="20171002 19:47:26.268" starttime="20171002 19:47:26.267"></status>
</kw>
<msg timestamp="20171002 19:47:26.269" level="INFO">${currentPolicy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20171002 19:47:26.269" starttime="20171002 19:47:25.783"></status>
</kw>
<status status="PASS" endtime="20171002 19:47:26.269" starttime="20171002 19:47:25.783"></status>
</kw>
<msg timestamp="20171002 19:47:26.269" level="INFO">${currentPolicy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20171002 19:47:26.269" starttime="20171002 19:47:25.783"></status>
</kw>
<msg timestamp="20171002 19:47:26.269" level="INFO">${currentPolicy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20171002 19:47:26.269" starttime="20171002 19:47:25.781"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${currentPolicy}</arg>
<arg>${policy}</arg>
</arguments>
<msg timestamp="20171002 19:47:26.270" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20171002 19:47:26.270" starttime="20171002 19:47:26.270"></status>
</kw>
<status status="PASS" endtime="20171002 19:47:26.271" starttime="20171002 19:47:25.413"></status>
</kw>
<msg timestamp="20171002 19:47:26.279" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20171002 19:47:26.286" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20171002 19:47:26.286" level="INFO">${TEST_MESSAGE} = </msg>
<msg timestamp="20171002 19:47:26.287" level="INFO">${FFDC_LOG_PATH} = ./</msg>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/state/enumerate</arg>
<arg>quiet=${0}</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171002 19:47:26.322" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171002 19:47:26.323" starttime="20171002 19:47:26.321"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171002 19:47:26.324" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171002 19:47:26.324" starttime="20171002 19:47:26.323"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171002 19:47:26.324" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171002 19:47:26.324" starttime="20171002 19:47:26.324"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171002 19:47:26.325" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171002 19:47:26.325" starttime="20171002 19:47:26.325"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171002 19:47:26.520" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171002 19:47:26.520" starttime="20171002 19:47:26.326"></status>
</kw>
<msg timestamp="20171002 19:47:26.520" level="INFO">${status} = PASS</msg>
<msg timestamp="20171002 19:47:26.520" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 19:47:26.520" starttime="20171002 19:47:26.326"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171002 19:47:26.521" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 19:47:26.521" starttime="20171002 19:47:26.520"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171002 19:47:26.521" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 19:47:26.522" starttime="20171002 19:47:26.521"></status>
</kw>
<status status="PASS" endtime="20171002 19:47:26.522" starttime="20171002 19:47:26.321"></status>
</kw>
<status status="PASS" endtime="20171002 19:47:26.522" starttime="20171002 19:47:26.320"></status>
</kw>
<status status="PASS" endtime="20171002 19:47:26.522" starttime="20171002 19:47:26.319"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171002 19:47:26.522" level="INFO">${base_uri} = /xyz/openbmc_project/state/enumerate</msg>
<status status="PASS" endtime="20171002 19:47:26.522" starttime="20171002 19:47:26.522"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171002 19:47:26.525" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/state/enumerate, method:Get, args:{}</msg>
<status status="PASS" endtime="20171002 19:47:26.525" starttime="20171002 19:47:26.524"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171002 19:47:26.526" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/state/enumerate, method:Get, args:{}</msg>
<status status="PASS" endtime="20171002 19:47:26.526" starttime="20171002 19:47:26.525"></status>
</kw>
<status status="PASS" endtime="20171002 19:47:26.526" starttime="20171002 19:47:26.525"></status>
</kw>
<status status="PASS" endtime="20171002 19:47:26.526" starttime="20171002 19:47:26.523"></status>
</kw>
<status status="PASS" endtime="20171002 19:47:26.526" starttime="20171002 19:47:26.523"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171002 19:47:26.737" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/enumerate, headers=None json=None</msg>
<msg timestamp="20171002 19:47:26.737" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 19:47:26.737" starttime="20171002 19:47:26.527"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171002 19:47:26.739" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "/xyz/openbmc_project/state/bmc0": {
      "CurrentBMCState": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
      "RequestedBMCTransition": "xyz.openbmc...</msg>
<status status="PASS" endtime="20171002 19:47:26.739" starttime="20171002 19:47:26.738"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171002 19:47:26.740" level="INFO">Response code:200, Content:{
  "data": {
    "/xyz/openbmc_project/state/bmc0": {
      "CurrentBMCState": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
      "RequestedBMCTransition": "xyz.openbmc_project.State.BMC.Transition.None"
    }, 
    "/xyz/openbmc_project/state/chassis0": {
      "CurrentPowerState": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
      "RequestedPowerTransition": "xyz.openbmc_project.State.Chassis.Transition.Off"
    }, 
    "/xyz/openbmc_project/state/host0": {
      "AttemptsLeft": 3, 
      "BootProgress": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
      "CurrentHostState": "xyz.openbmc_project.State.Host.HostState.Off", 
      "OperatingSystemState": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
      "RequestedHostTransition": "xyz.openbmc_project.State.Host.Transition.Off"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171002 19:47:26.740" starttime="20171002 19:47:26.740"></status>
</kw>
<status status="PASS" endtime="20171002 19:47:26.741" starttime="20171002 19:47:26.739"></status>
</kw>
<status status="PASS" endtime="20171002 19:47:26.741" starttime="20171002 19:47:26.738"></status>
</kw>
<status status="PASS" endtime="20171002 19:47:26.741" starttime="20171002 19:47:26.737"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171002 19:47:26.742" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171002 19:47:26.742" starttime="20171002 19:47:26.741"></status>
</kw>
<msg timestamp="20171002 19:47:26.742" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 19:47:26.742" starttime="20171002 19:47:26.317"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171002 19:47:26.743" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 19:47:26.743" starttime="20171002 19:47:26.742"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171002 19:47:26.743" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/state/bmc0": {
      "CurrentBMCState": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
      "RequestedBMCTransition": "xyz.openbmc_project.State.BMC.Transition.None"
    }, 
    "/xyz/openbmc_project/state/chassis0": {
      "CurrentPowerState": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
      "RequestedPowerTransition": "xyz.openbmc_project.State.Chassis.Transition.Off"
    }, 
    "/xyz/openbmc_project/state/host0": {
      "AttemptsLeft": 3, 
      "BootProgress": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
      "CurrentHostState": "xyz.openbmc_project.State.Host.HostState.Off", 
      "OperatingSystemState": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
      "RequestedHostTransition": "xyz.openbmc_project.State.Host.Transition.Off"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171002 19:47:26.744" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171002 19:47:26.744" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'/xyz/openbmc_project/state/host0': {u'CurrentHostState': u'xyz.openbmc_project.State.Host.HostState.Off', u'RequestedHostTransition': u'xyz.openbm...</msg>
<status status="PASS" endtime="20171002 19:47:26.744" starttime="20171002 19:47:26.743"></status>
</kw>
<status status="PASS" endtime="20171002 19:47:26.744" starttime="20171002 19:47:26.315"></status>
</kw>
<kw name="Run Boot" library="obmc_boot_test">
<doc>Run the specified boot.</doc>
<arguments>
<arg>OBMC Reboot (off)</arg>
</arguments>
<msg timestamp="20171002 19:47:26.784" level="INFO">Log level changed from NONE to INFO.</msg>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>/sbin/reboot</arg>
<arg>fork=${1}</arg>
</arguments>
<msg timestamp="20171002 19:47:26.801" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171002 19:47:26.801" level="INFO">Starting command '/sbin/reboot'.</msg>
<status status="PASS" endtime="20171002 19:47:26.820" starttime="20171002 19:47:26.785"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171002 19:47:30.856" level="FAIL">
#(UTC) 2017/10/02 19:47:30.852639 -    4.021940 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20171002 19:47:30.857" starttime="20171002 19:47:26.840"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171002 19:47:34.876" level="FAIL">
#(UTC) 2017/10/02 19:47:34.873870 -    4.021231 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20171002 19:47:34.877" starttime="20171002 19:47:30.860"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171002 19:47:38.898" level="FAIL">
#(UTC) 2017/10/02 19:47:38.896067 -    4.022197 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20171002 19:47:38.899" starttime="20171002 19:47:34.880"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171002 19:47:42.921" level="FAIL">
#(UTC) 2017/10/02 19:47:42.917736 -    4.021669 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20171002 19:47:42.922" starttime="20171002 19:47:38.902"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171002 19:47:46.941" level="FAIL">
#(UTC) 2017/10/02 19:47:46.939173 -    4.021437 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20171002 19:47:46.942" starttime="20171002 19:47:42.925"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171002 19:47:51.957" level="FAIL">
#(UTC) 2017/10/02 19:47:51.953605 -    5.014432 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             83
</msg>
<status status="FAIL" endtime="20171002 19:47:51.958" starttime="20171002 19:47:46.944"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<status status="PASS" endtime="20171002 19:47:56.973" starttime="20171002 19:47:51.960"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171002 19:48:02.018" level="FAIL">
#(UTC) 2017/10/02 19:48:02.015572 -    5.020311 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171002 19:48:02.019" starttime="20171002 19:47:57.006"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171002 19:48:07.036" level="FAIL">
#(UTC) 2017/10/02 19:48:07.032969 -    5.017397 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171002 19:48:07.037" starttime="20171002 19:48:02.022"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171002 19:48:12.083" level="FAIL">
#(UTC) 2017/10/02 19:48:12.068693 -    5.035724 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171002 19:48:12.089" starttime="20171002 19:48:07.040"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171002 19:48:17.150" level="FAIL">
#(UTC) 2017/10/02 19:48:17.135561 -    5.066868 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171002 19:48:17.156" starttime="20171002 19:48:12.103"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171002 19:48:22.215" level="FAIL">
#(UTC) 2017/10/02 19:48:22.200077 -    5.064516 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171002 19:48:22.222" starttime="20171002 19:48:17.170"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171002 19:48:27.283" level="FAIL">
#(UTC) 2017/10/02 19:48:27.267820 -    5.067743 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171002 19:48:27.289" starttime="20171002 19:48:22.236"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171002 19:48:33.324" level="FAIL">
#(UTC) 2017/10/02 19:48:33.320334 -    6.052514 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171002 19:48:33.325" starttime="20171002 19:48:27.303"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171002 19:48:38.342" level="FAIL">
#(UTC) 2017/10/02 19:48:38.339292 -    5.018958 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171002 19:48:38.343" starttime="20171002 19:48:33.328"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171002 19:48:43.361" level="FAIL">
#(UTC) 2017/10/02 19:48:43.358417 -    5.019125 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171002 19:48:43.362" starttime="20171002 19:48:38.346"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171002 19:48:48.381" level="FAIL">
#(UTC) 2017/10/02 19:48:48.377401 -    5.018984 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171002 19:48:48.382" starttime="20171002 19:48:43.365"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171002 19:48:53.427" level="FAIL">
#(UTC) 2017/10/02 19:48:53.411776 -    5.034375 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171002 19:48:53.433" starttime="20171002 19:48:48.385"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171002 19:48:58.491" level="FAIL">
#(UTC) 2017/10/02 19:48:58.476164 -    5.064388 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171002 19:48:58.497" starttime="20171002 19:48:53.446"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171002 19:49:03.575" level="FAIL">
#(UTC) 2017/10/02 19:49:03.567198 -    5.091034 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171002 19:49:03.579" starttime="20171002 19:48:58.511"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171002 19:49:08.605" level="FAIL">
#(UTC) 2017/10/02 19:49:08.603010 -    5.035812 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171002 19:49:08.606" starttime="20171002 19:49:03.589"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171002 19:49:14.623" level="FAIL">
#(UTC) 2017/10/02 19:49:14.620098 -    6.017088 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171002 19:49:14.624" starttime="20171002 19:49:08.608"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171002 19:49:19.669" level="FAIL">
#(UTC) 2017/10/02 19:49:19.654361 -    5.034263 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171002 19:49:19.675" starttime="20171002 19:49:14.626"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171002 19:49:24.706" level="FAIL">
#(UTC) 2017/10/02 19:49:24.703487 -    5.049126 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171002 19:49:24.707" starttime="20171002 19:49:19.688"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171002 19:49:29.726" level="FAIL">
#(UTC) 2017/10/02 19:49:29.722500 -    5.019013 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171002 19:49:29.727" starttime="20171002 19:49:24.710"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171002 19:49:34.773" level="FAIL">
#(UTC) 2017/10/02 19:49:34.758199 -    5.035699 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171002 19:49:34.779" starttime="20171002 19:49:29.730"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171002 19:49:39.849" level="FAIL">
#(UTC) 2017/10/02 19:49:39.834061 -    5.075862 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171002 19:49:39.853" starttime="20171002 19:49:34.795"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171002 19:49:44.884" level="FAIL">
#(UTC) 2017/10/02 19:49:44.881776 -    5.047715 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171002 19:49:44.885" starttime="20171002 19:49:39.868"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171002 19:49:49.929" level="FAIL">
#(UTC) 2017/10/02 19:49:49.912872 -    5.031096 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171002 19:49:49.933" starttime="20171002 19:49:44.888"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171002 19:49:54.964" level="FAIL">
#(UTC) 2017/10/02 19:49:54.961045 -    5.048173 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171002 19:49:54.965" starttime="20171002 19:49:49.947"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171002 19:49:59.980" level="FAIL">
#(UTC) 2017/10/02 19:49:59.977064 -    5.016019 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171002 19:49:59.981" starttime="20171002 19:49:54.967"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171002 19:50:06.022" level="FAIL">
#(UTC) 2017/10/02 19:50:06.006541 -    6.029477 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171002 19:50:06.029" starttime="20171002 19:49:59.983"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171002 19:50:11.106" level="FAIL">
#(UTC) 2017/10/02 19:50:11.076550 -    5.070009 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171002 19:50:11.111" starttime="20171002 19:50:06.045"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171002 19:50:16.166" level="FAIL">
#(UTC) 2017/10/02 19:50:16.151838 -    5.075288 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171002 19:50:16.172" starttime="20171002 19:50:11.121"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171002 19:50:21.227" level="FAIL">
#(UTC) 2017/10/02 19:50:21.214213 -    5.062375 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171002 19:50:21.233" starttime="20171002 19:50:16.185"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171002 19:50:26.291" level="FAIL">
#(UTC) 2017/10/02 19:50:26.276598 -    5.062385 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171002 19:50:26.297" starttime="20171002 19:50:21.247"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171002 19:50:31.358" level="FAIL">
#(UTC) 2017/10/02 19:50:31.342800 -    5.066202 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171002 19:50:31.364" starttime="20171002 19:50:26.311"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171002 19:50:36.394" level="FAIL">
#(UTC) 2017/10/02 19:50:36.390870 -    5.048070 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171002 19:50:36.395" starttime="20171002 19:50:31.376"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171002 19:50:41.410" level="FAIL">
#(UTC) 2017/10/02 19:50:41.407344 -    5.016474 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171002 19:50:41.411" starttime="20171002 19:50:36.397"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171002 19:50:46.452" level="FAIL">
#(UTC) 2017/10/02 19:50:46.437238 -    5.029894 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171002 19:50:46.458" starttime="20171002 19:50:41.413"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171002 19:50:51.490" level="FAIL">
#(UTC) 2017/10/02 19:50:51.487270 -    5.050032 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171002 19:50:51.491" starttime="20171002 19:50:46.471"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171002 19:50:56.536" level="FAIL">
#(UTC) 2017/10/02 19:50:56.518873 -    5.031603 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171002 19:50:56.542" starttime="20171002 19:50:51.493"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171002 19:51:01.601" level="FAIL">
#(UTC) 2017/10/02 19:51:01.585063 -    5.066190 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171002 19:51:01.606" starttime="20171002 19:50:56.557"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171002 19:51:06.637" level="FAIL">
#(UTC) 2017/10/02 19:51:06.634364 -    5.049301 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171002 19:51:06.638" starttime="20171002 19:51:01.619"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171002 19:51:11.679" level="FAIL">
#(UTC) 2017/10/02 19:51:11.664635 -    5.030271 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171002 19:51:11.684" starttime="20171002 19:51:06.641"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171002 19:51:16.757" level="FAIL">
#(UTC) 2017/10/02 19:51:16.727043 -    5.062408 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171002 19:51:16.761" starttime="20171002 19:51:11.698"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171002 19:51:21.785" level="FAIL">
#(UTC) 2017/10/02 19:51:21.782421 -    5.055378 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171002 19:51:21.787" starttime="20171002 19:51:16.770"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171002 19:51:27.803" level="FAIL">
#(UTC) 2017/10/02 19:51:27.800200 -    6.017779 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171002 19:51:27.804" starttime="20171002 19:51:21.789"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171002 19:51:32.849" level="FAIL">
#(UTC) 2017/10/02 19:51:32.832773 -    5.032573 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171002 19:51:32.853" starttime="20171002 19:51:27.806"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171002 19:51:37.885" level="FAIL">
#(UTC) 2017/10/02 19:51:37.881952 -    5.049179 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171002 19:51:37.886" starttime="20171002 19:51:32.868"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171002 19:51:42.905" level="FAIL">
#(UTC) 2017/10/02 19:51:42.902044 -    5.020092 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171002 19:51:42.906" starttime="20171002 19:51:37.888"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171002 19:51:47.922" level="FAIL">
#(UTC) 2017/10/02 19:51:47.919893 -    5.017849 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171002 19:51:47.924" starttime="20171002 19:51:42.909"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171002 19:51:52.969" level="FAIL">
#(UTC) 2017/10/02 19:51:52.954470 -    5.034577 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171002 19:51:52.974" starttime="20171002 19:51:47.926"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171002 19:51:58.033" level="FAIL">
#(UTC) 2017/10/02 19:51:58.017076 -    5.062606 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171002 19:51:58.038" starttime="20171002 19:51:52.989"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171002 19:52:03.103" level="FAIL">
#(UTC) 2017/10/02 19:52:03.089352 -    5.072276 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171002 19:52:03.109" starttime="20171002 19:51:58.055"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171002 19:52:08.167" level="FAIL">
#(UTC) 2017/10/02 19:52:08.152454 -    5.063102 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171002 19:52:08.173" starttime="20171002 19:52:03.124"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171002 19:52:13.203" level="FAIL">
#(UTC) 2017/10/02 19:52:13.199891 -    5.047437 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171002 19:52:13.203" starttime="20171002 19:52:08.187"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171002 19:52:18.217" level="FAIL">
#(UTC) 2017/10/02 19:52:18.214635 -    5.014744 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171002 19:52:18.218" starttime="20171002 19:52:13.206"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171002 19:52:23.277" level="FAIL">
#(UTC) 2017/10/02 19:52:23.246240 -    5.031605 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171002 19:52:23.281" starttime="20171002 19:52:18.221"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171002 19:52:28.334" level="FAIL">
#(UTC) 2017/10/02 19:52:28.318774 -    5.072534 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171002 19:52:28.340" starttime="20171002 19:52:23.292"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171002 19:52:33.370" level="FAIL">
#(UTC) 2017/10/02 19:52:33.367574 -    5.048800 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171002 19:52:33.371" starttime="20171002 19:52:28.353"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171002 19:52:38.387" level="FAIL">
#(UTC) 2017/10/02 19:52:38.384337 -    5.016763 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171002 19:52:38.388" starttime="20171002 19:52:33.374"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171002 19:52:43.442" level="FAIL">
#(UTC) 2017/10/02 19:52:43.426959 -    5.042622 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171002 19:52:43.447" starttime="20171002 19:52:38.391"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171002 19:52:48.477" level="FAIL">
#(UTC) 2017/10/02 19:52:48.474764 -    5.047805 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171002 19:52:48.478" starttime="20171002 19:52:43.461"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171002 19:52:53.520" level="FAIL">
#(UTC) 2017/10/02 19:52:53.505232 -    5.030468 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171002 19:52:53.525" starttime="20171002 19:52:48.481"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171002 19:52:58.561" level="FAIL">
#(UTC) 2017/10/02 19:52:58.557982 -    5.052750 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171002 19:52:58.562" starttime="20171002 19:52:53.539"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171002 19:53:03.605" level="FAIL">
#(UTC) 2017/10/02 19:53:03.590002 -    5.032020 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171002 19:53:03.610" starttime="20171002 19:52:58.564"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171002 19:53:08.658" level="FAIL">
#(UTC) 2017/10/02 19:53:08.643624 -    5.053622 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171002 19:53:08.663" starttime="20171002 19:53:03.624"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171002 19:53:13.694" level="FAIL">
#(UTC) 2017/10/02 19:53:13.691518 -    5.047894 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171002 19:53:13.695" starttime="20171002 19:53:08.678"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171002 19:53:18.714" level="FAIL">
#(UTC) 2017/10/02 19:53:18.711298 -    5.019780 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171002 19:53:18.715" starttime="20171002 19:53:13.698"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171002 19:53:23.758" level="FAIL">
#(UTC) 2017/10/02 19:53:23.743617 -    5.032319 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171002 19:53:23.765" starttime="20171002 19:53:18.717"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171002 19:53:28.837" level="FAIL">
#(UTC) 2017/10/02 19:53:28.808942 -    5.065325 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171002 19:53:28.841" starttime="20171002 19:53:23.778"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171002 19:53:33.866" level="FAIL">
#(UTC) 2017/10/02 19:53:33.863566 -    5.054624 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171002 19:53:33.867" starttime="20171002 19:53:28.852"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171002 19:53:38.910" level="FAIL">
#(UTC) 2017/10/02 19:53:38.894536 -    5.030970 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171002 19:53:38.915" starttime="20171002 19:53:33.870"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171002 19:53:43.971" level="FAIL">
#(UTC) 2017/10/02 19:53:43.957494 -    5.062958 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171002 19:53:43.977" starttime="20171002 19:53:38.929"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171002 19:53:49.009" level="FAIL">
#(UTC) 2017/10/02 19:53:49.006384 -    5.048890 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171002 19:53:49.010" starttime="20171002 19:53:43.992"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171002 19:53:54.055" level="FAIL">
#(UTC) 2017/10/02 19:53:54.039794 -    5.033410 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171002 19:53:54.061" starttime="20171002 19:53:49.012"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171002 19:53:59.120" level="FAIL">
#(UTC) 2017/10/02 19:53:59.105972 -    5.066178 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171002 19:53:59.125" starttime="20171002 19:53:54.075"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171002 19:54:04.157" level="FAIL">
#(UTC) 2017/10/02 19:54:04.153927 -    5.047955 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171002 19:54:04.158" starttime="20171002 19:53:59.137"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171002 19:54:09.202" level="FAIL">
#(UTC) 2017/10/02 19:54:09.186778 -    5.032851 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171002 19:54:09.207" starttime="20171002 19:54:04.161"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171002 19:54:14.237" level="FAIL">
#(UTC) 2017/10/02 19:54:14.234764 -    5.047986 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171002 19:54:14.238" starttime="20171002 19:54:09.221"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171002 19:54:19.286" level="FAIL">
#(UTC) 2017/10/02 19:54:19.270846 -    5.036082 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171002 19:54:19.291" starttime="20171002 19:54:14.241"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171002 19:54:24.321" level="FAIL">
#(UTC) 2017/10/02 19:54:24.318165 -    5.047319 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171002 19:54:24.322" starttime="20171002 19:54:19.305"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171002 19:54:29.366" level="FAIL">
#(UTC) 2017/10/02 19:54:29.351389 -    5.033224 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171002 19:54:29.371" starttime="20171002 19:54:24.324"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171002 19:54:34.443" level="FAIL">
#(UTC) 2017/10/02 19:54:34.413598 -    5.062209 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171002 19:54:34.447" starttime="20171002 19:54:29.385"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171002 19:54:39.472" level="FAIL">
#(UTC) 2017/10/02 19:54:39.468658 -    5.055060 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171002 19:54:39.473" starttime="20171002 19:54:34.457"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171002 19:54:44.518" level="FAIL">
#(UTC) 2017/10/02 19:54:44.504707 -    5.036049 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171002 19:54:44.524" starttime="20171002 19:54:39.476"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171002 19:54:49.562" level="FAIL">
#(UTC) 2017/10/02 19:54:49.559185 -    5.054478 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171002 19:54:49.563" starttime="20171002 19:54:44.539"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171002 19:54:54.607" level="FAIL">
#(UTC) 2017/10/02 19:54:54.592145 -    5.032960 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171002 19:54:54.613" starttime="20171002 19:54:49.565"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171002 19:54:59.671" level="FAIL">
#(UTC) 2017/10/02 19:54:59.657391 -    5.065246 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171002 19:54:59.677" starttime="20171002 19:54:54.626"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171002 19:55:04.710" level="FAIL">
#(UTC) 2017/10/02 19:55:04.707028 -    5.049637 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171002 19:55:04.711" starttime="20171002 19:54:59.690"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171002 19:55:09.729" level="FAIL">
#(UTC) 2017/10/02 19:55:09.726695 -    5.019667 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171002 19:55:09.730" starttime="20171002 19:55:04.714"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171002 19:55:15.773" level="FAIL">
#(UTC) 2017/10/02 19:55:15.759194 -    6.032499 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171002 19:55:15.779" starttime="20171002 19:55:09.733"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171002 19:55:20.835" level="FAIL">
#(UTC) 2017/10/02 19:55:20.820370 -    5.061176 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171002 19:55:20.839" starttime="20171002 19:55:15.794"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171002 19:55:25.868" level="FAIL">
#(UTC) 2017/10/02 19:55:25.865739 -    5.045369 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171002 19:55:25.869" starttime="20171002 19:55:20.854"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171002 19:55:30.885" level="FAIL">
#(UTC) 2017/10/02 19:55:30.881884 -    5.016145 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171002 19:55:30.886" starttime="20171002 19:55:25.872"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171002 19:55:35.900" level="FAIL">
#(UTC) 2017/10/02 19:55:35.897700 -    5.015816 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171002 19:55:35.901" starttime="20171002 19:55:30.888"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171002 19:55:40.958" level="FAIL">
#(UTC) 2017/10/02 19:55:40.929970 -    5.032270 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171002 19:55:40.962" starttime="20171002 19:55:35.904"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171002 19:55:46.017" level="FAIL">
#(UTC) 2017/10/02 19:55:46.001632 -    5.071662 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171002 19:55:46.021" starttime="20171002 19:55:40.972"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171002 19:55:51.079" level="FAIL">
#(UTC) 2017/10/02 19:55:51.064931 -    5.063299 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171002 19:55:51.085" starttime="20171002 19:55:46.034"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171002 19:55:56.144" level="FAIL">
#(UTC) 2017/10/02 19:55:56.129052 -    5.064121 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171002 19:55:56.150" starttime="20171002 19:55:51.098"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171002 19:56:01.207" level="FAIL">
#(UTC) 2017/10/02 19:56:01.193436 -    5.064384 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171002 19:56:01.213" starttime="20171002 19:55:56.164"></status>
</kw>
<msg timestamp="20171002 19:56:01.218" level="FAIL">Keyword 'Check State' failed after retrying for 8 minutes. The last error was: 
#(UTC) 2017/10/02 19:56:01.193436 -    5.064384 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171002 19:56:01.218" starttime="20171002 19:47:26.771"></status>
</kw>
<msg timestamp="20171002 19:56:01.284" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20171002 19:56:01.289" level="INFO">Log level changed from NONE to INFO.</msg>
<kw name="My Ffdc" library="obmc_boot_test">
<doc>Collect FFDC data.</doc>
<msg timestamp="20171002 19:56:01.301" level="INFO">Log level changed from NONE to INFO.</msg>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<arguments>
<arg>ffdc_prefix=9.3.86.161.171002.194726.</arg>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.3.86.161</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20171002 19:56:01.320" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20171002 19:56:01.320" starttime="20171002 19:56:01.319"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20171002 19:56:01.324" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20171002 19:56:14.352" level="INFO">${RC} = 1</msg>
<msg timestamp="20171002 19:56:14.352" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3024ms
</msg>
<status status="PASS" endtime="20171002 19:56:14.352" starttime="20171002 19:56:01.320"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20171002 19:56:14.356" level="INFO">RC: 1
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3024ms
</msg>
<status status="PASS" endtime="20171002 19:56:14.356" starttime="20171002 19:56:14.355"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<msg timestamp="20171002 19:56:14.357" level="FAIL">1 != 0</msg>
<status status="FAIL" endtime="20171002 19:56:14.358" starttime="20171002 19:56:14.357"></status>
</kw>
<status status="FAIL" endtime="20171002 19:56:14.358" starttime="20171002 19:56:01.319"></status>
</kw>
<msg timestamp="20171002 19:56:14.359" level="FAIL">1 != 0</msg>
<status status="FAIL" endtime="20171002 19:56:14.359" starttime="20171002 19:56:01.307"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/state/enumerate</arg>
<arg>quiet=${0}</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171002 19:56:14.416" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171002 19:56:14.417" starttime="20171002 19:56:14.415"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171002 19:56:14.418" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171002 19:56:14.418" starttime="20171002 19:56:14.418"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171002 19:56:14.419" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171002 19:56:14.419" starttime="20171002 19:56:14.418"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171002 19:56:14.420" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171002 19:56:14.420" starttime="20171002 19:56:14.419"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171002 19:56:24.433" level="WARN">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff9c071150&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=10.0)')': /login</msg>
<msg timestamp="20171002 19:56:34.645" level="WARN">Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff9c071850&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=10.0)')': /login</msg>
<msg timestamp="20171002 19:56:45.056" level="WARN">Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff9c071810&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=10.0)')': /login</msg>
<msg timestamp="20171002 19:56:55.069" level="FAIL">ConnectTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Max retries exceeded with url: /login (Caused by ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff9c0715d0&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=10.0)'))</msg>
<status status="FAIL" endtime="20171002 19:56:55.069" starttime="20171002 19:56:14.420"></status>
</kw>
<msg timestamp="20171002 19:56:55.069" level="INFO">${status} = FAIL</msg>
<msg timestamp="20171002 19:56:55.070" level="INFO">${resp} = ConnectTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Max retries exceeded with url: /login (Caused by ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff9c071...</msg>
<status status="PASS" endtime="20171002 19:56:55.070" starttime="20171002 19:56:14.420"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171002 19:56:55.070" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171002 19:56:55.071" level="FAIL">ConnectTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Max retries exceeded with url: /login (Caused by ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff9c0715d0&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=10.0)')): FAIL != PASS</msg>
<status status="FAIL" endtime="20171002 19:56:55.071" starttime="20171002 19:56:55.070"></status>
</kw>
<status status="FAIL" endtime="20171002 19:56:55.071" starttime="20171002 19:56:14.415"></status>
</kw>
<msg timestamp="20171002 19:56:55.071" level="FAIL">Keyword 'Post Login Request' failed after retrying for 40 seconds. The last error was: ConnectTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Max retries exceeded with url: /login (Caused by ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff9c0715d0&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=10.0)')): FAIL != PASS</msg>
<status status="FAIL" endtime="20171002 19:56:55.071" starttime="20171002 19:56:14.414"></status>
</kw>
<status status="FAIL" endtime="20171002 19:56:55.072" starttime="20171002 19:56:14.413"></status>
</kw>
<status status="FAIL" endtime="20171002 19:56:55.072" starttime="20171002 19:56:14.412"></status>
</kw>
<status status="FAIL" endtime="20171002 19:56:55.072" starttime="20171002 19:56:14.408"></status>
</kw>
<msg timestamp="20171002 19:56:55.072" level="FAIL">TypeError: string indices must be integers</msg>
<status status="FAIL" endtime="20171002 19:56:55.072" starttime="20171002 19:56:01.297"></status>
</kw>
<msg timestamp="20171002 19:56:55.078" level="INFO">Log level changed from NONE to INFO.</msg>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20171002 19:56:55.085" starttime="20171002 19:56:55.084"></status>
</kw>
<msg timestamp="20171002 19:56:55.097" level="FAIL">#(UTC) 2017/10/02 19:56:55.096826 -    0.011610 - **ERROR** Boot failures exceed the boot failure threshold:
new_fail:                                         1
boot_fail_threshold:                              0
</msg>
<status status="FAIL" endtime="20171002 19:56:55.097" starttime="20171002 19:47:25.109"></status>
</kw>
<kw type="teardown" name="Obmc Boot Test Teardown" library="obmc_boot_test">
<doc>Clean up after the Main keyword.</doc>
<msg timestamp="20171002 19:56:55.102" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20171002 19:56:55.113" level="INFO">${boot_stack} = </msg>
<msg timestamp="20171002 19:56:55.114" level="INFO">${stack_mode} = normal</msg>
<msg timestamp="20171002 19:56:55.114" level="INFO">${quiet} = 0</msg>
<status status="PASS" endtime="20171002 19:56:55.114" starttime="20171002 19:56:55.098"></status>
</kw>
<status status="FAIL" endtime="20171002 19:56:55.114" starttime="20171002 19:47:25.107"></status>
</kw>
<msg timestamp="20171002 19:56:55.115" level="FAIL">#(UTC) 2017/10/02 19:56:55.096826 -    0.011610 - **ERROR** Boot failures exceed the boot failure threshold:
new_fail:                                         1
boot_fail_threshold:                              0
</msg>
<status status="FAIL" endtime="20171002 19:56:55.115" starttime="20171002 19:47:25.103"></status>
</kw>
<status status="FAIL" endtime="20171002 19:56:55.115" starttime="20171002 19:47:25.101"></status>
</kw>
<kw type="teardown" name="Code Update Test Teardown">
<doc>Do code update test case teardown.</doc>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.3.86.161</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20171002 19:56:55.126" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20171002 19:56:55.127" starttime="20171002 19:56:55.126"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20171002 19:56:55.131" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20171002 19:57:08.162" level="INFO">${RC} = 1</msg>
<msg timestamp="20171002 19:57:08.162" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3022ms
</msg>
<status status="PASS" endtime="20171002 19:57:08.163" starttime="20171002 19:56:55.127"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20171002 19:57:08.185" level="INFO">RC: 1
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3022ms
</msg>
<status status="PASS" endtime="20171002 19:57:08.185" starttime="20171002 19:57:08.180"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<msg timestamp="20171002 19:57:08.189" level="FAIL">1 != 0</msg>
<status status="FAIL" endtime="20171002 19:57:08.189" starttime="20171002 19:57:08.187"></status>
</kw>
<status status="FAIL" endtime="20171002 19:57:08.190" starttime="20171002 19:56:55.126"></status>
</kw>
<msg timestamp="20171002 19:57:08.192" level="FAIL">1 != 0</msg>
<status status="FAIL" endtime="20171002 19:57:08.192" starttime="20171002 19:56:55.117"></status>
</kw>
<status status="FAIL" endtime="20171002 19:57:08.193" starttime="20171002 19:56:55.116"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20171002 19:57:08.196" level="INFO">${FFDC_DIR_PATH_STYLE} = 0</msg>
<status status="PASS" endtime="20171002 19:57:08.196" starttime="20171002 19:57:08.196"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20171002 19:57:08.197" level="INFO">${FFDC_DIR_PATH} = ./</msg>
<status status="PASS" endtime="20171002 19:57:08.197" starttime="20171002 19:57:08.197"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status status="PASS" endtime="20171002 19:57:08.199" starttime="20171002 19:57:08.199"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" endtime="20171002 19:57:08.201" starttime="20171002 19:57:08.200"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20171002 19:57:08.204" html="yes" level="INFO">Directory '&lt;a href="file:///home/fspcibld"&gt;/home/fspcibld&lt;/a&gt;' already exists.</msg>
<status status="PASS" endtime="20171002 19:57:08.204" starttime="20171002 19:57:08.202"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20171002 19:57:08.206" level="FAIL">File '/home/fspcibld/logs/test_history.txt' does not exist.</msg>
<status status="FAIL" endtime="20171002 19:57:08.206" starttime="20171002 19:57:08.205"></status>
</kw>
<msg timestamp="20171002 19:57:08.206" level="INFO">${exist} = False</msg>
<status status="PASS" endtime="20171002 19:57:08.206" starttime="20171002 19:57:08.204"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20171002 19:57:08.208" html="yes" level="INFO">Created file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171002 19:57:08.208" starttime="20171002 19:57:08.207"></status>
</kw>
<status status="PASS" endtime="20171002 19:57:08.208" starttime="20171002 19:57:08.207"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" endtime="20171002 19:57:08.208" starttime="20171002 19:57:08.208"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20171002 19:57:08.211" level="INFO">${cur_time} = 2017-10-02 19:57:08:210836</msg>
<status status="PASS" endtime="20171002 19:57:08.211" starttime="20171002 19:57:08.211"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20171002 19:57:08.212" level="INFO">${cur_time} = 20171002195708210836</msg>
<status status="PASS" endtime="20171002 19:57:08.212" starttime="20171002 19:57:08.212"></status>
</kw>
<msg timestamp="20171002 19:57:08.212" level="INFO">${cur_time} = 20171002195708210836</msg>
<status status="PASS" endtime="20171002 19:57:08.212" starttime="20171002 19:57:08.209"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20171002 19:57:08.213" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171002 19:57:08.213" starttime="20171002 19:57:08.212"></status>
</kw>
<status status="PASS" endtime="20171002 19:57:08.213" starttime="20171002 19:57:08.194"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>Run Keywords</arg>
<arg>Delete Error Logs</arg>
<arg>AND</arg>
<arg>Delete All Dumps</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Delete Error Logs</arg>
<arg>AND</arg>
<arg>Delete All Dumps</arg>
</arguments>
<kw name="Delete Error Logs" library="utils">
<doc>Delete error logs.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}${/}list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171002 19:57:08.218" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171002 19:57:08.219" starttime="20171002 19:57:08.218"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171002 19:57:08.220" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171002 19:57:08.220" starttime="20171002 19:57:08.219"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171002 19:57:08.220" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171002 19:57:08.220" starttime="20171002 19:57:08.220"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171002 19:57:08.221" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171002 19:57:08.221" starttime="20171002 19:57:08.221"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171002 19:57:18.234" level="WARN">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff9ea83110&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=10.0)')': /login</msg>
<msg timestamp="20171002 19:57:28.447" level="WARN">Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff9eaa9d90&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=10.0)')': /login</msg>
<msg timestamp="20171002 19:57:38.859" level="WARN">Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff9c0b9350&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=10.0)')': /login</msg>
<msg timestamp="20171002 19:57:48.871" level="FAIL">ConnectTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Max retries exceeded with url: /login (Caused by ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff9c0b91d0&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=10.0)'))</msg>
<status status="FAIL" endtime="20171002 19:57:48.871" starttime="20171002 19:57:08.222"></status>
</kw>
<msg timestamp="20171002 19:57:48.871" level="INFO">${status} = FAIL</msg>
<msg timestamp="20171002 19:57:48.871" level="INFO">${resp} = ConnectTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Max retries exceeded with url: /login (Caused by ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff9c0b9...</msg>
<status status="PASS" endtime="20171002 19:57:48.871" starttime="20171002 19:57:08.221"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171002 19:57:48.872" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171002 19:57:48.872" level="FAIL">ConnectTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Max retries exceeded with url: /login (Caused by ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff9c0b91d0&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=10.0)')): FAIL != PASS</msg>
<status status="FAIL" endtime="20171002 19:57:48.872" starttime="20171002 19:57:48.872"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171002 19:57:48.873" level="FAIL">Resolving variable '${resp.status_code}' failed: AttributeError: 'unicode' object has no attribute 'status_code'</msg>
<status status="FAIL" endtime="20171002 19:57:48.873" starttime="20171002 19:57:48.872"></status>
</kw>
<status status="FAIL" endtime="20171002 19:57:48.873" starttime="20171002 19:57:08.217"></status>
</kw>
<msg timestamp="20171002 19:57:48.873" level="FAIL">Keyword 'Post Login Request' failed after retrying for 40 seconds. The last error was: Several failures occurred:

1) ConnectTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Max retries exceeded with url: /login (Caused by ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff9c0b91d0&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=10.0)')): FAIL != PASS

2) Resolving variable '${resp.status_code}' failed: AttributeError: 'unicode' object has no attribute 'status_code'</msg>
<status status="FAIL" endtime="20171002 19:57:48.873" starttime="20171002 19:57:08.216"></status>
</kw>
<status status="FAIL" endtime="20171002 19:57:48.874" starttime="20171002 19:57:08.216"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171002 19:57:48.874" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//list</msg>
<status status="PASS" endtime="20171002 19:57:48.874" starttime="20171002 19:57:48.874"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171002 19:57:48.875" starttime="20171002 19:57:48.875"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171002 19:57:58.888" level="WARN">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff9c0c56d0&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=10.0)')': /xyz/openbmc_project/logging/entry//list</msg>
<msg timestamp="20171002 19:58:09.100" level="WARN">Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff9eb80990&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=10.0)')': /xyz/openbmc_project/logging/entry//list</msg>
<msg timestamp="20171002 19:58:19.509" level="WARN">Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff9eb80c90&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=10.0)')': /xyz/openbmc_project/logging/entry//list</msg>
<msg timestamp="20171002 19:58:29.522" level="INFO">${ret} = None</msg>
<msg timestamp="20171002 19:58:29.522" level="FAIL">ConnectTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Max retries exceeded with url: /xyz/openbmc_project/logging/entry//list (Caused by ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff9ea9e690&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=10.0)'))</msg>
<status status="FAIL" endtime="20171002 19:58:29.522" starttime="20171002 19:57:48.875"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171002 19:58:29.523" starttime="20171002 19:58:29.523"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171002 19:58:29.524" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171002 19:58:29.524" starttime="20171002 19:58:29.524"></status>
</kw>
<msg timestamp="20171002 19:58:29.525" level="INFO">${resp} = None</msg>
<status status="FAIL" endtime="20171002 19:58:29.525" starttime="20171002 19:57:08.215"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} == ${HTTP_NOT_FOUND}</arg>
</arguments>
<msg timestamp="20171002 19:58:29.525" level="FAIL">Resolving variable '${resp.status_code}' failed: AttributeError: 'NoneType' object has no attribute 'status_code'</msg>
<status status="FAIL" endtime="20171002 19:58:29.525" starttime="20171002 19:58:29.525"></status>
</kw>
<kw name="Get URL List" library="utils">
<doc>Return list of URLs under given URL.</doc>
<arguments>
<arg>${BMC_LOGGING_ENTRY}</arg>
</arguments>
<assign>
<var>${elog_entries}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${openbmc_url}/list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${url_list}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171002 19:58:29.530" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171002 19:58:29.531" starttime="20171002 19:58:29.530"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171002 19:58:29.531" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171002 19:58:29.531" starttime="20171002 19:58:29.531"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171002 19:58:29.532" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171002 19:58:29.532" starttime="20171002 19:58:29.532"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171002 19:58:29.533" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171002 19:58:29.533" starttime="20171002 19:58:29.532"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171002 19:58:39.546" level="WARN">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff9ea79d10&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=10.0)')': /login</msg>
<msg timestamp="20171002 19:58:49.757" level="WARN">Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff9ea79a90&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=10.0)')': /login</msg>
<msg timestamp="20171002 19:59:00.169" level="WARN">Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff9ea79ed0&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=10.0)')': /login</msg>
<msg timestamp="20171002 19:59:10.185" level="FAIL">ConnectTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Max retries exceeded with url: /login (Caused by ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff9ea79a10&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=10.0)'))</msg>
<status status="FAIL" endtime="20171002 19:59:10.185" starttime="20171002 19:58:29.534"></status>
</kw>
<msg timestamp="20171002 19:59:10.185" level="INFO">${status} = FAIL</msg>
<msg timestamp="20171002 19:59:10.185" level="INFO">${resp} = ConnectTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Max retries exceeded with url: /login (Caused by ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff9ea79...</msg>
<status status="PASS" endtime="20171002 19:59:10.185" starttime="20171002 19:58:29.533"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171002 19:59:10.186" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171002 19:59:10.186" level="FAIL">ConnectTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Max retries exceeded with url: /login (Caused by ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff9ea79a10&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=10.0)')): FAIL != PASS</msg>
<status status="FAIL" endtime="20171002 19:59:10.186" starttime="20171002 19:59:10.186"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171002 19:59:10.187" level="FAIL">Resolving variable '${resp.status_code}' failed: AttributeError: 'unicode' object has no attribute 'status_code'</msg>
<status status="FAIL" endtime="20171002 19:59:10.187" starttime="20171002 19:59:10.187"></status>
</kw>
<status status="FAIL" endtime="20171002 19:59:10.187" starttime="20171002 19:58:29.529"></status>
</kw>
<msg timestamp="20171002 19:59:10.187" level="FAIL">Keyword 'Post Login Request' failed after retrying for 40 seconds. The last error was: Several failures occurred:

1) ConnectTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Max retries exceeded with url: /login (Caused by ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff9ea79a10&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=10.0)')): FAIL != PASS

2) Resolving variable '${resp.status_code}' failed: AttributeError: 'unicode' object has no attribute 'status_code'</msg>
<status status="FAIL" endtime="20171002 19:59:10.188" starttime="20171002 19:58:29.529"></status>
</kw>
<status status="FAIL" endtime="20171002 19:59:10.188" starttime="20171002 19:58:29.528"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171002 19:59:10.188" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//list</msg>
<status status="PASS" endtime="20171002 19:59:10.188" starttime="20171002 19:59:10.188"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171002 19:59:10.189" starttime="20171002 19:59:10.189"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171002 19:59:20.202" level="WARN">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff9c0aa7d0&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=10.0)')': /xyz/openbmc_project/logging/entry//list</msg>
<msg timestamp="20171002 19:59:30.413" level="WARN">Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff9c0aac90&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=10.0)')': /xyz/openbmc_project/logging/entry//list</msg>
<msg timestamp="20171002 19:59:40.829" level="WARN">Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fffa0140f90&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=10.0)')': /xyz/openbmc_project/logging/entry//list</msg>
<msg timestamp="20171002 19:59:50.841" level="INFO">${ret} = None</msg>
<msg timestamp="20171002 19:59:50.841" level="FAIL">ConnectTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Max retries exceeded with url: /xyz/openbmc_project/logging/entry//list (Caused by ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff9eabed50&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=10.0)'))</msg>
<status status="FAIL" endtime="20171002 19:59:50.842" starttime="20171002 19:59:10.189"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171002 19:59:50.842" starttime="20171002 19:59:50.842"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171002 19:59:50.843" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171002 19:59:50.843" starttime="20171002 19:59:50.843"></status>
</kw>
<msg timestamp="20171002 19:59:50.843" level="INFO">${resp} = None</msg>
<status status="FAIL" endtime="20171002 19:59:50.843" starttime="20171002 19:58:29.528"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171002 19:59:50.844" level="FAIL">Resolving variable '${resp.status_code}' failed: AttributeError: 'NoneType' object has no attribute 'status_code'</msg>
<status status="FAIL" endtime="20171002 19:59:50.844" starttime="20171002 19:59:50.844"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171002 19:59:50.845" level="INFO">${content} = None</msg>
<msg timestamp="20171002 19:59:50.845" level="FAIL">Resolving variable '${resp.content}' failed: AttributeError: 'NoneType' object has no attribute 'content'</msg>
<status status="FAIL" endtime="20171002 19:59:50.845" starttime="20171002 19:59:50.844"></status>
</kw>
<msg timestamp="20171002 19:59:50.845" level="INFO">${url_list} = None</msg>
<msg timestamp="20171002 19:59:50.845" level="FAIL">Replacing variables from keyword return value failed: Resolving variable '${content["data"]}' failed: TypeError: 'NoneType' object has no attribute '__getitem__'</msg>
<status status="FAIL" endtime="20171002 19:59:50.845" starttime="20171002 19:58:29.527"></status>
</kw>
<kw name="Sort List" library="Collections">
<doc>Sorts the given list in place.</doc>
<arguments>
<arg>${url_list}</arg>
</arguments>
<msg timestamp="20171002 19:59:50.846" level="FAIL">AttributeError: 'NoneType' object has no attribute 'sort'</msg>
<status status="FAIL" endtime="20171002 19:59:50.846" starttime="20171002 19:59:50.846"></status>
</kw>
<msg timestamp="20171002 19:59:50.846" level="INFO">${elog_entries} = None</msg>
<status status="FAIL" endtime="20171002 19:59:50.846" starttime="20171002 19:58:29.526"></status>
</kw>
<kw type="for" name="${entry} IN [ @{elog_entries} ]">
<msg timestamp="20171002 19:59:50.847" level="FAIL">Value of variable '@{elog_entries}' is not list or list-like.</msg>
<status status="FAIL" endtime="20171002 19:59:50.847" starttime="20171002 19:59:50.847"></status>
</kw>
<status status="FAIL" endtime="20171002 19:59:50.847" starttime="20171002 19:57:08.215"></status>
</kw>
<kw name="Delete All Dumps" library="dump_utils">
<doc>Delete all dumps.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${DUMP_ENTRY_URI}list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171002 19:59:50.850" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171002 19:59:50.851" starttime="20171002 19:59:50.850"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171002 19:59:50.851" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171002 19:59:50.852" starttime="20171002 19:59:50.851"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171002 19:59:50.852" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171002 19:59:50.852" starttime="20171002 19:59:50.852"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171002 19:59:50.853" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171002 19:59:50.853" starttime="20171002 19:59:50.852"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171002 20:00:00.866" level="WARN">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff9c0b9a50&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=10.0)')': /login</msg>
<msg timestamp="20171002 20:00:11.083" level="WARN">Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff9c079450&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=10.0)')': /login</msg>
<msg timestamp="20171002 20:00:21.495" level="WARN">Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff9c0b9e50&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=10.0)')': /login</msg>
<msg timestamp="20171002 20:00:31.507" level="FAIL">ConnectTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Max retries exceeded with url: /login (Caused by ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff9eb80910&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=10.0)'))</msg>
<status status="FAIL" endtime="20171002 20:00:31.507" starttime="20171002 19:59:50.854"></status>
</kw>
<msg timestamp="20171002 20:00:31.507" level="INFO">${status} = FAIL</msg>
<msg timestamp="20171002 20:00:31.507" level="INFO">${resp} = ConnectTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Max retries exceeded with url: /login (Caused by ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff9eb80...</msg>
<status status="PASS" endtime="20171002 20:00:31.507" starttime="20171002 19:59:50.853"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171002 20:00:31.508" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171002 20:00:31.508" level="FAIL">ConnectTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Max retries exceeded with url: /login (Caused by ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff9eb80910&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=10.0)')): FAIL != PASS</msg>
<status status="FAIL" endtime="20171002 20:00:31.508" starttime="20171002 20:00:31.508"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171002 20:00:31.509" level="FAIL">Resolving variable '${resp.status_code}' failed: AttributeError: 'unicode' object has no attribute 'status_code'</msg>
<status status="FAIL" endtime="20171002 20:00:31.509" starttime="20171002 20:00:31.509"></status>
</kw>
<status status="FAIL" endtime="20171002 20:00:31.509" starttime="20171002 19:59:50.850"></status>
</kw>
<msg timestamp="20171002 20:00:31.510" level="FAIL">Keyword 'Post Login Request' failed after retrying for 40 seconds. The last error was: Several failures occurred:

1) ConnectTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Max retries exceeded with url: /login (Caused by ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff9eb80910&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=10.0)')): FAIL != PASS

2) Resolving variable '${resp.status_code}' failed: AttributeError: 'unicode' object has no attribute 'status_code'</msg>
<status status="FAIL" endtime="20171002 20:00:31.510" starttime="20171002 19:59:50.849"></status>
</kw>
<status status="FAIL" endtime="20171002 20:00:31.510" starttime="20171002 19:59:50.848"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171002 20:00:31.510" level="INFO">${base_uri} = /xyz/openbmc_project/dump/entry/list</msg>
<status status="PASS" endtime="20171002 20:00:31.510" starttime="20171002 20:00:31.510"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171002 20:00:31.511" starttime="20171002 20:00:31.511"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171002 20:00:41.523" level="WARN">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff9eb80910&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=10.0)')': /xyz/openbmc_project/dump/entry/list</msg>
<msg timestamp="20171002 20:00:51.739" level="WARN">Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff9eb80fd0&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=10.0)')': /xyz/openbmc_project/dump/entry/list</msg>
<msg timestamp="20171002 20:01:02.151" level="WARN">Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff9eb80490&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=10.0)')': /xyz/openbmc_project/dump/entry/list</msg>
<msg timestamp="20171002 20:01:12.163" level="INFO">${ret} = None</msg>
<msg timestamp="20171002 20:01:12.163" level="FAIL">ConnectTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Max retries exceeded with url: /xyz/openbmc_project/dump/entry/list (Caused by ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff9eb80a90&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=10.0)'))</msg>
<status status="FAIL" endtime="20171002 20:01:12.163" starttime="20171002 20:00:31.511"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171002 20:01:12.164" starttime="20171002 20:01:12.164"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171002 20:01:12.165" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171002 20:01:12.165" starttime="20171002 20:01:12.164"></status>
</kw>
<msg timestamp="20171002 20:01:12.165" level="INFO">${resp} = None</msg>
<status status="FAIL" endtime="20171002 20:01:12.165" starttime="20171002 19:59:50.848"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} == ${HTTP_NOT_FOUND}</arg>
</arguments>
<msg timestamp="20171002 20:01:12.166" level="FAIL">Resolving variable '${resp.status_code}' failed: AttributeError: 'NoneType' object has no attribute 'status_code'</msg>
<status status="FAIL" endtime="20171002 20:01:12.166" starttime="20171002 20:01:12.165"></status>
</kw>
<kw name="Get URL List" library="utils">
<doc>Return list of URLs under given URL.</doc>
<arguments>
<arg>${DUMP_ENTRY_URI}</arg>
</arguments>
<assign>
<var>${dump_entries}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${openbmc_url}/list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${url_list}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171002 20:01:12.170" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171002 20:01:12.171" starttime="20171002 20:01:12.170"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171002 20:01:12.171" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171002 20:01:12.171" starttime="20171002 20:01:12.171"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171002 20:01:12.172" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171002 20:01:12.172" starttime="20171002 20:01:12.172"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171002 20:01:12.173" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171002 20:01:12.173" starttime="20171002 20:01:12.172"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171002 20:01:22.185" level="WARN">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff9eb92450&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=10.0)')': /login</msg>
<msg timestamp="20171002 20:01:32.397" level="WARN">Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff9eb92c90&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=10.0)')': /login</msg>
<msg timestamp="20171002 20:01:42.809" level="WARN">Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff9ea83c10&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=10.0)')': /login</msg>
<msg timestamp="20171002 20:01:52.821" level="FAIL">ConnectTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Max retries exceeded with url: /login (Caused by ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff9ea83590&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=10.0)'))</msg>
<status status="FAIL" endtime="20171002 20:01:52.821" starttime="20171002 20:01:12.173"></status>
</kw>
<msg timestamp="20171002 20:01:52.821" level="INFO">${status} = FAIL</msg>
<msg timestamp="20171002 20:01:52.821" level="INFO">${resp} = ConnectTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Max retries exceeded with url: /login (Caused by ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff9ea83...</msg>
<status status="PASS" endtime="20171002 20:01:52.821" starttime="20171002 20:01:12.173"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171002 20:01:52.822" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171002 20:01:52.822" level="FAIL">ConnectTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Max retries exceeded with url: /login (Caused by ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff9ea83590&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=10.0)')): FAIL != PASS</msg>
<status status="FAIL" endtime="20171002 20:01:52.822" starttime="20171002 20:01:52.822"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171002 20:01:52.823" level="FAIL">Resolving variable '${resp.status_code}' failed: AttributeError: 'unicode' object has no attribute 'status_code'</msg>
<status status="FAIL" endtime="20171002 20:01:52.823" starttime="20171002 20:01:52.823"></status>
</kw>
<status status="FAIL" endtime="20171002 20:01:52.823" starttime="20171002 20:01:12.169"></status>
</kw>
<msg timestamp="20171002 20:01:52.823" level="FAIL">Keyword 'Post Login Request' failed after retrying for 40 seconds. The last error was: Several failures occurred:

1) ConnectTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Max retries exceeded with url: /login (Caused by ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff9ea83590&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=10.0)')): FAIL != PASS

2) Resolving variable '${resp.status_code}' failed: AttributeError: 'unicode' object has no attribute 'status_code'</msg>
<status status="FAIL" endtime="20171002 20:01:52.824" starttime="20171002 20:01:12.169"></status>
</kw>
<status status="FAIL" endtime="20171002 20:01:52.824" starttime="20171002 20:01:12.168"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171002 20:01:52.824" level="INFO">${base_uri} = /xyz/openbmc_project/dump/entry//list</msg>
<status status="PASS" endtime="20171002 20:01:52.824" starttime="20171002 20:01:52.824"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171002 20:01:52.825" starttime="20171002 20:01:52.825"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171002 20:02:02.838" level="WARN">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff9ea83c10&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=10.0)')': /xyz/openbmc_project/dump/entry//list</msg>
<msg timestamp="20171002 20:02:13.049" level="WARN">Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff9c0aa7d0&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=10.0)')': /xyz/openbmc_project/dump/entry//list</msg>
<msg timestamp="20171002 20:02:23.461" level="WARN">Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff9c0aad10&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=10.0)')': /xyz/openbmc_project/dump/entry//list</msg>
<msg timestamp="20171002 20:02:33.472" level="INFO">${ret} = None</msg>
<msg timestamp="20171002 20:02:33.472" level="FAIL">ConnectTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Max retries exceeded with url: /xyz/openbmc_project/dump/entry//list (Caused by ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff9ea5e850&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=10.0)'))</msg>
<status status="FAIL" endtime="20171002 20:02:33.472" starttime="20171002 20:01:52.825"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171002 20:02:33.473" starttime="20171002 20:02:33.473"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171002 20:02:33.474" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171002 20:02:33.474" starttime="20171002 20:02:33.474"></status>
</kw>
<msg timestamp="20171002 20:02:33.474" level="INFO">${resp} = None</msg>
<status status="FAIL" endtime="20171002 20:02:33.474" starttime="20171002 20:01:12.167"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171002 20:02:33.475" level="FAIL">Resolving variable '${resp.status_code}' failed: AttributeError: 'NoneType' object has no attribute 'status_code'</msg>
<status status="FAIL" endtime="20171002 20:02:33.475" starttime="20171002 20:02:33.474"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171002 20:02:33.475" level="INFO">${content} = None</msg>
<msg timestamp="20171002 20:02:33.475" level="FAIL">Resolving variable '${resp.content}' failed: AttributeError: 'NoneType' object has no attribute 'content'</msg>
<status status="FAIL" endtime="20171002 20:02:33.476" starttime="20171002 20:02:33.475"></status>
</kw>
<msg timestamp="20171002 20:02:33.476" level="INFO">${url_list} = None</msg>
<msg timestamp="20171002 20:02:33.476" level="FAIL">Replacing variables from keyword return value failed: Resolving variable '${content["data"]}' failed: TypeError: 'NoneType' object has no attribute '__getitem__'</msg>
<status status="FAIL" endtime="20171002 20:02:33.476" starttime="20171002 20:01:12.166"></status>
</kw>
<kw name="Sort List" library="Collections">
<doc>Sorts the given list in place.</doc>
<arguments>
<arg>${url_list}</arg>
</arguments>
<msg timestamp="20171002 20:02:33.477" level="FAIL">AttributeError: 'NoneType' object has no attribute 'sort'</msg>
<status status="FAIL" endtime="20171002 20:02:33.477" starttime="20171002 20:02:33.476"></status>
</kw>
<msg timestamp="20171002 20:02:33.477" level="INFO">${dump_entries} = None</msg>
<status status="FAIL" endtime="20171002 20:02:33.477" starttime="20171002 20:01:12.166"></status>
</kw>
<kw type="for" name="${entry} IN [ @{dump_entries} ]">
<msg timestamp="20171002 20:02:33.477" level="FAIL">Value of variable '@{dump_entries}' is not list or list-like.</msg>
<status status="FAIL" endtime="20171002 20:02:33.477" starttime="20171002 20:02:33.477"></status>
</kw>
<status status="FAIL" endtime="20171002 20:02:33.478" starttime="20171002 19:59:50.847"></status>
</kw>
<status status="FAIL" endtime="20171002 20:02:33.478" starttime="20171002 19:57:08.214"></status>
</kw>
<status status="FAIL" endtime="20171002 20:02:33.478" starttime="20171002 19:57:08.214"></status>
</kw>
<status status="FAIL" endtime="20171002 20:02:33.478" starttime="20171002 19:56:55.116"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'PASS'</arg>
<arg>Check Error And Collect FFDC</arg>
</arguments>
<status status="PASS" endtime="20171002 20:02:33.479" starttime="20171002 20:02:33.479"></status>
</kw>
<status status="FAIL" endtime="20171002 20:02:33.479" starttime="20171002 19:56:55.115">Several failures occurred:

1) 1 != 0

2) Keyword 'Post Login Request' failed after retrying for 40 seconds. The last error was: Several failures occurred:

1) ConnectTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Max retries exceeded with url: /login (Caused by ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff9c0b91d0&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=10.0)')): FAIL != PASS

2) Resolving variable '${resp.status_code}' failed: AttributeError: 'unicode' object has no attribute 'status_code'

3) ConnectTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Max retries exceeded with url: /xyz/openbmc_project/logging/entry//list (Caused by ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff9ea9e690&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=10.0)'))

    [ Message content over the limit has been removed. ]
...Connection to 9.3.86.161 timed out. (connect timeout=10.0)')): FAIL != PASS

2) Resolving variable '${resp.status_code}' failed: AttributeError: 'unicode' object has no attribute 'status_code'

9) ConnectTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Max retries exceeded with url: /xyz/openbmc_project/dump/entry/list (Caused by ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff9eb80a90&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=10.0)'))

10) Resolving variable '${resp.status_code}' failed: AttributeError: 'NoneType' object has no attribute 'status_code'

11) Replacing variables from keyword return value failed: Resolving variable '${content["data"]}' failed: TypeError: 'NoneType' object has no attribute '__getitem__'

12) AttributeError: 'NoneType' object has no attribute 'sort'

13) Value of variable '@{dump_entries}' is not list or list-like.</status>
</kw>
<doc>Do a BMC code update by uploading image on BMC via REST.</doc>
<tags>
<tag>REST_BMC_Code_Update</tag>
</tags>
<status status="FAIL" endtime="20171002 20:02:33.479" critical="yes" starttime="20171002 19:43:34.648">#(UTC) 2017/10/02 19:56:55.096826 -    0.011610 - **ERROR** Boot failures exceed the boot failure threshold:
new_fail:                                         1
boot_fail_threshold:                              0


Also teardown failed:
Several failures occurred:

1) 1 != 0

2) Keyword 'Post Login Request' failed after retrying for 40 seconds. The last error was: Several failures occurred:

1) ConnectTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Max retries exceeded with url: /login (Caused by ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff9c0b91d0&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=10.0)')): FAIL != PASS

2) Resolving variable '${resp.status_code}' failed: AttributeError: 'unicode' object has no attribute 'status_code'

3) ConnectTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Max retries exceeded with url: /xyz/openbmc_project/logging/entry//list (Caused by ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff9ea9e690&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=10.0)'))

    [ Message content over the limit has been removed. ]
...Connection to 9.3.86.161 timed out. (connect timeout=10.0)')): FAIL != PASS

2) Resolving variable '${resp.status_code}' failed: AttributeError: 'unicode' object has no attribute 'status_code'

9) ConnectTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Max retries exceeded with url: /xyz/openbmc_project/dump/entry/list (Caused by ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff9eb80a90&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=10.0)'))

10) Resolving variable '${resp.status_code}' failed: AttributeError: 'NoneType' object has no attribute 'status_code'

11) Replacing variables from keyword return value failed: Resolving variable '${content["data"]}' failed: TypeError: 'NoneType' object has no attribute '__getitem__'

12) AttributeError: 'NoneType' object has no attribute 'sort'

13) Value of variable '@{dump_entries}' is not list or list-like.</status>
</test>
<doc>Update the BMC code on a target BMC.
Execution Method:
python -m robot -v OPENBMC_HOST:&lt;hostname&gt;
-v IMAGE_FILE_PATH:&lt;path/*.tar&gt; bmc_code_update.robot</doc>
<status status="FAIL" endtime="20171002 20:02:33.481" starttime="20171002 19:43:33.688"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="0">Critical Tests</stat>
<stat fail="1" pass="0">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">REST_BMC_Code_Update</stat>
</tag>
<suite>
<stat fail="1" id="s1" name="Bmc Code Update" pass="0">Bmc Code Update</stat>
</suite>
</statistics>
<errors>
<msg timestamp="20171002 19:56:24.433" level="WARN">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff9c071150&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=10.0)')': /login</msg>
<msg timestamp="20171002 19:56:34.645" level="WARN">Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff9c071850&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=10.0)')': /login</msg>
<msg timestamp="20171002 19:56:45.056" level="WARN">Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff9c071810&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=10.0)')': /login</msg>
<msg timestamp="20171002 19:57:18.234" level="WARN">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff9ea83110&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=10.0)')': /login</msg>
<msg timestamp="20171002 19:57:28.447" level="WARN">Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff9eaa9d90&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=10.0)')': /login</msg>
<msg timestamp="20171002 19:57:38.859" level="WARN">Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff9c0b9350&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=10.0)')': /login</msg>
<msg timestamp="20171002 19:57:58.888" level="WARN">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff9c0c56d0&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=10.0)')': /xyz/openbmc_project/logging/entry//list</msg>
<msg timestamp="20171002 19:58:09.100" level="WARN">Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff9eb80990&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=10.0)')': /xyz/openbmc_project/logging/entry//list</msg>
<msg timestamp="20171002 19:58:19.509" level="WARN">Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff9eb80c90&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=10.0)')': /xyz/openbmc_project/logging/entry//list</msg>
<msg timestamp="20171002 19:58:39.546" level="WARN">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff9ea79d10&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=10.0)')': /login</msg>
<msg timestamp="20171002 19:58:49.757" level="WARN">Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff9ea79a90&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=10.0)')': /login</msg>
<msg timestamp="20171002 19:59:00.169" level="WARN">Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff9ea79ed0&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=10.0)')': /login</msg>
<msg timestamp="20171002 19:59:20.202" level="WARN">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff9c0aa7d0&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=10.0)')': /xyz/openbmc_project/logging/entry//list</msg>
<msg timestamp="20171002 19:59:30.413" level="WARN">Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff9c0aac90&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=10.0)')': /xyz/openbmc_project/logging/entry//list</msg>
<msg timestamp="20171002 19:59:40.829" level="WARN">Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fffa0140f90&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=10.0)')': /xyz/openbmc_project/logging/entry//list</msg>
<msg timestamp="20171002 20:00:00.866" level="WARN">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff9c0b9a50&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=10.0)')': /login</msg>
<msg timestamp="20171002 20:00:11.083" level="WARN">Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff9c079450&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=10.0)')': /login</msg>
<msg timestamp="20171002 20:00:21.495" level="WARN">Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff9c0b9e50&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=10.0)')': /login</msg>
<msg timestamp="20171002 20:00:41.523" level="WARN">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff9eb80910&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=10.0)')': /xyz/openbmc_project/dump/entry/list</msg>
<msg timestamp="20171002 20:00:51.739" level="WARN">Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff9eb80fd0&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=10.0)')': /xyz/openbmc_project/dump/entry/list</msg>
<msg timestamp="20171002 20:01:02.151" level="WARN">Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff9eb80490&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=10.0)')': /xyz/openbmc_project/dump/entry/list</msg>
<msg timestamp="20171002 20:01:22.185" level="WARN">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff9eb92450&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=10.0)')': /login</msg>
<msg timestamp="20171002 20:01:32.397" level="WARN">Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff9eb92c90&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=10.0)')': /login</msg>
<msg timestamp="20171002 20:01:42.809" level="WARN">Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff9ea83c10&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=10.0)')': /login</msg>
<msg timestamp="20171002 20:02:02.838" level="WARN">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff9ea83c10&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=10.0)')': /xyz/openbmc_project/dump/entry//list</msg>
<msg timestamp="20171002 20:02:13.049" level="WARN">Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff9c0aa7d0&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=10.0)')': /xyz/openbmc_project/dump/entry//list</msg>
<msg timestamp="20171002 20:02:23.461" level="WARN">Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff9c0aad10&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=10.0)')': /xyz/openbmc_project/dump/entry//list</msg>
</errors>
</robot>
