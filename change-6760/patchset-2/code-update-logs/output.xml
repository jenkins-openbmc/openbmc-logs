<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170922 03:15:00.262" generator="Robot 3.0.2 (Python 2.7.12 on linux2)">
<suite source="/home/fspcibld/openbmc-test-automation/extended/code_update/bmc_code_update.robot" id="s1" name="Bmc Code Update">
<test id="s1-t1" name="REST BMC Code Update">
<kw type="setup" name="Code Update Setup">
<doc>Do code update test case setup.</doc>
<kw name="Delete All Dumps" library="dump_utils">
<doc>Delete all dumps.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${DUMP_ENTRY_URI}list</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170922 03:15:01.464" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.185.156, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170922 03:15:01.464" starttime="20170922 03:15:01.463"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170922 03:15:01.465" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170922 03:15:01.466" starttime="20170922 03:15:01.465"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170922 03:15:01.466" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170922 03:15:01.466" starttime="20170922 03:15:01.466"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170922 03:15:01.467" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170922 03:15:01.467" starttime="20170922 03:15:01.466"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170922 03:15:01.660" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170922 03:15:01.660" starttime="20170922 03:15:01.468"></status>
</kw>
<msg timestamp="20170922 03:15:01.660" level="INFO">${status} = PASS</msg>
<msg timestamp="20170922 03:15:01.660" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170922 03:15:01.660" starttime="20170922 03:15:01.467"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170922 03:15:01.661" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170922 03:15:01.661" starttime="20170922 03:15:01.660"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170922 03:15:01.662" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170922 03:15:01.662" starttime="20170922 03:15:01.661"></status>
</kw>
<status status="PASS" endtime="20170922 03:15:01.662" starttime="20170922 03:15:01.462"></status>
</kw>
<status status="PASS" endtime="20170922 03:15:01.662" starttime="20170922 03:15:01.462"></status>
</kw>
<status status="PASS" endtime="20170922 03:15:01.662" starttime="20170922 03:15:01.461"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170922 03:15:01.663" level="INFO">${base_uri} = /xyz/openbmc_project/dump/entry/list</msg>
<status status="PASS" endtime="20170922 03:15:01.663" starttime="20170922 03:15:01.662"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170922 03:15:01.663" starttime="20170922 03:15:01.663"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170922 03:15:01.720" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/dump/entry/list, headers=None json=None</msg>
<msg timestamp="20170922 03:15:01.720" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170922 03:15:01.720" starttime="20170922 03:15:01.664"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170922 03:15:01.721" starttime="20170922 03:15:01.721"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170922 03:15:01.722" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170922 03:15:01.722" starttime="20170922 03:15:01.721"></status>
</kw>
<msg timestamp="20170922 03:15:01.722" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170922 03:15:01.722" starttime="20170922 03:15:01.461"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} == ${HTTP_NOT_FOUND}</arg>
</arguments>
<msg timestamp="20170922 03:15:01.723" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170922 03:15:01.723" starttime="20170922 03:15:01.722"></status>
</kw>
<status status="PASS" endtime="20170922 03:15:01.723" starttime="20170922 03:15:01.460"></status>
</kw>
<status status="PASS" endtime="20170922 03:15:01.723" starttime="20170922 03:15:01.459"></status>
</kw>
<kw name="Upload And Activate Image" library="code_update_utils">
<doc>Upload an image to the BMC and activate it with REST.</doc>
<arguments>
<arg>${IMAGE_FILE_PATH}</arg>
</arguments>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<msg timestamp="20170922 03:15:01.724" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/obmc-phosphor-image-witherspoon.ubi.mtd.tar"&gt;/home/fspcibld/obmc-phosphor-image-witherspoon.ubi.mtd.tar&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20170922 03:15:01.724" starttime="20170922 03:15:01.724"></status>
</kw>
<kw name="Get Version Tar" library="code_update_utils">
<doc>Read the image version from the MANIFEST inside the tarball.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<assign>
<var>${image_version}</var>
</assign>
<msg timestamp="20170922 03:15:01.744" level="INFO">${image_version} = v1.99.10-21-g1ed0edf</msg>
<status status="PASS" endtime="20170922 03:15:01.744" starttime="20170922 03:15:01.725"></status>
</kw>
<kw name="Get Binary File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<assign>
<var>${image_data}</var>
</assign>
<msg timestamp="20170922 03:15:01.745" html="yes" level="INFO">Getting file '&lt;a href="file:///home/fspcibld/obmc-phosphor-image-witherspoon.ubi.mtd.tar"&gt;/home/fspcibld/obmc-phosphor-image-witherspoon.ubi.mtd.tar&lt;/a&gt;'.</msg>
<msg timestamp="20170922 03:15:12.794" level="INFO">${image_data} = image-u-boot0000644000175100017520000113170013151356420013160 0...</msg>
<status status="PASS" endtime="20170922 03:15:12.795" starttime="20170922 03:15:01.744"></status>
</kw>
<kw name="Upload Image To BMC" library="rest_client">
<arguments>
<arg>/upload/image</arg>
<arg>data=${image_data}</arg>
</arguments>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170922 03:15:12.798" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.185.156, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170922 03:15:12.799" starttime="20170922 03:15:12.798"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170922 03:15:12.799" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170922 03:15:12.799" starttime="20170922 03:15:12.799"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170922 03:15:12.800" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170922 03:15:12.800" starttime="20170922 03:15:12.800"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170922 03:15:12.801" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170922 03:15:12.801" starttime="20170922 03:15:12.801"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170922 03:15:12.984" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170922 03:15:12.984" starttime="20170922 03:15:12.802"></status>
</kw>
<msg timestamp="20170922 03:15:12.984" level="INFO">${status} = PASS</msg>
<msg timestamp="20170922 03:15:12.984" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170922 03:15:12.984" starttime="20170922 03:15:12.801"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170922 03:15:12.985" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170922 03:15:12.985" starttime="20170922 03:15:12.984"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170922 03:15:12.985" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170922 03:15:12.986" starttime="20170922 03:15:12.985"></status>
</kw>
<status status="PASS" endtime="20170922 03:15:12.986" starttime="20170922 03:15:12.797"></status>
</kw>
<status status="PASS" endtime="20170922 03:15:12.986" starttime="20170922 03:15:12.797"></status>
</kw>
<status status="PASS" endtime="20170922 03:15:12.986" starttime="20170922 03:15:12.796"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170922 03:15:12.986" level="INFO">${base_uri} = /upload/image</msg>
<status status="PASS" endtime="20170922 03:15:12.986" starttime="20170922 03:15:12.986"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/octet-stream</arg>
<arg>Accept=application/octet-stream</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170922 03:15:12.987" level="INFO">${headers} = {u'Content-Type': u'application/octet-stream', u'Accept': u'application/octet-stream'}</msg>
<status status="PASS" endtime="20170922 03:15:12.987" starttime="20170922 03:15:12.987"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170922 03:15:12.988" starttime="20170922 03:15:12.987"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170922 03:15:12.988" starttime="20170922 03:15:12.988"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170922 03:15:18.949" level="INFO">Post Request using : alias=openbmc, uri=/upload/image, data=&lt;application/octet-stream&gt;, headers={u'Content-Type': u'application/octet-stream', u'Accept': u'application/octet-stream'}, files=None, allow_redirects=True </msg>
<msg timestamp="20170922 03:15:18.950" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170922 03:15:18.950" starttime="20170922 03:15:12.989"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170922 03:15:18.951" starttime="20170922 03:15:18.950"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ret.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170922 03:15:18.951" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170922 03:15:18.951" starttime="20170922 03:15:18.951"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170922 03:15:18.952" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170922 03:15:18.952" starttime="20170922 03:15:18.952"></status>
</kw>
<status status="PASS" endtime="20170922 03:15:18.952" starttime="20170922 03:15:12.795"></status>
</kw>
<kw name="Verify Image Upload" library="code_update_utils">
<doc>Verify the image was uploaded correctly and that it created</doc>
<arguments>
<arg>${image_version}</arg>
</arguments>
<assign>
<var>${ret}</var>
<var>${version_id}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170922 03:15:18.959" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170922 03:15:18.960" starttime="20170922 03:15:18.959"></status>
</kw>
<msg timestamp="20170922 03:15:18.960" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170922 03:15:18.960" starttime="20170922 03:15:18.959"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170922 03:15:18.961" starttime="20170922 03:15:18.961"></status>
</kw>
<status status="PASS" endtime="20170922 03:15:18.961" starttime="20170922 03:15:18.960"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170922 03:15:18.962" starttime="20170922 03:15:18.961"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170922 03:15:18.963" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170922 03:15:18.963" starttime="20170922 03:15:18.963"></status>
</kw>
<msg timestamp="20170922 03:15:18.963" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170922 03:15:18.963" starttime="20170922 03:15:18.962"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170922 03:15:18.965" starttime="20170922 03:15:18.965"></status>
</kw>
<status status="PASS" endtime="20170922 03:15:18.965" starttime="20170922 03:15:18.964"></status>
</kw>
<status status="PASS" endtime="20170922 03:15:18.965" starttime="20170922 03:15:18.963"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170922 03:15:18.966" level="INFO">Logging into '9.3.185.156:22' as 'root'.</msg>
<msg timestamp="20170922 03:15:21.010" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170922 03:15:21.010" starttime="20170922 03:15:18.966"></status>
</kw>
<status status="PASS" endtime="20170922 03:15:21.010" starttime="20170922 03:15:18.958"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>ls -d /tmp/images/*/</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170922 03:15:21.020" level="INFO">Executing command 'ls -d /tmp/images/*/'.</msg>
<msg timestamp="20170922 03:15:21.076" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170922 03:15:21.077" level="INFO">${stdout} = /tmp/images/239edc7f/</msg>
<msg timestamp="20170922 03:15:21.077" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170922 03:15:21.077" starttime="20170922 03:15:21.020"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170922 03:15:21.077" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170922 03:15:21.077" starttime="20170922 03:15:21.077"></status>
</kw>
<status status="PASS" endtime="20170922 03:15:21.078" starttime="20170922 03:15:21.019"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170922 03:15:21.084" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170922 03:15:21.084" starttime="20170922 03:15:21.083"></status>
</kw>
<msg timestamp="20170922 03:15:21.084" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170922 03:15:21.084" starttime="20170922 03:15:21.083"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170922 03:15:21.085" starttime="20170922 03:15:21.085"></status>
</kw>
<status status="PASS" endtime="20170922 03:15:21.085" starttime="20170922 03:15:21.084"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170922 03:15:21.086" starttime="20170922 03:15:21.086"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170922 03:15:21.087" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170922 03:15:21.087" starttime="20170922 03:15:21.087"></status>
</kw>
<msg timestamp="20170922 03:15:21.087" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170922 03:15:21.087" starttime="20170922 03:15:21.086"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170922 03:15:21.089" starttime="20170922 03:15:21.089"></status>
</kw>
<status status="PASS" endtime="20170922 03:15:21.089" starttime="20170922 03:15:21.088"></status>
</kw>
<status status="PASS" endtime="20170922 03:15:21.089" starttime="20170922 03:15:21.088"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170922 03:15:21.090" level="INFO">Logging into '9.3.185.156:22' as 'root'.</msg>
<msg timestamp="20170922 03:15:22.782" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170922 03:15:22.783" starttime="20170922 03:15:21.090"></status>
</kw>
<status status="PASS" endtime="20170922 03:15:22.783" starttime="20170922 03:15:21.082"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>cat /tmp/images/239edc7f/MANIFEST | grep "version="</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170922 03:15:22.792" level="INFO">Executing command 'cat /tmp/images/239edc7f/MANIFEST | grep "version="'.</msg>
<msg timestamp="20170922 03:15:22.889" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170922 03:15:22.889" level="INFO">${stdout} = version=v1.99.10-21-g1ed0edf</msg>
<msg timestamp="20170922 03:15:22.889" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170922 03:15:22.889" starttime="20170922 03:15:22.792"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170922 03:15:22.890" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170922 03:15:22.890" starttime="20170922 03:15:22.890"></status>
</kw>
<status status="PASS" endtime="20170922 03:15:22.890" starttime="20170922 03:15:22.791"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170922 03:15:22.896" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170922 03:15:22.896" starttime="20170922 03:15:22.896"></status>
</kw>
<msg timestamp="20170922 03:15:22.896" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170922 03:15:22.896" starttime="20170922 03:15:22.895"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170922 03:15:22.898" starttime="20170922 03:15:22.897"></status>
</kw>
<status status="PASS" endtime="20170922 03:15:22.898" starttime="20170922 03:15:22.897"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170922 03:15:22.899" starttime="20170922 03:15:22.898"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170922 03:15:22.900" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170922 03:15:22.900" starttime="20170922 03:15:22.899"></status>
</kw>
<msg timestamp="20170922 03:15:22.900" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170922 03:15:22.900" starttime="20170922 03:15:22.899"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170922 03:15:22.902" starttime="20170922 03:15:22.901"></status>
</kw>
<status status="PASS" endtime="20170922 03:15:22.902" starttime="20170922 03:15:22.901"></status>
</kw>
<status status="PASS" endtime="20170922 03:15:22.902" starttime="20170922 03:15:22.900"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170922 03:15:22.902" level="INFO">Logging into '9.3.185.156:22' as 'root'.</msg>
<msg timestamp="20170922 03:15:24.555" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170922 03:15:24.555" starttime="20170922 03:15:22.902"></status>
</kw>
<status status="PASS" endtime="20170922 03:15:24.556" starttime="20170922 03:15:22.895"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170922 03:15:24.562" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170922 03:15:24.563" starttime="20170922 03:15:24.562"></status>
</kw>
<msg timestamp="20170922 03:15:24.563" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170922 03:15:24.563" starttime="20170922 03:15:24.562"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170922 03:15:24.564" starttime="20170922 03:15:24.564"></status>
</kw>
<status status="PASS" endtime="20170922 03:15:24.564" starttime="20170922 03:15:24.563"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170922 03:15:24.565" starttime="20170922 03:15:24.564"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170922 03:15:24.566" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170922 03:15:24.566" starttime="20170922 03:15:24.565"></status>
</kw>
<msg timestamp="20170922 03:15:24.566" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170922 03:15:24.566" starttime="20170922 03:15:24.565"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170922 03:15:24.568" starttime="20170922 03:15:24.567"></status>
</kw>
<status status="PASS" endtime="20170922 03:15:24.568" starttime="20170922 03:15:24.567"></status>
</kw>
<status status="PASS" endtime="20170922 03:15:24.568" starttime="20170922 03:15:24.566"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170922 03:15:24.568" level="INFO">Logging into '9.3.185.156:22' as 'root'.</msg>
<msg timestamp="20170922 03:15:26.233" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170922 03:15:26.233" starttime="20170922 03:15:24.568"></status>
</kw>
<status status="PASS" endtime="20170922 03:15:26.233" starttime="20170922 03:15:24.560"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>cat /tmp/images/239edc7f/MANIFEST | grep "purpose="</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170922 03:15:26.244" level="INFO">Executing command 'cat /tmp/images/239edc7f/MANIFEST | grep "purpose="'.</msg>
<msg timestamp="20170922 03:15:26.331" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170922 03:15:26.331" level="INFO">${stdout} = purpose=xyz.openbmc_project.Software.Version.VersionPurpose.BMC</msg>
<msg timestamp="20170922 03:15:26.331" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170922 03:15:26.331" starttime="20170922 03:15:26.243"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170922 03:15:26.332" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170922 03:15:26.332" starttime="20170922 03:15:26.331"></status>
</kw>
<status status="PASS" endtime="20170922 03:15:26.332" starttime="20170922 03:15:26.243"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/239edc7f</arg>
<arg>Activation</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170922 03:15:26.344" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.185.156, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170922 03:15:26.345" starttime="20170922 03:15:26.344"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170922 03:15:26.346" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170922 03:15:26.346" starttime="20170922 03:15:26.345"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170922 03:15:26.346" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170922 03:15:26.346" starttime="20170922 03:15:26.346"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170922 03:15:26.347" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170922 03:15:26.347" starttime="20170922 03:15:26.347"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170922 03:15:26.526" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170922 03:15:26.526" starttime="20170922 03:15:26.348"></status>
</kw>
<msg timestamp="20170922 03:15:26.527" level="INFO">${status} = PASS</msg>
<msg timestamp="20170922 03:15:26.527" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170922 03:15:26.527" starttime="20170922 03:15:26.347"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170922 03:15:26.527" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170922 03:15:26.528" starttime="20170922 03:15:26.527"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170922 03:15:26.528" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170922 03:15:26.528" starttime="20170922 03:15:26.528"></status>
</kw>
<status status="PASS" endtime="20170922 03:15:26.528" starttime="20170922 03:15:26.343"></status>
</kw>
<status status="PASS" endtime="20170922 03:15:26.529" starttime="20170922 03:15:26.343"></status>
</kw>
<status status="PASS" endtime="20170922 03:15:26.529" starttime="20170922 03:15:26.342"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170922 03:15:26.529" level="INFO">${base_uri} = /xyz/openbmc_project/software/239edc7f/attr/Activation</msg>
<status status="PASS" endtime="20170922 03:15:26.529" starttime="20170922 03:15:26.529"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170922 03:15:26.530" starttime="20170922 03:15:26.530"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170922 03:15:26.647" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/239edc7f/attr/Activation, headers=None json=None</msg>
<msg timestamp="20170922 03:15:26.647" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170922 03:15:26.647" starttime="20170922 03:15:26.530"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170922 03:15:26.648" starttime="20170922 03:15:26.648"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170922 03:15:26.649" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170922 03:15:26.649" starttime="20170922 03:15:26.649"></status>
</kw>
<msg timestamp="20170922 03:15:26.649" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170922 03:15:26.649" starttime="20170922 03:15:26.341"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170922 03:15:26.650" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170922 03:15:26.650" starttime="20170922 03:15:26.649"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170922 03:15:26.650" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.Software.Activation.Activations.Failed", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170922 03:15:26.650" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170922 03:15:26.651" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.Software.Activation.Activations.Failed'}</msg>
<status status="PASS" endtime="20170922 03:15:26.651" starttime="20170922 03:15:26.650"></status>
</kw>
<status status="PASS" endtime="20170922 03:15:26.651" starttime="20170922 03:15:26.341"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/239edc7f</arg>
<arg>Activation</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170922 03:15:56.690" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.185.156, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170922 03:15:56.691" starttime="20170922 03:15:56.690"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170922 03:15:56.691" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170922 03:15:56.691" starttime="20170922 03:15:56.691"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170922 03:15:56.692" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170922 03:15:56.692" starttime="20170922 03:15:56.692"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170922 03:15:56.693" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170922 03:15:56.693" starttime="20170922 03:15:56.692"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170922 03:15:56.872" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170922 03:15:56.872" starttime="20170922 03:15:56.693"></status>
</kw>
<msg timestamp="20170922 03:15:56.872" level="INFO">${status} = PASS</msg>
<msg timestamp="20170922 03:15:56.872" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170922 03:15:56.872" starttime="20170922 03:15:56.693"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170922 03:15:56.873" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170922 03:15:56.873" starttime="20170922 03:15:56.872"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170922 03:15:56.873" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170922 03:15:56.874" starttime="20170922 03:15:56.873"></status>
</kw>
<status status="PASS" endtime="20170922 03:15:56.874" starttime="20170922 03:15:56.689"></status>
</kw>
<status status="PASS" endtime="20170922 03:15:56.874" starttime="20170922 03:15:56.689"></status>
</kw>
<status status="PASS" endtime="20170922 03:15:56.874" starttime="20170922 03:15:56.688"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170922 03:15:56.874" level="INFO">${base_uri} = /xyz/openbmc_project/software/239edc7f/attr/Activation</msg>
<status status="PASS" endtime="20170922 03:15:56.875" starttime="20170922 03:15:56.874"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170922 03:15:56.875" starttime="20170922 03:15:56.875"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170922 03:15:57.007" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/239edc7f/attr/Activation, headers=None json=None</msg>
<msg timestamp="20170922 03:15:57.007" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170922 03:15:57.008" starttime="20170922 03:15:56.875"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170922 03:15:57.008" starttime="20170922 03:15:57.008"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170922 03:15:57.009" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170922 03:15:57.009" starttime="20170922 03:15:57.009"></status>
</kw>
<msg timestamp="20170922 03:15:57.009" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170922 03:15:57.009" starttime="20170922 03:15:56.687"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170922 03:15:57.010" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170922 03:15:57.010" starttime="20170922 03:15:57.009"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170922 03:15:57.010" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.Software.Activation.Activations.Failed", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170922 03:15:57.011" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170922 03:15:57.011" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.Software.Activation.Activations.Failed'}</msg>
<status status="PASS" endtime="20170922 03:15:57.011" starttime="20170922 03:15:57.010"></status>
</kw>
<status status="PASS" endtime="20170922 03:15:57.011" starttime="20170922 03:15:56.686"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/239edc7f</arg>
<arg>Activation</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170922 03:16:27.035" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.185.156, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170922 03:16:27.035" starttime="20170922 03:16:27.034"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170922 03:16:27.036" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170922 03:16:27.036" starttime="20170922 03:16:27.035"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170922 03:16:27.037" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170922 03:16:27.037" starttime="20170922 03:16:27.036"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170922 03:16:27.037" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170922 03:16:27.037" starttime="20170922 03:16:27.037"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170922 03:16:27.226" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170922 03:16:27.226" starttime="20170922 03:16:27.038"></status>
</kw>
<msg timestamp="20170922 03:16:27.226" level="INFO">${status} = PASS</msg>
<msg timestamp="20170922 03:16:27.226" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170922 03:16:27.227" starttime="20170922 03:16:27.038"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170922 03:16:27.227" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170922 03:16:27.227" starttime="20170922 03:16:27.227"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170922 03:16:27.228" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170922 03:16:27.228" starttime="20170922 03:16:27.228"></status>
</kw>
<status status="PASS" endtime="20170922 03:16:27.228" starttime="20170922 03:16:27.031"></status>
</kw>
<status status="PASS" endtime="20170922 03:16:27.228" starttime="20170922 03:16:27.031"></status>
</kw>
<status status="PASS" endtime="20170922 03:16:27.229" starttime="20170922 03:16:27.030"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170922 03:16:27.229" level="INFO">${base_uri} = /xyz/openbmc_project/software/239edc7f/attr/Activation</msg>
<status status="PASS" endtime="20170922 03:16:27.229" starttime="20170922 03:16:27.229"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170922 03:16:27.230" starttime="20170922 03:16:27.230"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170922 03:16:27.362" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/239edc7f/attr/Activation, headers=None json=None</msg>
<msg timestamp="20170922 03:16:27.363" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170922 03:16:27.363" starttime="20170922 03:16:27.230"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170922 03:16:27.363" starttime="20170922 03:16:27.363"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170922 03:16:27.364" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170922 03:16:27.364" starttime="20170922 03:16:27.364"></status>
</kw>
<msg timestamp="20170922 03:16:27.364" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170922 03:16:27.364" starttime="20170922 03:16:27.030"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170922 03:16:27.365" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170922 03:16:27.365" starttime="20170922 03:16:27.364"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170922 03:16:27.365" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.Software.Activation.Activations.Failed", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170922 03:16:27.366" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170922 03:16:27.366" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.Software.Activation.Activations.Failed'}</msg>
<status status="PASS" endtime="20170922 03:16:27.366" starttime="20170922 03:16:27.365"></status>
</kw>
<status status="PASS" endtime="20170922 03:16:27.366" starttime="20170922 03:16:27.029"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/239edc7f</arg>
<arg>Activation</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170922 03:16:57.400" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.185.156, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170922 03:16:57.401" starttime="20170922 03:16:57.399"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170922 03:16:57.401" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170922 03:16:57.401" starttime="20170922 03:16:57.401"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170922 03:16:57.402" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170922 03:16:57.402" starttime="20170922 03:16:57.402"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170922 03:16:57.403" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170922 03:16:57.403" starttime="20170922 03:16:57.402"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170922 03:16:57.585" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170922 03:16:57.585" starttime="20170922 03:16:57.403"></status>
</kw>
<msg timestamp="20170922 03:16:57.585" level="INFO">${status} = PASS</msg>
<msg timestamp="20170922 03:16:57.585" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170922 03:16:57.585" starttime="20170922 03:16:57.403"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170922 03:16:57.586" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170922 03:16:57.586" starttime="20170922 03:16:57.586"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170922 03:16:57.587" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170922 03:16:57.587" starttime="20170922 03:16:57.586"></status>
</kw>
<status status="PASS" endtime="20170922 03:16:57.587" starttime="20170922 03:16:57.399"></status>
</kw>
<status status="PASS" endtime="20170922 03:16:57.587" starttime="20170922 03:16:57.398"></status>
</kw>
<status status="PASS" endtime="20170922 03:16:57.587" starttime="20170922 03:16:57.397"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170922 03:16:57.588" level="INFO">${base_uri} = /xyz/openbmc_project/software/239edc7f/attr/Activation</msg>
<status status="PASS" endtime="20170922 03:16:57.588" starttime="20170922 03:16:57.587"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170922 03:16:57.588" starttime="20170922 03:16:57.588"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170922 03:16:57.757" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/239edc7f/attr/Activation, headers=None json=None</msg>
<msg timestamp="20170922 03:16:57.757" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170922 03:16:57.757" starttime="20170922 03:16:57.589"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170922 03:16:57.758" starttime="20170922 03:16:57.757"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170922 03:16:57.758" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170922 03:16:57.758" starttime="20170922 03:16:57.758"></status>
</kw>
<msg timestamp="20170922 03:16:57.758" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170922 03:16:57.758" starttime="20170922 03:16:57.397"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170922 03:16:57.759" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170922 03:16:57.759" starttime="20170922 03:16:57.759"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170922 03:16:57.760" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.Software.Activation.Activations.Failed", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170922 03:16:57.760" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170922 03:16:57.760" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.Software.Activation.Activations.Failed'}</msg>
<status status="PASS" endtime="20170922 03:16:57.760" starttime="20170922 03:16:57.759"></status>
</kw>
<status status="PASS" endtime="20170922 03:16:57.760" starttime="20170922 03:16:57.396"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/239edc7f</arg>
<arg>Activation</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170922 03:17:27.804" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.185.156, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170922 03:17:27.805" starttime="20170922 03:17:27.803"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170922 03:17:27.806" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170922 03:17:27.806" starttime="20170922 03:17:27.805"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170922 03:17:27.807" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170922 03:17:27.807" starttime="20170922 03:17:27.806"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170922 03:17:27.808" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170922 03:17:27.808" starttime="20170922 03:17:27.807"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170922 03:17:27.997" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170922 03:17:27.997" starttime="20170922 03:17:27.810"></status>
</kw>
<msg timestamp="20170922 03:17:27.997" level="INFO">${status} = PASS</msg>
<msg timestamp="20170922 03:17:27.997" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170922 03:17:27.997" starttime="20170922 03:17:27.809"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170922 03:17:27.998" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170922 03:17:27.998" starttime="20170922 03:17:27.997"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170922 03:17:27.999" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170922 03:17:27.999" starttime="20170922 03:17:27.998"></status>
</kw>
<status status="PASS" endtime="20170922 03:17:27.999" starttime="20170922 03:17:27.803"></status>
</kw>
<status status="PASS" endtime="20170922 03:17:27.999" starttime="20170922 03:17:27.802"></status>
</kw>
<status status="PASS" endtime="20170922 03:17:27.999" starttime="20170922 03:17:27.801"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170922 03:17:28.000" level="INFO">${base_uri} = /xyz/openbmc_project/software/239edc7f/attr/Activation</msg>
<status status="PASS" endtime="20170922 03:17:28.000" starttime="20170922 03:17:27.999"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170922 03:17:28.000" starttime="20170922 03:17:28.000"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170922 03:17:28.115" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/239edc7f/attr/Activation, headers=None json=None</msg>
<msg timestamp="20170922 03:17:28.115" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170922 03:17:28.115" starttime="20170922 03:17:28.001"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170922 03:17:28.116" starttime="20170922 03:17:28.116"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170922 03:17:28.117" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170922 03:17:28.117" starttime="20170922 03:17:28.117"></status>
</kw>
<msg timestamp="20170922 03:17:28.117" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170922 03:17:28.117" starttime="20170922 03:17:27.800"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170922 03:17:28.118" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170922 03:17:28.118" starttime="20170922 03:17:28.117"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170922 03:17:28.118" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.Software.Activation.Activations.Failed", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170922 03:17:28.118" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170922 03:17:28.119" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.Software.Activation.Activations.Failed'}</msg>
<status status="PASS" endtime="20170922 03:17:28.119" starttime="20170922 03:17:28.118"></status>
</kw>
<status status="PASS" endtime="20170922 03:17:28.119" starttime="20170922 03:17:27.799"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/239edc7f</arg>
<arg>Activation</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170922 03:17:58.143" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.185.156, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170922 03:17:58.143" starttime="20170922 03:17:58.142"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170922 03:17:58.144" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170922 03:17:58.144" starttime="20170922 03:17:58.144"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170922 03:17:58.145" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170922 03:17:58.145" starttime="20170922 03:17:58.145"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170922 03:17:58.146" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170922 03:17:58.146" starttime="20170922 03:17:58.146"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170922 03:17:58.346" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170922 03:17:58.346" starttime="20170922 03:17:58.147"></status>
</kw>
<msg timestamp="20170922 03:17:58.346" level="INFO">${status} = PASS</msg>
<msg timestamp="20170922 03:17:58.346" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170922 03:17:58.347" starttime="20170922 03:17:58.146"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170922 03:17:58.347" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170922 03:17:58.348" starttime="20170922 03:17:58.347"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170922 03:17:58.348" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170922 03:17:58.348" starttime="20170922 03:17:58.348"></status>
</kw>
<status status="PASS" endtime="20170922 03:17:58.348" starttime="20170922 03:17:58.142"></status>
</kw>
<status status="PASS" endtime="20170922 03:17:58.349" starttime="20170922 03:17:58.141"></status>
</kw>
<status status="PASS" endtime="20170922 03:17:58.349" starttime="20170922 03:17:58.141"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170922 03:17:58.349" level="INFO">${base_uri} = /xyz/openbmc_project/software/239edc7f/attr/Activation</msg>
<status status="PASS" endtime="20170922 03:17:58.349" starttime="20170922 03:17:58.349"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170922 03:17:58.350" starttime="20170922 03:17:58.350"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170922 03:17:58.499" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/239edc7f/attr/Activation, headers=None json=None</msg>
<msg timestamp="20170922 03:17:58.499" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170922 03:17:58.499" starttime="20170922 03:17:58.351"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170922 03:17:58.500" starttime="20170922 03:17:58.500"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170922 03:17:58.500" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170922 03:17:58.500" starttime="20170922 03:17:58.500"></status>
</kw>
<msg timestamp="20170922 03:17:58.501" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170922 03:17:58.501" starttime="20170922 03:17:58.140"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170922 03:17:58.501" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170922 03:17:58.501" starttime="20170922 03:17:58.501"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170922 03:17:58.502" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.Software.Activation.Activations.Failed", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170922 03:17:58.502" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170922 03:17:58.502" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.Software.Activation.Activations.Failed'}</msg>
<status status="PASS" endtime="20170922 03:17:58.502" starttime="20170922 03:17:58.502"></status>
</kw>
<status status="PASS" endtime="20170922 03:17:58.502" starttime="20170922 03:17:58.139"></status>
</kw>
<msg timestamp="20170922 03:18:28.533" level="INFO">${ret} = False</msg>
<msg timestamp="20170922 03:18:28.533" level="INFO">${version_id} = None</msg>
<status status="PASS" endtime="20170922 03:18:28.533" starttime="20170922 03:15:18.952"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${ret}</arg>
</arguments>
<msg timestamp="20170922 03:18:28.535" level="FAIL">'False' should be true.</msg>
<status status="FAIL" endtime="20170922 03:18:28.535" starttime="20170922 03:18:28.534"></status>
</kw>
<status status="FAIL" endtime="20170922 03:18:28.535" starttime="20170922 03:15:01.723"></status>
</kw>
<kw type="teardown" name="Code Update Test Teardown">
<doc>Do code update test case teardown.</doc>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170922 03:18:28.541" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.185.156, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170922 03:18:28.542" starttime="20170922 03:18:28.541"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170922 03:18:28.542" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170922 03:18:28.542" starttime="20170922 03:18:28.542"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170922 03:18:28.543" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170922 03:18:28.543" starttime="20170922 03:18:28.543"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170922 03:18:28.544" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170922 03:18:28.544" starttime="20170922 03:18:28.543"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170922 03:18:28.751" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170922 03:18:28.751" starttime="20170922 03:18:28.544"></status>
</kw>
<msg timestamp="20170922 03:18:28.751" level="INFO">${status} = PASS</msg>
<msg timestamp="20170922 03:18:28.751" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170922 03:18:28.751" starttime="20170922 03:18:28.544"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170922 03:18:28.752" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170922 03:18:28.752" starttime="20170922 03:18:28.752"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170922 03:18:28.753" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170922 03:18:28.753" starttime="20170922 03:18:28.753"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:28.753" starttime="20170922 03:18:28.540"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:28.753" starttime="20170922 03:18:28.540"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:28.753" starttime="20170922 03:18:28.539"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170922 03:18:28.754" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170922 03:18:28.754" starttime="20170922 03:18:28.754"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170922 03:18:28.755" starttime="20170922 03:18:28.754"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170922 03:18:28.866" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170922 03:18:28.866" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170922 03:18:28.866" starttime="20170922 03:18:28.755"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170922 03:18:28.867" starttime="20170922 03:18:28.866"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170922 03:18:28.867" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170922 03:18:28.867" starttime="20170922 03:18:28.867"></status>
</kw>
<msg timestamp="20170922 03:18:28.868" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170922 03:18:28.868" starttime="20170922 03:18:28.538"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170922 03:18:28.868" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170922 03:18:28.868" starttime="20170922 03:18:28.868"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170922 03:18:28.869" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170922 03:18:28.869" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170922 03:18:28.869" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170922 03:18:28.869" starttime="20170922 03:18:28.869"></status>
</kw>
<msg timestamp="20170922 03:18:28.869" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170922 03:18:28.869" starttime="20170922 03:18:28.538"></status>
</kw>
<msg timestamp="20170922 03:18:28.870" level="INFO">${host_state} = Off</msg>
<status status="PASS" endtime="20170922 03:18:28.870" starttime="20170922 03:18:28.537"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg timestamp="20170922 03:18:28.871" level="FAIL">Off != Quiesced</msg>
<status status="FAIL" endtime="20170922 03:18:28.871" starttime="20170922 03:18:28.871"></status>
</kw>
<msg timestamp="20170922 03:18:28.871" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170922 03:18:28.871" starttime="20170922 03:18:28.870"></status>
</kw>
<msg timestamp="20170922 03:18:28.871" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170922 03:18:28.871" starttime="20170922 03:18:28.537"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.3.185.156</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170922 03:18:28.886" level="INFO">Length is 11</msg>
<status status="PASS" endtime="20170922 03:18:28.886" starttime="20170922 03:18:28.886"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170922 03:18:28.907" level="INFO">Running command 'ping -c 4 9.3.185.156 2&gt;&amp;1'.</msg>
<msg timestamp="20170922 03:18:31.931" level="INFO">${RC} = 0</msg>
<msg timestamp="20170922 03:18:31.931" level="INFO">${output} = PING 9.3.185.156 (9.3.185.156) 56(84) bytes of data.
64 bytes from 9.3.185.156: icmp_seq=1 ttl=62 time=1.88 ms
64 bytes from 9.3.185.156: icmp_seq=2 ttl=62 time=0.635 ms
64 bytes from 9.3.185.156: icm...</msg>
<status status="PASS" endtime="20170922 03:18:31.931" starttime="20170922 03:18:28.887"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170922 03:18:31.934" level="INFO">RC: 0
Output:
PING 9.3.185.156 (9.3.185.156) 56(84) bytes of data.
64 bytes from 9.3.185.156: icmp_seq=1 ttl=62 time=1.88 ms
64 bytes from 9.3.185.156: icmp_seq=2 ttl=62 time=0.635 ms
64 bytes from 9.3.185.156: icmp_seq=3 ttl=62 time=0.648 ms
64 bytes from 9.3.185.156: icmp_seq=4 ttl=62 time=0.658 ms

--- 9.3.185.156 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3002ms
rtt min/avg/max/mdev = 0.635/0.955/1.882/0.536 ms</msg>
<status status="PASS" endtime="20170922 03:18:31.934" starttime="20170922 03:18:31.934"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170922 03:18:31.935" starttime="20170922 03:18:31.935"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:31.935" starttime="20170922 03:18:28.885"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170922 03:18:31.952" level="INFO">${cur_time} = 2017-09-22 03:18:31:951756</msg>
<status status="PASS" endtime="20170922 03:18:31.952" starttime="20170922 03:18:31.952"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170922 03:18:31.953" level="INFO">${cur_time} = 20170922031831951756</msg>
<status status="PASS" endtime="20170922 03:18:31.953" starttime="20170922 03:18:31.952"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:31.953" starttime="20170922 03:18:31.951"></status>
</kw>
<msg timestamp="20170922 03:18:31.959" level="INFO">${FFDC_TIME} = 20170922031831951756</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170922 03:18:31.961" level="INFO">${suite_name} = BmcCodeUpdate</msg>
<status status="PASS" endtime="20170922 03:18:31.961" starttime="20170922 03:18:31.961"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170922 03:18:31.962" level="INFO">${suite_name} = 20170922031831951756_BmcCodeUpdate</msg>
<status status="PASS" endtime="20170922 03:18:31.962" starttime="20170922 03:18:31.962"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170922 03:18:31.963" level="INFO">${test_name} = RESTBMCCodeUpdate</msg>
<status status="PASS" endtime="20170922 03:18:31.963" starttime="20170922 03:18:31.963"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170922 03:18:31.964" level="INFO">${test_name} = 20170922031831951756_RESTBMCCodeUpdate</msg>
<status status="PASS" endtime="20170922 03:18:31.964" starttime="20170922 03:18:31.964"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:31.965" starttime="20170922 03:18:31.960"></status>
</kw>
<msg timestamp="20170922 03:18:31.974" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/</msg>
<msg timestamp="20170922 03:18:31.982" level="INFO">${FFDC_PREFIX} = 20170922031831951756_</msg>
<msg timestamp="20170922 03:18:32.005" level="INFO">${LOG_PREFIX} = /home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/</arg>
</arguments>
<msg timestamp="20170922 03:18:32.006" html="yes" level="INFO">Created directory '&lt;a href="file:///home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate"&gt;/home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170922 03:18:32.006" starttime="20170922 03:18:32.005"></status>
</kw>
<msg timestamp="20170922 03:18:32.015" level="INFO">${FFDC_FILE_PATH} = /home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170922 03:18:32.027" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_general.txt"&gt;/home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170922 03:18:32.028" starttime="20170922 03:18:32.027"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:32.028" starttime="20170922 03:18:32.026"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170922 03:18:32.029" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_general.txt"&gt;/home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170922 03:18:32.029" starttime="20170922 03:18:32.028"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:32.029" starttime="20170922 03:18:32.028"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170922 03:18:32.030" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_general.txt"&gt;/home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170922 03:18:32.030" starttime="20170922 03:18:32.030"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:32.031" starttime="20170922 03:18:32.029"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170922 03:18:32.032" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_general.txt"&gt;/home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170922 03:18:32.032" starttime="20170922 03:18:32.031"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:32.032" starttime="20170922 03:18:32.031"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170922 03:18:32.033" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_general.txt"&gt;/home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170922 03:18:32.033" starttime="20170922 03:18:32.033"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:32.033" starttime="20170922 03:18:32.032"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170922 03:18:32.034" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_general.txt"&gt;/home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170922 03:18:32.035" starttime="20170922 03:18:32.034"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:32.035" starttime="20170922 03:18:32.033"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170922 03:18:32.036" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_general.txt"&gt;/home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170922 03:18:32.036" starttime="20170922 03:18:32.036"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:32.036" starttime="20170922 03:18:32.035"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170922 03:18:32.037" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_general.txt"&gt;/home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170922 03:18:32.037" starttime="20170922 03:18:32.037"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:32.038" starttime="20170922 03:18:32.036"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170922 03:18:32.039" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_general.txt"&gt;/home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170922 03:18:32.039" starttime="20170922 03:18:32.038"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:32.039" starttime="20170922 03:18:32.038"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170922 03:18:32.041" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_general.txt"&gt;/home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170922 03:18:32.041" starttime="20170922 03:18:32.041"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:32.041" starttime="20170922 03:18:32.040"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170922 03:18:32.042" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_general.txt"&gt;/home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170922 03:18:32.043" starttime="20170922 03:18:32.042"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:32.043" starttime="20170922 03:18:32.042"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170922 03:18:32.044" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_general.txt"&gt;/home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170922 03:18:32.044" starttime="20170922 03:18:32.043"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:32.044" starttime="20170922 03:18:32.043"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170922 03:18:32.046" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_general.txt"&gt;/home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170922 03:18:32.046" starttime="20170922 03:18:32.045"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:32.046" starttime="20170922 03:18:32.044"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170922 03:18:32.069" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.185.156
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170922 03:18:32.069" level="INFO">Logging into '9.3.185.156:22' as 'root'.</msg>
<msg timestamp="20170922 03:18:32.898" level="INFO">Read output: root@witherspoon:~#</msg>
<msg timestamp="20170922 03:18:32.898" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170922 03:18:32.965" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170922 03:18:32.977" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170922 03:18:32.977" level="INFO">${stderr} = </msg>
<msg timestamp="20170922 03:18:32.977" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20170922 03:18:32.977" starttime="20170922 03:18:32.047"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170922 03:18:32.977" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170922 03:18:32.978" starttime="20170922 03:18:32.977"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170922 03:18:32.978" level="INFO">Length is 11</msg>
<status status="PASS" endtime="20170922 03:18:32.978" starttime="20170922 03:18:32.978"></status>
</kw>
<msg timestamp="20170922 03:18:32.979" level="INFO">${model_name} = Witherspoon</msg>
<status status="PASS" endtime="20170922 03:18:32.979" starttime="20170922 03:18:32.046"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170922 03:18:32.980" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_general.txt"&gt;/home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170922 03:18:32.980" starttime="20170922 03:18:32.980"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:32.980" starttime="20170922 03:18:32.979"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:32.980" starttime="20170922 03:18:32.039"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170922 03:18:32.982" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_general.txt"&gt;/home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170922 03:18:32.982" starttime="20170922 03:18:32.981"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:32.982" starttime="20170922 03:18:32.981"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170922 03:18:32.982" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170922 03:18:32.982" starttime="20170922 03:18:32.982"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170922 03:18:32.984" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_general.txt"&gt;/home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170922 03:18:32.984" starttime="20170922 03:18:32.983"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:32.984" starttime="20170922 03:18:32.983"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170922 03:18:32.986" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_general.txt"&gt;/home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170922 03:18:32.986" starttime="20170922 03:18:32.985"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:32.986" starttime="20170922 03:18:32.984"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:32.986" starttime="20170922 03:18:32.983"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170922 03:18:32.987" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_general.txt"&gt;/home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170922 03:18:32.987" starttime="20170922 03:18:32.987"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:32.987" starttime="20170922 03:18:32.986"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170922 03:18:32.990" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_general.txt"&gt;/home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170922 03:18:32.990" starttime="20170922 03:18:32.989"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:32.990" starttime="20170922 03:18:32.987"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:32.990" starttime="20170922 03:18:32.986"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170922 03:18:32.991" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_general.txt"&gt;/home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170922 03:18:32.991" starttime="20170922 03:18:32.991"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:32.991" starttime="20170922 03:18:32.990"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170922 03:18:32.992" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_general.txt"&gt;/home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170922 03:18:32.993" starttime="20170922 03:18:32.992"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:32.993" starttime="20170922 03:18:32.991"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:32.993" starttime="20170922 03:18:32.990"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:32.993" starttime="20170922 03:18:32.982"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170922 03:18:32.994" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_general.txt"&gt;/home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170922 03:18:32.994" starttime="20170922 03:18:32.993"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:32.994" starttime="20170922 03:18:32.993"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:32.994" starttime="20170922 03:18:32.026"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170922 03:18:33.001" level="INFO">@{entries} = [ BMC LOGS ]</msg>
<status status="PASS" endtime="20170922 03:18:33.001" starttime="20170922 03:18:33.001"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg timestamp="20170922 03:18:33.003" level="INFO">@{method_list} = [ ('FFDC Generic Report', 'BMC FFDC Manifest') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('Sys Inventory Files', 'System Inventory Files') | ('Core Files', 'SCP Coredump Files') | ('BMC Specif...</msg>
<status status="PASS" endtime="20170922 03:18:33.003" starttime="20170922 03:18:33.002"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw name="Get Ffdc Method Desc" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status status="PASS" endtime="20170922 03:18:33.004" starttime="20170922 03:18:33.004"></status>
</kw>
<msg timestamp="20170922 03:18:33.004" level="INFO">@{ffdc_function_list} = [ FFDC Generic Report | Get Request FFDC | Sys Inventory Files | Core Files | BMC Specific Files | SEL Log | OS FFDC ]</msg>
<status status="PASS" endtime="20170922 03:18:33.004" starttime="20170922 03:18:33.003"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170922 03:18:33.006" starttime="20170922 03:18:33.006"></status>
</kw>
<msg timestamp="20170922 03:18:33.006" level="INFO">${status} = PASS</msg>
<msg timestamp="20170922 03:18:33.006" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170922 03:18:33.007" starttime="20170922 03:18:33.006"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170922 03:18:33.007" starttime="20170922 03:18:33.007"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170922 03:18:33.027" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170922 03:18:33.027" starttime="20170922 03:18:33.026"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170922 03:18:33.028" level="INFO">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil state') ]</msg>
<status status="PASS" endtime="20170922 03:18:33.028" starttime="20170922 03:18:33.028"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170922 03:18:33.035" level="INFO">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status status="PASS" endtime="20170922 03:18:33.035" starttime="20170922 03:18:33.029"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil state')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170922 03:18:33.040" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_general.txt"&gt;/home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170922 03:18:33.040" starttime="20170922 03:18:33.040"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:33.040" starttime="20170922 03:18:33.039"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170922 03:18:33.041" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_general.txt"&gt;/home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170922 03:18:33.042" starttime="20170922 03:18:33.041"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:33.042" starttime="20170922 03:18:33.040"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170922 03:18:33.043" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_general.txt"&gt;/home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170922 03:18:33.043" starttime="20170922 03:18:33.042"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:33.043" starttime="20170922 03:18:33.042"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170922 03:18:33.044" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_general.txt"&gt;/home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170922 03:18:33.044" starttime="20170922 03:18:33.044"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:33.045" starttime="20170922 03:18:33.043"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:33.045" starttime="20170922 03:18:33.038"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:33.045" starttime="20170922 03:18:33.036"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170922 03:18:33.046" level="INFO">${cmd_buf} = BMC Execute Command  /usr/sbin/obmcutil state  ignore_err=1</msg>
<status status="PASS" endtime="20170922 03:18:33.046" starttime="20170922 03:18:33.045"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>/usr/sbin/obmcutil state</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170922 03:18:33.107" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.185.156
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170922 03:18:33.107" level="INFO">Executing command '/usr/sbin/obmcutil state'.</msg>
<msg timestamp="20170922 03:18:34.515" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170922 03:18:34.515" starttime="20170922 03:18:33.072"></status>
</kw>
<msg timestamp="20170922 03:18:34.515" level="INFO">${status} = PASS</msg>
<msg timestamp="20170922 03:18:34.515" level="INFO">${ret_values} = (u'CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready\nCurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off\nCurrentHostState:   xyz.openbmc_project.State.Host.HostState....</msg>
<status status="PASS" endtime="20170922 03:18:34.515" starttime="20170922 03:18:33.046"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170922 03:18:34.516" level="INFO">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170922 03:18:34.516" starttime="20170922 03:18:34.515"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170922 03:18:34.516" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170922 03:18:34.516" starttime="20170922 03:18:34.516"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170922 03:18:34.524" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_general.txt"&gt;/home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170922 03:18:34.524" starttime="20170922 03:18:34.523"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:34.524" starttime="20170922 03:18:34.523"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:34.524" starttime="20170922 03:18:34.517"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:34.524" starttime="20170922 03:18:33.035"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:34.524" starttime="20170922 03:18:33.035"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:34.524" starttime="20170922 03:18:33.035"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:34.524" starttime="20170922 03:18:33.027"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:34.525" starttime="20170922 03:18:33.027"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170922 03:18:34.526" level="INFO">@{cmd_list} = [ ('FW Timestamp', 'cat /etc/timestamp') | ('FW Level', 'cat /etc/os-release') ]</msg>
<status status="PASS" endtime="20170922 03:18:34.526" starttime="20170922 03:18:34.525"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170922 03:18:34.526" level="INFO">${ENTRY_INDEX} = DRIVER INFO</msg>
<status status="PASS" endtime="20170922 03:18:34.526" starttime="20170922 03:18:34.526"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('FW Timestamp', 'cat /etc/timestamp')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170922 03:18:34.533" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_general.txt"&gt;/home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170922 03:18:34.533" starttime="20170922 03:18:34.532"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:34.533" starttime="20170922 03:18:34.532"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170922 03:18:34.534" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_general.txt"&gt;/home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170922 03:18:34.534" starttime="20170922 03:18:34.534"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:34.535" starttime="20170922 03:18:34.533"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170922 03:18:34.536" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_general.txt"&gt;/home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170922 03:18:34.536" starttime="20170922 03:18:34.535"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:34.536" starttime="20170922 03:18:34.535"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170922 03:18:34.537" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_general.txt"&gt;/home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170922 03:18:34.537" starttime="20170922 03:18:34.537"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:34.537" starttime="20170922 03:18:34.536"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:34.537" starttime="20170922 03:18:34.528"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:34.537" starttime="20170922 03:18:34.528"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170922 03:18:34.538" level="INFO">${cmd_buf} = BMC Execute Command  cat /etc/timestamp  ignore_err=1</msg>
<status status="PASS" endtime="20170922 03:18:34.538" starttime="20170922 03:18:34.538"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/timestamp</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170922 03:18:34.597" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.185.156
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170922 03:18:34.598" level="INFO">Executing command 'cat /etc/timestamp'.</msg>
<msg timestamp="20170922 03:18:34.666" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170922 03:18:34.667" starttime="20170922 03:18:34.565"></status>
</kw>
<msg timestamp="20170922 03:18:34.667" level="INFO">${status} = PASS</msg>
<msg timestamp="20170922 03:18:34.667" level="INFO">${ret_values} = (u'20170919212553', u'', 0)</msg>
<status status="PASS" endtime="20170922 03:18:34.667" starttime="20170922 03:18:34.539"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170922 03:18:34.668" level="INFO">${stdout} = 20170919212553</msg>
<status status="PASS" endtime="20170922 03:18:34.668" starttime="20170922 03:18:34.667"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170922 03:18:34.668" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170922 03:18:34.668" starttime="20170922 03:18:34.668"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170922 03:18:34.676" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_general.txt"&gt;/home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170922 03:18:34.676" starttime="20170922 03:18:34.675"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:34.676" starttime="20170922 03:18:34.675"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:34.676" starttime="20170922 03:18:34.669"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:34.676" starttime="20170922 03:18:34.527"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:34.676" starttime="20170922 03:18:34.527"></status>
</kw>
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170922 03:18:34.680" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_general.txt"&gt;/home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170922 03:18:34.680" starttime="20170922 03:18:34.679"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:34.680" starttime="20170922 03:18:34.679"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170922 03:18:34.682" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_general.txt"&gt;/home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170922 03:18:34.682" starttime="20170922 03:18:34.681"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:34.682" starttime="20170922 03:18:34.680"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170922 03:18:34.683" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_general.txt"&gt;/home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170922 03:18:34.683" starttime="20170922 03:18:34.683"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:34.683" starttime="20170922 03:18:34.682"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170922 03:18:34.684" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_general.txt"&gt;/home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170922 03:18:34.684" starttime="20170922 03:18:34.684"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:34.684" starttime="20170922 03:18:34.683"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:34.685" starttime="20170922 03:18:34.678"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:34.685" starttime="20170922 03:18:34.677"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170922 03:18:34.686" level="INFO">${cmd_buf} = BMC Execute Command  cat /etc/os-release  ignore_err=1</msg>
<status status="PASS" endtime="20170922 03:18:34.686" starttime="20170922 03:18:34.685"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/os-release</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170922 03:18:34.744" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.185.156
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170922 03:18:34.745" level="INFO">Executing command 'cat /etc/os-release'.</msg>
<msg timestamp="20170922 03:18:34.791" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170922 03:18:34.792" starttime="20170922 03:18:34.710"></status>
</kw>
<msg timestamp="20170922 03:18:34.792" level="INFO">${status} = PASS</msg>
<msg timestamp="20170922 03:18:34.792" level="INFO">${ret_values} = (u'ID="openbmc-phosphor"\nNAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"\nVERSION="v1.99.10-19"\nVERSION_ID="v1.99.10-19-g319ec41"\nPRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC...</msg>
<status status="PASS" endtime="20170922 03:18:34.792" starttime="20170922 03:18:34.686"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170922 03:18:34.793" level="INFO">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.10-19"
VERSION_ID="v1.99.10-19-g319ec41"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Projec...</msg>
<status status="PASS" endtime="20170922 03:18:34.793" starttime="20170922 03:18:34.792"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170922 03:18:34.793" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170922 03:18:34.793" starttime="20170922 03:18:34.793"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170922 03:18:34.801" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_general.txt"&gt;/home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170922 03:18:34.801" starttime="20170922 03:18:34.800"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:34.801" starttime="20170922 03:18:34.800"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:34.801" starttime="20170922 03:18:34.794"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:34.801" starttime="20170922 03:18:34.676"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:34.801" starttime="20170922 03:18:34.676"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:34.801" starttime="20170922 03:18:34.527"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:34.801" starttime="20170922 03:18:34.525"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:34.801" starttime="20170922 03:18:34.525"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170922 03:18:34.803" level="INFO">@{cmd_list} = [ ('BMC Uptime', 'uptime') | ('BMC File System Disk Space Usage', 'df -hT') | ('BMC OS', 'uname -a') ]</msg>
<status status="PASS" endtime="20170922 03:18:34.803" starttime="20170922 03:18:34.802"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170922 03:18:34.804" level="INFO">${ENTRY_INDEX} = BMC DATA</msg>
<status status="PASS" endtime="20170922 03:18:34.804" starttime="20170922 03:18:34.803"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170922 03:18:34.807" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_general.txt"&gt;/home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170922 03:18:34.807" starttime="20170922 03:18:34.806"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:34.807" starttime="20170922 03:18:34.806"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170922 03:18:34.808" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_general.txt"&gt;/home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170922 03:18:34.808" starttime="20170922 03:18:34.808"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:34.808" starttime="20170922 03:18:34.807"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170922 03:18:34.810" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_general.txt"&gt;/home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170922 03:18:34.810" starttime="20170922 03:18:34.809"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:34.810" starttime="20170922 03:18:34.809"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170922 03:18:34.811" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_general.txt"&gt;/home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170922 03:18:34.811" starttime="20170922 03:18:34.811"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:34.812" starttime="20170922 03:18:34.810"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:34.812" starttime="20170922 03:18:34.805"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:34.812" starttime="20170922 03:18:34.805"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170922 03:18:34.812" level="INFO">${cmd_buf} = BMC Execute Command  uptime  ignore_err=1</msg>
<status status="PASS" endtime="20170922 03:18:34.813" starttime="20170922 03:18:34.812"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uptime</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170922 03:18:34.874" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.185.156
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170922 03:18:34.874" level="INFO">Executing command 'uptime'.</msg>
<msg timestamp="20170922 03:18:34.922" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170922 03:18:34.922" starttime="20170922 03:18:34.838"></status>
</kw>
<msg timestamp="20170922 03:18:34.922" level="INFO">${status} = PASS</msg>
<msg timestamp="20170922 03:18:34.922" level="INFO">${ret_values} = (u' 04:19:28 up  1:11,  load average: 0.31, 0.32, 0.30', u'', 0)</msg>
<status status="PASS" endtime="20170922 03:18:34.922" starttime="20170922 03:18:34.813"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170922 03:18:34.923" level="INFO">${stdout} =  04:19:28 up  1:11,  load average: 0.31, 0.32, 0.30</msg>
<status status="PASS" endtime="20170922 03:18:34.923" starttime="20170922 03:18:34.923"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170922 03:18:34.924" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170922 03:18:34.924" starttime="20170922 03:18:34.923"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170922 03:18:34.931" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_general.txt"&gt;/home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170922 03:18:34.931" starttime="20170922 03:18:34.931"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:34.931" starttime="20170922 03:18:34.930"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:34.931" starttime="20170922 03:18:34.924"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:34.932" starttime="20170922 03:18:34.804"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:34.932" starttime="20170922 03:18:34.804"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170922 03:18:34.935" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_general.txt"&gt;/home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170922 03:18:34.935" starttime="20170922 03:18:34.934"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:34.935" starttime="20170922 03:18:34.934"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170922 03:18:34.936" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_general.txt"&gt;/home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170922 03:18:34.936" starttime="20170922 03:18:34.936"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:34.936" starttime="20170922 03:18:34.935"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170922 03:18:34.937" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_general.txt"&gt;/home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170922 03:18:34.937" starttime="20170922 03:18:34.937"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:34.938" starttime="20170922 03:18:34.936"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170922 03:18:34.939" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_general.txt"&gt;/home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170922 03:18:34.939" starttime="20170922 03:18:34.938"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:34.939" starttime="20170922 03:18:34.938"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:34.939" starttime="20170922 03:18:34.933"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:34.939" starttime="20170922 03:18:34.933"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170922 03:18:34.940" level="INFO">${cmd_buf} = BMC Execute Command  df -hT  ignore_err=1</msg>
<status status="PASS" endtime="20170922 03:18:34.940" starttime="20170922 03:18:34.939"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>df -hT</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170922 03:18:34.999" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.185.156
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170922 03:18:34.999" level="INFO">Executing command 'df -hT'.</msg>
<msg timestamp="20170922 03:18:35.056" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170922 03:18:35.057" starttime="20170922 03:18:34.966"></status>
</kw>
<msg timestamp="20170922 03:18:35.057" level="INFO">${status} = PASS</msg>
<msg timestamp="20170922 03:18:35.057" level="INFO">${ret_values} = (u'Filesystem           Type            Size      Used Available Use% Mounted on\ndev                  devtmpfs      210.2M         0    210.2M   0% /dev\ntmpfs                tmpfs         211.1M    ...</msg>
<status status="PASS" endtime="20170922 03:18:35.057" starttime="20170922 03:18:34.940"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170922 03:18:35.058" level="INFO">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.2M         0    210.2M   0% /dev
tmpfs                tmpfs         211.1M     14.0...</msg>
<status status="PASS" endtime="20170922 03:18:35.058" starttime="20170922 03:18:35.057"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170922 03:18:35.058" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170922 03:18:35.058" starttime="20170922 03:18:35.058"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170922 03:18:35.066" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_general.txt"&gt;/home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170922 03:18:35.066" starttime="20170922 03:18:35.066"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:35.066" starttime="20170922 03:18:35.065"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:35.066" starttime="20170922 03:18:35.059"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:35.066" starttime="20170922 03:18:34.932"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:35.066" starttime="20170922 03:18:34.932"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170922 03:18:35.069" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_general.txt"&gt;/home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170922 03:18:35.070" starttime="20170922 03:18:35.069"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:35.070" starttime="20170922 03:18:35.068"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170922 03:18:35.071" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_general.txt"&gt;/home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170922 03:18:35.071" starttime="20170922 03:18:35.071"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:35.071" starttime="20170922 03:18:35.070"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170922 03:18:35.072" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_general.txt"&gt;/home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170922 03:18:35.072" starttime="20170922 03:18:35.072"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:35.072" starttime="20170922 03:18:35.071"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170922 03:18:35.074" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_general.txt"&gt;/home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170922 03:18:35.074" starttime="20170922 03:18:35.073"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:35.074" starttime="20170922 03:18:35.073"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:35.074" starttime="20170922 03:18:35.068"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:35.074" starttime="20170922 03:18:35.067"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170922 03:18:35.075" level="INFO">${cmd_buf} = BMC Execute Command  uname -a  ignore_err=1</msg>
<status status="PASS" endtime="20170922 03:18:35.075" starttime="20170922 03:18:35.074"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uname -a</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170922 03:18:35.135" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.185.156
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170922 03:18:35.135" level="INFO">Executing command 'uname -a'.</msg>
<msg timestamp="20170922 03:18:35.182" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170922 03:18:35.183" starttime="20170922 03:18:35.100"></status>
</kw>
<msg timestamp="20170922 03:18:35.183" level="INFO">${status} = PASS</msg>
<msg timestamp="20170922 03:18:35.183" level="INFO">${ret_values} = (u'Linux witherspoon 4.10.17-c4227b43277bbd0992d10d764d4958239786503d #1 Tue Sep 19 21:23:49 UTC 2017 armv6l GNU/Linux', u'', 0)</msg>
<status status="PASS" endtime="20170922 03:18:35.183" starttime="20170922 03:18:35.075"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170922 03:18:35.184" level="INFO">${stdout} = Linux witherspoon 4.10.17-c4227b43277bbd0992d10d764d4958239786503d #1 Tue Sep 19 21:23:49 UTC 2017 armv6l GNU/Linux</msg>
<status status="PASS" endtime="20170922 03:18:35.184" starttime="20170922 03:18:35.183"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170922 03:18:35.185" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170922 03:18:35.185" starttime="20170922 03:18:35.184"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170922 03:18:35.192" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_general.txt"&gt;/home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170922 03:18:35.192" starttime="20170922 03:18:35.192"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:35.193" starttime="20170922 03:18:35.191"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:35.193" starttime="20170922 03:18:35.185"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:35.193" starttime="20170922 03:18:35.067"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:35.193" starttime="20170922 03:18:35.066"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:35.193" starttime="20170922 03:18:34.804"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:35.193" starttime="20170922 03:18:34.802"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:35.193" starttime="20170922 03:18:34.802"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:35.193" starttime="20170922 03:18:33.027"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:35.193" starttime="20170922 03:18:33.026"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:35.193" starttime="20170922 03:18:33.007"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:35.193" starttime="20170922 03:18:33.005"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:35.193" starttime="20170922 03:18:33.005"></status>
</kw>
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170922 03:18:35.196" starttime="20170922 03:18:35.196"></status>
</kw>
<msg timestamp="20170922 03:18:35.196" level="INFO">${status} = PASS</msg>
<msg timestamp="20170922 03:18:35.196" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170922 03:18:35.196" starttime="20170922 03:18:35.195"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170922 03:18:35.197" starttime="20170922 03:18:35.197"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170922 03:18:35.215" level="INFO">@{entries} = [ GET REQUESTS ]</msg>
<status status="PASS" endtime="20170922 03:18:35.215" starttime="20170922 03:18:35.215"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170922 03:18:35.216" level="INFO">@{cmd_list} = [ ('BMC_sensor_list', '/xyz/openbmc_project/sensors/enumerate') | ('OCC_state', '/org/open_power/control/enumerate') | ('BMC_control_list', '/xyz/openbmc_project/control/enumerate') | ('BMC_led', '/xy...</msg>
<status status="PASS" endtime="20170922 03:18:35.216" starttime="20170922 03:18:35.216"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/xyz/openbmc_project/sensors/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170922 03:18:35.217" level="INFO">${logpath} = /home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_sensor_list.txt</msg>
<status status="PASS" endtime="20170922 03:18:35.218" starttime="20170922 03:18:35.217"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170922 03:18:35.221" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.185.156, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170922 03:18:35.222" starttime="20170922 03:18:35.221"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170922 03:18:35.223" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170922 03:18:35.223" starttime="20170922 03:18:35.222"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170922 03:18:35.224" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170922 03:18:35.224" starttime="20170922 03:18:35.223"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170922 03:18:35.225" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170922 03:18:35.225" starttime="20170922 03:18:35.224"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170922 03:18:35.427" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170922 03:18:35.427" starttime="20170922 03:18:35.226"></status>
</kw>
<msg timestamp="20170922 03:18:35.427" level="INFO">${status} = PASS</msg>
<msg timestamp="20170922 03:18:35.427" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170922 03:18:35.427" starttime="20170922 03:18:35.226"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170922 03:18:35.428" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170922 03:18:35.429" starttime="20170922 03:18:35.428"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170922 03:18:35.430" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170922 03:18:35.430" starttime="20170922 03:18:35.429"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:35.430" starttime="20170922 03:18:35.220"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:35.430" starttime="20170922 03:18:35.219"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:35.430" starttime="20170922 03:18:35.219"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170922 03:18:35.431" level="INFO">${base_uri} = /xyz/openbmc_project/sensors/enumerate</msg>
<status status="PASS" endtime="20170922 03:18:35.431" starttime="20170922 03:18:35.431"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170922 03:18:35.432" starttime="20170922 03:18:35.432"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170922 03:18:35.946" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/sensors/enumerate, headers=None json=None</msg>
<msg timestamp="20170922 03:18:35.946" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170922 03:18:35.946" starttime="20170922 03:18:35.433"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170922 03:18:35.947" starttime="20170922 03:18:35.946"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170922 03:18:35.947" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170922 03:18:35.947" starttime="20170922 03:18:35.947"></status>
</kw>
<msg timestamp="20170922 03:18:35.948" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170922 03:18:35.948" starttime="20170922 03:18:35.218"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170922 03:18:35.949" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170922 03:18:35.950" starttime="20170922 03:18:35.949"></status>
</kw>
<msg timestamp="20170922 03:18:35.950" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170922 03:18:35.950" starttime="20170922 03:18:35.948"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170922 03:18:35.950" starttime="20170922 03:18:35.950"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170922 03:18:35.952" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/sensors/current/ps0_output_current": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes", 
      "Value": 2375
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan0_0": {
      "Scale": 0, 
      "Target": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan0_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 9816
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan1_0": {
      "Scale": 0, 
      "Target": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan1_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 10806
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan2_0": {
      "Scale": 0, 
      "Target": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan2_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 9791
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan3_0": {
      "Scale": 0, 
      "Target": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan3_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 9765
    }, 
    "/xyz/openbmc_project/sensors/power/ps0_input_power": {
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 16000000
    }, 
    "/xyz/openbmc_project/sensors/temperature/ambient": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 25650
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vcs_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 5000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vdd_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 5000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vddr_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 6000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vdn_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 5000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vcs_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 5000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vdd_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 5000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vddr_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 5000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vdn_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 5000
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps0_input_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 203500
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps0_output_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170922 03:18:35.952" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170922 03:18:35.952" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/sensors/current/ps0_output_current": {
            "Scale": -3,
            "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes",
            "Value": ...</msg>
<status status="PASS" endtime="20170922 03:18:35.952" starttime="20170922 03:18:35.951"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170922 03:18:35.954" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_sensor_list.txt"&gt;/home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170922 03:18:35.955" starttime="20170922 03:18:35.954"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:35.955" starttime="20170922 03:18:35.953"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:35.955" starttime="20170922 03:18:35.217"></status>
</kw>
<kw type="foritem" name="${cmd} = ('OCC_state', '/org/open_power/control/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170922 03:18:35.955" level="INFO">${logpath} = /home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_OCC_state.txt</msg>
<status status="PASS" endtime="20170922 03:18:35.956" starttime="20170922 03:18:35.955"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170922 03:18:35.958" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.185.156, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170922 03:18:35.959" starttime="20170922 03:18:35.958"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170922 03:18:35.960" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170922 03:18:35.960" starttime="20170922 03:18:35.959"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170922 03:18:35.960" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170922 03:18:35.960" starttime="20170922 03:18:35.960"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170922 03:18:35.961" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170922 03:18:35.961" starttime="20170922 03:18:35.961"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170922 03:18:36.152" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170922 03:18:36.152" starttime="20170922 03:18:35.962"></status>
</kw>
<msg timestamp="20170922 03:18:36.152" level="INFO">${status} = PASS</msg>
<msg timestamp="20170922 03:18:36.152" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170922 03:18:36.152" starttime="20170922 03:18:35.961"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170922 03:18:36.153" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170922 03:18:36.153" starttime="20170922 03:18:36.152"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170922 03:18:36.153" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170922 03:18:36.154" starttime="20170922 03:18:36.153"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:36.154" starttime="20170922 03:18:35.957"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:36.154" starttime="20170922 03:18:35.957"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:36.154" starttime="20170922 03:18:35.956"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170922 03:18:36.154" level="INFO">${base_uri} = /org/open_power/control/enumerate</msg>
<status status="PASS" endtime="20170922 03:18:36.155" starttime="20170922 03:18:36.154"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170922 03:18:36.155" starttime="20170922 03:18:36.155"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170922 03:18:36.273" level="INFO">Get Request using : alias=openbmc, uri=/org/open_power/control/enumerate, headers=None json=None</msg>
<msg timestamp="20170922 03:18:36.273" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170922 03:18:36.273" starttime="20170922 03:18:36.156"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170922 03:18:36.274" starttime="20170922 03:18:36.273"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170922 03:18:36.274" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170922 03:18:36.274" starttime="20170922 03:18:36.274"></status>
</kw>
<msg timestamp="20170922 03:18:36.274" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170922 03:18:36.274" starttime="20170922 03:18:35.956"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170922 03:18:36.275" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170922 03:18:36.276" starttime="20170922 03:18:36.275"></status>
</kw>
<msg timestamp="20170922 03:18:36.276" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170922 03:18:36.276" starttime="20170922 03:18:36.275"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170922 03:18:36.276" starttime="20170922 03:18:36.276"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170922 03:18:36.277" level="INFO">To JSON using : content={
  "data": {
    "/org/open_power/control/host0": {}
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170922 03:18:36.277" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170922 03:18:36.277" level="INFO">${jsondata} = {
    "data": {
        "/org/open_power/control/host0": {}
    },
    "message": "200 OK",
    "status": "ok"
}</msg>
<status status="PASS" endtime="20170922 03:18:36.277" starttime="20170922 03:18:36.277"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170922 03:18:36.279" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_OCC_state.txt"&gt;/home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_OCC_state.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170922 03:18:36.279" starttime="20170922 03:18:36.278"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:36.279" starttime="20170922 03:18:36.277"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:36.279" starttime="20170922 03:18:35.955"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_control_list', '/xyz/openbmc_project/control/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170922 03:18:36.280" level="INFO">${logpath} = /home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_control_list.txt</msg>
<status status="PASS" endtime="20170922 03:18:36.280" starttime="20170922 03:18:36.279"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170922 03:18:36.283" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.185.156, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170922 03:18:36.283" starttime="20170922 03:18:36.282"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170922 03:18:36.284" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170922 03:18:36.284" starttime="20170922 03:18:36.284"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170922 03:18:36.285" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170922 03:18:36.285" starttime="20170922 03:18:36.285"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170922 03:18:36.286" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170922 03:18:36.286" starttime="20170922 03:18:36.286"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170922 03:18:36.467" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170922 03:18:36.467" starttime="20170922 03:18:36.287"></status>
</kw>
<msg timestamp="20170922 03:18:36.467" level="INFO">${status} = PASS</msg>
<msg timestamp="20170922 03:18:36.468" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170922 03:18:36.468" starttime="20170922 03:18:36.287"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170922 03:18:36.468" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170922 03:18:36.468" starttime="20170922 03:18:36.468"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170922 03:18:36.469" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170922 03:18:36.469" starttime="20170922 03:18:36.469"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:36.469" starttime="20170922 03:18:36.282"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:36.469" starttime="20170922 03:18:36.281"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:36.470" starttime="20170922 03:18:36.281"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170922 03:18:36.470" level="INFO">${base_uri} = /xyz/openbmc_project/control/enumerate</msg>
<status status="PASS" endtime="20170922 03:18:36.470" starttime="20170922 03:18:36.470"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170922 03:18:36.471" starttime="20170922 03:18:36.470"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170922 03:18:36.745" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/control/enumerate, headers=None json=None</msg>
<msg timestamp="20170922 03:18:36.745" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170922 03:18:36.745" starttime="20170922 03:18:36.471"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170922 03:18:36.746" starttime="20170922 03:18:36.745"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170922 03:18:36.746" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170922 03:18:36.746" starttime="20170922 03:18:36.746"></status>
</kw>
<msg timestamp="20170922 03:18:36.746" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170922 03:18:36.747" starttime="20170922 03:18:36.280"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170922 03:18:36.748" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170922 03:18:36.748" starttime="20170922 03:18:36.747"></status>
</kw>
<msg timestamp="20170922 03:18:36.748" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170922 03:18:36.748" starttime="20170922 03:18:36.747"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170922 03:18:36.748" starttime="20170922 03:18:36.748"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170922 03:18:36.749" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/control/host0": {}, 
    "/xyz/openbmc_project/control/host0/TPMEnable": {
      "TPMEnable": 0
    }, 
    "/xyz/openbmc_project/control/host0/auto_reboot": {
      "AutoReboot": 1
    }, 
    "/xyz/openbmc_project/control/host0/boot": {
      "BootMode": "xyz.openbmc_project.Control.Boot.Mode.Modes.Regular", 
      "BootSource": "xyz.openbmc_project.Control.Boot.Source.Sources.Default"
    }, 
    "/xyz/openbmc_project/control/host0/boot/one_time": {
      "BootMode": "xyz.openbmc_project.Control.Boot.Mode.Modes.Regular", 
      "BootSource": "xyz.openbmc_project.Control.Boot.Source.Sources.Default", 
      "Enabled": 1
    }, 
    "/xyz/openbmc_project/control/host0/power_cap": {
      "PowerCap": 0, 
      "PowerCapEnable": 0
    }, 
    "/xyz/openbmc_project/control/host0/power_restore_policy": {
      "PowerRestorePolicy": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore"
    }, 
    "/xyz/openbmc_project/control/host0/restriction_mode": {
      "RestrictionMode": "xyz.openbmc_project.Control.Security.RestrictionMode.Modes.None"
    }, 
    "/xyz/openbmc_project/control/minimum_ship_level_required": {
      "MinimumShipLevelRequired": 1
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170922 03:18:36.749" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170922 03:18:36.750" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/control/host0": {},
        "/xyz/openbmc_project/control/host0/TPMEnable": {
            "TPMEnable": 0
        },
        "/xyz/openbmc_project/control/...</msg>
<status status="PASS" endtime="20170922 03:18:36.750" starttime="20170922 03:18:36.749"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170922 03:18:36.752" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_control_list.txt"&gt;/home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_control_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170922 03:18:36.752" starttime="20170922 03:18:36.751"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:36.752" starttime="20170922 03:18:36.750"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:36.752" starttime="20170922 03:18:36.279"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/xyz/openbmc_project/led/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170922 03:18:36.753" level="INFO">${logpath} = /home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_led.txt</msg>
<status status="PASS" endtime="20170922 03:18:36.753" starttime="20170922 03:18:36.752"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170922 03:18:36.756" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.185.156, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170922 03:18:36.756" starttime="20170922 03:18:36.756"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170922 03:18:36.757" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170922 03:18:36.757" starttime="20170922 03:18:36.757"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170922 03:18:36.757" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170922 03:18:36.758" starttime="20170922 03:18:36.757"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170922 03:18:36.758" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170922 03:18:36.759" starttime="20170922 03:18:36.758"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170922 03:18:36.986" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170922 03:18:36.986" starttime="20170922 03:18:36.759"></status>
</kw>
<msg timestamp="20170922 03:18:36.986" level="INFO">${status} = PASS</msg>
<msg timestamp="20170922 03:18:36.986" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170922 03:18:36.986" starttime="20170922 03:18:36.759"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170922 03:18:36.987" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170922 03:18:36.987" starttime="20170922 03:18:36.986"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170922 03:18:36.987" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170922 03:18:36.987" starttime="20170922 03:18:36.987"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:36.988" starttime="20170922 03:18:36.755"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:36.988" starttime="20170922 03:18:36.754"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:36.988" starttime="20170922 03:18:36.754"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170922 03:18:36.988" level="INFO">${base_uri} = /xyz/openbmc_project/led/enumerate</msg>
<status status="PASS" endtime="20170922 03:18:36.988" starttime="20170922 03:18:36.988"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170922 03:18:36.989" starttime="20170922 03:18:36.989"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170922 03:18:38.569" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/led/enumerate, headers=None json=None</msg>
<msg timestamp="20170922 03:18:38.569" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170922 03:18:38.569" starttime="20170922 03:18:36.990"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170922 03:18:38.570" starttime="20170922 03:18:38.570"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170922 03:18:38.571" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170922 03:18:38.571" starttime="20170922 03:18:38.570"></status>
</kw>
<msg timestamp="20170922 03:18:38.571" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170922 03:18:38.571" starttime="20170922 03:18:36.753"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170922 03:18:38.573" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170922 03:18:38.573" starttime="20170922 03:18:38.572"></status>
</kw>
<msg timestamp="20170922 03:18:38.573" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170922 03:18:38.573" starttime="20170922 03:18:38.572"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170922 03:18:38.573" starttime="20170922 03:18:38.573"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170922 03:18:38.575" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/led/groups": {}, 
    "/xyz/openbmc_project/led/groups/bmc_booted": {
      "Asserted": 1
    }, 
    "/xyz/openbmc_project/led/groups/bmc_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/boxelder_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core10_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core11_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core12_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core13_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core14_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core15_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core16_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core17_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core18_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core19_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core20_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core21_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core22_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core23_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core6_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core7_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core8_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core9_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/cpu0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/cpu1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm10_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm11_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm12_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm13_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm14_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm15_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm6_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm7_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm8_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm9_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/enclosure_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/enclosure_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan0_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan1_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan2_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan3_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/lamp_test": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/motherboard_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/occ_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/power_on": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/powersupply0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/powersupply1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/system_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/physical/fan0": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/fan1": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/fan2": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/fan3": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/front_fault": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/front_id": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/front_power": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Blink"
    }, 
    "/xyz/openbmc_project/led/physical/rear_fault": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/rear_id": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/rear_power": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Blink"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170922 03:18:38.576" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170922 03:18:38.576" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/led/groups": {},
        "/xyz/openbmc_project/led/groups/bmc_booted": {
            "Asserted": 1
        },
        "/xyz/openbmc_project/led/groups/bmc...</msg>
<status status="PASS" endtime="20170922 03:18:38.576" starttime="20170922 03:18:38.574"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170922 03:18:38.577" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_led.txt"&gt;/home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_led.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170922 03:18:38.578" starttime="20170922 03:18:38.577"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:38.578" starttime="20170922 03:18:38.576"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:38.578" starttime="20170922 03:18:36.752"></status>
</kw>
<kw type="foritem" name="${cmd} = ('FIRMWARE_list', '/xyz/openbmc_project/software/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170922 03:18:38.579" level="INFO">${logpath} = /home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_FIRMWARE_list.txt</msg>
<status status="PASS" endtime="20170922 03:18:38.579" starttime="20170922 03:18:38.578"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170922 03:18:38.582" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.185.156, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170922 03:18:38.582" starttime="20170922 03:18:38.581"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170922 03:18:38.583" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170922 03:18:38.583" starttime="20170922 03:18:38.582"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170922 03:18:38.583" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170922 03:18:38.583" starttime="20170922 03:18:38.583"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170922 03:18:38.584" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170922 03:18:38.584" starttime="20170922 03:18:38.584"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170922 03:18:38.778" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170922 03:18:38.778" starttime="20170922 03:18:38.585"></status>
</kw>
<msg timestamp="20170922 03:18:38.778" level="INFO">${status} = PASS</msg>
<msg timestamp="20170922 03:18:38.779" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170922 03:18:38.779" starttime="20170922 03:18:38.584"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170922 03:18:38.779" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170922 03:18:38.779" starttime="20170922 03:18:38.779"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170922 03:18:38.780" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170922 03:18:38.780" starttime="20170922 03:18:38.780"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:38.780" starttime="20170922 03:18:38.581"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:38.780" starttime="20170922 03:18:38.580"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:38.780" starttime="20170922 03:18:38.579"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170922 03:18:38.781" level="INFO">${base_uri} = /xyz/openbmc_project/software/enumerate</msg>
<status status="PASS" endtime="20170922 03:18:38.781" starttime="20170922 03:18:38.781"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170922 03:18:38.782" starttime="20170922 03:18:38.781"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170922 03:18:39.115" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/enumerate, headers=None json=None</msg>
<msg timestamp="20170922 03:18:39.115" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170922 03:18:39.115" starttime="20170922 03:18:38.782"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170922 03:18:39.116" starttime="20170922 03:18:39.115"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170922 03:18:39.116" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170922 03:18:39.116" starttime="20170922 03:18:39.116"></status>
</kw>
<msg timestamp="20170922 03:18:39.116" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170922 03:18:39.117" starttime="20170922 03:18:38.579"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170922 03:18:39.118" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170922 03:18:39.118" starttime="20170922 03:18:39.117"></status>
</kw>
<msg timestamp="20170922 03:18:39.118" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170922 03:18:39.118" starttime="20170922 03:18:39.117"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170922 03:18:39.118" starttime="20170922 03:18:39.118"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170922 03:18:39.120" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/software/239edc7f": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Failed", 
      "Path": "/tmp/images/239edc7f", 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
      "Version": "v1.99.10-21-g1ed0edf", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/239edc7f/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    }, 
    "/xyz/openbmc_project/software/8764baa3": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "ExtendedVersion": "op-build-v1.7-1321-g6eef393-dirty,buildroot-2017.05-163-g8035745,skiboot-v5.8-rc1-pd9d2012,hostboot-c68be97,linux-4.12.8-openpower1-p919e663,petitboot-v1.5.1-p848cad7,machine-xml-c1e49a6-pbb9f626,occ-854999a,hostboot-binaries-67a15fd,capp-ucode-9c73e9f,sbe-4a62126-p180ac2a", 
      "Path": "", 
      "Priority": 0, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.54", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/8764baa3/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis"
      ]
    }, 
    "/xyz/openbmc_project/software/8764baa3/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/active": {
      "endpoints": [
        "/xyz/openbmc_project/software/8764baa3", 
        "/xyz/openbmc_project/software/fd2cbe15"
      ]
    }, 
    "/xyz/openbmc_project/software/fd2cbe15": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "ExtendedVersion": "op-build-v1.18-74-g53f4235-dirty,buildroot-2017.05-163-g8035745,skiboot-v5.7-92-g0818df625e35,hostboot-be278ac,linux-4.12.5-openpower1-pc06e0a6,petitboot-v1.5.1-p641e963,machine-xml-9a28007-p5e6f272,occ-71b5f68,hostboot-binaries-cf51511,capp-ucode-9c73e9f,sbe-bcb079b", 
      "Path": "", 
      "Priority": 255, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.32", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/fd2cbe15/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis"
      ]
    }, 
    "/xyz/openbmc_project/software/fd2cbe15/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170922 03:18:39.120" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170922 03:18:39.120" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/software/239edc7f": {
            "Activation": "xyz.openbmc_project.Software.Activation.Activations.Failed",
            "Path": "/tmp/images/239edc7f",
...</msg>
<status status="PASS" endtime="20170922 03:18:39.120" starttime="20170922 03:18:39.119"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170922 03:18:39.121" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_FIRMWARE_list.txt"&gt;/home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_FIRMWARE_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170922 03:18:39.121" starttime="20170922 03:18:39.121"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:39.122" starttime="20170922 03:18:39.120"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:39.122" starttime="20170922 03:18:38.578"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170922 03:18:39.122" level="INFO">${logpath} = /home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_elog.txt</msg>
<status status="PASS" endtime="20170922 03:18:39.122" starttime="20170922 03:18:39.122"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170922 03:18:39.126" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.185.156, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170922 03:18:39.126" starttime="20170922 03:18:39.125"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170922 03:18:39.127" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170922 03:18:39.127" starttime="20170922 03:18:39.126"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170922 03:18:39.127" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170922 03:18:39.127" starttime="20170922 03:18:39.127"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170922 03:18:39.128" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170922 03:18:39.128" starttime="20170922 03:18:39.128"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170922 03:18:39.317" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170922 03:18:39.318" starttime="20170922 03:18:39.129"></status>
</kw>
<msg timestamp="20170922 03:18:39.318" level="INFO">${status} = PASS</msg>
<msg timestamp="20170922 03:18:39.318" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170922 03:18:39.318" starttime="20170922 03:18:39.128"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170922 03:18:39.318" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170922 03:18:39.319" starttime="20170922 03:18:39.318"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170922 03:18:39.319" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170922 03:18:39.319" starttime="20170922 03:18:39.319"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:39.320" starttime="20170922 03:18:39.125"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:39.320" starttime="20170922 03:18:39.124"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:39.320" starttime="20170922 03:18:39.123"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170922 03:18:39.320" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status status="PASS" endtime="20170922 03:18:39.320" starttime="20170922 03:18:39.320"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170922 03:18:39.321" starttime="20170922 03:18:39.321"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170922 03:18:39.380" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg timestamp="20170922 03:18:39.380" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170922 03:18:39.380" starttime="20170922 03:18:39.321"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170922 03:18:39.381" starttime="20170922 03:18:39.381"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170922 03:18:39.381" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170922 03:18:39.382" starttime="20170922 03:18:39.381"></status>
</kw>
<msg timestamp="20170922 03:18:39.382" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170922 03:18:39.382" starttime="20170922 03:18:39.123"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170922 03:18:39.383" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170922 03:18:39.383" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170922 03:18:39.383" starttime="20170922 03:18:39.383"></status>
</kw>
<msg timestamp="20170922 03:18:39.383" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170922 03:18:39.383" starttime="20170922 03:18:39.382"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170922 03:18:39.384" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170922 03:18:39.385" starttime="20170922 03:18:39.384"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:39.385" starttime="20170922 03:18:39.384"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:39.385" starttime="20170922 03:18:39.122"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170922 03:18:39.385" level="INFO">${logpath} = /home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_inventory.txt</msg>
<status status="PASS" endtime="20170922 03:18:39.385" starttime="20170922 03:18:39.385"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170922 03:18:39.389" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.185.156, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170922 03:18:39.389" starttime="20170922 03:18:39.388"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170922 03:18:39.390" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170922 03:18:39.390" starttime="20170922 03:18:39.389"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170922 03:18:39.390" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170922 03:18:39.390" starttime="20170922 03:18:39.390"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170922 03:18:39.391" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170922 03:18:39.391" starttime="20170922 03:18:39.391"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170922 03:18:39.588" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170922 03:18:39.588" starttime="20170922 03:18:39.392"></status>
</kw>
<msg timestamp="20170922 03:18:39.588" level="INFO">${status} = PASS</msg>
<msg timestamp="20170922 03:18:39.588" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170922 03:18:39.588" starttime="20170922 03:18:39.391"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170922 03:18:39.589" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170922 03:18:39.589" starttime="20170922 03:18:39.588"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170922 03:18:39.590" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170922 03:18:39.590" starttime="20170922 03:18:39.589"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:39.590" starttime="20170922 03:18:39.388"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:39.590" starttime="20170922 03:18:39.387"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:39.590" starttime="20170922 03:18:39.386"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170922 03:18:39.591" level="INFO">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status status="PASS" endtime="20170922 03:18:39.591" starttime="20170922 03:18:39.590"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170922 03:18:39.592" starttime="20170922 03:18:39.591"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170922 03:18:39.914" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg timestamp="20170922 03:18:39.914" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170922 03:18:39.915" starttime="20170922 03:18:39.592"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170922 03:18:39.915" starttime="20170922 03:18:39.915"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170922 03:18:39.916" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170922 03:18:39.916" starttime="20170922 03:18:39.916"></status>
</kw>
<msg timestamp="20170922 03:18:39.916" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170922 03:18:39.916" starttime="20170922 03:18:39.386"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170922 03:18:39.917" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170922 03:18:39.917" starttime="20170922 03:18:39.917"></status>
</kw>
<msg timestamp="20170922 03:18:39.917" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170922 03:18:39.917" starttime="20170922 03:18:39.916"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170922 03:18:39.918" starttime="20170922 03:18:39.918"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170922 03:18:39.919" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system": {
      "AssetTag": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 1
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/activation": {
      "endpoints": [
        "/xyz/openbmc_project/software/8764baa3", 
        "/xyz/openbmc_project/software/fd2cbe15"
      ]
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH051", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000", 
      "UUID": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/activation": {
      "endpoints": [
        "/xyz/openbmc_project/software/239edc7f"
      ]
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "00:00:00:00:00:00", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan0": {
      "MeetsMinimumShipLevel": 1
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan1": {
      "MeetsMinimumShipLevel": 1
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan2": {
      "MeetsMinimumShipLevel": 1
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan3": {
      "MeetsMinimumShipLevel": 1
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply0": {
      "Present": 1, 
      "PrettyName": "power_supply0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply1": {
      "Present": 0, 
      "PrettyName": "power_supply1"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170922 03:18:39.919" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170922 03:18:39.919" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system": {
            "AssetTag": ""
        },
        "/xyz/openbmc_project/inventory/system/chassis": {
            "AirCooled": 1,
        ...</msg>
<status status="PASS" endtime="20170922 03:18:39.919" starttime="20170922 03:18:39.918"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170922 03:18:39.921" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_inventory.txt"&gt;/home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170922 03:18:39.921" starttime="20170922 03:18:39.920"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:39.921" starttime="20170922 03:18:39.920"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:39.921" starttime="20170922 03:18:39.385"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:39.921" starttime="20170922 03:18:35.217"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:39.921" starttime="20170922 03:18:35.216"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:39.921" starttime="20170922 03:18:35.215"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:39.921" starttime="20170922 03:18:35.215"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:39.921" starttime="20170922 03:18:35.214"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:39.921" starttime="20170922 03:18:35.197"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:39.922" starttime="20170922 03:18:35.194"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:39.922" starttime="20170922 03:18:35.193"></status>
</kw>
<kw type="foritem" name="${method} = ('Sys Inventory Files', 'System Inventory Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170922 03:18:39.924" starttime="20170922 03:18:39.923"></status>
</kw>
<msg timestamp="20170922 03:18:39.924" level="INFO">${status} = PASS</msg>
<msg timestamp="20170922 03:18:39.924" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170922 03:18:39.924" starttime="20170922 03:18:39.923"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170922 03:18:39.924" starttime="20170922 03:18:39.924"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="System Inventory Files" library="openbmc_ffdc_methods">
<doc>Copy systest os_inventory files.</doc>
<kw name="Copy Files" library="OperatingSystem">
<doc>Copies specified files to the target directory.</doc>
<arguments>
<arg>os_inventory_*.json</arg>
<arg>${ffdc_dir_path}</arg>
</arguments>
<status status="PASS" endtime="20170922 03:18:39.948" starttime="20170922 03:18:39.945"></status>
</kw>
<kw name="Remove Files" library="OperatingSystem">
<doc>Uses `Remove File` to remove multiple files one-by-one.</doc>
<arguments>
<arg>os_inventory_*.json</arg>
</arguments>
<msg timestamp="20170922 03:18:39.951" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/os_inventory_*.json"&gt;/home/fspcibld/os_inventory_*.json&lt;/a&gt;' does not exist.</msg>
<status status="PASS" endtime="20170922 03:18:39.951" starttime="20170922 03:18:39.949"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:39.951" starttime="20170922 03:18:39.942"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:39.951" starttime="20170922 03:18:39.925"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:39.951" starttime="20170922 03:18:39.922"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:39.951" starttime="20170922 03:18:39.922"></status>
</kw>
<kw type="foritem" name="${method} = ('Core Files', 'SCP Coredump Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170922 03:18:39.954" starttime="20170922 03:18:39.954"></status>
</kw>
<msg timestamp="20170922 03:18:39.954" level="INFO">${status} = PASS</msg>
<msg timestamp="20170922 03:18:39.954" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170922 03:18:39.954" starttime="20170922 03:18:39.953"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170922 03:18:39.955" starttime="20170922 03:18:39.955"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170922 03:18:39.999" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.185.156
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170922 03:18:40.000" level="INFO">Executing command 'ls /tmp/core_*'.</msg>
<msg timestamp="20170922 03:18:40.060" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170922 03:18:40.073" level="INFO">${core_files} = None</msg>
<msg timestamp="20170922 03:18:40.073" level="INFO">${stderr} = None</msg>
<msg timestamp="20170922 03:18:40.073" level="INFO">${rc} = None</msg>
<msg timestamp="20170922 03:18:40.073" level="FAIL">#(UTC) 2017/09/22 03:18:40.072223 -    7.096029 - **ERROR** The prior SSH command returned a non-zero return code:
rc:                                               0x00000001
ls: /tmp/core_*: No such file or directory
: 1 != 0</msg>
<status status="FAIL" endtime="20170922 03:18:40.074" starttime="20170922 03:18:39.974"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg timestamp="20170922 03:18:40.074" level="INFO">@{core_list} = [ ]</msg>
<msg timestamp="20170922 03:18:40.074" level="FAIL">AttributeError: 'NoneType' object has no attribute 'split'</msg>
<status status="FAIL" endtime="20170922 03:18:40.074" starttime="20170922 03:18:40.074"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Open Connection for SCP</arg>
</arguments>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20170922 03:18:40.105" starttime="20170922 03:18:40.086"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" endtime="20170922 03:18:40.742" starttime="20170922 03:18:40.107"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:40.742" starttime="20170922 03:18:40.106"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:40.742" starttime="20170922 03:18:40.085"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:40.742" starttime="20170922 03:18:40.075"></status>
</kw>
<kw type="for" name="${index} IN [ @{core_list} ]">
<status status="PASS" endtime="20170922 03:18:40.742" starttime="20170922 03:18:40.742"></status>
</kw>
<status status="FAIL" endtime="20170922 03:18:40.743" starttime="20170922 03:18:39.974"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:40.743" starttime="20170922 03:18:39.955"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:40.743" starttime="20170922 03:18:39.952"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:40.743" starttime="20170922 03:18:39.951"></status>
</kw>
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170922 03:18:40.745" starttime="20170922 03:18:40.745"></status>
</kw>
<msg timestamp="20170922 03:18:40.745" level="INFO">${status} = PASS</msg>
<msg timestamp="20170922 03:18:40.745" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170922 03:18:40.745" starttime="20170922 03:18:40.744"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170922 03:18:40.746" starttime="20170922 03:18:40.746"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170922 03:18:40.765" level="INFO">@{entries} = [ BMC FILES ]</msg>
<status status="PASS" endtime="20170922 03:18:40.765" starttime="20170922 03:18:40.765"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170922 03:18:40.766" level="INFO">@{cmd_list} = [ ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/') | ('BMC_journalctl_nopager', 'journalctl --no-pager') | ('BMC_journalctl_pretty', 'journalctl -o json-pretty...</msg>
<status status="PASS" endtime="20170922 03:18:40.766" starttime="20170922 03:18:40.766"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170922 03:18:40.767" level="INFO">${logpath} = /home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_procinfo.txt</msg>
<status status="PASS" endtime="20170922 03:18:40.767" starttime="20170922 03:18:40.767"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170922 03:18:40.769" starttime="20170922 03:18:40.768"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170922 03:18:40.769" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/cpuinfo  ignore_err=1</msg>
<status status="PASS" endtime="20170922 03:18:40.769" starttime="20170922 03:18:40.769"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/cpuinfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170922 03:18:40.831" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.185.156
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170922 03:18:40.831" level="INFO">Executing command 'cat /proc/cpuinfo'.</msg>
<msg timestamp="20170922 03:18:40.888" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170922 03:18:40.888" starttime="20170922 03:18:40.796"></status>
</kw>
<msg timestamp="20170922 03:18:40.888" level="INFO">${status} = PASS</msg>
<msg timestamp="20170922 03:18:40.888" level="INFO">${ret_values} = (u'processor\t: 0\nmodel name\t: ARMv6-compatible processor rev 7 (v6l)\nBogoMIPS\t: 789.70\nFeatures\t: half thumb fastmult edsp java tls \nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t...</msg>
<status status="PASS" endtime="20170922 03:18:40.889" starttime="20170922 03:18:40.770"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170922 03:18:40.890" level="INFO">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<status status="PASS" endtime="20170922 03:18:40.890" starttime="20170922 03:18:40.889"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170922 03:18:40.891" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170922 03:18:40.891" starttime="20170922 03:18:40.890"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170922 03:18:40.902" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_procinfo.txt"&gt;/home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170922 03:18:40.902" starttime="20170922 03:18:40.901"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:40.902" starttime="20170922 03:18:40.900"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:40.902" starttime="20170922 03:18:40.891"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:40.902" starttime="20170922 03:18:40.767"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:40.902" starttime="20170922 03:18:40.767"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170922 03:18:40.903" level="INFO">${logpath} = /home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_proc_fd_active_list.txt</msg>
<status status="PASS" endtime="20170922 03:18:40.903" starttime="20170922 03:18:40.903"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170922 03:18:40.905" starttime="20170922 03:18:40.904"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170922 03:18:40.905" level="INFO">${cmd_buf} = BMC Execute Command  ls -Al /proc/*/fd/  ignore_err=1</msg>
<status status="PASS" endtime="20170922 03:18:40.905" starttime="20170922 03:18:40.905"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls -Al /proc/*/fd/</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170922 03:18:40.964" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.185.156
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170922 03:18:40.966" level="INFO">Executing command 'ls -Al /proc/*/fd/'.</msg>
<msg timestamp="20170922 03:18:41.487" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170922 03:18:41.488" starttime="20170922 03:18:40.931"></status>
</kw>
<msg timestamp="20170922 03:18:41.488" level="INFO">${status} = PASS</msg>
<msg timestamp="20170922 03:18:41.489" level="INFO">${ret_values} = (u'/proc/1/fd/:\ntotal 0\nlrwx------    1 root     root            64 Sep 22 04:09 0 -&gt; /dev/null\nlrwx------    1 root     root            64 Sep 22 04:09 1 -&gt; /dev/null\nlr-x------    1 root     roo...</msg>
<status status="PASS" endtime="20170922 03:18:41.489" starttime="20170922 03:18:40.906"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170922 03:18:41.490" level="INFO">${stdout} = /proc/1/fd/:
total 0
lrwx------    1 root     root            64 Sep 22 04:09 0 -&gt; /dev/null
lrwx------    1 root     root            64 Sep 22 04:09 1 -&gt; /dev/null
lr-x------    1 root     root      ...</msg>
<status status="PASS" endtime="20170922 03:18:41.490" starttime="20170922 03:18:41.489"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170922 03:18:41.491" level="INFO">${stderr} = ls: /proc/2481/fd/3: cannot read link: No such file or directory
ls: /proc/self/fd/3: cannot read link: No such file or directory
ls: /proc/thread-self/fd/3: cannot read link: No such file or director...</msg>
<status status="PASS" endtime="20170922 03:18:41.491" starttime="20170922 03:18:41.490"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170922 03:18:41.499" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_proc_fd_active_list.txt"&gt;/home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_proc_fd_active_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170922 03:18:41.499" starttime="20170922 03:18:41.498"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:41.499" starttime="20170922 03:18:41.497"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:41.499" starttime="20170922 03:18:41.491"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:41.499" starttime="20170922 03:18:40.903"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:41.499" starttime="20170922 03:18:40.902"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl_nopager', 'journalctl --no-pager')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170922 03:18:41.500" level="INFO">${logpath} = /home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_journalctl_nopager.txt</msg>
<status status="PASS" endtime="20170922 03:18:41.500" starttime="20170922 03:18:41.500"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170922 03:18:41.501" starttime="20170922 03:18:41.501"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170922 03:18:41.502" level="INFO">${cmd_buf} = BMC Execute Command  journalctl --no-pager  ignore_err=1</msg>
<status status="PASS" endtime="20170922 03:18:41.502" starttime="20170922 03:18:41.502"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl --no-pager</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170922 03:18:41.561" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.185.156
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170922 03:18:41.562" level="INFO">Executing command 'journalctl --no-pager'.</msg>
<msg timestamp="20170922 03:18:43.104" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170922 03:18:43.104" starttime="20170922 03:18:41.526"></status>
</kw>
<msg timestamp="20170922 03:18:43.105" level="INFO">${status} = PASS</msg>
<msg timestamp="20170922 03:18:43.107" level="INFO">${ret_values} = (u'-- Logs begin at Fri 2017-09-22 03:08:20 UTC, end at Fri 2017-09-22 04:19:33 UTC. --\nSep 22 03:08:20 witherspoon kernel: Booting Linux on physical CPU 0x0\nSep 22 03:08:20 witherspoon kernel: Linu...</msg>
<status status="PASS" endtime="20170922 03:18:43.107" starttime="20170922 03:18:41.503"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170922 03:18:43.108" level="INFO">${stdout} = -- Logs begin at Fri 2017-09-22 03:08:20 UTC, end at Fri 2017-09-22 04:19:33 UTC. --
Sep 22 03:08:20 witherspoon kernel: Booting Linux on physical CPU 0x0
Sep 22 03:08:20 witherspoon kernel: Linux ver...</msg>
<status status="PASS" endtime="20170922 03:18:43.108" starttime="20170922 03:18:43.107"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170922 03:18:43.109" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170922 03:18:43.109" starttime="20170922 03:18:43.109"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170922 03:18:43.118" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_journalctl_nopager.txt"&gt;/home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_journalctl_nopager.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170922 03:18:43.118" starttime="20170922 03:18:43.117"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:43.118" starttime="20170922 03:18:43.115"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:43.118" starttime="20170922 03:18:43.109"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:43.118" starttime="20170922 03:18:41.500"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:43.118" starttime="20170922 03:18:41.499"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl_pretty', 'journalctl -o json-pretty')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170922 03:18:43.119" level="INFO">${logpath} = /home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_journalctl_pretty.txt</msg>
<status status="PASS" endtime="20170922 03:18:43.120" starttime="20170922 03:18:43.119"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170922 03:18:43.122" starttime="20170922 03:18:43.121"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170922 03:18:43.123" level="INFO">${cmd_buf} = BMC Execute Command  journalctl -o json-pretty  ignore_err=1</msg>
<status status="PASS" endtime="20170922 03:18:43.123" starttime="20170922 03:18:43.122"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl -o json-pretty</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170922 03:18:43.183" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.185.156
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170922 03:18:43.184" level="INFO">Executing command 'journalctl -o json-pretty'.</msg>
<msg timestamp="20170922 03:18:47.258" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170922 03:18:47.260" starttime="20170922 03:18:43.147"></status>
</kw>
<msg timestamp="20170922 03:18:47.260" level="INFO">${status} = PASS</msg>
<msg timestamp="20170922 03:18:47.283" level="INFO">${ret_values} = (u'{\n\t"__CURSOR" : "s=7c3843702b5249ffb34e942af4cb742b;i=1;b=d1f43e5bcb284211bd18b31787a21acd;m=bf0b65;t=559be85691fb0;x=896e176da07e9b8b",\n\t"__REALTIME_TIMESTAMP" : "1506049700470704",\n\t"__MONO...</msg>
<status status="PASS" endtime="20170922 03:18:47.284" starttime="20170922 03:18:43.123"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170922 03:18:47.290" level="INFO">${stdout} = {
	"__CURSOR" : "s=7c3843702b5249ffb34e942af4cb742b;i=1;b=d1f43e5bcb284211bd18b31787a21acd;m=bf0b65;t=559be85691fb0;x=896e176da07e9b8b",
	"__REALTIME_TIMESTAMP" : "1506049700470704",
	"__MONOTONIC_TIM...</msg>
<status status="PASS" endtime="20170922 03:18:47.290" starttime="20170922 03:18:47.284"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170922 03:18:47.291" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170922 03:18:47.291" starttime="20170922 03:18:47.290"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170922 03:18:47.309" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_journalctl_pretty.txt"&gt;/home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_journalctl_pretty.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170922 03:18:47.309" starttime="20170922 03:18:47.305"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:47.310" starttime="20170922 03:18:47.298"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:47.310" starttime="20170922 03:18:47.291"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:47.310" starttime="20170922 03:18:43.120"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:47.310" starttime="20170922 03:18:43.118"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170922 03:18:47.311" level="INFO">${logpath} = /home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_meminfo.txt</msg>
<status status="PASS" endtime="20170922 03:18:47.311" starttime="20170922 03:18:47.310"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170922 03:18:47.312" starttime="20170922 03:18:47.312"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170922 03:18:47.313" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/meminfo  ignore_err=1</msg>
<status status="PASS" endtime="20170922 03:18:47.313" starttime="20170922 03:18:47.312"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/meminfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170922 03:18:47.371" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.185.156
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170922 03:18:47.372" level="INFO">Executing command 'cat /proc/meminfo'.</msg>
<msg timestamp="20170922 03:18:47.420" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170922 03:18:47.420" starttime="20170922 03:18:47.337"></status>
</kw>
<msg timestamp="20170922 03:18:47.420" level="INFO">${status} = PASS</msg>
<msg timestamp="20170922 03:18:47.420" level="INFO">${ret_values} = (u'MemTotal:         432240 kB\nMemFree:          249436 kB\nMemAvailable:     299560 kB\nBuffers:           11956 kB\nCached:            74800 kB\nSwapCached:            0 kB\nActive:           10590...</msg>
<status status="PASS" endtime="20170922 03:18:47.420" starttime="20170922 03:18:47.313"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170922 03:18:47.421" level="INFO">${stdout} = MemTotal:         432240 kB
MemFree:          249436 kB
MemAvailable:     299560 kB
Buffers:           11956 kB
Cached:            74800 kB
SwapCached:            0 kB
Active:           105900 kB
Inac...</msg>
<status status="PASS" endtime="20170922 03:18:47.421" starttime="20170922 03:18:47.421"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170922 03:18:47.422" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170922 03:18:47.422" starttime="20170922 03:18:47.421"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170922 03:18:47.429" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_meminfo.txt"&gt;/home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170922 03:18:47.429" starttime="20170922 03:18:47.429"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:47.429" starttime="20170922 03:18:47.428"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:47.429" starttime="20170922 03:18:47.422"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:47.430" starttime="20170922 03:18:47.311"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:47.430" starttime="20170922 03:18:47.310"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170922 03:18:47.431" level="INFO">${logpath} = /home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_proc_list.txt</msg>
<status status="PASS" endtime="20170922 03:18:47.431" starttime="20170922 03:18:47.430"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170922 03:18:47.433" starttime="20170922 03:18:47.432"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170922 03:18:47.434" level="INFO">${cmd_buf} = BMC Execute Command  top -n 1 -b  ignore_err=1</msg>
<status status="PASS" endtime="20170922 03:18:47.434" starttime="20170922 03:18:47.433"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>top -n 1 -b</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170922 03:18:47.492" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.185.156
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170922 03:18:47.494" level="INFO">Executing command 'top -n 1 -b'.</msg>
<msg timestamp="20170922 03:18:47.792" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170922 03:18:47.793" starttime="20170922 03:18:47.458"></status>
</kw>
<msg timestamp="20170922 03:18:47.793" level="INFO">${status} = PASS</msg>
<msg timestamp="20170922 03:18:47.793" level="INFO">${ret_values} = (u'Mem: 182804K used, 249436K free, 35032K shrd, 11956K buff, 74800K cached\nCPU:   0% usr  23% sys   0% nic  76% idle   0% io   0% irq   0% sirq\nLoad average: 0.58 0.39 0.32 1/161 2485\n  PID  PPID ...</msg>
<status status="PASS" endtime="20170922 03:18:47.793" starttime="20170922 03:18:47.434"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170922 03:18:47.794" level="INFO">${stdout} = Mem: 182804K used, 249436K free, 35032K shrd, 11956K buff, 74800K cached
CPU:   0% usr  23% sys   0% nic  76% idle   0% io   0% irq   0% sirq
Load average: 0.58 0.39 0.32 1/161 2485
  PID  PPID USER  ...</msg>
<status status="PASS" endtime="20170922 03:18:47.794" starttime="20170922 03:18:47.793"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170922 03:18:47.794" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170922 03:18:47.794" starttime="20170922 03:18:47.794"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170922 03:18:47.806" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_proc_list.txt"&gt;/home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170922 03:18:47.806" starttime="20170922 03:18:47.805"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:47.806" starttime="20170922 03:18:47.804"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:47.806" starttime="20170922 03:18:47.795"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:47.806" starttime="20170922 03:18:47.431"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:47.806" starttime="20170922 03:18:47.430"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170922 03:18:47.808" level="INFO">${logpath} = /home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_dmesg.txt</msg>
<status status="PASS" endtime="20170922 03:18:47.808" starttime="20170922 03:18:47.807"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170922 03:18:47.810" starttime="20170922 03:18:47.809"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170922 03:18:47.811" level="INFO">${cmd_buf} = BMC Execute Command  dmesg  ignore_err=1</msg>
<status status="PASS" endtime="20170922 03:18:47.811" starttime="20170922 03:18:47.810"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>dmesg</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170922 03:18:47.871" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.185.156
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170922 03:18:47.872" level="INFO">Executing command 'dmesg'.</msg>
<msg timestamp="20170922 03:18:47.949" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170922 03:18:47.949" starttime="20170922 03:18:47.836"></status>
</kw>
<msg timestamp="20170922 03:18:47.949" level="INFO">${status} = PASS</msg>
<msg timestamp="20170922 03:18:47.949" level="INFO">${ret_values} = (u'[    0.000000] Memory policy: Data cache writeback\n[    0.000000] SOC Rev: 04030303\n[    0.000000] On node 0 totalpages: 110592\n[    0.000000] free_area_init_node: node 0, pgdat 806038a4, node_m...</msg>
<status status="PASS" endtime="20170922 03:18:47.949" starttime="20170922 03:18:47.811"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170922 03:18:47.950" level="INFO">${stdout} = [    0.000000] Memory policy: Data cache writeback
[    0.000000] SOC Rev: 04030303
[    0.000000] On node 0 totalpages: 110592
[    0.000000] free_area_init_node: node 0, pgdat 806038a4, node_mem_map...</msg>
<status status="PASS" endtime="20170922 03:18:47.950" starttime="20170922 03:18:47.950"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170922 03:18:47.951" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170922 03:18:47.951" starttime="20170922 03:18:47.951"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170922 03:18:47.959" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_dmesg.txt"&gt;/home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/20170922031831951756_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170922 03:18:47.959" starttime="20170922 03:18:47.958"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:47.959" starttime="20170922 03:18:47.957"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:47.959" starttime="20170922 03:18:47.951"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:47.959" starttime="20170922 03:18:47.808"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:47.959" starttime="20170922 03:18:47.807"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:47.959" starttime="20170922 03:18:40.766"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:47.959" starttime="20170922 03:18:40.765"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:47.959" starttime="20170922 03:18:40.765"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:47.960" starttime="20170922 03:18:40.765"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:47.960" starttime="20170922 03:18:40.764"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:47.960" starttime="20170922 03:18:40.746"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:47.960" starttime="20170922 03:18:40.743"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:47.960" starttime="20170922 03:18:40.743"></status>
</kw>
<kw type="foritem" name="${method} = ('SEL Log', 'Collect eSEL Log')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170922 03:18:47.962" starttime="20170922 03:18:47.962"></status>
</kw>
<msg timestamp="20170922 03:18:47.962" level="INFO">${status} = PASS</msg>
<msg timestamp="20170922 03:18:47.962" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170922 03:18:47.962" starttime="20170922 03:18:47.961"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170922 03:18:47.963" starttime="20170922 03:18:47.962"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170922 03:18:47.983" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.185.156, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170922 03:18:47.984" starttime="20170922 03:18:47.983"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170922 03:18:47.984" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170922 03:18:47.984" starttime="20170922 03:18:47.984"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170922 03:18:47.985" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170922 03:18:47.985" starttime="20170922 03:18:47.985"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170922 03:18:47.986" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170922 03:18:47.986" starttime="20170922 03:18:47.985"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170922 03:18:48.166" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170922 03:18:48.166" starttime="20170922 03:18:47.987"></status>
</kw>
<msg timestamp="20170922 03:18:48.166" level="INFO">${status} = PASS</msg>
<msg timestamp="20170922 03:18:48.166" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170922 03:18:48.166" starttime="20170922 03:18:47.986"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170922 03:18:48.167" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170922 03:18:48.167" starttime="20170922 03:18:48.166"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170922 03:18:48.167" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170922 03:18:48.168" starttime="20170922 03:18:48.167"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:48.168" starttime="20170922 03:18:47.982"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:48.168" starttime="20170922 03:18:47.982"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:48.168" starttime="20170922 03:18:47.981"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170922 03:18:48.169" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status status="PASS" endtime="20170922 03:18:48.169" starttime="20170922 03:18:48.168"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170922 03:18:48.169" starttime="20170922 03:18:48.169"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170922 03:18:48.213" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg timestamp="20170922 03:18:48.214" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170922 03:18:48.214" starttime="20170922 03:18:48.170"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170922 03:18:48.214" starttime="20170922 03:18:48.214"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170922 03:18:48.215" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170922 03:18:48.215" starttime="20170922 03:18:48.215"></status>
</kw>
<msg timestamp="20170922 03:18:48.215" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170922 03:18:48.215" starttime="20170922 03:18:47.981"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170922 03:18:48.216" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170922 03:18:48.216" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170922 03:18:48.217" starttime="20170922 03:18:48.216"></status>
</kw>
<msg timestamp="20170922 03:18:48.217" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170922 03:18:48.217" starttime="20170922 03:18:48.215"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg timestamp="20170922 03:18:48.217" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170922 03:18:48.217" starttime="20170922 03:18:48.217"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:48.217" starttime="20170922 03:18:47.980"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:48.218" starttime="20170922 03:18:47.963"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:48.218" starttime="20170922 03:18:47.960"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:48.218" starttime="20170922 03:18:47.960"></status>
</kw>
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170922 03:18:48.220" starttime="20170922 03:18:48.219"></status>
</kw>
<msg timestamp="20170922 03:18:48.220" level="INFO">${status} = PASS</msg>
<msg timestamp="20170922 03:18:48.220" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170922 03:18:48.220" starttime="20170922 03:18:48.219"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170922 03:18:48.221" starttime="20170922 03:18:48.220"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg timestamp="20170922 03:18:48.239" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170922 03:18:48.239" starttime="20170922 03:18:48.239"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:48.239" starttime="20170922 03:18:48.238"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:48.239" starttime="20170922 03:18:48.221"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:48.239" starttime="20170922 03:18:48.218"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:48.240" starttime="20170922 03:18:48.218"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:48.240" starttime="20170922 03:18:33.004"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:48.240" starttime="20170922 03:18:33.001"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:48.240" starttime="20170922 03:18:33.001"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:48.240" starttime="20170922 03:18:33.001"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>SSHLibrary.Close All Connections</arg>
</arguments>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20170922 03:18:48.333" starttime="20170922 03:18:48.248"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:48.333" starttime="20170922 03:18:48.241"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:48.333" starttime="20170922 03:18:33.000"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:48.333" starttime="20170922 03:18:28.872"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:48.334" starttime="20170922 03:18:28.872"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status status="PASS" endtime="20170922 03:18:48.334" starttime="20170922 03:18:48.334"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170922 03:18:48.336" level="INFO">${FFDC_DIR_PATH_STYLE} = </msg>
<status status="PASS" endtime="20170922 03:18:48.336" starttime="20170922 03:18:48.335"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170922 03:18:48.336" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20170922031831951756_BmcCodeUpdate/20170922031831951756_RESTBMCCodeUpdate/</msg>
<status status="PASS" endtime="20170922 03:18:48.336" starttime="20170922 03:18:48.336"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status status="PASS" endtime="20170922 03:18:48.337" starttime="20170922 03:18:48.337"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" endtime="20170922 03:18:48.338" starttime="20170922 03:18:48.337"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20170922 03:18:48.338" html="yes" level="INFO">Directory '&lt;a href="file:///home/fspcibld/logs"&gt;/home/fspcibld/logs&lt;/a&gt;' already exists.</msg>
<status status="PASS" endtime="20170922 03:18:48.339" starttime="20170922 03:18:48.338"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170922 03:18:48.340" level="FAIL">File '/home/fspcibld/logs/test_history.txt' does not exist.</msg>
<status status="FAIL" endtime="20170922 03:18:48.340" starttime="20170922 03:18:48.340"></status>
</kw>
<msg timestamp="20170922 03:18:48.340" level="INFO">${exist} = False</msg>
<status status="PASS" endtime="20170922 03:18:48.340" starttime="20170922 03:18:48.339"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170922 03:18:48.342" html="yes" level="INFO">Created file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170922 03:18:48.342" starttime="20170922 03:18:48.341"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:48.342" starttime="20170922 03:18:48.341"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" endtime="20170922 03:18:48.342" starttime="20170922 03:18:48.342"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170922 03:18:48.344" level="INFO">${cur_time} = 2017-09-22 03:18:48:343747</msg>
<status status="PASS" endtime="20170922 03:18:48.344" starttime="20170922 03:18:48.344"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170922 03:18:48.345" level="INFO">${cur_time} = 20170922031848343747</msg>
<status status="PASS" endtime="20170922 03:18:48.345" starttime="20170922 03:18:48.344"></status>
</kw>
<msg timestamp="20170922 03:18:48.345" level="INFO">${cur_time} = 20170922031848343747</msg>
<status status="PASS" endtime="20170922 03:18:48.345" starttime="20170922 03:18:48.343"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20170922 03:18:48.346" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170922 03:18:48.346" starttime="20170922 03:18:48.345"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:48.346" starttime="20170922 03:18:48.335"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:48.346" starttime="20170922 03:18:28.536"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'PASS'</arg>
<arg>Check Error And Collect FFDC</arg>
</arguments>
<status status="PASS" endtime="20170922 03:18:48.347" starttime="20170922 03:18:48.346"></status>
</kw>
<status status="PASS" endtime="20170922 03:18:48.347" starttime="20170922 03:18:28.536"></status>
</kw>
<doc>Do a BMC code update by uploading image on BMC via REST.</doc>
<tags>
<tag>REST_BMC_Code_Update</tag>
</tags>
<status status="FAIL" endtime="20170922 03:18:48.347" critical="yes" starttime="20170922 03:15:01.459">'False' should be true.</status>
</test>
<doc>Update the BMC code on a target BMC.
Execution Method:
python -m robot -v OPENBMC_HOST:&lt;hostname&gt;
-v IMAGE_FILE_PATH:&lt;path/*.tar&gt; bmc_code_update.robot</doc>
<status status="FAIL" endtime="20170922 03:18:48.349" starttime="20170922 03:15:00.263"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="0">Critical Tests</stat>
<stat fail="1" pass="0">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">REST_BMC_Code_Update</stat>
</tag>
<suite>
<stat fail="1" id="s1" name="Bmc Code Update" pass="0">Bmc Code Update</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
