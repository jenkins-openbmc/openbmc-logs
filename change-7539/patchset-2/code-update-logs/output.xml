<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20171026 00:09:29.531" generator="Robot 3.0.2 (Python 2.7.12 on linux2)">
<suite source="/home/fspcibld/openbmc-test-automation/extended/code_update/bmc_code_update.robot" id="s1" name="Bmc Code Update">
<kw type="setup" name="Suite Setup Execution">
<doc>Do code update test case setup.</doc>
<kw name="Delete All Dumps" library="dump_utils">
<doc>Delete all dumps.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${DUMP_ENTRY_URI}list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171026 00:09:30.463" level="INFO">Creating Session using : alias=openbmc, url=https://9.5.180.47, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171026 00:09:30.464" starttime="20171026 00:09:30.463"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171026 00:09:30.464" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171026 00:09:30.464" starttime="20171026 00:09:30.464"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171026 00:09:30.465" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171026 00:09:30.465" starttime="20171026 00:09:30.465"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171026 00:09:30.466" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171026 00:09:30.466" starttime="20171026 00:09:30.465"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171026 00:09:30.817" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171026 00:09:30.817" starttime="20171026 00:09:30.467"></status>
</kw>
<msg timestamp="20171026 00:09:30.817" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 00:09:30.817" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:09:30.817" starttime="20171026 00:09:30.466"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171026 00:09:30.818" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:09:30.818" starttime="20171026 00:09:30.818"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 00:09:30.819" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:09:30.819" starttime="20171026 00:09:30.819"></status>
</kw>
<status status="PASS" endtime="20171026 00:09:30.819" starttime="20171026 00:09:30.462"></status>
</kw>
<status status="PASS" endtime="20171026 00:09:30.819" starttime="20171026 00:09:30.461"></status>
</kw>
<status status="PASS" endtime="20171026 00:09:30.819" starttime="20171026 00:09:30.459"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171026 00:09:30.820" level="INFO">${base_uri} = /xyz/openbmc_project//dump/entry/list</msg>
<status status="PASS" endtime="20171026 00:09:30.820" starttime="20171026 00:09:30.820"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171026 00:09:30.821" starttime="20171026 00:09:30.820"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171026 00:09:30.898" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project//dump/entry/list, headers=None json=None</msg>
<msg timestamp="20171026 00:09:30.898" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171026 00:09:30.898" starttime="20171026 00:09:30.821"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171026 00:09:30.899" starttime="20171026 00:09:30.899"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171026 00:09:30.900" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171026 00:09:30.900" starttime="20171026 00:09:30.900"></status>
</kw>
<msg timestamp="20171026 00:09:30.900" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171026 00:09:30.900" starttime="20171026 00:09:30.458"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} == ${HTTP_NOT_FOUND}</arg>
</arguments>
<msg timestamp="20171026 00:09:30.901" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20171026 00:09:30.901" starttime="20171026 00:09:30.900"></status>
</kw>
<status status="PASS" endtime="20171026 00:09:30.901" starttime="20171026 00:09:30.458"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Smart Power Off</arg>
</arguments>
<kw name="Smart Power Off" library="boot_utils">
<doc>Do a smart power off.</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${quiet}</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg timestamp="20171026 00:09:30.902" level="INFO">${loc_quiet} = 0</msg>
<status status="PASS" endtime="20171026 00:09:30.902" starttime="20171026 00:09:30.902"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>REST Power Off \ stack_mode=skip</arg>
<arg>\ \ quiet=${loc_quiet}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171026 00:09:30.903" level="INFO">${cmd_buf} = REST Power Off  stack_mode=skip   quiet=0</msg>
<status status="PASS" endtime="20171026 00:09:30.903" starttime="20171026 00:09:30.903"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
<arg>quiet=${loc_quiet}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="REST Power Off" library="boot_utils">
<doc>Do "REST Power Off" boot test.</doc>
<arguments>
<arg>stack_mode=skip</arg>
<arg>quiet=0</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>OBMC Boot Test \ loc_boot_stack=REST Power Off</arg>
<arg>\ loc_stack_mode=${stack_mode} \ loc_quiet=${quiet}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171026 00:09:30.905" level="INFO">${cmd_buf} = OBMC Boot Test  loc_boot_stack=REST Power Off  loc_stack_mode=skip  loc_quiet=0</msg>
<status status="PASS" endtime="20171026 00:09:30.905" starttime="20171026 00:09:30.905"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<kw name="OBMC Boot Test" library="obmc_boot_test_resource">
<arguments>
<arg>loc_boot_stack=REST Power Off</arg>
<arg>loc_stack_mode=skip</arg>
<arg>loc_quiet=0</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${pos_arg1}' != '${EMPTY}'</arg>
<arg>Set To Dictionary</arg>
<arg>${arguments}</arg>
<arg>loc_boot_stack=${pos_arg1}</arg>
</arguments>
<status status="PASS" endtime="20171026 00:09:30.914" starttime="20171026 00:09:30.913"></status>
</kw>
<kw name="Obmc Boot Test Py" library="obmc_boot_test">
<doc>Do main program processing.</doc>
<arguments>
<arg>&amp;{arguments}</arg>
</arguments>
<msg timestamp="20171026 00:09:30.915" level="INFO">${boot_stack} = REST Power Off</msg>
<msg timestamp="20171026 00:09:30.916" level="INFO">${stack_mode} = skip</msg>
<msg timestamp="20171026 00:09:30.916" level="INFO">${quiet} = 0</msg>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
<arg>test_mode=0</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20171026 00:09:31.028" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.5.180.47
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171026 00:09:31.028" level="INFO">Logging into '9.5.180.47:22' as 'root'.</msg>
<msg timestamp="20171026 00:09:32.145" level="INFO">Read output: root@witherspoon:~#</msg>
<msg timestamp="20171026 00:09:32.145" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20171026 00:09:32.325" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20171026 00:09:32.335" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20171026 00:09:32.335" level="INFO">${stderr} = </msg>
<msg timestamp="20171026 00:09:32.335" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20171026 00:09:32.335" starttime="20171026 00:09:31.017"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20171026 00:09:32.336" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20171026 00:09:32.336" starttime="20171026 00:09:32.335"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20171026 00:09:32.336" level="INFO">Length is 11</msg>
<status status="PASS" endtime="20171026 00:09:32.336" starttime="20171026 00:09:32.336"></status>
</kw>
<status status="PASS" endtime="20171026 00:09:32.337" starttime="20171026 00:09:31.016"></status>
</kw>
<msg timestamp="20171026 00:09:32.337" level="INFO">${openbmc_model} = Witherspoon</msg>
<msg timestamp="20171026 00:09:32.579" level="INFO">${plug_in_packages_list} = []</msg>
<msg timestamp="20171026 00:09:32.595" level="INFO">${program_pid} = 1</msg>
<kw name="Set BMC Power Policy" library="utils">
<doc>Set the given BMC power policy.</doc>
<arguments>
<arg>RESTORE_LAST_STATE</arg>
</arguments>
<kw name="Set Power Policy Method" library="utils">
<doc>Set the global bmc_power_policy_method to either 'Old' or 'New'.</doc>
<kw name="New Get Power Policy" library="utils">
<doc>Get the BMC power policy (new method).</doc>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${POWER_RESTORE_URI}</arg>
<arg>PowerRestorePolicy</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171026 00:09:32.630" level="INFO">Creating Session using : alias=openbmc, url=https://9.5.180.47, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171026 00:09:32.632" starttime="20171026 00:09:32.630"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171026 00:09:32.633" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171026 00:09:32.633" starttime="20171026 00:09:32.633"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171026 00:09:32.634" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171026 00:09:32.634" starttime="20171026 00:09:32.634"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171026 00:09:32.635" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171026 00:09:32.635" starttime="20171026 00:09:32.635"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171026 00:09:32.963" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171026 00:09:32.963" starttime="20171026 00:09:32.636"></status>
</kw>
<msg timestamp="20171026 00:09:32.964" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 00:09:32.964" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:09:32.964" starttime="20171026 00:09:32.635"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171026 00:09:32.964" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:09:32.964" starttime="20171026 00:09:32.964"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 00:09:32.965" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:09:32.965" starttime="20171026 00:09:32.965"></status>
</kw>
<status status="PASS" endtime="20171026 00:09:32.965" starttime="20171026 00:09:32.629"></status>
</kw>
<status status="PASS" endtime="20171026 00:09:32.965" starttime="20171026 00:09:32.628"></status>
</kw>
<status status="PASS" endtime="20171026 00:09:32.966" starttime="20171026 00:09:32.627"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171026 00:09:32.966" level="INFO">${base_uri} = /xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy</msg>
<status status="PASS" endtime="20171026 00:09:32.966" starttime="20171026 00:09:32.966"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171026 00:09:32.968" level="INFO">${msg} = URI:https://9.5.180.47/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Get, args:{}</msg>
<status status="PASS" endtime="20171026 00:09:32.968" starttime="20171026 00:09:32.968"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171026 00:09:32.969" level="INFO">URI:https://9.5.180.47/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Get, args:{}</msg>
<status status="PASS" endtime="20171026 00:09:32.970" starttime="20171026 00:09:32.969"></status>
</kw>
<status status="PASS" endtime="20171026 00:09:32.970" starttime="20171026 00:09:32.969"></status>
</kw>
<status status="PASS" endtime="20171026 00:09:32.970" starttime="20171026 00:09:32.967"></status>
</kw>
<status status="PASS" endtime="20171026 00:09:32.970" starttime="20171026 00:09:32.967"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171026 00:09:33.085" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, headers=None json=None</msg>
<msg timestamp="20171026 00:09:33.085" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:09:33.086" starttime="20171026 00:09:32.970"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171026 00:09:33.087" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171026 00:09:33.088" starttime="20171026 00:09:33.087"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171026 00:09:33.088" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171026 00:09:33.089" starttime="20171026 00:09:33.088"></status>
</kw>
<status status="PASS" endtime="20171026 00:09:33.089" starttime="20171026 00:09:33.088"></status>
</kw>
<status status="PASS" endtime="20171026 00:09:33.089" starttime="20171026 00:09:33.086"></status>
</kw>
<status status="PASS" endtime="20171026 00:09:33.089" starttime="20171026 00:09:33.086"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171026 00:09:33.090" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171026 00:09:33.090" starttime="20171026 00:09:33.090"></status>
</kw>
<msg timestamp="20171026 00:09:33.090" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:09:33.090" starttime="20171026 00:09:32.623"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 00:09:33.091" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:09:33.091" starttime="20171026 00:09:33.091"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171026 00:09:33.092" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171026 00:09:33.092" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171026 00:09:33.092" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore'}</msg>
<status status="PASS" endtime="20171026 00:09:33.092" starttime="20171026 00:09:33.092"></status>
</kw>
<msg timestamp="20171026 00:09:33.092" level="INFO">${currentPolicy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20171026 00:09:33.092" starttime="20171026 00:09:32.622"></status>
</kw>
<status status="PASS" endtime="20171026 00:09:33.093" starttime="20171026 00:09:32.622"></status>
</kw>
<msg timestamp="20171026 00:09:33.109" level="INFO">${bmc_power_policy_method} = New</msg>
<msg timestamp="20171026 00:09:33.110" level="INFO">${power_policy_setup} = 1</msg>
<status status="PASS" endtime="20171026 00:09:33.110" starttime="20171026 00:09:32.614"></status>
</kw>
<kw name="Translate Power Policy Value" library="utils">
<doc>Translate the policy value and return the result.</doc>
<arguments>
<arg>${policy}</arg>
</arguments>
<assign>
<var>${policy}</var>
</assign>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${RESTORE_LAST_STATE}</arg>
</arguments>
<status status="PASS" endtime="20171026 00:09:33.112" starttime="20171026 00:09:33.112"></status>
</kw>
<msg timestamp="20171026 00:09:33.112" level="INFO">${policy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20171026 00:09:33.112" starttime="20171026 00:09:33.111"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${bmc_power_policy_method} Set Power Policy \ ${policy}</arg>
</arguments>
<kw name="New Set Power Policy" library="utils">
<doc>Set the given BMC power policy (new method).</doc>
<arguments>
<arg>xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${policy}</arg>
</arguments>
<assign>
<var>${valueDict}</var>
</assign>
<msg timestamp="20171026 00:09:33.132" level="INFO">${valueDict} = {u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore'}</msg>
<status status="PASS" endtime="20171026 00:09:33.132" starttime="20171026 00:09:33.131"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<doc>Write a D-Bus attribute with REST.</doc>
<arguments>
<arg>${POWER_RESTORE_URI}</arg>
<arg>PowerRestorePolicy</arg>
<arg>data=${valueDict}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171026 00:09:33.133" level="INFO">${base_uri} = /xyz/openbmc_project/control/host0/power_restore_policy</msg>
<status status="PASS" endtime="20171026 00:09:33.133" starttime="20171026 00:09:33.133"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171026 00:09:33.136" level="INFO">Creating Session using : alias=openbmc, url=https://9.5.180.47, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171026 00:09:33.137" starttime="20171026 00:09:33.136"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171026 00:09:33.137" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171026 00:09:33.137" starttime="20171026 00:09:33.137"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171026 00:09:33.138" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171026 00:09:33.138" starttime="20171026 00:09:33.138"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171026 00:09:33.139" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171026 00:09:33.139" starttime="20171026 00:09:33.138"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171026 00:09:33.481" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171026 00:09:33.481" starttime="20171026 00:09:33.140"></status>
</kw>
<msg timestamp="20171026 00:09:33.481" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 00:09:33.481" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:09:33.481" starttime="20171026 00:09:33.139"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171026 00:09:33.482" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:09:33.482" starttime="20171026 00:09:33.482"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 00:09:33.483" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:09:33.483" starttime="20171026 00:09:33.483"></status>
</kw>
<status status="PASS" endtime="20171026 00:09:33.483" starttime="20171026 00:09:33.135"></status>
</kw>
<status status="PASS" endtime="20171026 00:09:33.483" starttime="20171026 00:09:33.135"></status>
</kw>
<status status="PASS" endtime="20171026 00:09:33.483" starttime="20171026 00:09:33.134"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171026 00:09:33.484" level="INFO">${base_uri} = /xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy</msg>
<status status="PASS" endtime="20171026 00:09:33.484" starttime="20171026 00:09:33.484"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171026 00:09:33.485" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171026 00:09:33.485" starttime="20171026 00:09:33.484"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20171026 00:09:33.485" starttime="20171026 00:09:33.485"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171026 00:09:33.487" level="INFO">${msg} = URI:https://9.5.180.47/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Put, args:{u'data': {u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Res...</msg>
<status status="PASS" endtime="20171026 00:09:33.487" starttime="20171026 00:09:33.486"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171026 00:09:33.488" level="INFO">URI:https://9.5.180.47/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Put, args:{u'data': {u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20171026 00:09:33.488" starttime="20171026 00:09:33.488"></status>
</kw>
<status status="PASS" endtime="20171026 00:09:33.488" starttime="20171026 00:09:33.487"></status>
</kw>
<status status="PASS" endtime="20171026 00:09:33.488" starttime="20171026 00:09:33.485"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171026 00:09:33.697" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, data={"data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20171026 00:09:33.698" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:09:33.698" starttime="20171026 00:09:33.489"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171026 00:09:33.699" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171026 00:09:33.699" starttime="20171026 00:09:33.698"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171026 00:09:33.700" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171026 00:09:33.700" starttime="20171026 00:09:33.700"></status>
</kw>
<status status="PASS" endtime="20171026 00:09:33.700" starttime="20171026 00:09:33.699"></status>
</kw>
<status status="PASS" endtime="20171026 00:09:33.700" starttime="20171026 00:09:33.698"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171026 00:09:33.701" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171026 00:09:33.701" starttime="20171026 00:09:33.701"></status>
</kw>
<msg timestamp="20171026 00:09:33.701" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:09:33.701" starttime="20171026 00:09:33.133"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 00:09:33.702" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:09:33.702" starttime="20171026 00:09:33.702"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${verify} == ${FALSE}</arg>
</arguments>
<msg timestamp="20171026 00:09:33.703" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20171026 00:09:33.703" starttime="20171026 00:09:33.703"></status>
</kw>
<status status="PASS" endtime="20171026 00:09:33.703" starttime="20171026 00:09:33.132"></status>
</kw>
<status status="PASS" endtime="20171026 00:09:33.703" starttime="20171026 00:09:33.131"></status>
</kw>
<status status="PASS" endtime="20171026 00:09:33.703" starttime="20171026 00:09:33.113"></status>
</kw>
<kw name="Get System Power Policy" library="utils">
<doc>Get the BMC power policy.</doc>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="Set Power Policy Method" library="utils">
<doc>Set the global bmc_power_policy_method to either 'Old' or 'New'.</doc>
<status status="PASS" endtime="20171026 00:09:33.704" starttime="20171026 00:09:33.704"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${bmc_power_policy_method} Get Power Policy</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171026 00:09:33.705" level="INFO">${cmd_buf} = [u'New Get Power Policy']</msg>
<status status="PASS" endtime="20171026 00:09:33.705" starttime="20171026 00:09:33.705"></status>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>@{cmd_buf}</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="New Get Power Policy" library="utils">
<doc>Get the BMC power policy (new method).</doc>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${POWER_RESTORE_URI}</arg>
<arg>PowerRestorePolicy</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171026 00:09:33.709" level="INFO">Creating Session using : alias=openbmc, url=https://9.5.180.47, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171026 00:09:33.710" starttime="20171026 00:09:33.709"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171026 00:09:33.710" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171026 00:09:33.710" starttime="20171026 00:09:33.710"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171026 00:09:33.711" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171026 00:09:33.711" starttime="20171026 00:09:33.710"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171026 00:09:33.712" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171026 00:09:33.712" starttime="20171026 00:09:33.711"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171026 00:09:34.055" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171026 00:09:34.055" starttime="20171026 00:09:33.712"></status>
</kw>
<msg timestamp="20171026 00:09:34.055" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 00:09:34.055" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:09:34.056" starttime="20171026 00:09:33.712"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171026 00:09:34.056" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:09:34.056" starttime="20171026 00:09:34.056"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 00:09:34.057" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:09:34.057" starttime="20171026 00:09:34.057"></status>
</kw>
<status status="PASS" endtime="20171026 00:09:34.057" starttime="20171026 00:09:33.708"></status>
</kw>
<status status="PASS" endtime="20171026 00:09:34.057" starttime="20171026 00:09:33.708"></status>
</kw>
<status status="PASS" endtime="20171026 00:09:34.057" starttime="20171026 00:09:33.707"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171026 00:09:34.058" level="INFO">${base_uri} = /xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy</msg>
<status status="PASS" endtime="20171026 00:09:34.058" starttime="20171026 00:09:34.058"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171026 00:09:34.060" level="INFO">${msg} = URI:https://9.5.180.47/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Get, args:{}</msg>
<status status="PASS" endtime="20171026 00:09:34.060" starttime="20171026 00:09:34.059"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171026 00:09:34.061" level="INFO">URI:https://9.5.180.47/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Get, args:{}</msg>
<status status="PASS" endtime="20171026 00:09:34.062" starttime="20171026 00:09:34.061"></status>
</kw>
<status status="PASS" endtime="20171026 00:09:34.062" starttime="20171026 00:09:34.061"></status>
</kw>
<status status="PASS" endtime="20171026 00:09:34.062" starttime="20171026 00:09:34.059"></status>
</kw>
<status status="PASS" endtime="20171026 00:09:34.062" starttime="20171026 00:09:34.058"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171026 00:09:34.158" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, headers=None json=None</msg>
<msg timestamp="20171026 00:09:34.158" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:09:34.158" starttime="20171026 00:09:34.063"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171026 00:09:34.160" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171026 00:09:34.160" starttime="20171026 00:09:34.159"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171026 00:09:34.161" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171026 00:09:34.161" starttime="20171026 00:09:34.161"></status>
</kw>
<status status="PASS" endtime="20171026 00:09:34.161" starttime="20171026 00:09:34.160"></status>
</kw>
<status status="PASS" endtime="20171026 00:09:34.161" starttime="20171026 00:09:34.159"></status>
</kw>
<status status="PASS" endtime="20171026 00:09:34.161" starttime="20171026 00:09:34.158"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171026 00:09:34.162" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171026 00:09:34.162" starttime="20171026 00:09:34.162"></status>
</kw>
<msg timestamp="20171026 00:09:34.162" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:09:34.162" starttime="20171026 00:09:33.707"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 00:09:34.163" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:09:34.163" starttime="20171026 00:09:34.162"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171026 00:09:34.164" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171026 00:09:34.164" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171026 00:09:34.164" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore'}</msg>
<status status="PASS" endtime="20171026 00:09:34.164" starttime="20171026 00:09:34.163"></status>
</kw>
<msg timestamp="20171026 00:09:34.164" level="INFO">${currentPolicy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20171026 00:09:34.164" starttime="20171026 00:09:33.706"></status>
</kw>
<status status="PASS" endtime="20171026 00:09:34.164" starttime="20171026 00:09:33.706"></status>
</kw>
<msg timestamp="20171026 00:09:34.164" level="INFO">${currentPolicy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20171026 00:09:34.164" starttime="20171026 00:09:33.705"></status>
</kw>
<msg timestamp="20171026 00:09:34.165" level="INFO">${currentPolicy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20171026 00:09:34.165" starttime="20171026 00:09:33.703"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${currentPolicy}</arg>
<arg>${policy}</arg>
</arguments>
<msg timestamp="20171026 00:09:34.165" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20171026 00:09:34.165" starttime="20171026 00:09:34.165"></status>
</kw>
<status status="PASS" endtime="20171026 00:09:34.165" starttime="20171026 00:09:32.613"></status>
</kw>
<msg timestamp="20171026 00:09:34.208" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20171026 00:09:34.242" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20171026 00:09:34.248" level="INFO">${TEST_MESSAGE} = </msg>
<msg timestamp="20171026 00:09:34.248" level="INFO">${FFDC_LOG_PATH} = ./</msg>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/state/enumerate</arg>
<arg>quiet=${0}</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171026 00:09:34.330" level="INFO">Creating Session using : alias=openbmc, url=https://9.5.180.47, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171026 00:09:34.331" starttime="20171026 00:09:34.330"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171026 00:09:34.332" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171026 00:09:34.332" starttime="20171026 00:09:34.332"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171026 00:09:34.333" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171026 00:09:34.333" starttime="20171026 00:09:34.332"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171026 00:09:34.333" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171026 00:09:34.334" starttime="20171026 00:09:34.333"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171026 00:09:34.668" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171026 00:09:34.668" starttime="20171026 00:09:34.334"></status>
</kw>
<msg timestamp="20171026 00:09:34.668" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 00:09:34.668" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:09:34.668" starttime="20171026 00:09:34.334"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171026 00:09:34.669" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:09:34.669" starttime="20171026 00:09:34.669"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 00:09:34.670" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:09:34.670" starttime="20171026 00:09:34.669"></status>
</kw>
<status status="PASS" endtime="20171026 00:09:34.670" starttime="20171026 00:09:34.329"></status>
</kw>
<status status="PASS" endtime="20171026 00:09:34.670" starttime="20171026 00:09:34.325"></status>
</kw>
<status status="PASS" endtime="20171026 00:09:34.670" starttime="20171026 00:09:34.320"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171026 00:09:34.671" level="INFO">${base_uri} = /xyz/openbmc_project/state/enumerate</msg>
<status status="PASS" endtime="20171026 00:09:34.671" starttime="20171026 00:09:34.670"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171026 00:09:34.673" level="INFO">${msg} = URI:https://9.5.180.47/xyz/openbmc_project/state/enumerate, method:Get, args:{}</msg>
<status status="PASS" endtime="20171026 00:09:34.673" starttime="20171026 00:09:34.672"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171026 00:09:34.674" level="INFO">URI:https://9.5.180.47/xyz/openbmc_project/state/enumerate, method:Get, args:{}</msg>
<status status="PASS" endtime="20171026 00:09:34.674" starttime="20171026 00:09:34.674"></status>
</kw>
<status status="PASS" endtime="20171026 00:09:34.674" starttime="20171026 00:09:34.673"></status>
</kw>
<status status="PASS" endtime="20171026 00:09:34.674" starttime="20171026 00:09:34.672"></status>
</kw>
<status status="PASS" endtime="20171026 00:09:34.674" starttime="20171026 00:09:34.671"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171026 00:09:34.968" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/enumerate, headers=None json=None</msg>
<msg timestamp="20171026 00:09:34.968" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:09:34.968" starttime="20171026 00:09:34.675"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171026 00:09:34.970" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "/xyz/openbmc_project/state/bmc0": {
      "CurrentBMCState": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
      "RequestedBMCTransition": "xyz.openbmc...</msg>
<status status="PASS" endtime="20171026 00:09:34.970" starttime="20171026 00:09:34.969"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171026 00:09:34.971" level="INFO">Response code:200, Content:{
  "data": {
    "/xyz/openbmc_project/state/bmc0": {
      "CurrentBMCState": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
      "RequestedBMCTransition": "xyz.openbmc_project.State.BMC.Transition.None"
    }, 
    "/xyz/openbmc_project/state/chassis0": {
      "CurrentPowerState": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
      "RequestedPowerTransition": "xyz.openbmc_project.State.Chassis.Transition.Off"
    }, 
    "/xyz/openbmc_project/state/host0": {
      "AttemptsLeft": 3, 
      "BootProgress": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
      "CurrentHostState": "xyz.openbmc_project.State.Host.HostState.Off", 
      "OperatingSystemState": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
      "RequestedHostTransition": "xyz.openbmc_project.State.Host.Transition.Off"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171026 00:09:34.971" starttime="20171026 00:09:34.971"></status>
</kw>
<status status="PASS" endtime="20171026 00:09:34.971" starttime="20171026 00:09:34.970"></status>
</kw>
<status status="PASS" endtime="20171026 00:09:34.972" starttime="20171026 00:09:34.969"></status>
</kw>
<status status="PASS" endtime="20171026 00:09:34.972" starttime="20171026 00:09:34.968"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171026 00:09:34.972" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171026 00:09:34.972" starttime="20171026 00:09:34.972"></status>
</kw>
<msg timestamp="20171026 00:09:34.973" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:09:34.973" starttime="20171026 00:09:34.319"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 00:09:34.973" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:09:34.973" starttime="20171026 00:09:34.973"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171026 00:09:34.974" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/state/bmc0": {
      "CurrentBMCState": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
      "RequestedBMCTransition": "xyz.openbmc_project.State.BMC.Transition.None"
    }, 
    "/xyz/openbmc_project/state/chassis0": {
      "CurrentPowerState": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
      "RequestedPowerTransition": "xyz.openbmc_project.State.Chassis.Transition.Off"
    }, 
    "/xyz/openbmc_project/state/host0": {
      "AttemptsLeft": 3, 
      "BootProgress": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
      "CurrentHostState": "xyz.openbmc_project.State.Host.HostState.Off", 
      "OperatingSystemState": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
      "RequestedHostTransition": "xyz.openbmc_project.State.Host.Transition.Off"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171026 00:09:34.974" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171026 00:09:34.974" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'/xyz/openbmc_project/state/host0': {u'CurrentHostState': u'xyz.openbmc_project.State.Host.HostState.Off', u'RequestedHostTransition': u'xyz.openbm...</msg>
<status status="PASS" endtime="20171026 00:09:34.974" starttime="20171026 00:09:34.974"></status>
</kw>
<status status="PASS" endtime="20171026 00:09:34.975" starttime="20171026 00:09:34.309"></status>
</kw>
<status status="PASS" endtime="20171026 00:09:35.037" starttime="20171026 00:09:30.914"></status>
</kw>
<kw type="teardown" name="Obmc Boot Test Teardown" library="obmc_boot_test">
<doc>Clean up after the Main keyword.</doc>
<msg timestamp="20171026 00:09:35.042" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20171026 00:09:35.054" level="INFO">${boot_stack} = </msg>
<msg timestamp="20171026 00:09:35.054" level="INFO">${stack_mode} = normal</msg>
<msg timestamp="20171026 00:09:35.055" level="INFO">${quiet} = 0</msg>
<status status="PASS" endtime="20171026 00:09:35.055" starttime="20171026 00:09:35.037"></status>
</kw>
<status status="PASS" endtime="20171026 00:09:35.055" starttime="20171026 00:09:30.912"></status>
</kw>
<status status="PASS" endtime="20171026 00:09:35.055" starttime="20171026 00:09:30.905"></status>
</kw>
<status status="PASS" endtime="20171026 00:09:35.055" starttime="20171026 00:09:30.904"></status>
</kw>
<msg timestamp="20171026 00:09:35.055" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 00:09:35.055" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20171026 00:09:35.055" starttime="20171026 00:09:30.903"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == 'PASS'</arg>
<arg>Return From Keyword</arg>
</arguments>
<kw name="Return From Keyword" library="BuiltIn">
<doc>Returns from the enclosing user keyword.</doc>
<msg timestamp="20171026 00:09:35.056" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20171026 00:09:35.057" starttime="20171026 00:09:35.056"></status>
</kw>
<status status="PASS" endtime="20171026 00:09:35.057" starttime="20171026 00:09:35.056"></status>
</kw>
<status status="PASS" endtime="20171026 00:09:35.057" starttime="20171026 00:09:30.902"></status>
</kw>
<status status="PASS" endtime="20171026 00:09:35.057" starttime="20171026 00:09:30.901"></status>
</kw>
<status status="PASS" endtime="20171026 00:09:35.057" starttime="20171026 00:09:30.457"></status>
</kw>
<test id="s1-t1" name="REST BMC Code Update">
<kw name="Upload And Activate Image" library="code_update_utils">
<doc>Upload an image to the BMC and activate it with REST.</doc>
<arguments>
<arg>${IMAGE_FILE_PATH}</arg>
<arg>skip_if_active=${SKIP_UPDATE_IF_ACTIVE}</arg>
</arguments>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<msg timestamp="20171026 00:09:35.059" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/obmc-phosphor-image-witherspoon.ubi.mtd.tar"&gt;/home/fspcibld/obmc-phosphor-image-witherspoon.ubi.mtd.tar&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20171026 00:09:35.059" starttime="20171026 00:09:35.059"></status>
</kw>
<kw name="Get Version Tar" library="code_update_utils">
<doc>Read the image version from the MANIFEST inside the tarball.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<assign>
<var>${image_version}</var>
</assign>
<msg timestamp="20171026 00:09:35.076" level="INFO">${image_version} = v1.99.10-208-g69b2e34</msg>
<status status="PASS" endtime="20171026 00:09:35.076" starttime="20171026 00:09:35.059"></status>
</kw>
<kw name="Get Binary File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<assign>
<var>${image_data}</var>
</assign>
<msg timestamp="20171026 00:09:35.077" html="yes" level="INFO">Getting file '&lt;a href="file:///home/fspcibld/obmc-phosphor-image-witherspoon.ubi.mtd.tar"&gt;/home/fspcibld/obmc-phosphor-image-witherspoon.ubi.mtd.tar&lt;/a&gt;'.</msg>
<msg timestamp="20171026 00:09:48.383" level="INFO">${image_data} = image-u-boot0000644000175100017520000113170013151356420013160 0...</msg>
<status status="PASS" endtime="20171026 00:09:48.384" starttime="20171026 00:09:35.076"></status>
</kw>
<kw name="Upload Image To BMC" library="rest_client">
<arguments>
<arg>/upload/image</arg>
<arg>data=${image_data}</arg>
</arguments>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171026 00:09:48.388" level="INFO">Creating Session using : alias=openbmc, url=https://9.5.180.47, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171026 00:09:48.389" starttime="20171026 00:09:48.388"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171026 00:09:48.390" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171026 00:09:48.390" starttime="20171026 00:09:48.390"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171026 00:09:48.391" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171026 00:09:48.391" starttime="20171026 00:09:48.391"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171026 00:09:48.392" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171026 00:09:48.392" starttime="20171026 00:09:48.391"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171026 00:09:48.710" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171026 00:09:48.710" starttime="20171026 00:09:48.393"></status>
</kw>
<msg timestamp="20171026 00:09:48.710" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 00:09:48.710" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:09:48.710" starttime="20171026 00:09:48.392"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171026 00:09:48.711" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:09:48.711" starttime="20171026 00:09:48.710"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 00:09:48.711" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:09:48.712" starttime="20171026 00:09:48.711"></status>
</kw>
<status status="PASS" endtime="20171026 00:09:48.712" starttime="20171026 00:09:48.387"></status>
</kw>
<status status="PASS" endtime="20171026 00:09:48.712" starttime="20171026 00:09:48.386"></status>
</kw>
<status status="PASS" endtime="20171026 00:09:48.712" starttime="20171026 00:09:48.385"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171026 00:09:48.712" level="INFO">${base_uri} = /upload/image</msg>
<status status="PASS" endtime="20171026 00:09:48.713" starttime="20171026 00:09:48.712"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/octet-stream</arg>
<arg>Accept=application/octet-stream</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171026 00:09:48.713" level="INFO">${headers} = {u'Content-Type': u'application/octet-stream', u'Accept': u'application/octet-stream'}</msg>
<status status="PASS" endtime="20171026 00:09:48.713" starttime="20171026 00:09:48.713"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20171026 00:09:48.714" starttime="20171026 00:09:48.714"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171026 00:09:48.714" starttime="20171026 00:09:48.714"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171026 00:09:58.522" level="INFO">Post Request using : alias=openbmc, uri=/upload/image, data=&lt;application/octet-stream&gt;, headers={u'Content-Type': u'application/octet-stream', u'Accept': u'application/octet-stream'}, files=None, allow_redirects=True </msg>
<msg timestamp="20171026 00:09:58.522" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:09:58.522" starttime="20171026 00:09:48.715"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171026 00:09:58.523" starttime="20171026 00:09:58.523"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ret.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 00:09:58.524" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:09:58.524" starttime="20171026 00:09:58.523"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171026 00:09:58.524" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171026 00:09:58.524" starttime="20171026 00:09:58.524"></status>
</kw>
<status status="PASS" endtime="20171026 00:09:58.524" starttime="20171026 00:09:48.384"></status>
</kw>
<kw name="Verify Image Upload" library="code_update_utils">
<doc>Verify the image was uploaded correctly and that it created</doc>
<arguments>
<arg>${image_version}</arg>
</arguments>
<assign>
<var>${ret}</var>
<var>${version_id}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20171026 00:09:58.531" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20171026 00:09:58.531" starttime="20171026 00:09:58.531"></status>
</kw>
<msg timestamp="20171026 00:09:58.532" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20171026 00:09:58.532" starttime="20171026 00:09:58.530"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20171026 00:09:58.534" starttime="20171026 00:09:58.533"></status>
</kw>
<status status="PASS" endtime="20171026 00:09:58.534" starttime="20171026 00:09:58.533"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20171026 00:09:58.535" starttime="20171026 00:09:58.534"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20171026 00:09:58.536" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20171026 00:09:58.536" starttime="20171026 00:09:58.535"></status>
</kw>
<msg timestamp="20171026 00:09:58.536" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20171026 00:09:58.536" starttime="20171026 00:09:58.535"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20171026 00:09:58.538" starttime="20171026 00:09:58.537"></status>
</kw>
<status status="PASS" endtime="20171026 00:09:58.538" starttime="20171026 00:09:58.537"></status>
</kw>
<status status="PASS" endtime="20171026 00:09:58.538" starttime="20171026 00:09:58.536"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20171026 00:09:58.539" level="INFO">Logging into '9.5.180.47:22' as 'root'.</msg>
<msg timestamp="20171026 00:10:00.992" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20171026 00:10:00.992" starttime="20171026 00:09:58.539"></status>
</kw>
<status status="PASS" endtime="20171026 00:10:00.992" starttime="20171026 00:09:58.529"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>ls -d /tmp/images/*/</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20171026 00:10:01.001" level="INFO">Executing command 'ls -d /tmp/images/*/'.</msg>
<msg timestamp="20171026 00:10:01.182" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20171026 00:10:01.182" level="INFO">${stdout} = /tmp/images/347855ea/</msg>
<msg timestamp="20171026 00:10:01.182" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171026 00:10:01.182" starttime="20171026 00:10:01.000"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20171026 00:10:01.182" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20171026 00:10:01.183" starttime="20171026 00:10:01.182"></status>
</kw>
<status status="PASS" endtime="20171026 00:10:01.183" starttime="20171026 00:10:01.000"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20171026 00:10:01.188" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20171026 00:10:01.188" starttime="20171026 00:10:01.188"></status>
</kw>
<msg timestamp="20171026 00:10:01.188" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20171026 00:10:01.188" starttime="20171026 00:10:01.187"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20171026 00:10:01.189" starttime="20171026 00:10:01.189"></status>
</kw>
<status status="PASS" endtime="20171026 00:10:01.189" starttime="20171026 00:10:01.189"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20171026 00:10:01.190" starttime="20171026 00:10:01.190"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20171026 00:10:01.191" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20171026 00:10:01.192" starttime="20171026 00:10:01.191"></status>
</kw>
<msg timestamp="20171026 00:10:01.192" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20171026 00:10:01.192" starttime="20171026 00:10:01.191"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20171026 00:10:01.194" starttime="20171026 00:10:01.193"></status>
</kw>
<status status="PASS" endtime="20171026 00:10:01.194" starttime="20171026 00:10:01.193"></status>
</kw>
<status status="PASS" endtime="20171026 00:10:01.194" starttime="20171026 00:10:01.192"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20171026 00:10:01.194" level="INFO">Logging into '9.5.180.47:22' as 'root'.</msg>
<msg timestamp="20171026 00:10:03.441" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20171026 00:10:03.441" starttime="20171026 00:10:01.194"></status>
</kw>
<status status="PASS" endtime="20171026 00:10:03.441" starttime="20171026 00:10:01.186"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>cat /tmp/images/347855ea/MANIFEST | grep "version="</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20171026 00:10:03.449" level="INFO">Executing command 'cat /tmp/images/347855ea/MANIFEST | grep "version="'.</msg>
<msg timestamp="20171026 00:10:03.629" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20171026 00:10:03.629" level="INFO">${stdout} = version=v1.99.10-208-g69b2e34</msg>
<msg timestamp="20171026 00:10:03.629" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171026 00:10:03.629" starttime="20171026 00:10:03.449"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20171026 00:10:03.630" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20171026 00:10:03.630" starttime="20171026 00:10:03.630"></status>
</kw>
<status status="PASS" endtime="20171026 00:10:03.630" starttime="20171026 00:10:03.448"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20171026 00:10:03.635" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20171026 00:10:03.636" starttime="20171026 00:10:03.635"></status>
</kw>
<msg timestamp="20171026 00:10:03.636" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20171026 00:10:03.636" starttime="20171026 00:10:03.635"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20171026 00:10:03.637" starttime="20171026 00:10:03.637"></status>
</kw>
<status status="PASS" endtime="20171026 00:10:03.637" starttime="20171026 00:10:03.636"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20171026 00:10:03.638" starttime="20171026 00:10:03.637"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20171026 00:10:03.639" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20171026 00:10:03.639" starttime="20171026 00:10:03.639"></status>
</kw>
<msg timestamp="20171026 00:10:03.639" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20171026 00:10:03.639" starttime="20171026 00:10:03.638"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20171026 00:10:03.641" starttime="20171026 00:10:03.640"></status>
</kw>
<status status="PASS" endtime="20171026 00:10:03.641" starttime="20171026 00:10:03.640"></status>
</kw>
<status status="PASS" endtime="20171026 00:10:03.641" starttime="20171026 00:10:03.639"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20171026 00:10:03.642" level="INFO">Logging into '9.5.180.47:22' as 'root'.</msg>
<msg timestamp="20171026 00:10:05.678" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20171026 00:10:05.678" starttime="20171026 00:10:03.641"></status>
</kw>
<status status="PASS" endtime="20171026 00:10:05.678" starttime="20171026 00:10:03.634"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20171026 00:10:05.684" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20171026 00:10:05.684" starttime="20171026 00:10:05.684"></status>
</kw>
<msg timestamp="20171026 00:10:05.684" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20171026 00:10:05.684" starttime="20171026 00:10:05.683"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20171026 00:10:05.685" starttime="20171026 00:10:05.685"></status>
</kw>
<status status="PASS" endtime="20171026 00:10:05.685" starttime="20171026 00:10:05.685"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20171026 00:10:05.686" starttime="20171026 00:10:05.686"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20171026 00:10:05.687" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20171026 00:10:05.687" starttime="20171026 00:10:05.687"></status>
</kw>
<msg timestamp="20171026 00:10:05.687" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20171026 00:10:05.688" starttime="20171026 00:10:05.687"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20171026 00:10:05.689" starttime="20171026 00:10:05.689"></status>
</kw>
<status status="PASS" endtime="20171026 00:10:05.689" starttime="20171026 00:10:05.689"></status>
</kw>
<status status="PASS" endtime="20171026 00:10:05.689" starttime="20171026 00:10:05.688"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20171026 00:10:05.690" level="INFO">Logging into '9.5.180.47:22' as 'root'.</msg>
<msg timestamp="20171026 00:10:07.725" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20171026 00:10:07.726" starttime="20171026 00:10:05.690"></status>
</kw>
<status status="PASS" endtime="20171026 00:10:07.726" starttime="20171026 00:10:05.682"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>cat /tmp/images/347855ea/MANIFEST | grep "purpose="</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20171026 00:10:07.734" level="INFO">Executing command 'cat /tmp/images/347855ea/MANIFEST | grep "purpose="'.</msg>
<msg timestamp="20171026 00:10:07.914" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20171026 00:10:07.914" level="INFO">${stdout} = purpose=xyz.openbmc_project.Software.Version.VersionPurpose.BMC</msg>
<msg timestamp="20171026 00:10:07.914" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171026 00:10:07.914" starttime="20171026 00:10:07.734"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20171026 00:10:07.915" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20171026 00:10:07.915" starttime="20171026 00:10:07.915"></status>
</kw>
<status status="PASS" endtime="20171026 00:10:07.915" starttime="20171026 00:10:07.733"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/347855ea</arg>
<arg>Activation</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171026 00:10:07.925" level="INFO">Creating Session using : alias=openbmc, url=https://9.5.180.47, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171026 00:10:07.926" starttime="20171026 00:10:07.925"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171026 00:10:07.926" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171026 00:10:07.926" starttime="20171026 00:10:07.926"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171026 00:10:07.927" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171026 00:10:07.927" starttime="20171026 00:10:07.927"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171026 00:10:07.928" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171026 00:10:07.928" starttime="20171026 00:10:07.927"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171026 00:10:08.284" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171026 00:10:08.284" starttime="20171026 00:10:07.929"></status>
</kw>
<msg timestamp="20171026 00:10:08.284" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 00:10:08.284" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:10:08.284" starttime="20171026 00:10:07.928"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171026 00:10:08.285" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:10:08.285" starttime="20171026 00:10:08.285"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 00:10:08.286" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:10:08.286" starttime="20171026 00:10:08.286"></status>
</kw>
<status status="PASS" endtime="20171026 00:10:08.286" starttime="20171026 00:10:07.924"></status>
</kw>
<status status="PASS" endtime="20171026 00:10:08.286" starttime="20171026 00:10:07.924"></status>
</kw>
<status status="PASS" endtime="20171026 00:10:08.286" starttime="20171026 00:10:07.923"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171026 00:10:08.287" level="INFO">${base_uri} = /xyz/openbmc_project/software/347855ea/attr/Activation</msg>
<status status="PASS" endtime="20171026 00:10:08.287" starttime="20171026 00:10:08.287"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171026 00:10:08.289" level="INFO">${msg} = URI:https://9.5.180.47/xyz/openbmc_project/software/347855ea/attr/Activation, method:Get, args:{}</msg>
<status status="PASS" endtime="20171026 00:10:08.289" starttime="20171026 00:10:08.288"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171026 00:10:08.290" level="INFO">URI:https://9.5.180.47/xyz/openbmc_project/software/347855ea/attr/Activation, method:Get, args:{}</msg>
<status status="PASS" endtime="20171026 00:10:08.290" starttime="20171026 00:10:08.290"></status>
</kw>
<status status="PASS" endtime="20171026 00:10:08.290" starttime="20171026 00:10:08.289"></status>
</kw>
<status status="PASS" endtime="20171026 00:10:08.290" starttime="20171026 00:10:08.288"></status>
</kw>
<status status="PASS" endtime="20171026 00:10:08.290" starttime="20171026 00:10:08.287"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171026 00:10:08.491" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/347855ea/attr/Activation, headers=None json=None</msg>
<msg timestamp="20171026 00:10:08.491" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:10:08.491" starttime="20171026 00:10:08.291"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171026 00:10:08.493" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.Software.Activation.Activations.Ready", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171026 00:10:08.493" starttime="20171026 00:10:08.493"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171026 00:10:08.494" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.Software.Activation.Activations.Ready", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171026 00:10:08.494" starttime="20171026 00:10:08.494"></status>
</kw>
<status status="PASS" endtime="20171026 00:10:08.494" starttime="20171026 00:10:08.493"></status>
</kw>
<status status="PASS" endtime="20171026 00:10:08.494" starttime="20171026 00:10:08.492"></status>
</kw>
<status status="PASS" endtime="20171026 00:10:08.494" starttime="20171026 00:10:08.491"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171026 00:10:08.495" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171026 00:10:08.495" starttime="20171026 00:10:08.495"></status>
</kw>
<msg timestamp="20171026 00:10:08.495" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:10:08.495" starttime="20171026 00:10:07.922"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 00:10:08.496" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:10:08.496" starttime="20171026 00:10:08.496"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171026 00:10:08.497" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.Software.Activation.Activations.Ready", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171026 00:10:08.497" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171026 00:10:08.497" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.Software.Activation.Activations.Ready'}</msg>
<status status="PASS" endtime="20171026 00:10:08.497" starttime="20171026 00:10:08.496"></status>
</kw>
<status status="PASS" endtime="20171026 00:10:08.497" starttime="20171026 00:10:07.922"></status>
</kw>
<msg timestamp="20171026 00:10:08.497" level="INFO">${ret} = True</msg>
<msg timestamp="20171026 00:10:08.497" level="INFO">${version_id} = 347855ea</msg>
<status status="PASS" endtime="20171026 00:10:08.497" starttime="20171026 00:09:58.525"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171026 00:10:08.498" starttime="20171026 00:10:08.498"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${SOFTWARE_VERSION_URI}${version_id}</arg>
</arguments>
<assign>
<var>${software_state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171026 00:10:08.501" level="INFO">Creating Session using : alias=openbmc, url=https://9.5.180.47, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171026 00:10:08.501" starttime="20171026 00:10:08.501"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171026 00:10:08.502" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171026 00:10:08.502" starttime="20171026 00:10:08.502"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171026 00:10:08.503" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171026 00:10:08.503" starttime="20171026 00:10:08.502"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171026 00:10:08.503" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171026 00:10:08.504" starttime="20171026 00:10:08.503"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171026 00:10:08.826" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171026 00:10:08.826" starttime="20171026 00:10:08.504"></status>
</kw>
<msg timestamp="20171026 00:10:08.826" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 00:10:08.826" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:10:08.826" starttime="20171026 00:10:08.504"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171026 00:10:08.827" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:10:08.827" starttime="20171026 00:10:08.827"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 00:10:08.828" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:10:08.828" starttime="20171026 00:10:08.828"></status>
</kw>
<status status="PASS" endtime="20171026 00:10:08.828" starttime="20171026 00:10:08.500"></status>
</kw>
<status status="PASS" endtime="20171026 00:10:08.828" starttime="20171026 00:10:08.500"></status>
</kw>
<status status="PASS" endtime="20171026 00:10:08.828" starttime="20171026 00:10:08.499"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171026 00:10:08.829" level="INFO">${base_uri} = /xyz/openbmc_project/software/347855ea</msg>
<status status="PASS" endtime="20171026 00:10:08.829" starttime="20171026 00:10:08.829"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171026 00:10:08.832" level="INFO">${msg} = URI:https://9.5.180.47/xyz/openbmc_project/software/347855ea, method:Get, args:{}</msg>
<status status="PASS" endtime="20171026 00:10:08.832" starttime="20171026 00:10:08.831"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171026 00:10:08.833" level="INFO">URI:https://9.5.180.47/xyz/openbmc_project/software/347855ea, method:Get, args:{}</msg>
<status status="PASS" endtime="20171026 00:10:08.833" starttime="20171026 00:10:08.833"></status>
</kw>
<status status="PASS" endtime="20171026 00:10:08.834" starttime="20171026 00:10:08.832"></status>
</kw>
<status status="PASS" endtime="20171026 00:10:08.834" starttime="20171026 00:10:08.830"></status>
</kw>
<status status="PASS" endtime="20171026 00:10:08.834" starttime="20171026 00:10:08.829"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171026 00:10:08.991" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/347855ea, headers=None json=None</msg>
<msg timestamp="20171026 00:10:08.991" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:10:08.991" starttime="20171026 00:10:08.834"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171026 00:10:08.993" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Ready", 
    "Path": "/tmp/images/347855ea", 
    "Purpose": "xyz.openbmc_project.Softwa...</msg>
<status status="PASS" endtime="20171026 00:10:08.993" starttime="20171026 00:10:08.992"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171026 00:10:08.994" level="INFO">Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Ready", 
    "Path": "/tmp/images/347855ea", 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
    "Version": "v1.99.10-208-g69b2e34", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171026 00:10:08.994" starttime="20171026 00:10:08.993"></status>
</kw>
<status status="PASS" endtime="20171026 00:10:08.994" starttime="20171026 00:10:08.993"></status>
</kw>
<status status="PASS" endtime="20171026 00:10:08.995" starttime="20171026 00:10:08.992"></status>
</kw>
<status status="PASS" endtime="20171026 00:10:08.995" starttime="20171026 00:10:08.991"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171026 00:10:08.995" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171026 00:10:08.995" starttime="20171026 00:10:08.995"></status>
</kw>
<msg timestamp="20171026 00:10:08.996" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:10:08.996" starttime="20171026 00:10:08.498"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 00:10:08.996" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:10:08.996" starttime="20171026 00:10:08.996"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171026 00:10:08.997" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Ready", 
    "Path": "/tmp/images/347855ea", 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
    "Version": "v1.99.10-208-g69b2e34", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171026 00:10:08.997" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171026 00:10:08.997" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20171026 00:10:08.997" starttime="20171026 00:10:08.997"></status>
</kw>
<msg timestamp="20171026 00:10:08.997" level="INFO">${software_state} = {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Ready...</msg>
<status status="PASS" endtime="20171026 00:10:08.997" starttime="20171026 00:10:08.498"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>&amp;{software_state}[Activation]</arg>
</arguments>
<assign>
<var>${activation}</var>
</assign>
<msg timestamp="20171026 00:10:08.998" level="INFO">${activation} = xyz.openbmc_project.Software.Activation.Activations.Ready</msg>
<status status="PASS" endtime="20171026 00:10:08.998" starttime="20171026 00:10:08.998"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${skip_if_active}' == 'true' and '${activation}' == '${ACTIVE}'</arg>
<arg>Switch To Active Image And Pass</arg>
<arg>${SOFTWARE_VERSION_URI}${version_id}</arg>
</arguments>
<status status="PASS" endtime="20171026 00:10:08.999" starttime="20171026 00:10:08.999"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>&amp;{software_state}[Activation]</arg>
<arg>${READY}</arg>
</arguments>
<msg timestamp="20171026 00:10:09.000" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20171026 00:10:09.000" starttime="20171026 00:10:08.999"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${REQUESTED_ACTIVE}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20171026 00:10:09.001" level="INFO">${args} = {u'data': 'xyz.openbmc_project.Software.Activation.RequestedActivations.Active'}</msg>
<status status="PASS" endtime="20171026 00:10:09.001" starttime="20171026 00:10:09.000"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<doc>Write a D-Bus attribute with REST.</doc>
<arguments>
<arg>${SOFTWARE_VERSION_URI}${version_id}</arg>
<arg>RequestedActivation</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171026 00:10:09.002" level="INFO">${base_uri} = /xyz/openbmc_project/software/347855ea</msg>
<status status="PASS" endtime="20171026 00:10:09.002" starttime="20171026 00:10:09.002"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171026 00:10:09.005" level="INFO">Creating Session using : alias=openbmc, url=https://9.5.180.47, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171026 00:10:09.006" starttime="20171026 00:10:09.005"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171026 00:10:09.006" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171026 00:10:09.006" starttime="20171026 00:10:09.006"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171026 00:10:09.007" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171026 00:10:09.007" starttime="20171026 00:10:09.007"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171026 00:10:09.008" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171026 00:10:09.008" starttime="20171026 00:10:09.007"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171026 00:10:09.326" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171026 00:10:09.326" starttime="20171026 00:10:09.009"></status>
</kw>
<msg timestamp="20171026 00:10:09.326" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 00:10:09.326" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:10:09.326" starttime="20171026 00:10:09.008"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171026 00:10:09.326" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:10:09.327" starttime="20171026 00:10:09.326"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 00:10:09.327" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:10:09.328" starttime="20171026 00:10:09.327"></status>
</kw>
<status status="PASS" endtime="20171026 00:10:09.328" starttime="20171026 00:10:09.004"></status>
</kw>
<status status="PASS" endtime="20171026 00:10:09.328" starttime="20171026 00:10:09.004"></status>
</kw>
<status status="PASS" endtime="20171026 00:10:09.328" starttime="20171026 00:10:09.003"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171026 00:10:09.328" level="INFO">${base_uri} = /xyz/openbmc_project/software/347855ea/attr/RequestedActivation</msg>
<status status="PASS" endtime="20171026 00:10:09.329" starttime="20171026 00:10:09.328"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171026 00:10:09.329" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171026 00:10:09.329" starttime="20171026 00:10:09.329"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20171026 00:10:09.330" starttime="20171026 00:10:09.329"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171026 00:10:09.331" level="INFO">${msg} = URI:https://9.5.180.47/xyz/openbmc_project/software/347855ea/attr/RequestedActivation, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.Software.Activation.RequestedActivations.Active'}, u'he...</msg>
<status status="PASS" endtime="20171026 00:10:09.331" starttime="20171026 00:10:09.331"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171026 00:10:09.332" level="INFO">URI:https://9.5.180.47/xyz/openbmc_project/software/347855ea/attr/RequestedActivation, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.Software.Activation.RequestedActivations.Active'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20171026 00:10:09.333" starttime="20171026 00:10:09.332"></status>
</kw>
<status status="PASS" endtime="20171026 00:10:09.333" starttime="20171026 00:10:09.332"></status>
</kw>
<status status="PASS" endtime="20171026 00:10:09.333" starttime="20171026 00:10:09.330"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171026 00:10:10.191" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/software/347855ea/attr/RequestedActivation, data={"data": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20171026 00:10:10.191" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:10:10.191" starttime="20171026 00:10:09.333"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171026 00:10:10.193" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171026 00:10:10.193" starttime="20171026 00:10:10.192"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171026 00:10:10.194" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171026 00:10:10.194" starttime="20171026 00:10:10.193"></status>
</kw>
<status status="PASS" endtime="20171026 00:10:10.194" starttime="20171026 00:10:10.193"></status>
</kw>
<status status="PASS" endtime="20171026 00:10:10.194" starttime="20171026 00:10:10.191"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171026 00:10:10.194" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171026 00:10:10.194" starttime="20171026 00:10:10.194"></status>
</kw>
<msg timestamp="20171026 00:10:10.195" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:10:10.195" starttime="20171026 00:10:09.002"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 00:10:10.195" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:10:10.195" starttime="20171026 00:10:10.195"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${verify} == ${FALSE}</arg>
</arguments>
<msg timestamp="20171026 00:10:10.196" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20171026 00:10:10.196" starttime="20171026 00:10:10.196"></status>
</kw>
<status status="PASS" endtime="20171026 00:10:10.196" starttime="20171026 00:10:09.001"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${SOFTWARE_VERSION_URI}${version_id}</arg>
</arguments>
<assign>
<var>${software_state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171026 00:10:10.206" level="INFO">Creating Session using : alias=openbmc, url=https://9.5.180.47, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171026 00:10:10.207" starttime="20171026 00:10:10.206"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171026 00:10:10.207" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171026 00:10:10.207" starttime="20171026 00:10:10.207"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171026 00:10:10.208" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171026 00:10:10.208" starttime="20171026 00:10:10.208"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171026 00:10:10.209" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171026 00:10:10.209" starttime="20171026 00:10:10.208"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171026 00:10:11.007" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171026 00:10:11.007" starttime="20171026 00:10:10.209"></status>
</kw>
<msg timestamp="20171026 00:10:11.007" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 00:10:11.007" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:10:11.007" starttime="20171026 00:10:10.209"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171026 00:10:11.008" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:10:11.008" starttime="20171026 00:10:11.008"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 00:10:11.009" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:10:11.009" starttime="20171026 00:10:11.008"></status>
</kw>
<status status="PASS" endtime="20171026 00:10:11.009" starttime="20171026 00:10:10.205"></status>
</kw>
<status status="PASS" endtime="20171026 00:10:11.009" starttime="20171026 00:10:10.205"></status>
</kw>
<status status="PASS" endtime="20171026 00:10:11.009" starttime="20171026 00:10:10.198"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171026 00:10:11.010" level="INFO">${base_uri} = /xyz/openbmc_project/software/347855ea</msg>
<status status="PASS" endtime="20171026 00:10:11.010" starttime="20171026 00:10:11.009"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171026 00:10:11.012" level="INFO">${msg} = URI:https://9.5.180.47/xyz/openbmc_project/software/347855ea, method:Get, args:{}</msg>
<status status="PASS" endtime="20171026 00:10:11.012" starttime="20171026 00:10:11.011"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171026 00:10:11.013" level="INFO">URI:https://9.5.180.47/xyz/openbmc_project/software/347855ea, method:Get, args:{}</msg>
<status status="PASS" endtime="20171026 00:10:11.013" starttime="20171026 00:10:11.013"></status>
</kw>
<status status="PASS" endtime="20171026 00:10:11.013" starttime="20171026 00:10:11.012"></status>
</kw>
<status status="PASS" endtime="20171026 00:10:11.013" starttime="20171026 00:10:11.010"></status>
</kw>
<status status="PASS" endtime="20171026 00:10:11.013" starttime="20171026 00:10:11.010"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171026 00:10:11.192" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/347855ea, headers=None json=None</msg>
<msg timestamp="20171026 00:10:11.192" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:10:11.192" starttime="20171026 00:10:11.014"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171026 00:10:11.194" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/347855ea", 
    "Progress": 30, 
    "Purpose": "...</msg>
<status status="PASS" endtime="20171026 00:10:11.194" starttime="20171026 00:10:11.193"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171026 00:10:11.195" level="INFO">Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/347855ea", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-208-g69b2e34", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171026 00:10:11.195" starttime="20171026 00:10:11.195"></status>
</kw>
<status status="PASS" endtime="20171026 00:10:11.195" starttime="20171026 00:10:11.194"></status>
</kw>
<status status="PASS" endtime="20171026 00:10:11.195" starttime="20171026 00:10:11.193"></status>
</kw>
<status status="PASS" endtime="20171026 00:10:11.195" starttime="20171026 00:10:11.192"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171026 00:10:11.200" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171026 00:10:11.200" starttime="20171026 00:10:11.200"></status>
</kw>
<msg timestamp="20171026 00:10:11.200" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:10:11.200" starttime="20171026 00:10:10.197"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 00:10:11.201" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:10:11.201" starttime="20171026 00:10:11.200"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171026 00:10:11.201" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/347855ea", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-208-g69b2e34", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171026 00:10:11.201" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171026 00:10:11.202" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20171026 00:10:11.202" starttime="20171026 00:10:11.201"></status>
</kw>
<msg timestamp="20171026 00:10:11.202" level="INFO">${software_state} = {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Activ...</msg>
<status status="PASS" endtime="20171026 00:10:11.202" starttime="20171026 00:10:10.196"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>&amp;{software_state}[RequestedActivation]</arg>
<arg>${REQUESTED_ACTIVE}</arg>
</arguments>
<msg timestamp="20171026 00:10:11.203" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20171026 00:10:11.203" starttime="20171026 00:10:11.202"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>${version_id}</arg>
</arguments>
<status status="PASS" endtime="20171026 00:10:11.203" starttime="20171026 00:10:11.203"></status>
</kw>
<kw name="Wait For Activation State Change" library="code_update_utils">
<doc>Wait for the current activation state of ${version_id} to</doc>
<arguments>
<arg>${version_id}</arg>
<arg>${ACTIVATING}</arg>
</arguments>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20171026 00:10:11.209" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20171026 00:10:11.209" starttime="20171026 00:10:11.209"></status>
</kw>
<msg timestamp="20171026 00:10:11.210" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20171026 00:10:11.210" starttime="20171026 00:10:11.209"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20171026 00:10:11.211" starttime="20171026 00:10:11.211"></status>
</kw>
<status status="PASS" endtime="20171026 00:10:11.211" starttime="20171026 00:10:11.210"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20171026 00:10:11.212" starttime="20171026 00:10:11.211"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20171026 00:10:11.213" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20171026 00:10:11.213" starttime="20171026 00:10:11.212"></status>
</kw>
<msg timestamp="20171026 00:10:11.213" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20171026 00:10:11.213" starttime="20171026 00:10:11.212"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20171026 00:10:11.216" starttime="20171026 00:10:11.215"></status>
</kw>
<status status="PASS" endtime="20171026 00:10:11.216" starttime="20171026 00:10:11.214"></status>
</kw>
<status status="PASS" endtime="20171026 00:10:11.216" starttime="20171026 00:10:11.213"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20171026 00:10:11.216" level="INFO">Logging into '9.5.180.47:22' as 'root'.</msg>
<msg timestamp="20171026 00:10:13.766" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20171026 00:10:13.766" starttime="20171026 00:10:11.216"></status>
</kw>
<status status="PASS" endtime="20171026 00:10:13.767" starttime="20171026 00:10:11.208"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/347855ea</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171026 00:10:13.777" level="INFO">Creating Session using : alias=openbmc, url=https://9.5.180.47, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171026 00:10:13.778" starttime="20171026 00:10:13.777"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171026 00:10:13.778" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171026 00:10:13.779" starttime="20171026 00:10:13.778"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171026 00:10:13.780" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171026 00:10:13.780" starttime="20171026 00:10:13.779"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171026 00:10:13.781" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171026 00:10:13.781" starttime="20171026 00:10:13.780"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171026 00:10:14.099" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171026 00:10:14.099" starttime="20171026 00:10:13.782"></status>
</kw>
<msg timestamp="20171026 00:10:14.099" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 00:10:14.099" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:10:14.099" starttime="20171026 00:10:13.781"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171026 00:10:14.100" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:10:14.100" starttime="20171026 00:10:14.099"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 00:10:14.100" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:10:14.100" starttime="20171026 00:10:14.100"></status>
</kw>
<status status="PASS" endtime="20171026 00:10:14.101" starttime="20171026 00:10:13.776"></status>
</kw>
<status status="PASS" endtime="20171026 00:10:14.101" starttime="20171026 00:10:13.776"></status>
</kw>
<status status="PASS" endtime="20171026 00:10:14.101" starttime="20171026 00:10:13.775"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171026 00:10:14.101" level="INFO">${base_uri} = /xyz/openbmc_project/software/347855ea</msg>
<status status="PASS" endtime="20171026 00:10:14.101" starttime="20171026 00:10:14.101"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171026 00:10:14.104" level="INFO">${msg} = URI:https://9.5.180.47/xyz/openbmc_project/software/347855ea, method:Get, args:{}</msg>
<status status="PASS" endtime="20171026 00:10:14.104" starttime="20171026 00:10:14.103"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171026 00:10:14.105" level="INFO">URI:https://9.5.180.47/xyz/openbmc_project/software/347855ea, method:Get, args:{}</msg>
<status status="PASS" endtime="20171026 00:10:14.105" starttime="20171026 00:10:14.104"></status>
</kw>
<status status="PASS" endtime="20171026 00:10:14.105" starttime="20171026 00:10:14.104"></status>
</kw>
<status status="PASS" endtime="20171026 00:10:14.105" starttime="20171026 00:10:14.102"></status>
</kw>
<status status="PASS" endtime="20171026 00:10:14.105" starttime="20171026 00:10:14.102"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171026 00:10:14.287" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/347855ea, headers=None json=None</msg>
<msg timestamp="20171026 00:10:14.287" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:10:14.287" starttime="20171026 00:10:14.105"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171026 00:10:14.289" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/347855ea", 
    "Progress": 30, 
    "Purpose": "...</msg>
<status status="PASS" endtime="20171026 00:10:14.289" starttime="20171026 00:10:14.288"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171026 00:10:14.290" level="INFO">Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/347855ea", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-208-g69b2e34", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171026 00:10:14.290" starttime="20171026 00:10:14.290"></status>
</kw>
<status status="PASS" endtime="20171026 00:10:14.290" starttime="20171026 00:10:14.289"></status>
</kw>
<status status="PASS" endtime="20171026 00:10:14.290" starttime="20171026 00:10:14.288"></status>
</kw>
<status status="PASS" endtime="20171026 00:10:14.290" starttime="20171026 00:10:14.287"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171026 00:10:14.291" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171026 00:10:14.291" starttime="20171026 00:10:14.291"></status>
</kw>
<msg timestamp="20171026 00:10:14.295" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:10:14.295" starttime="20171026 00:10:13.774"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 00:10:14.296" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:10:14.296" starttime="20171026 00:10:14.295"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171026 00:10:14.297" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/347855ea", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-208-g69b2e34", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171026 00:10:14.297" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171026 00:10:14.297" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20171026 00:10:14.297" starttime="20171026 00:10:14.296"></status>
</kw>
<status status="PASS" endtime="20171026 00:10:14.298" starttime="20171026 00:10:13.774"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/347855ea</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171026 00:10:24.315" level="INFO">Creating Session using : alias=openbmc, url=https://9.5.180.47, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171026 00:10:24.315" starttime="20171026 00:10:24.314"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171026 00:10:24.316" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171026 00:10:24.316" starttime="20171026 00:10:24.315"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171026 00:10:24.316" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171026 00:10:24.316" starttime="20171026 00:10:24.316"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171026 00:10:24.317" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171026 00:10:24.317" starttime="20171026 00:10:24.317"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171026 00:10:25.119" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171026 00:10:25.119" starttime="20171026 00:10:24.318"></status>
</kw>
<msg timestamp="20171026 00:10:25.119" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 00:10:25.119" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:10:25.119" starttime="20171026 00:10:24.318"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171026 00:10:25.120" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:10:25.120" starttime="20171026 00:10:25.119"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 00:10:25.120" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:10:25.120" starttime="20171026 00:10:25.120"></status>
</kw>
<status status="PASS" endtime="20171026 00:10:25.121" starttime="20171026 00:10:24.314"></status>
</kw>
<status status="PASS" endtime="20171026 00:10:25.121" starttime="20171026 00:10:24.313"></status>
</kw>
<status status="PASS" endtime="20171026 00:10:25.121" starttime="20171026 00:10:24.313"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171026 00:10:25.121" level="INFO">${base_uri} = /xyz/openbmc_project/software/347855ea</msg>
<status status="PASS" endtime="20171026 00:10:25.121" starttime="20171026 00:10:25.121"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171026 00:10:25.124" level="INFO">${msg} = URI:https://9.5.180.47/xyz/openbmc_project/software/347855ea, method:Get, args:{}</msg>
<status status="PASS" endtime="20171026 00:10:25.124" starttime="20171026 00:10:25.123"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171026 00:10:25.125" level="INFO">URI:https://9.5.180.47/xyz/openbmc_project/software/347855ea, method:Get, args:{}</msg>
<status status="PASS" endtime="20171026 00:10:25.125" starttime="20171026 00:10:25.125"></status>
</kw>
<status status="PASS" endtime="20171026 00:10:25.125" starttime="20171026 00:10:25.124"></status>
</kw>
<status status="PASS" endtime="20171026 00:10:25.125" starttime="20171026 00:10:25.122"></status>
</kw>
<status status="PASS" endtime="20171026 00:10:25.125" starttime="20171026 00:10:25.122"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171026 00:10:25.640" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/347855ea, headers=None json=None</msg>
<msg timestamp="20171026 00:10:25.640" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:10:25.640" starttime="20171026 00:10:25.126"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171026 00:10:25.642" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/347855ea", 
    "Progress": 30, 
    "Purpose": "...</msg>
<status status="PASS" endtime="20171026 00:10:25.642" starttime="20171026 00:10:25.641"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171026 00:10:25.643" level="INFO">Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/347855ea", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-208-g69b2e34", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171026 00:10:25.643" starttime="20171026 00:10:25.643"></status>
</kw>
<status status="PASS" endtime="20171026 00:10:25.643" starttime="20171026 00:10:25.642"></status>
</kw>
<status status="PASS" endtime="20171026 00:10:25.643" starttime="20171026 00:10:25.641"></status>
</kw>
<status status="PASS" endtime="20171026 00:10:25.643" starttime="20171026 00:10:25.640"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171026 00:10:25.644" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171026 00:10:25.644" starttime="20171026 00:10:25.644"></status>
</kw>
<msg timestamp="20171026 00:10:25.644" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:10:25.644" starttime="20171026 00:10:24.312"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 00:10:25.645" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:10:25.645" starttime="20171026 00:10:25.645"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171026 00:10:25.646" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/347855ea", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-208-g69b2e34", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171026 00:10:25.646" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171026 00:10:25.646" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20171026 00:10:25.646" starttime="20171026 00:10:25.645"></status>
</kw>
<status status="PASS" endtime="20171026 00:10:25.646" starttime="20171026 00:10:24.311"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/347855ea</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171026 00:10:35.667" level="INFO">Creating Session using : alias=openbmc, url=https://9.5.180.47, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171026 00:10:35.668" starttime="20171026 00:10:35.667"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171026 00:10:35.669" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171026 00:10:35.669" starttime="20171026 00:10:35.668"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171026 00:10:35.670" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171026 00:10:35.670" starttime="20171026 00:10:35.669"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171026 00:10:35.671" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171026 00:10:35.671" starttime="20171026 00:10:35.670"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171026 00:10:35.982" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171026 00:10:35.982" starttime="20171026 00:10:35.672"></status>
</kw>
<msg timestamp="20171026 00:10:35.983" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 00:10:35.983" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:10:35.983" starttime="20171026 00:10:35.671"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171026 00:10:35.983" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:10:35.983" starttime="20171026 00:10:35.983"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 00:10:35.984" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:10:35.984" starttime="20171026 00:10:35.984"></status>
</kw>
<status status="PASS" endtime="20171026 00:10:35.984" starttime="20171026 00:10:35.666"></status>
</kw>
<status status="PASS" endtime="20171026 00:10:35.984" starttime="20171026 00:10:35.666"></status>
</kw>
<status status="PASS" endtime="20171026 00:10:35.984" starttime="20171026 00:10:35.665"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171026 00:10:35.985" level="INFO">${base_uri} = /xyz/openbmc_project/software/347855ea</msg>
<status status="PASS" endtime="20171026 00:10:35.985" starttime="20171026 00:10:35.985"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171026 00:10:35.987" level="INFO">${msg} = URI:https://9.5.180.47/xyz/openbmc_project/software/347855ea, method:Get, args:{}</msg>
<status status="PASS" endtime="20171026 00:10:35.987" starttime="20171026 00:10:35.987"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171026 00:10:35.988" level="INFO">URI:https://9.5.180.47/xyz/openbmc_project/software/347855ea, method:Get, args:{}</msg>
<status status="PASS" endtime="20171026 00:10:35.988" starttime="20171026 00:10:35.988"></status>
</kw>
<status status="PASS" endtime="20171026 00:10:35.988" starttime="20171026 00:10:35.987"></status>
</kw>
<status status="PASS" endtime="20171026 00:10:35.989" starttime="20171026 00:10:35.986"></status>
</kw>
<status status="PASS" endtime="20171026 00:10:35.989" starttime="20171026 00:10:35.985"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171026 00:10:37.440" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/347855ea, headers=None json=None</msg>
<msg timestamp="20171026 00:10:37.440" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:10:37.440" starttime="20171026 00:10:35.989"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171026 00:10:37.442" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/347855ea", 
    "Progress": 30, 
    "Purpose": "...</msg>
<status status="PASS" endtime="20171026 00:10:37.442" starttime="20171026 00:10:37.441"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171026 00:10:37.443" level="INFO">Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/347855ea", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-208-g69b2e34", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171026 00:10:37.443" starttime="20171026 00:10:37.443"></status>
</kw>
<status status="PASS" endtime="20171026 00:10:37.443" starttime="20171026 00:10:37.442"></status>
</kw>
<status status="PASS" endtime="20171026 00:10:37.443" starttime="20171026 00:10:37.441"></status>
</kw>
<status status="PASS" endtime="20171026 00:10:37.444" starttime="20171026 00:10:37.440"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171026 00:10:37.444" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171026 00:10:37.444" starttime="20171026 00:10:37.444"></status>
</kw>
<msg timestamp="20171026 00:10:37.444" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:10:37.444" starttime="20171026 00:10:35.664"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 00:10:37.445" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:10:37.445" starttime="20171026 00:10:37.445"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171026 00:10:37.446" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/347855ea", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-208-g69b2e34", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171026 00:10:37.446" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171026 00:10:37.446" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20171026 00:10:37.446" starttime="20171026 00:10:37.445"></status>
</kw>
<status status="PASS" endtime="20171026 00:10:37.446" starttime="20171026 00:10:35.664"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/347855ea</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171026 00:10:47.467" level="INFO">Creating Session using : alias=openbmc, url=https://9.5.180.47, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171026 00:10:47.471" starttime="20171026 00:10:47.467"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171026 00:10:47.472" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171026 00:10:47.472" starttime="20171026 00:10:47.472"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171026 00:10:47.473" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171026 00:10:47.473" starttime="20171026 00:10:47.473"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171026 00:10:47.474" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171026 00:10:47.474" starttime="20171026 00:10:47.474"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171026 00:10:47.794" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171026 00:10:47.794" starttime="20171026 00:10:47.476"></status>
</kw>
<msg timestamp="20171026 00:10:47.794" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 00:10:47.794" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:10:47.794" starttime="20171026 00:10:47.475"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171026 00:10:47.795" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:10:47.795" starttime="20171026 00:10:47.795"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 00:10:47.796" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:10:47.796" starttime="20171026 00:10:47.795"></status>
</kw>
<status status="PASS" endtime="20171026 00:10:47.796" starttime="20171026 00:10:47.466"></status>
</kw>
<status status="PASS" endtime="20171026 00:10:47.796" starttime="20171026 00:10:47.466"></status>
</kw>
<status status="PASS" endtime="20171026 00:10:47.796" starttime="20171026 00:10:47.465"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171026 00:10:47.797" level="INFO">${base_uri} = /xyz/openbmc_project/software/347855ea</msg>
<status status="PASS" endtime="20171026 00:10:47.797" starttime="20171026 00:10:47.797"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171026 00:10:47.799" level="INFO">${msg} = URI:https://9.5.180.47/xyz/openbmc_project/software/347855ea, method:Get, args:{}</msg>
<status status="PASS" endtime="20171026 00:10:47.799" starttime="20171026 00:10:47.798"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171026 00:10:47.800" level="INFO">URI:https://9.5.180.47/xyz/openbmc_project/software/347855ea, method:Get, args:{}</msg>
<status status="PASS" endtime="20171026 00:10:47.800" starttime="20171026 00:10:47.800"></status>
</kw>
<status status="PASS" endtime="20171026 00:10:47.800" starttime="20171026 00:10:47.799"></status>
</kw>
<status status="PASS" endtime="20171026 00:10:47.800" starttime="20171026 00:10:47.798"></status>
</kw>
<status status="PASS" endtime="20171026 00:10:47.800" starttime="20171026 00:10:47.797"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171026 00:10:48.719" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/347855ea, headers=None json=None</msg>
<msg timestamp="20171026 00:10:48.719" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:10:48.719" starttime="20171026 00:10:47.801"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171026 00:10:48.721" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/347855ea", 
    "Progress": 30, 
    "Purpose": "...</msg>
<status status="PASS" endtime="20171026 00:10:48.721" starttime="20171026 00:10:48.721"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171026 00:10:48.722" level="INFO">Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/347855ea", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-208-g69b2e34", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171026 00:10:48.722" starttime="20171026 00:10:48.722"></status>
</kw>
<status status="PASS" endtime="20171026 00:10:48.722" starttime="20171026 00:10:48.721"></status>
</kw>
<status status="PASS" endtime="20171026 00:10:48.723" starttime="20171026 00:10:48.720"></status>
</kw>
<status status="PASS" endtime="20171026 00:10:48.723" starttime="20171026 00:10:48.720"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171026 00:10:48.723" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171026 00:10:48.723" starttime="20171026 00:10:48.723"></status>
</kw>
<msg timestamp="20171026 00:10:48.724" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:10:48.724" starttime="20171026 00:10:47.464"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 00:10:48.724" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:10:48.724" starttime="20171026 00:10:48.724"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171026 00:10:48.725" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/347855ea", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-208-g69b2e34", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171026 00:10:48.725" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171026 00:10:48.725" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20171026 00:10:48.725" starttime="20171026 00:10:48.725"></status>
</kw>
<status status="PASS" endtime="20171026 00:10:48.725" starttime="20171026 00:10:47.464"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/347855ea</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171026 00:10:58.747" level="INFO">Creating Session using : alias=openbmc, url=https://9.5.180.47, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171026 00:10:58.747" starttime="20171026 00:10:58.746"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171026 00:10:58.748" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171026 00:10:58.748" starttime="20171026 00:10:58.748"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171026 00:10:58.749" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171026 00:10:58.749" starttime="20171026 00:10:58.748"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171026 00:10:58.749" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171026 00:10:58.749" starttime="20171026 00:10:58.749"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171026 00:10:59.060" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171026 00:10:59.061" starttime="20171026 00:10:58.750"></status>
</kw>
<msg timestamp="20171026 00:10:59.061" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 00:10:59.061" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:10:59.061" starttime="20171026 00:10:58.750"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171026 00:10:59.061" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:10:59.062" starttime="20171026 00:10:59.061"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 00:10:59.062" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:10:59.062" starttime="20171026 00:10:59.062"></status>
</kw>
<status status="PASS" endtime="20171026 00:10:59.062" starttime="20171026 00:10:58.746"></status>
</kw>
<status status="PASS" endtime="20171026 00:10:59.063" starttime="20171026 00:10:58.745"></status>
</kw>
<status status="PASS" endtime="20171026 00:10:59.063" starttime="20171026 00:10:58.744"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171026 00:10:59.063" level="INFO">${base_uri} = /xyz/openbmc_project/software/347855ea</msg>
<status status="PASS" endtime="20171026 00:10:59.063" starttime="20171026 00:10:59.063"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171026 00:10:59.066" level="INFO">${msg} = URI:https://9.5.180.47/xyz/openbmc_project/software/347855ea, method:Get, args:{}</msg>
<status status="PASS" endtime="20171026 00:10:59.066" starttime="20171026 00:10:59.065"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171026 00:10:59.067" level="INFO">URI:https://9.5.180.47/xyz/openbmc_project/software/347855ea, method:Get, args:{}</msg>
<status status="PASS" endtime="20171026 00:10:59.067" starttime="20171026 00:10:59.066"></status>
</kw>
<status status="PASS" endtime="20171026 00:10:59.067" starttime="20171026 00:10:59.066"></status>
</kw>
<status status="PASS" endtime="20171026 00:10:59.067" starttime="20171026 00:10:59.064"></status>
</kw>
<status status="PASS" endtime="20171026 00:10:59.067" starttime="20171026 00:10:59.064"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171026 00:10:59.234" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/347855ea, headers=None json=None</msg>
<msg timestamp="20171026 00:10:59.234" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:10:59.234" starttime="20171026 00:10:59.067"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171026 00:10:59.237" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/347855ea", 
    "Progress": 30, 
    "Purpose": "...</msg>
<status status="PASS" endtime="20171026 00:10:59.237" starttime="20171026 00:10:59.236"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171026 00:10:59.238" level="INFO">Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/347855ea", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-208-g69b2e34", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171026 00:10:59.238" starttime="20171026 00:10:59.237"></status>
</kw>
<status status="PASS" endtime="20171026 00:10:59.238" starttime="20171026 00:10:59.237"></status>
</kw>
<status status="PASS" endtime="20171026 00:10:59.238" starttime="20171026 00:10:59.235"></status>
</kw>
<status status="PASS" endtime="20171026 00:10:59.238" starttime="20171026 00:10:59.235"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171026 00:10:59.239" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171026 00:10:59.239" starttime="20171026 00:10:59.238"></status>
</kw>
<msg timestamp="20171026 00:10:59.239" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:10:59.239" starttime="20171026 00:10:58.744"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 00:10:59.240" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:10:59.240" starttime="20171026 00:10:59.239"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171026 00:10:59.241" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/347855ea", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-208-g69b2e34", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171026 00:10:59.241" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171026 00:10:59.241" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20171026 00:10:59.241" starttime="20171026 00:10:59.240"></status>
</kw>
<status status="PASS" endtime="20171026 00:10:59.241" starttime="20171026 00:10:58.743"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/347855ea</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171026 00:11:09.255" level="INFO">Creating Session using : alias=openbmc, url=https://9.5.180.47, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171026 00:11:09.255" starttime="20171026 00:11:09.254"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171026 00:11:09.256" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171026 00:11:09.256" starttime="20171026 00:11:09.256"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171026 00:11:09.257" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171026 00:11:09.257" starttime="20171026 00:11:09.257"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171026 00:11:09.258" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171026 00:11:09.259" starttime="20171026 00:11:09.258"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171026 00:11:09.888" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171026 00:11:09.889" starttime="20171026 00:11:09.260"></status>
</kw>
<msg timestamp="20171026 00:11:09.889" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 00:11:09.889" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:11:09.889" starttime="20171026 00:11:09.259"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171026 00:11:09.890" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:11:09.890" starttime="20171026 00:11:09.889"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 00:11:09.890" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:11:09.890" starttime="20171026 00:11:09.890"></status>
</kw>
<status status="PASS" endtime="20171026 00:11:09.890" starttime="20171026 00:11:09.254"></status>
</kw>
<status status="PASS" endtime="20171026 00:11:09.891" starttime="20171026 00:11:09.253"></status>
</kw>
<status status="PASS" endtime="20171026 00:11:09.891" starttime="20171026 00:11:09.252"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171026 00:11:09.891" level="INFO">${base_uri} = /xyz/openbmc_project/software/347855ea</msg>
<status status="PASS" endtime="20171026 00:11:09.891" starttime="20171026 00:11:09.891"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171026 00:11:09.895" level="INFO">${msg} = URI:https://9.5.180.47/xyz/openbmc_project/software/347855ea, method:Get, args:{}</msg>
<status status="PASS" endtime="20171026 00:11:09.895" starttime="20171026 00:11:09.894"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171026 00:11:09.897" level="INFO">URI:https://9.5.180.47/xyz/openbmc_project/software/347855ea, method:Get, args:{}</msg>
<status status="PASS" endtime="20171026 00:11:09.897" starttime="20171026 00:11:09.896"></status>
</kw>
<status status="PASS" endtime="20171026 00:11:09.897" starttime="20171026 00:11:09.896"></status>
</kw>
<status status="PASS" endtime="20171026 00:11:09.897" starttime="20171026 00:11:09.893"></status>
</kw>
<status status="PASS" endtime="20171026 00:11:09.897" starttime="20171026 00:11:09.892"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171026 00:11:10.876" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/347855ea, headers=None json=None</msg>
<msg timestamp="20171026 00:11:10.876" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:11:10.876" starttime="20171026 00:11:09.897"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171026 00:11:10.878" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/347855ea", 
    "Progress": 30, 
    "Purpose": "...</msg>
<status status="PASS" endtime="20171026 00:11:10.878" starttime="20171026 00:11:10.878"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171026 00:11:10.879" level="INFO">Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/347855ea", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-208-g69b2e34", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171026 00:11:10.879" starttime="20171026 00:11:10.879"></status>
</kw>
<status status="PASS" endtime="20171026 00:11:10.879" starttime="20171026 00:11:10.878"></status>
</kw>
<status status="PASS" endtime="20171026 00:11:10.879" starttime="20171026 00:11:10.877"></status>
</kw>
<status status="PASS" endtime="20171026 00:11:10.880" starttime="20171026 00:11:10.877"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171026 00:11:10.880" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171026 00:11:10.880" starttime="20171026 00:11:10.880"></status>
</kw>
<msg timestamp="20171026 00:11:10.880" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:11:10.880" starttime="20171026 00:11:09.252"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 00:11:10.881" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:11:10.881" starttime="20171026 00:11:10.881"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171026 00:11:10.882" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/347855ea", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-208-g69b2e34", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171026 00:11:10.882" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171026 00:11:10.882" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20171026 00:11:10.882" starttime="20171026 00:11:10.881"></status>
</kw>
<status status="PASS" endtime="20171026 00:11:10.882" starttime="20171026 00:11:09.251"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/347855ea</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171026 00:11:20.898" level="INFO">Creating Session using : alias=openbmc, url=https://9.5.180.47, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171026 00:11:20.899" starttime="20171026 00:11:20.898"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171026 00:11:20.899" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171026 00:11:20.899" starttime="20171026 00:11:20.899"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171026 00:11:20.900" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171026 00:11:20.900" starttime="20171026 00:11:20.900"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171026 00:11:20.901" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171026 00:11:20.901" starttime="20171026 00:11:20.900"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171026 00:11:21.840" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171026 00:11:21.840" starttime="20171026 00:11:20.902"></status>
</kw>
<msg timestamp="20171026 00:11:21.840" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 00:11:21.840" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:11:21.840" starttime="20171026 00:11:20.901"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171026 00:11:21.841" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:11:21.841" starttime="20171026 00:11:21.840"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 00:11:21.841" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:11:21.842" starttime="20171026 00:11:21.841"></status>
</kw>
<status status="PASS" endtime="20171026 00:11:21.842" starttime="20171026 00:11:20.897"></status>
</kw>
<status status="PASS" endtime="20171026 00:11:21.842" starttime="20171026 00:11:20.897"></status>
</kw>
<status status="PASS" endtime="20171026 00:11:21.842" starttime="20171026 00:11:20.896"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171026 00:11:21.842" level="INFO">${base_uri} = /xyz/openbmc_project/software/347855ea</msg>
<status status="PASS" endtime="20171026 00:11:21.843" starttime="20171026 00:11:21.842"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171026 00:11:21.845" level="INFO">${msg} = URI:https://9.5.180.47/xyz/openbmc_project/software/347855ea, method:Get, args:{}</msg>
<status status="PASS" endtime="20171026 00:11:21.845" starttime="20171026 00:11:21.844"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171026 00:11:21.846" level="INFO">URI:https://9.5.180.47/xyz/openbmc_project/software/347855ea, method:Get, args:{}</msg>
<status status="PASS" endtime="20171026 00:11:21.846" starttime="20171026 00:11:21.845"></status>
</kw>
<status status="PASS" endtime="20171026 00:11:21.846" starttime="20171026 00:11:21.845"></status>
</kw>
<status status="PASS" endtime="20171026 00:11:21.846" starttime="20171026 00:11:21.843"></status>
</kw>
<status status="PASS" endtime="20171026 00:11:21.846" starttime="20171026 00:11:21.843"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171026 00:11:22.011" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/347855ea, headers=None json=None</msg>
<msg timestamp="20171026 00:11:22.011" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:11:22.011" starttime="20171026 00:11:21.846"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171026 00:11:22.014" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/347855ea", 
    "Progress": 30, 
    "Purpose": "...</msg>
<status status="PASS" endtime="20171026 00:11:22.014" starttime="20171026 00:11:22.013"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171026 00:11:22.015" level="INFO">Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/347855ea", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-208-g69b2e34", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171026 00:11:22.016" starttime="20171026 00:11:22.015"></status>
</kw>
<status status="PASS" endtime="20171026 00:11:22.016" starttime="20171026 00:11:22.014"></status>
</kw>
<status status="PASS" endtime="20171026 00:11:22.016" starttime="20171026 00:11:22.012"></status>
</kw>
<status status="PASS" endtime="20171026 00:11:22.016" starttime="20171026 00:11:22.012"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171026 00:11:22.017" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171026 00:11:22.017" starttime="20171026 00:11:22.016"></status>
</kw>
<msg timestamp="20171026 00:11:22.017" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:11:22.017" starttime="20171026 00:11:20.896"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 00:11:22.017" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:11:22.018" starttime="20171026 00:11:22.017"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171026 00:11:22.018" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/347855ea", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-208-g69b2e34", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171026 00:11:22.018" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171026 00:11:22.018" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20171026 00:11:22.018" starttime="20171026 00:11:22.018"></status>
</kw>
<status status="PASS" endtime="20171026 00:11:22.019" starttime="20171026 00:11:20.895"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/347855ea</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171026 00:11:32.040" level="INFO">Creating Session using : alias=openbmc, url=https://9.5.180.47, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171026 00:11:32.041" starttime="20171026 00:11:32.040"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171026 00:11:32.042" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171026 00:11:32.042" starttime="20171026 00:11:32.041"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171026 00:11:32.043" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171026 00:11:32.043" starttime="20171026 00:11:32.042"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171026 00:11:32.044" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171026 00:11:32.044" starttime="20171026 00:11:32.043"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171026 00:11:32.359" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171026 00:11:32.359" starttime="20171026 00:11:32.045"></status>
</kw>
<msg timestamp="20171026 00:11:32.359" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 00:11:32.359" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:11:32.359" starttime="20171026 00:11:32.045"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171026 00:11:32.360" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:11:32.360" starttime="20171026 00:11:32.359"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 00:11:32.360" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:11:32.361" starttime="20171026 00:11:32.360"></status>
</kw>
<status status="PASS" endtime="20171026 00:11:32.361" starttime="20171026 00:11:32.039"></status>
</kw>
<status status="PASS" endtime="20171026 00:11:32.361" starttime="20171026 00:11:32.038"></status>
</kw>
<status status="PASS" endtime="20171026 00:11:32.361" starttime="20171026 00:11:32.037"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171026 00:11:32.361" level="INFO">${base_uri} = /xyz/openbmc_project/software/347855ea</msg>
<status status="PASS" endtime="20171026 00:11:32.361" starttime="20171026 00:11:32.361"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171026 00:11:32.364" level="INFO">${msg} = URI:https://9.5.180.47/xyz/openbmc_project/software/347855ea, method:Get, args:{}</msg>
<status status="PASS" endtime="20171026 00:11:32.364" starttime="20171026 00:11:32.363"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171026 00:11:32.365" level="INFO">URI:https://9.5.180.47/xyz/openbmc_project/software/347855ea, method:Get, args:{}</msg>
<status status="PASS" endtime="20171026 00:11:32.365" starttime="20171026 00:11:32.364"></status>
</kw>
<status status="PASS" endtime="20171026 00:11:32.365" starttime="20171026 00:11:32.364"></status>
</kw>
<status status="PASS" endtime="20171026 00:11:32.365" starttime="20171026 00:11:32.362"></status>
</kw>
<status status="PASS" endtime="20171026 00:11:32.365" starttime="20171026 00:11:32.362"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171026 00:11:32.538" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/347855ea, headers=None json=None</msg>
<msg timestamp="20171026 00:11:32.539" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:11:32.539" starttime="20171026 00:11:32.366"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171026 00:11:32.540" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/347855ea", 
    "Progress": 30, 
    "Purpose": "...</msg>
<status status="PASS" endtime="20171026 00:11:32.541" starttime="20171026 00:11:32.540"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171026 00:11:32.541" level="INFO">Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/347855ea", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-208-g69b2e34", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171026 00:11:32.542" starttime="20171026 00:11:32.541"></status>
</kw>
<status status="PASS" endtime="20171026 00:11:32.542" starttime="20171026 00:11:32.541"></status>
</kw>
<status status="PASS" endtime="20171026 00:11:32.542" starttime="20171026 00:11:32.539"></status>
</kw>
<status status="PASS" endtime="20171026 00:11:32.542" starttime="20171026 00:11:32.539"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171026 00:11:32.542" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171026 00:11:32.542" starttime="20171026 00:11:32.542"></status>
</kw>
<msg timestamp="20171026 00:11:32.543" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:11:32.543" starttime="20171026 00:11:32.037"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 00:11:32.543" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:11:32.544" starttime="20171026 00:11:32.543"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171026 00:11:32.545" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/347855ea", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-208-g69b2e34", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171026 00:11:32.545" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171026 00:11:32.545" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20171026 00:11:32.545" starttime="20171026 00:11:32.545"></status>
</kw>
<status status="PASS" endtime="20171026 00:11:32.546" starttime="20171026 00:11:32.036"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/347855ea</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171026 00:11:42.567" level="INFO">Creating Session using : alias=openbmc, url=https://9.5.180.47, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171026 00:11:42.568" starttime="20171026 00:11:42.567"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171026 00:11:42.568" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171026 00:11:42.568" starttime="20171026 00:11:42.568"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171026 00:11:42.569" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171026 00:11:42.569" starttime="20171026 00:11:42.569"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171026 00:11:42.570" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171026 00:11:42.570" starttime="20171026 00:11:42.569"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171026 00:11:42.879" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171026 00:11:42.879" starttime="20171026 00:11:42.570"></status>
</kw>
<msg timestamp="20171026 00:11:42.879" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 00:11:42.879" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:11:42.879" starttime="20171026 00:11:42.570"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171026 00:11:42.880" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:11:42.880" starttime="20171026 00:11:42.880"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 00:11:42.881" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:11:42.881" starttime="20171026 00:11:42.880"></status>
</kw>
<status status="PASS" endtime="20171026 00:11:42.881" starttime="20171026 00:11:42.566"></status>
</kw>
<status status="PASS" endtime="20171026 00:11:42.881" starttime="20171026 00:11:42.566"></status>
</kw>
<status status="PASS" endtime="20171026 00:11:42.881" starttime="20171026 00:11:42.565"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171026 00:11:42.882" level="INFO">${base_uri} = /xyz/openbmc_project/software/347855ea</msg>
<status status="PASS" endtime="20171026 00:11:42.882" starttime="20171026 00:11:42.881"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171026 00:11:42.884" level="INFO">${msg} = URI:https://9.5.180.47/xyz/openbmc_project/software/347855ea, method:Get, args:{}</msg>
<status status="PASS" endtime="20171026 00:11:42.884" starttime="20171026 00:11:42.883"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171026 00:11:42.885" level="INFO">URI:https://9.5.180.47/xyz/openbmc_project/software/347855ea, method:Get, args:{}</msg>
<status status="PASS" endtime="20171026 00:11:42.885" starttime="20171026 00:11:42.885"></status>
</kw>
<status status="PASS" endtime="20171026 00:11:42.885" starttime="20171026 00:11:42.884"></status>
</kw>
<status status="PASS" endtime="20171026 00:11:42.885" starttime="20171026 00:11:42.883"></status>
</kw>
<status status="PASS" endtime="20171026 00:11:42.885" starttime="20171026 00:11:42.882"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171026 00:11:43.659" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/347855ea, headers=None json=None</msg>
<msg timestamp="20171026 00:11:43.659" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:11:43.659" starttime="20171026 00:11:42.886"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171026 00:11:43.661" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/347855ea", 
    "Progress": 30, 
    "Purpose": "...</msg>
<status status="PASS" endtime="20171026 00:11:43.661" starttime="20171026 00:11:43.660"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171026 00:11:43.663" level="INFO">Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/347855ea", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-208-g69b2e34", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171026 00:11:43.663" starttime="20171026 00:11:43.662"></status>
</kw>
<status status="PASS" endtime="20171026 00:11:43.663" starttime="20171026 00:11:43.662"></status>
</kw>
<status status="PASS" endtime="20171026 00:11:43.663" starttime="20171026 00:11:43.660"></status>
</kw>
<status status="PASS" endtime="20171026 00:11:43.663" starttime="20171026 00:11:43.659"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171026 00:11:43.664" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171026 00:11:43.664" starttime="20171026 00:11:43.663"></status>
</kw>
<msg timestamp="20171026 00:11:43.664" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:11:43.664" starttime="20171026 00:11:42.564"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 00:11:43.665" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:11:43.665" starttime="20171026 00:11:43.664"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171026 00:11:43.665" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/347855ea", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-208-g69b2e34", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171026 00:11:43.666" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171026 00:11:43.666" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20171026 00:11:43.666" starttime="20171026 00:11:43.665"></status>
</kw>
<status status="PASS" endtime="20171026 00:11:43.666" starttime="20171026 00:11:42.563"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/347855ea</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171026 00:11:53.687" level="INFO">Creating Session using : alias=openbmc, url=https://9.5.180.47, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171026 00:11:53.687" starttime="20171026 00:11:53.687"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171026 00:11:53.688" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171026 00:11:53.688" starttime="20171026 00:11:53.688"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171026 00:11:53.689" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171026 00:11:53.689" starttime="20171026 00:11:53.688"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171026 00:11:53.689" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171026 00:11:53.689" starttime="20171026 00:11:53.689"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171026 00:11:54.011" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171026 00:11:54.011" starttime="20171026 00:11:53.690"></status>
</kw>
<msg timestamp="20171026 00:11:54.012" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 00:11:54.012" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:11:54.012" starttime="20171026 00:11:53.690"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171026 00:11:54.012" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:11:54.012" starttime="20171026 00:11:54.012"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 00:11:54.013" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:11:54.013" starttime="20171026 00:11:54.013"></status>
</kw>
<status status="PASS" endtime="20171026 00:11:54.013" starttime="20171026 00:11:53.686"></status>
</kw>
<status status="PASS" endtime="20171026 00:11:54.014" starttime="20171026 00:11:53.686"></status>
</kw>
<status status="PASS" endtime="20171026 00:11:54.014" starttime="20171026 00:11:53.685"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171026 00:11:54.014" level="INFO">${base_uri} = /xyz/openbmc_project/software/347855ea</msg>
<status status="PASS" endtime="20171026 00:11:54.014" starttime="20171026 00:11:54.014"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171026 00:11:54.017" level="INFO">${msg} = URI:https://9.5.180.47/xyz/openbmc_project/software/347855ea, method:Get, args:{}</msg>
<status status="PASS" endtime="20171026 00:11:54.017" starttime="20171026 00:11:54.016"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171026 00:11:54.018" level="INFO">URI:https://9.5.180.47/xyz/openbmc_project/software/347855ea, method:Get, args:{}</msg>
<status status="PASS" endtime="20171026 00:11:54.018" starttime="20171026 00:11:54.018"></status>
</kw>
<status status="PASS" endtime="20171026 00:11:54.018" starttime="20171026 00:11:54.017"></status>
</kw>
<status status="PASS" endtime="20171026 00:11:54.018" starttime="20171026 00:11:54.015"></status>
</kw>
<status status="PASS" endtime="20171026 00:11:54.018" starttime="20171026 00:11:54.015"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171026 00:11:54.185" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/347855ea, headers=None json=None</msg>
<msg timestamp="20171026 00:11:54.186" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:11:54.186" starttime="20171026 00:11:54.019"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171026 00:11:54.188" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/347855ea", 
    "Progress": 30, 
    "Purpose": "...</msg>
<status status="PASS" endtime="20171026 00:11:54.188" starttime="20171026 00:11:54.187"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171026 00:11:54.189" level="INFO">Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/347855ea", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-208-g69b2e34", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171026 00:11:54.189" starttime="20171026 00:11:54.188"></status>
</kw>
<status status="PASS" endtime="20171026 00:11:54.189" starttime="20171026 00:11:54.188"></status>
</kw>
<status status="PASS" endtime="20171026 00:11:54.189" starttime="20171026 00:11:54.187"></status>
</kw>
<status status="PASS" endtime="20171026 00:11:54.189" starttime="20171026 00:11:54.186"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171026 00:11:54.190" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171026 00:11:54.190" starttime="20171026 00:11:54.190"></status>
</kw>
<msg timestamp="20171026 00:11:54.190" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:11:54.190" starttime="20171026 00:11:53.684"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 00:11:54.191" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:11:54.191" starttime="20171026 00:11:54.190"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171026 00:11:54.191" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/347855ea", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-208-g69b2e34", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171026 00:11:54.192" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171026 00:11:54.192" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20171026 00:11:54.192" starttime="20171026 00:11:54.191"></status>
</kw>
<status status="PASS" endtime="20171026 00:11:54.192" starttime="20171026 00:11:53.683"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/347855ea</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171026 00:12:04.213" level="INFO">Creating Session using : alias=openbmc, url=https://9.5.180.47, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171026 00:12:04.213" starttime="20171026 00:12:04.212"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171026 00:12:04.214" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171026 00:12:04.214" starttime="20171026 00:12:04.213"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171026 00:12:04.214" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171026 00:12:04.214" starttime="20171026 00:12:04.214"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171026 00:12:04.215" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171026 00:12:04.215" starttime="20171026 00:12:04.215"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171026 00:12:04.527" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171026 00:12:04.527" starttime="20171026 00:12:04.216"></status>
</kw>
<msg timestamp="20171026 00:12:04.527" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 00:12:04.527" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:12:04.527" starttime="20171026 00:12:04.216"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171026 00:12:04.528" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:12:04.528" starttime="20171026 00:12:04.528"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 00:12:04.529" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:12:04.529" starttime="20171026 00:12:04.528"></status>
</kw>
<status status="PASS" endtime="20171026 00:12:04.529" starttime="20171026 00:12:04.212"></status>
</kw>
<status status="PASS" endtime="20171026 00:12:04.529" starttime="20171026 00:12:04.211"></status>
</kw>
<status status="PASS" endtime="20171026 00:12:04.529" starttime="20171026 00:12:04.211"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171026 00:12:04.530" level="INFO">${base_uri} = /xyz/openbmc_project/software/347855ea</msg>
<status status="PASS" endtime="20171026 00:12:04.530" starttime="20171026 00:12:04.529"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171026 00:12:04.532" level="INFO">${msg} = URI:https://9.5.180.47/xyz/openbmc_project/software/347855ea, method:Get, args:{}</msg>
<status status="PASS" endtime="20171026 00:12:04.532" starttime="20171026 00:12:04.531"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171026 00:12:04.533" level="INFO">URI:https://9.5.180.47/xyz/openbmc_project/software/347855ea, method:Get, args:{}</msg>
<status status="PASS" endtime="20171026 00:12:04.533" starttime="20171026 00:12:04.533"></status>
</kw>
<status status="PASS" endtime="20171026 00:12:04.533" starttime="20171026 00:12:04.532"></status>
</kw>
<status status="PASS" endtime="20171026 00:12:04.533" starttime="20171026 00:12:04.531"></status>
</kw>
<status status="PASS" endtime="20171026 00:12:04.533" starttime="20171026 00:12:04.530"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171026 00:12:04.706" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/347855ea, headers=None json=None</msg>
<msg timestamp="20171026 00:12:04.707" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:12:04.707" starttime="20171026 00:12:04.534"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171026 00:12:04.708" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/347855ea", 
    "Progress": 30, 
    "Purpose": "...</msg>
<status status="PASS" endtime="20171026 00:12:04.709" starttime="20171026 00:12:04.708"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171026 00:12:04.709" level="INFO">Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/347855ea", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-208-g69b2e34", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171026 00:12:04.710" starttime="20171026 00:12:04.709"></status>
</kw>
<status status="PASS" endtime="20171026 00:12:04.710" starttime="20171026 00:12:04.709"></status>
</kw>
<status status="PASS" endtime="20171026 00:12:04.710" starttime="20171026 00:12:04.707"></status>
</kw>
<status status="PASS" endtime="20171026 00:12:04.710" starttime="20171026 00:12:04.707"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171026 00:12:04.710" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171026 00:12:04.710" starttime="20171026 00:12:04.710"></status>
</kw>
<msg timestamp="20171026 00:12:04.711" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:12:04.711" starttime="20171026 00:12:04.210"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 00:12:04.711" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:12:04.711" starttime="20171026 00:12:04.711"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171026 00:12:04.712" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/347855ea", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-208-g69b2e34", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171026 00:12:04.712" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171026 00:12:04.712" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20171026 00:12:04.712" starttime="20171026 00:12:04.712"></status>
</kw>
<status status="PASS" endtime="20171026 00:12:04.712" starttime="20171026 00:12:04.209"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/347855ea</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171026 00:12:14.729" level="INFO">Creating Session using : alias=openbmc, url=https://9.5.180.47, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171026 00:12:14.730" starttime="20171026 00:12:14.729"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171026 00:12:14.731" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171026 00:12:14.731" starttime="20171026 00:12:14.731"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171026 00:12:14.732" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171026 00:12:14.732" starttime="20171026 00:12:14.731"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171026 00:12:14.732" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171026 00:12:14.732" starttime="20171026 00:12:14.732"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171026 00:12:15.047" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171026 00:12:15.047" starttime="20171026 00:12:14.733"></status>
</kw>
<msg timestamp="20171026 00:12:15.047" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 00:12:15.047" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:12:15.047" starttime="20171026 00:12:14.733"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171026 00:12:15.048" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:12:15.048" starttime="20171026 00:12:15.047"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 00:12:15.049" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:12:15.049" starttime="20171026 00:12:15.048"></status>
</kw>
<status status="PASS" endtime="20171026 00:12:15.049" starttime="20171026 00:12:14.728"></status>
</kw>
<status status="PASS" endtime="20171026 00:12:15.049" starttime="20171026 00:12:14.728"></status>
</kw>
<status status="PASS" endtime="20171026 00:12:15.049" starttime="20171026 00:12:14.725"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171026 00:12:15.050" level="INFO">${base_uri} = /xyz/openbmc_project/software/347855ea</msg>
<status status="PASS" endtime="20171026 00:12:15.050" starttime="20171026 00:12:15.050"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171026 00:12:15.054" level="INFO">${msg} = URI:https://9.5.180.47/xyz/openbmc_project/software/347855ea, method:Get, args:{}</msg>
<status status="PASS" endtime="20171026 00:12:15.054" starttime="20171026 00:12:15.053"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171026 00:12:15.055" level="INFO">URI:https://9.5.180.47/xyz/openbmc_project/software/347855ea, method:Get, args:{}</msg>
<status status="PASS" endtime="20171026 00:12:15.055" starttime="20171026 00:12:15.055"></status>
</kw>
<status status="PASS" endtime="20171026 00:12:15.055" starttime="20171026 00:12:15.054"></status>
</kw>
<status status="PASS" endtime="20171026 00:12:15.056" starttime="20171026 00:12:15.051"></status>
</kw>
<status status="PASS" endtime="20171026 00:12:15.056" starttime="20171026 00:12:15.051"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171026 00:12:16.333" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/347855ea, headers=None json=None</msg>
<msg timestamp="20171026 00:12:16.334" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:12:16.334" starttime="20171026 00:12:15.056"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171026 00:12:16.336" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/347855ea", 
    "Progress": 30, 
    "Purpose": "...</msg>
<status status="PASS" endtime="20171026 00:12:16.336" starttime="20171026 00:12:16.335"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171026 00:12:16.337" level="INFO">Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/347855ea", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-208-g69b2e34", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171026 00:12:16.337" starttime="20171026 00:12:16.337"></status>
</kw>
<status status="PASS" endtime="20171026 00:12:16.337" starttime="20171026 00:12:16.336"></status>
</kw>
<status status="PASS" endtime="20171026 00:12:16.337" starttime="20171026 00:12:16.335"></status>
</kw>
<status status="PASS" endtime="20171026 00:12:16.337" starttime="20171026 00:12:16.334"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171026 00:12:16.338" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171026 00:12:16.338" starttime="20171026 00:12:16.338"></status>
</kw>
<msg timestamp="20171026 00:12:16.338" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:12:16.338" starttime="20171026 00:12:14.724"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 00:12:16.339" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:12:16.339" starttime="20171026 00:12:16.339"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171026 00:12:16.340" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/347855ea", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-208-g69b2e34", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171026 00:12:16.340" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171026 00:12:16.340" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20171026 00:12:16.340" starttime="20171026 00:12:16.339"></status>
</kw>
<status status="PASS" endtime="20171026 00:12:16.340" starttime="20171026 00:12:14.723"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/347855ea</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171026 00:12:26.361" level="INFO">Creating Session using : alias=openbmc, url=https://9.5.180.47, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171026 00:12:26.362" starttime="20171026 00:12:26.361"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171026 00:12:26.362" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171026 00:12:26.362" starttime="20171026 00:12:26.362"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171026 00:12:26.363" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171026 00:12:26.363" starttime="20171026 00:12:26.363"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171026 00:12:26.365" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171026 00:12:26.365" starttime="20171026 00:12:26.364"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171026 00:12:26.724" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171026 00:12:26.724" starttime="20171026 00:12:26.366"></status>
</kw>
<msg timestamp="20171026 00:12:26.724" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 00:12:26.724" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:12:26.724" starttime="20171026 00:12:26.365"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171026 00:12:26.725" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:12:26.725" starttime="20171026 00:12:26.724"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 00:12:26.726" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:12:26.726" starttime="20171026 00:12:26.725"></status>
</kw>
<status status="PASS" endtime="20171026 00:12:26.726" starttime="20171026 00:12:26.361"></status>
</kw>
<status status="PASS" endtime="20171026 00:12:26.726" starttime="20171026 00:12:26.360"></status>
</kw>
<status status="PASS" endtime="20171026 00:12:26.726" starttime="20171026 00:12:26.359"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171026 00:12:26.727" level="INFO">${base_uri} = /xyz/openbmc_project/software/347855ea</msg>
<status status="PASS" endtime="20171026 00:12:26.727" starttime="20171026 00:12:26.726"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171026 00:12:26.729" level="INFO">${msg} = URI:https://9.5.180.47/xyz/openbmc_project/software/347855ea, method:Get, args:{}</msg>
<status status="PASS" endtime="20171026 00:12:26.729" starttime="20171026 00:12:26.728"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171026 00:12:26.730" level="INFO">URI:https://9.5.180.47/xyz/openbmc_project/software/347855ea, method:Get, args:{}</msg>
<status status="PASS" endtime="20171026 00:12:26.730" starttime="20171026 00:12:26.730"></status>
</kw>
<status status="PASS" endtime="20171026 00:12:26.730" starttime="20171026 00:12:26.729"></status>
</kw>
<status status="PASS" endtime="20171026 00:12:26.730" starttime="20171026 00:12:26.728"></status>
</kw>
<status status="PASS" endtime="20171026 00:12:26.730" starttime="20171026 00:12:26.727"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171026 00:12:26.896" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/347855ea, headers=None json=None</msg>
<msg timestamp="20171026 00:12:26.896" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:12:26.896" starttime="20171026 00:12:26.731"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171026 00:12:26.901" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/347855ea", 
    "Progress": 30, 
    "Purpose": "...</msg>
<status status="PASS" endtime="20171026 00:12:26.901" starttime="20171026 00:12:26.898"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171026 00:12:26.903" level="INFO">Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/347855ea", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-208-g69b2e34", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171026 00:12:26.903" starttime="20171026 00:12:26.902"></status>
</kw>
<status status="PASS" endtime="20171026 00:12:26.903" starttime="20171026 00:12:26.902"></status>
</kw>
<status status="PASS" endtime="20171026 00:12:26.903" starttime="20171026 00:12:26.897"></status>
</kw>
<status status="PASS" endtime="20171026 00:12:26.903" starttime="20171026 00:12:26.896"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171026 00:12:26.904" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171026 00:12:26.904" starttime="20171026 00:12:26.904"></status>
</kw>
<msg timestamp="20171026 00:12:26.904" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:12:26.904" starttime="20171026 00:12:26.358"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 00:12:26.905" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:12:26.905" starttime="20171026 00:12:26.904"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171026 00:12:26.906" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/347855ea", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-208-g69b2e34", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171026 00:12:26.906" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171026 00:12:26.906" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20171026 00:12:26.906" starttime="20171026 00:12:26.905"></status>
</kw>
<status status="PASS" endtime="20171026 00:12:26.906" starttime="20171026 00:12:26.357"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/347855ea</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171026 00:12:36.928" level="INFO">Creating Session using : alias=openbmc, url=https://9.5.180.47, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171026 00:12:36.928" starttime="20171026 00:12:36.927"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171026 00:12:36.929" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171026 00:12:36.929" starttime="20171026 00:12:36.928"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171026 00:12:36.929" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171026 00:12:36.929" starttime="20171026 00:12:36.929"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171026 00:12:36.930" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171026 00:12:36.930" starttime="20171026 00:12:36.930"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171026 00:12:37.253" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171026 00:12:37.253" starttime="20171026 00:12:36.931"></status>
</kw>
<msg timestamp="20171026 00:12:37.253" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 00:12:37.254" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:12:37.254" starttime="20171026 00:12:36.930"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171026 00:12:37.254" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:12:37.254" starttime="20171026 00:12:37.254"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 00:12:37.255" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:12:37.255" starttime="20171026 00:12:37.255"></status>
</kw>
<status status="PASS" endtime="20171026 00:12:37.255" starttime="20171026 00:12:36.927"></status>
</kw>
<status status="PASS" endtime="20171026 00:12:37.255" starttime="20171026 00:12:36.926"></status>
</kw>
<status status="PASS" endtime="20171026 00:12:37.255" starttime="20171026 00:12:36.925"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171026 00:12:37.256" level="INFO">${base_uri} = /xyz/openbmc_project/software/347855ea</msg>
<status status="PASS" endtime="20171026 00:12:37.256" starttime="20171026 00:12:37.256"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171026 00:12:37.259" level="INFO">${msg} = URI:https://9.5.180.47/xyz/openbmc_project/software/347855ea, method:Get, args:{}</msg>
<status status="PASS" endtime="20171026 00:12:37.259" starttime="20171026 00:12:37.258"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171026 00:12:37.260" level="INFO">URI:https://9.5.180.47/xyz/openbmc_project/software/347855ea, method:Get, args:{}</msg>
<status status="PASS" endtime="20171026 00:12:37.260" starttime="20171026 00:12:37.260"></status>
</kw>
<status status="PASS" endtime="20171026 00:12:37.260" starttime="20171026 00:12:37.259"></status>
</kw>
<status status="PASS" endtime="20171026 00:12:37.260" starttime="20171026 00:12:37.257"></status>
</kw>
<status status="PASS" endtime="20171026 00:12:37.260" starttime="20171026 00:12:37.257"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171026 00:12:37.427" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/347855ea, headers=None json=None</msg>
<msg timestamp="20171026 00:12:37.427" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:12:37.428" starttime="20171026 00:12:37.262"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171026 00:12:37.430" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/347855ea", 
    "Progress": 30, 
    "Purpose": "...</msg>
<status status="PASS" endtime="20171026 00:12:37.430" starttime="20171026 00:12:37.429"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171026 00:12:37.431" level="INFO">Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/347855ea", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-208-g69b2e34", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171026 00:12:37.431" starttime="20171026 00:12:37.431"></status>
</kw>
<status status="PASS" endtime="20171026 00:12:37.431" starttime="20171026 00:12:37.430"></status>
</kw>
<status status="PASS" endtime="20171026 00:12:37.431" starttime="20171026 00:12:37.429"></status>
</kw>
<status status="PASS" endtime="20171026 00:12:37.431" starttime="20171026 00:12:37.428"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171026 00:12:37.432" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171026 00:12:37.432" starttime="20171026 00:12:37.431"></status>
</kw>
<msg timestamp="20171026 00:12:37.432" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:12:37.432" starttime="20171026 00:12:36.924"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 00:12:37.433" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:12:37.433" starttime="20171026 00:12:37.433"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171026 00:12:37.434" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/347855ea", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-208-g69b2e34", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171026 00:12:37.434" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171026 00:12:37.435" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20171026 00:12:37.435" starttime="20171026 00:12:37.434"></status>
</kw>
<status status="PASS" endtime="20171026 00:12:37.435" starttime="20171026 00:12:36.923"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/347855ea</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171026 00:12:47.456" level="INFO">Creating Session using : alias=openbmc, url=https://9.5.180.47, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171026 00:12:47.457" starttime="20171026 00:12:47.455"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171026 00:12:47.457" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171026 00:12:47.457" starttime="20171026 00:12:47.457"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171026 00:12:47.458" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171026 00:12:47.458" starttime="20171026 00:12:47.458"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171026 00:12:47.459" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171026 00:12:47.459" starttime="20171026 00:12:47.458"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171026 00:12:47.853" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171026 00:12:47.854" starttime="20171026 00:12:47.459"></status>
</kw>
<msg timestamp="20171026 00:12:47.854" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 00:12:47.854" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:12:47.854" starttime="20171026 00:12:47.459"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171026 00:12:47.855" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:12:47.855" starttime="20171026 00:12:47.854"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 00:12:47.855" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:12:47.855" starttime="20171026 00:12:47.855"></status>
</kw>
<status status="PASS" endtime="20171026 00:12:47.856" starttime="20171026 00:12:47.455"></status>
</kw>
<status status="PASS" endtime="20171026 00:12:47.856" starttime="20171026 00:12:47.454"></status>
</kw>
<status status="PASS" endtime="20171026 00:12:47.856" starttime="20171026 00:12:47.454"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171026 00:12:47.856" level="INFO">${base_uri} = /xyz/openbmc_project/software/347855ea</msg>
<status status="PASS" endtime="20171026 00:12:47.857" starttime="20171026 00:12:47.856"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171026 00:12:47.859" level="INFO">${msg} = URI:https://9.5.180.47/xyz/openbmc_project/software/347855ea, method:Get, args:{}</msg>
<status status="PASS" endtime="20171026 00:12:47.859" starttime="20171026 00:12:47.858"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171026 00:12:47.860" level="INFO">URI:https://9.5.180.47/xyz/openbmc_project/software/347855ea, method:Get, args:{}</msg>
<status status="PASS" endtime="20171026 00:12:47.860" starttime="20171026 00:12:47.859"></status>
</kw>
<status status="PASS" endtime="20171026 00:12:47.860" starttime="20171026 00:12:47.859"></status>
</kw>
<status status="PASS" endtime="20171026 00:12:47.860" starttime="20171026 00:12:47.857"></status>
</kw>
<status status="PASS" endtime="20171026 00:12:47.860" starttime="20171026 00:12:47.857"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171026 00:12:48.063" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/347855ea, headers=None json=None</msg>
<msg timestamp="20171026 00:12:48.064" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:12:48.064" starttime="20171026 00:12:47.861"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171026 00:12:48.066" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
    "Path": "/tmp/images/347855ea", 
    "Priority": 0, 
    "Purpose": "xyz.o...</msg>
<status status="PASS" endtime="20171026 00:12:48.066" starttime="20171026 00:12:48.065"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171026 00:12:48.067" level="INFO">Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
    "Path": "/tmp/images/347855ea", 
    "Priority": 0, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-208-g69b2e34", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171026 00:12:48.067" starttime="20171026 00:12:48.067"></status>
</kw>
<status status="PASS" endtime="20171026 00:12:48.067" starttime="20171026 00:12:48.066"></status>
</kw>
<status status="PASS" endtime="20171026 00:12:48.067" starttime="20171026 00:12:48.065"></status>
</kw>
<status status="PASS" endtime="20171026 00:12:48.067" starttime="20171026 00:12:48.064"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171026 00:12:48.068" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171026 00:12:48.068" starttime="20171026 00:12:48.067"></status>
</kw>
<msg timestamp="20171026 00:12:48.068" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:12:48.068" starttime="20171026 00:12:47.453"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 00:12:48.069" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:12:48.069" starttime="20171026 00:12:48.068"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171026 00:12:48.069" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
    "Path": "/tmp/images/347855ea", 
    "Priority": 0, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-208-g69b2e34", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171026 00:12:48.069" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171026 00:12:48.070" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20171026 00:12:48.070" starttime="20171026 00:12:48.069"></status>
</kw>
<status status="PASS" endtime="20171026 00:12:48.070" starttime="20171026 00:12:47.453"></status>
</kw>
<status status="PASS" endtime="20171026 00:12:48.070" starttime="20171026 00:10:11.204"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${SOFTWARE_VERSION_URI}${version_id}</arg>
</arguments>
<assign>
<var>${software_state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171026 00:12:48.074" level="INFO">Creating Session using : alias=openbmc, url=https://9.5.180.47, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171026 00:12:48.074" starttime="20171026 00:12:48.073"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171026 00:12:48.075" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171026 00:12:48.075" starttime="20171026 00:12:48.074"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171026 00:12:48.076" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171026 00:12:48.076" starttime="20171026 00:12:48.075"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171026 00:12:48.076" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171026 00:12:48.077" starttime="20171026 00:12:48.076"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171026 00:12:48.428" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171026 00:12:48.428" starttime="20171026 00:12:48.077"></status>
</kw>
<msg timestamp="20171026 00:12:48.428" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 00:12:48.429" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:12:48.429" starttime="20171026 00:12:48.077"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171026 00:12:48.429" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:12:48.429" starttime="20171026 00:12:48.429"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 00:12:48.430" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:12:48.430" starttime="20171026 00:12:48.430"></status>
</kw>
<status status="PASS" endtime="20171026 00:12:48.430" starttime="20171026 00:12:48.073"></status>
</kw>
<status status="PASS" endtime="20171026 00:12:48.430" starttime="20171026 00:12:48.072"></status>
</kw>
<status status="PASS" endtime="20171026 00:12:48.430" starttime="20171026 00:12:48.072"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171026 00:12:48.431" level="INFO">${base_uri} = /xyz/openbmc_project/software/347855ea</msg>
<status status="PASS" endtime="20171026 00:12:48.431" starttime="20171026 00:12:48.431"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171026 00:12:48.434" level="INFO">${msg} = URI:https://9.5.180.47/xyz/openbmc_project/software/347855ea, method:Get, args:{}</msg>
<status status="PASS" endtime="20171026 00:12:48.435" starttime="20171026 00:12:48.434"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171026 00:12:48.436" level="INFO">URI:https://9.5.180.47/xyz/openbmc_project/software/347855ea, method:Get, args:{}</msg>
<status status="PASS" endtime="20171026 00:12:48.436" starttime="20171026 00:12:48.436"></status>
</kw>
<status status="PASS" endtime="20171026 00:12:48.437" starttime="20171026 00:12:48.435"></status>
</kw>
<status status="PASS" endtime="20171026 00:12:48.437" starttime="20171026 00:12:48.432"></status>
</kw>
<status status="PASS" endtime="20171026 00:12:48.437" starttime="20171026 00:12:48.432"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171026 00:12:48.600" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/347855ea, headers=None json=None</msg>
<msg timestamp="20171026 00:12:48.600" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:12:48.600" starttime="20171026 00:12:48.437"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171026 00:12:48.602" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
    "Path": "/tmp/images/347855ea", 
    "Priority": 0, 
    "Purpose": "xyz.o...</msg>
<status status="PASS" endtime="20171026 00:12:48.602" starttime="20171026 00:12:48.602"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171026 00:12:48.603" level="INFO">Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
    "Path": "/tmp/images/347855ea", 
    "Priority": 0, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-208-g69b2e34", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171026 00:12:48.604" starttime="20171026 00:12:48.603"></status>
</kw>
<status status="PASS" endtime="20171026 00:12:48.604" starttime="20171026 00:12:48.603"></status>
</kw>
<status status="PASS" endtime="20171026 00:12:48.604" starttime="20171026 00:12:48.601"></status>
</kw>
<status status="PASS" endtime="20171026 00:12:48.604" starttime="20171026 00:12:48.601"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171026 00:12:48.604" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171026 00:12:48.604" starttime="20171026 00:12:48.604"></status>
</kw>
<msg timestamp="20171026 00:12:48.605" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:12:48.605" starttime="20171026 00:12:48.071"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 00:12:48.605" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:12:48.605" starttime="20171026 00:12:48.605"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171026 00:12:48.606" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
    "Path": "/tmp/images/347855ea", 
    "Priority": 0, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-208-g69b2e34", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171026 00:12:48.606" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171026 00:12:48.606" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20171026 00:12:48.606" starttime="20171026 00:12:48.606"></status>
</kw>
<msg timestamp="20171026 00:12:48.607" level="INFO">${software_state} = {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Activ...</msg>
<status status="PASS" endtime="20171026 00:12:48.607" starttime="20171026 00:12:48.070"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>&amp;{software_state}[Activation]</arg>
<arg>${ACTIVE}</arg>
</arguments>
<msg timestamp="20171026 00:12:48.607" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20171026 00:12:48.607" starttime="20171026 00:12:48.607"></status>
</kw>
<status status="PASS" endtime="20171026 00:12:48.608" starttime="20171026 00:09:35.058"></status>
</kw>
<kw name="OBMC Reboot (off)" library="boot_utils">
<doc>Do "OBMC Reboot (off)" boot test.</doc>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>OBMC Boot Test \ loc_boot_stack=OBMC Reboot (off)</arg>
<arg>\ loc_stack_mode=${stack_mode} \ loc_quiet=${quiet}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171026 00:12:48.609" level="INFO">${cmd_buf} = OBMC Boot Test  loc_boot_stack=OBMC Reboot (off)  loc_stack_mode=normal  loc_quiet=0</msg>
<status status="PASS" endtime="20171026 00:12:48.609" starttime="20171026 00:12:48.609"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<kw name="OBMC Boot Test" library="obmc_boot_test_resource">
<arguments>
<arg>loc_boot_stack=OBMC Reboot (off)</arg>
<arg>loc_stack_mode=normal</arg>
<arg>loc_quiet=0</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${pos_arg1}' != '${EMPTY}'</arg>
<arg>Set To Dictionary</arg>
<arg>${arguments}</arg>
<arg>loc_boot_stack=${pos_arg1}</arg>
</arguments>
<status status="PASS" endtime="20171026 00:12:48.615" starttime="20171026 00:12:48.615"></status>
</kw>
<kw name="Obmc Boot Test Py" library="obmc_boot_test">
<doc>Do main program processing.</doc>
<arguments>
<arg>&amp;{arguments}</arg>
</arguments>
<msg timestamp="20171026 00:12:48.616" level="INFO">${boot_stack} = OBMC Reboot (off)</msg>
<msg timestamp="20171026 00:12:48.617" level="INFO">${stack_mode} = normal</msg>
<msg timestamp="20171026 00:12:48.618" level="INFO">${quiet} = 0</msg>
<msg timestamp="20171026 00:12:48.894" level="INFO">${plug_in_packages_list} = []</msg>
<msg timestamp="20171026 00:12:48.907" level="INFO">${program_pid} = 1</msg>
<kw name="Set BMC Power Policy" library="utils">
<doc>Set the given BMC power policy.</doc>
<arguments>
<arg>RESTORE_LAST_STATE</arg>
</arguments>
<kw name="Set Power Policy Method" library="utils">
<doc>Set the global bmc_power_policy_method to either 'Old' or 'New'.</doc>
<status status="PASS" endtime="20171026 00:12:48.935" starttime="20171026 00:12:48.934"></status>
</kw>
<kw name="Translate Power Policy Value" library="utils">
<doc>Translate the policy value and return the result.</doc>
<arguments>
<arg>${policy}</arg>
</arguments>
<assign>
<var>${policy}</var>
</assign>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${RESTORE_LAST_STATE}</arg>
</arguments>
<status status="PASS" endtime="20171026 00:12:48.937" starttime="20171026 00:12:48.937"></status>
</kw>
<msg timestamp="20171026 00:12:48.937" level="INFO">${policy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20171026 00:12:48.937" starttime="20171026 00:12:48.936"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${bmc_power_policy_method} Set Power Policy \ ${policy}</arg>
</arguments>
<kw name="New Set Power Policy" library="utils">
<doc>Set the given BMC power policy (new method).</doc>
<arguments>
<arg>xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${policy}</arg>
</arguments>
<assign>
<var>${valueDict}</var>
</assign>
<msg timestamp="20171026 00:12:48.951" level="INFO">${valueDict} = {u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore'}</msg>
<status status="PASS" endtime="20171026 00:12:48.951" starttime="20171026 00:12:48.951"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<doc>Write a D-Bus attribute with REST.</doc>
<arguments>
<arg>${POWER_RESTORE_URI}</arg>
<arg>PowerRestorePolicy</arg>
<arg>data=${valueDict}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171026 00:12:48.954" level="INFO">${base_uri} = /xyz/openbmc_project/control/host0/power_restore_policy</msg>
<status status="PASS" endtime="20171026 00:12:48.954" starttime="20171026 00:12:48.953"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171026 00:12:48.959" level="INFO">Creating Session using : alias=openbmc, url=https://9.5.180.47, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171026 00:12:48.962" starttime="20171026 00:12:48.958"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171026 00:12:48.963" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171026 00:12:48.963" starttime="20171026 00:12:48.962"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171026 00:12:48.963" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171026 00:12:48.963" starttime="20171026 00:12:48.963"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171026 00:12:48.964" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171026 00:12:48.964" starttime="20171026 00:12:48.964"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171026 00:12:49.295" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171026 00:12:49.295" starttime="20171026 00:12:48.966"></status>
</kw>
<msg timestamp="20171026 00:12:49.295" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 00:12:49.295" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:12:49.295" starttime="20171026 00:12:48.965"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171026 00:12:49.296" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:12:49.296" starttime="20171026 00:12:49.296"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 00:12:49.297" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:12:49.297" starttime="20171026 00:12:49.297"></status>
</kw>
<status status="PASS" endtime="20171026 00:12:49.297" starttime="20171026 00:12:48.957"></status>
</kw>
<status status="PASS" endtime="20171026 00:12:49.297" starttime="20171026 00:12:48.956"></status>
</kw>
<status status="PASS" endtime="20171026 00:12:49.297" starttime="20171026 00:12:48.955"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171026 00:12:49.298" level="INFO">${base_uri} = /xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy</msg>
<status status="PASS" endtime="20171026 00:12:49.298" starttime="20171026 00:12:49.298"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171026 00:12:49.299" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171026 00:12:49.299" starttime="20171026 00:12:49.299"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20171026 00:12:49.300" starttime="20171026 00:12:49.299"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171026 00:12:49.301" level="INFO">${msg} = URI:https://9.5.180.47/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Put, args:{u'data': {u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Res...</msg>
<status status="PASS" endtime="20171026 00:12:49.302" starttime="20171026 00:12:49.301"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171026 00:12:49.302" level="INFO">URI:https://9.5.180.47/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Put, args:{u'data': {u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20171026 00:12:49.303" starttime="20171026 00:12:49.302"></status>
</kw>
<status status="PASS" endtime="20171026 00:12:49.303" starttime="20171026 00:12:49.302"></status>
</kw>
<status status="PASS" endtime="20171026 00:12:49.303" starttime="20171026 00:12:49.300"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171026 00:12:49.492" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, data={"data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20171026 00:12:49.493" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:12:49.493" starttime="20171026 00:12:49.303"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171026 00:12:49.494" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171026 00:12:49.494" starttime="20171026 00:12:49.493"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171026 00:12:49.495" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171026 00:12:49.495" starttime="20171026 00:12:49.495"></status>
</kw>
<status status="PASS" endtime="20171026 00:12:49.496" starttime="20171026 00:12:49.494"></status>
</kw>
<status status="PASS" endtime="20171026 00:12:49.496" starttime="20171026 00:12:49.493"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171026 00:12:49.496" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171026 00:12:49.496" starttime="20171026 00:12:49.496"></status>
</kw>
<msg timestamp="20171026 00:12:49.497" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:12:49.497" starttime="20171026 00:12:48.954"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 00:12:49.497" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:12:49.497" starttime="20171026 00:12:49.497"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${verify} == ${FALSE}</arg>
</arguments>
<msg timestamp="20171026 00:12:49.498" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20171026 00:12:49.498" starttime="20171026 00:12:49.498"></status>
</kw>
<status status="PASS" endtime="20171026 00:12:49.498" starttime="20171026 00:12:48.951"></status>
</kw>
<status status="PASS" endtime="20171026 00:12:49.498" starttime="20171026 00:12:48.949"></status>
</kw>
<status status="PASS" endtime="20171026 00:12:49.499" starttime="20171026 00:12:48.937"></status>
</kw>
<kw name="Get System Power Policy" library="utils">
<doc>Get the BMC power policy.</doc>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="Set Power Policy Method" library="utils">
<doc>Set the global bmc_power_policy_method to either 'Old' or 'New'.</doc>
<status status="PASS" endtime="20171026 00:12:49.500" starttime="20171026 00:12:49.500"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${bmc_power_policy_method} Get Power Policy</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171026 00:12:49.501" level="INFO">${cmd_buf} = [u'New Get Power Policy']</msg>
<status status="PASS" endtime="20171026 00:12:49.501" starttime="20171026 00:12:49.501"></status>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>@{cmd_buf}</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="New Get Power Policy" library="utils">
<doc>Get the BMC power policy (new method).</doc>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${POWER_RESTORE_URI}</arg>
<arg>PowerRestorePolicy</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171026 00:12:49.507" level="INFO">Creating Session using : alias=openbmc, url=https://9.5.180.47, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171026 00:12:49.507" starttime="20171026 00:12:49.507"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171026 00:12:49.508" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171026 00:12:49.508" starttime="20171026 00:12:49.508"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171026 00:12:49.509" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171026 00:12:49.509" starttime="20171026 00:12:49.509"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171026 00:12:49.510" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171026 00:12:49.510" starttime="20171026 00:12:49.510"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171026 00:12:49.858" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171026 00:12:49.859" starttime="20171026 00:12:49.511"></status>
</kw>
<msg timestamp="20171026 00:12:49.859" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 00:12:49.859" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:12:49.859" starttime="20171026 00:12:49.511"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171026 00:12:49.860" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:12:49.860" starttime="20171026 00:12:49.859"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 00:12:49.860" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:12:49.860" starttime="20171026 00:12:49.860"></status>
</kw>
<status status="PASS" endtime="20171026 00:12:49.861" starttime="20171026 00:12:49.506"></status>
</kw>
<status status="PASS" endtime="20171026 00:12:49.861" starttime="20171026 00:12:49.505"></status>
</kw>
<status status="PASS" endtime="20171026 00:12:49.861" starttime="20171026 00:12:49.504"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171026 00:12:49.861" level="INFO">${base_uri} = /xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy</msg>
<status status="PASS" endtime="20171026 00:12:49.861" starttime="20171026 00:12:49.861"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171026 00:12:49.864" level="INFO">${msg} = URI:https://9.5.180.47/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Get, args:{}</msg>
<status status="PASS" endtime="20171026 00:12:49.864" starttime="20171026 00:12:49.863"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171026 00:12:49.865" level="INFO">URI:https://9.5.180.47/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Get, args:{}</msg>
<status status="PASS" endtime="20171026 00:12:49.865" starttime="20171026 00:12:49.864"></status>
</kw>
<status status="PASS" endtime="20171026 00:12:49.865" starttime="20171026 00:12:49.864"></status>
</kw>
<status status="PASS" endtime="20171026 00:12:49.865" starttime="20171026 00:12:49.862"></status>
</kw>
<status status="PASS" endtime="20171026 00:12:49.865" starttime="20171026 00:12:49.862"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171026 00:12:49.970" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, headers=None json=None</msg>
<msg timestamp="20171026 00:12:49.970" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:12:49.970" starttime="20171026 00:12:49.865"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171026 00:12:49.972" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171026 00:12:49.972" starttime="20171026 00:12:49.972"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171026 00:12:49.973" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171026 00:12:49.973" starttime="20171026 00:12:49.973"></status>
</kw>
<status status="PASS" endtime="20171026 00:12:49.974" starttime="20171026 00:12:49.973"></status>
</kw>
<status status="PASS" endtime="20171026 00:12:49.974" starttime="20171026 00:12:49.971"></status>
</kw>
<status status="PASS" endtime="20171026 00:12:49.974" starttime="20171026 00:12:49.971"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171026 00:12:49.974" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171026 00:12:49.974" starttime="20171026 00:12:49.974"></status>
</kw>
<msg timestamp="20171026 00:12:49.975" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:12:49.975" starttime="20171026 00:12:49.503"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 00:12:49.975" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:12:49.975" starttime="20171026 00:12:49.975"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171026 00:12:49.976" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171026 00:12:49.976" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171026 00:12:49.976" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore'}</msg>
<status status="PASS" endtime="20171026 00:12:49.976" starttime="20171026 00:12:49.976"></status>
</kw>
<msg timestamp="20171026 00:12:49.977" level="INFO">${currentPolicy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20171026 00:12:49.977" starttime="20171026 00:12:49.503"></status>
</kw>
<status status="PASS" endtime="20171026 00:12:49.977" starttime="20171026 00:12:49.502"></status>
</kw>
<msg timestamp="20171026 00:12:49.977" level="INFO">${currentPolicy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20171026 00:12:49.977" starttime="20171026 00:12:49.502"></status>
</kw>
<msg timestamp="20171026 00:12:49.977" level="INFO">${currentPolicy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20171026 00:12:49.977" starttime="20171026 00:12:49.499"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${currentPolicy}</arg>
<arg>${policy}</arg>
</arguments>
<msg timestamp="20171026 00:12:49.978" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20171026 00:12:49.978" starttime="20171026 00:12:49.977"></status>
</kw>
<status status="PASS" endtime="20171026 00:12:49.978" starttime="20171026 00:12:48.929"></status>
</kw>
<msg timestamp="20171026 00:12:49.984" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20171026 00:12:49.988" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20171026 00:12:49.989" level="INFO">${TEST_MESSAGE} = </msg>
<msg timestamp="20171026 00:12:49.989" level="INFO">${FFDC_LOG_PATH} = ./</msg>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/state/enumerate</arg>
<arg>quiet=${0}</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171026 00:12:50.032" level="INFO">Creating Session using : alias=openbmc, url=https://9.5.180.47, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171026 00:12:50.033" starttime="20171026 00:12:50.032"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171026 00:12:50.034" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171026 00:12:50.034" starttime="20171026 00:12:50.034"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171026 00:12:50.035" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171026 00:12:50.035" starttime="20171026 00:12:50.034"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171026 00:12:50.036" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171026 00:12:50.036" starttime="20171026 00:12:50.035"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171026 00:12:50.360" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171026 00:12:50.360" starttime="20171026 00:12:50.037"></status>
</kw>
<msg timestamp="20171026 00:12:50.360" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 00:12:50.360" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:12:50.360" starttime="20171026 00:12:50.036"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171026 00:12:50.361" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:12:50.361" starttime="20171026 00:12:50.361"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 00:12:50.362" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:12:50.362" starttime="20171026 00:12:50.361"></status>
</kw>
<status status="PASS" endtime="20171026 00:12:50.362" starttime="20171026 00:12:50.031"></status>
</kw>
<status status="PASS" endtime="20171026 00:12:50.362" starttime="20171026 00:12:50.030"></status>
</kw>
<status status="PASS" endtime="20171026 00:12:50.362" starttime="20171026 00:12:50.029"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171026 00:12:50.363" level="INFO">${base_uri} = /xyz/openbmc_project/state/enumerate</msg>
<status status="PASS" endtime="20171026 00:12:50.363" starttime="20171026 00:12:50.362"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171026 00:12:50.365" level="INFO">${msg} = URI:https://9.5.180.47/xyz/openbmc_project/state/enumerate, method:Get, args:{}</msg>
<status status="PASS" endtime="20171026 00:12:50.365" starttime="20171026 00:12:50.364"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171026 00:12:50.366" level="INFO">URI:https://9.5.180.47/xyz/openbmc_project/state/enumerate, method:Get, args:{}</msg>
<status status="PASS" endtime="20171026 00:12:50.366" starttime="20171026 00:12:50.366"></status>
</kw>
<status status="PASS" endtime="20171026 00:12:50.366" starttime="20171026 00:12:50.365"></status>
</kw>
<status status="PASS" endtime="20171026 00:12:50.367" starttime="20171026 00:12:50.364"></status>
</kw>
<status status="PASS" endtime="20171026 00:12:50.367" starttime="20171026 00:12:50.363"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171026 00:12:50.661" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/enumerate, headers=None json=None</msg>
<msg timestamp="20171026 00:12:50.661" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:12:50.661" starttime="20171026 00:12:50.367"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171026 00:12:50.663" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "/xyz/openbmc_project/state/bmc0": {
      "CurrentBMCState": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
      "RequestedBMCTransition": "xyz.openbmc...</msg>
<status status="PASS" endtime="20171026 00:12:50.663" starttime="20171026 00:12:50.662"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171026 00:12:50.664" level="INFO">Response code:200, Content:{
  "data": {
    "/xyz/openbmc_project/state/bmc0": {
      "CurrentBMCState": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
      "RequestedBMCTransition": "xyz.openbmc_project.State.BMC.Transition.None"
    }, 
    "/xyz/openbmc_project/state/chassis0": {
      "CurrentPowerState": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
      "RequestedPowerTransition": "xyz.openbmc_project.State.Chassis.Transition.Off"
    }, 
    "/xyz/openbmc_project/state/host0": {
      "AttemptsLeft": 3, 
      "BootProgress": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
      "CurrentHostState": "xyz.openbmc_project.State.Host.HostState.Off", 
      "OperatingSystemState": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
      "RequestedHostTransition": "xyz.openbmc_project.State.Host.Transition.Off"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171026 00:12:50.664" starttime="20171026 00:12:50.663"></status>
</kw>
<status status="PASS" endtime="20171026 00:12:50.664" starttime="20171026 00:12:50.663"></status>
</kw>
<status status="PASS" endtime="20171026 00:12:50.664" starttime="20171026 00:12:50.662"></status>
</kw>
<status status="PASS" endtime="20171026 00:12:50.664" starttime="20171026 00:12:50.661"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171026 00:12:50.665" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171026 00:12:50.665" starttime="20171026 00:12:50.665"></status>
</kw>
<msg timestamp="20171026 00:12:50.665" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:12:50.665" starttime="20171026 00:12:50.027"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 00:12:50.666" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:12:50.666" starttime="20171026 00:12:50.666"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171026 00:12:50.667" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/state/bmc0": {
      "CurrentBMCState": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
      "RequestedBMCTransition": "xyz.openbmc_project.State.BMC.Transition.None"
    }, 
    "/xyz/openbmc_project/state/chassis0": {
      "CurrentPowerState": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
      "RequestedPowerTransition": "xyz.openbmc_project.State.Chassis.Transition.Off"
    }, 
    "/xyz/openbmc_project/state/host0": {
      "AttemptsLeft": 3, 
      "BootProgress": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
      "CurrentHostState": "xyz.openbmc_project.State.Host.HostState.Off", 
      "OperatingSystemState": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
      "RequestedHostTransition": "xyz.openbmc_project.State.Host.Transition.Off"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171026 00:12:50.667" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171026 00:12:50.667" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'/xyz/openbmc_project/state/host0': {u'CurrentHostState': u'xyz.openbmc_project.State.Host.HostState.Off', u'RequestedHostTransition': u'xyz.openbm...</msg>
<status status="PASS" endtime="20171026 00:12:50.667" starttime="20171026 00:12:50.667"></status>
</kw>
<status status="PASS" endtime="20171026 00:12:50.668" starttime="20171026 00:12:50.024"></status>
</kw>
<kw name="Run Boot" library="obmc_boot_test">
<doc>Run the specified boot.</doc>
<arguments>
<arg>OBMC Reboot (off)</arg>
</arguments>
<msg timestamp="20171026 00:12:50.713" level="INFO">Log level changed from NONE to INFO.</msg>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>/sbin/reboot</arg>
<arg>fork=${1}</arg>
</arguments>
<msg timestamp="20171026 00:12:50.731" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.5.180.47
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171026 00:12:50.732" level="INFO">Starting command '/sbin/reboot'.</msg>
<status status="PASS" endtime="20171026 00:12:50.832" starttime="20171026 00:12:50.715"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171026 00:12:54.913" level="FAIL">
#(UTC) 2017/10/26 00:12:54.910431 -    4.067637 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20171026 00:12:54.914" starttime="20171026 00:12:50.854"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171026 00:12:58.973" level="FAIL">
#(UTC) 2017/10/26 00:12:58.970906 -    4.060475 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20171026 00:12:58.974" starttime="20171026 00:12:54.916"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171026 00:13:03.023" level="FAIL">
#(UTC) 2017/10/26 00:13:03.021545 -    4.050639 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20171026 00:13:03.024" starttime="20171026 00:12:58.976"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171026 00:13:07.102" level="FAIL">
#(UTC) 2017/10/26 00:13:07.089863 -    4.068318 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20171026 00:13:07.107" starttime="20171026 00:13:03.027"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171026 00:13:11.194" level="FAIL">
#(UTC) 2017/10/26 00:13:11.184946 -    4.095083 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20171026 00:13:11.198" starttime="20171026 00:13:07.121"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171026 00:13:16.239" level="FAIL">
#(UTC) 2017/10/26 00:13:16.236811 -    5.051865 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             60
</msg>
<status status="FAIL" endtime="20171026 00:13:16.240" starttime="20171026 00:13:11.211"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<status status="PASS" endtime="20171026 00:13:21.283" starttime="20171026 00:13:16.243"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171026 00:13:26.367" level="FAIL">
#(UTC) 2017/10/26 00:13:26.363924 -    5.022175 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171026 00:13:26.368" starttime="20171026 00:13:21.353"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171026 00:13:31.385" level="FAIL">
#(UTC) 2017/10/26 00:13:31.382766 -    5.018842 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171026 00:13:31.387" starttime="20171026 00:13:26.371"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171026 00:13:36.403" level="FAIL">
#(UTC) 2017/10/26 00:13:36.400708 -    5.017942 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171026 00:13:36.404" starttime="20171026 00:13:31.390"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171026 00:13:41.419" level="FAIL">
#(UTC) 2017/10/26 00:13:41.416968 -    5.016260 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171026 00:13:41.420" starttime="20171026 00:13:36.407"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171026 00:13:46.437" level="FAIL">
#(UTC) 2017/10/26 00:13:46.434290 -    5.017322 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171026 00:13:46.438" starttime="20171026 00:13:41.423"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171026 00:13:51.477" level="FAIL">
#(UTC) 2017/10/26 00:13:51.464773 -    5.030483 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171026 00:13:51.482" starttime="20171026 00:13:46.440"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171026 00:13:56.512" level="FAIL">
#(UTC) 2017/10/26 00:13:56.509373 -    5.044600 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171026 00:13:56.513" starttime="20171026 00:13:51.497"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171026 00:14:01.553" level="FAIL">
#(UTC) 2017/10/26 00:14:01.541974 -    5.032601 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171026 00:14:01.559" starttime="20171026 00:13:56.515"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171026 00:14:06.615" level="FAIL">
#(UTC) 2017/10/26 00:14:06.603148 -    5.061174 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171026 00:14:06.620" starttime="20171026 00:14:01.572"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171026 00:14:11.650" level="FAIL">
#(UTC) 2017/10/26 00:14:11.646957 -    5.043809 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             60
</msg>
<status status="FAIL" endtime="20171026 00:14:11.651" starttime="20171026 00:14:06.634"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<status status="PASS" endtime="20171026 00:14:15.730" starttime="20171026 00:14:11.653"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>read uptime filler 2&gt;/dev/null &lt; /proc/uptime &amp;&amp; [ ! -z "\${uptime}" ] &amp;&amp; echo \${uptime}</arg>
<arg>quiet=1</arg>
</arguments>
<msg timestamp="20171026 00:14:15.825" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.5.180.47
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171026 00:14:15.826" level="INFO">Executing command 'read uptime filler 2&gt;/dev/null &lt; /proc/uptime &amp;&amp; [ ! -z "${uptime}" ] &amp;&amp; echo ${uptime}'.</msg>
<msg timestamp="20171026 00:14:15.828" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.5.180.47
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171026 00:14:15.828" level="INFO">Logging into '9.5.180.47:22' as 'root'.</msg>
<msg timestamp="20171026 00:14:24.278" level="INFO">Read output: root@witherspoon:~#</msg>
<msg timestamp="20171026 00:14:24.279" level="INFO">Executing command 'read uptime filler 2&gt;/dev/null &lt; /proc/uptime &amp;&amp; [ ! -z "${uptime}" ] &amp;&amp; echo ${uptime}'.</msg>
<msg timestamp="20171026 00:14:24.525" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171026 00:14:24.534" starttime="20171026 00:14:15.801"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'rest': '^1$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/state/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171026 00:14:24.604" level="INFO">Creating Session using : alias=openbmc, url=https://9.5.180.47, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171026 00:14:24.605" starttime="20171026 00:14:24.604"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171026 00:14:24.606" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171026 00:14:24.606" starttime="20171026 00:14:24.606"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171026 00:14:24.607" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171026 00:14:24.607" starttime="20171026 00:14:24.606"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171026 00:14:24.607" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171026 00:14:24.607" starttime="20171026 00:14:24.607"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171026 00:14:34.657" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.5.180.47', port=443): Read timed out. (read timeout=10.0)</msg>
<status status="FAIL" endtime="20171026 00:14:34.657" starttime="20171026 00:14:24.608"></status>
</kw>
<msg timestamp="20171026 00:14:34.657" level="INFO">${status} = FAIL</msg>
<msg timestamp="20171026 00:14:34.657" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.5.180.47', port=443): Read timed out. (read timeout=10.0)</msg>
<status status="PASS" endtime="20171026 00:14:34.657" starttime="20171026 00:14:24.608"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171026 00:14:34.658" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171026 00:14:34.658" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.5.180.47', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20171026 00:14:34.659" starttime="20171026 00:14:34.658"></status>
</kw>
<status status="FAIL" endtime="20171026 00:14:34.659" starttime="20171026 00:14:24.603"></status>
</kw>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171026 00:14:54.661" level="INFO">Creating Session using : alias=openbmc, url=https://9.5.180.47, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171026 00:14:54.661" starttime="20171026 00:14:54.660"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171026 00:14:54.662" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171026 00:14:54.662" starttime="20171026 00:14:54.662"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171026 00:14:54.663" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171026 00:14:54.663" starttime="20171026 00:14:54.662"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171026 00:14:54.663" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171026 00:14:54.663" starttime="20171026 00:14:54.663"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171026 00:15:04.713" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.5.180.47', port=443): Read timed out. (read timeout=10.0)</msg>
<status status="FAIL" endtime="20171026 00:15:04.713" starttime="20171026 00:14:54.665"></status>
</kw>
<msg timestamp="20171026 00:15:04.713" level="INFO">${status} = FAIL</msg>
<msg timestamp="20171026 00:15:04.713" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.5.180.47', port=443): Read timed out. (read timeout=10.0)</msg>
<status status="PASS" endtime="20171026 00:15:04.713" starttime="20171026 00:14:54.664"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171026 00:15:04.714" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171026 00:15:04.714" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.5.180.47', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20171026 00:15:04.715" starttime="20171026 00:15:04.714"></status>
</kw>
<status status="FAIL" endtime="20171026 00:15:04.715" starttime="20171026 00:14:54.659"></status>
</kw>
<msg timestamp="20171026 00:15:04.715" level="FAIL">Keyword 'Post Login Request' failed after retrying for 40 seconds. The last error was: ReadTimeout: HTTPSConnectionPool(host='9.5.180.47', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20171026 00:15:04.715" starttime="20171026 00:14:24.603"></status>
</kw>
<status status="FAIL" endtime="20171026 00:15:04.715" starttime="20171026 00:14:24.602"></status>
</kw>
<status status="FAIL" endtime="20171026 00:15:04.715" starttime="20171026 00:14:24.602"></status>
</kw>
<status status="FAIL" endtime="20171026 00:15:04.715" starttime="20171026 00:14:24.601"></status>
</kw>
<msg timestamp="20171026 00:15:04.716" level="FAIL">
#(UTC) 2017/10/26 00:15:04.715620 -   40.125849 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    0
</msg>
<status status="FAIL" endtime="20171026 00:15:04.716" starttime="20171026 00:14:24.599"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'rest': '^1$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/state/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171026 00:15:06.723" level="INFO">Creating Session using : alias=openbmc, url=https://9.5.180.47, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171026 00:15:06.724" starttime="20171026 00:15:06.723"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171026 00:15:06.724" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171026 00:15:06.724" starttime="20171026 00:15:06.724"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171026 00:15:06.725" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171026 00:15:06.725" starttime="20171026 00:15:06.725"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171026 00:15:06.726" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171026 00:15:06.726" starttime="20171026 00:15:06.725"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171026 00:15:16.772" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.5.180.47', port=443): Read timed out. (read timeout=10.0)</msg>
<status status="FAIL" endtime="20171026 00:15:16.772" starttime="20171026 00:15:06.727"></status>
</kw>
<msg timestamp="20171026 00:15:16.772" level="INFO">${status} = FAIL</msg>
<msg timestamp="20171026 00:15:16.772" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.5.180.47', port=443): Read timed out. (read timeout=10.0)</msg>
<status status="PASS" endtime="20171026 00:15:16.772" starttime="20171026 00:15:06.726"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171026 00:15:16.773" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171026 00:15:16.773" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.5.180.47', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20171026 00:15:16.773" starttime="20171026 00:15:16.773"></status>
</kw>
<status status="FAIL" endtime="20171026 00:15:16.774" starttime="20171026 00:15:06.722"></status>
</kw>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171026 00:15:36.775" level="INFO">Creating Session using : alias=openbmc, url=https://9.5.180.47, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171026 00:15:36.776" starttime="20171026 00:15:36.775"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171026 00:15:36.777" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171026 00:15:36.777" starttime="20171026 00:15:36.776"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171026 00:15:36.777" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171026 00:15:36.777" starttime="20171026 00:15:36.777"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171026 00:15:36.778" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171026 00:15:36.778" starttime="20171026 00:15:36.778"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171026 00:15:37.103" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171026 00:15:37.103" starttime="20171026 00:15:36.779"></status>
</kw>
<msg timestamp="20171026 00:15:37.103" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 00:15:37.103" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:15:37.103" starttime="20171026 00:15:36.779"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171026 00:15:37.104" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:15:37.104" starttime="20171026 00:15:37.104"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 00:15:37.105" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:15:37.105" starttime="20171026 00:15:37.105"></status>
</kw>
<status status="PASS" endtime="20171026 00:15:37.105" starttime="20171026 00:15:36.774"></status>
</kw>
<status status="PASS" endtime="20171026 00:15:37.105" starttime="20171026 00:15:06.721"></status>
</kw>
<status status="PASS" endtime="20171026 00:15:37.105" starttime="20171026 00:15:06.721"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171026 00:15:37.106" level="INFO">${base_uri} = /xyz/openbmc_project/state/enumerate</msg>
<status status="PASS" endtime="20171026 00:15:37.106" starttime="20171026 00:15:37.106"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171026 00:15:37.107" starttime="20171026 00:15:37.107"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171026 00:15:38.381" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/enumerate, headers=None json=None</msg>
<msg timestamp="20171026 00:15:38.382" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171026 00:15:38.382" starttime="20171026 00:15:37.107"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171026 00:15:38.383" starttime="20171026 00:15:38.382"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171026 00:15:38.383" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171026 00:15:38.383" starttime="20171026 00:15:38.383"></status>
</kw>
<msg timestamp="20171026 00:15:38.383" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171026 00:15:38.383" starttime="20171026 00:15:06.720"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 00:15:38.384" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171026 00:15:38.384" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20171026 00:15:38.384" starttime="20171026 00:15:38.384"></status>
</kw>
<status status="FAIL" endtime="20171026 00:15:38.385" starttime="20171026 00:15:06.719"></status>
</kw>
<msg timestamp="20171026 00:15:38.385" level="FAIL">
#(UTC) 2017/10/26 00:15:38.384600 -   33.668980 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    0
</msg>
<status status="FAIL" endtime="20171026 00:15:38.385" starttime="20171026 00:15:06.717"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'rest': '^1$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/state/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171026 00:15:40.391" level="INFO">Creating Session using : alias=openbmc, url=https://9.5.180.47, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171026 00:15:40.392" starttime="20171026 00:15:40.391"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171026 00:15:40.392" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171026 00:15:40.392" starttime="20171026 00:15:40.392"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171026 00:15:40.393" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171026 00:15:40.393" starttime="20171026 00:15:40.393"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171026 00:15:40.394" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171026 00:15:40.394" starttime="20171026 00:15:40.394"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171026 00:15:41.458" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171026 00:15:41.459" starttime="20171026 00:15:40.395"></status>
</kw>
<msg timestamp="20171026 00:15:41.459" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 00:15:41.459" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:15:41.459" starttime="20171026 00:15:40.394"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171026 00:15:41.460" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:15:41.460" starttime="20171026 00:15:41.459"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 00:15:41.460" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:15:41.461" starttime="20171026 00:15:41.460"></status>
</kw>
<status status="PASS" endtime="20171026 00:15:41.461" starttime="20171026 00:15:40.390"></status>
</kw>
<status status="PASS" endtime="20171026 00:15:41.461" starttime="20171026 00:15:40.390"></status>
</kw>
<status status="PASS" endtime="20171026 00:15:41.461" starttime="20171026 00:15:40.389"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171026 00:15:41.461" level="INFO">${base_uri} = /xyz/openbmc_project/state/enumerate</msg>
<status status="PASS" endtime="20171026 00:15:41.462" starttime="20171026 00:15:41.461"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171026 00:15:41.462" starttime="20171026 00:15:41.462"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171026 00:15:43.766" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/enumerate, headers=None json=None</msg>
<msg timestamp="20171026 00:15:43.766" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171026 00:15:43.766" starttime="20171026 00:15:41.462"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171026 00:15:43.767" starttime="20171026 00:15:43.767"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171026 00:15:43.767" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171026 00:15:43.768" starttime="20171026 00:15:43.767"></status>
</kw>
<msg timestamp="20171026 00:15:43.768" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171026 00:15:43.768" starttime="20171026 00:15:40.388"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 00:15:43.768" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171026 00:15:43.769" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20171026 00:15:43.769" starttime="20171026 00:15:43.768"></status>
</kw>
<status status="FAIL" endtime="20171026 00:15:43.769" starttime="20171026 00:15:40.388"></status>
</kw>
<msg timestamp="20171026 00:15:43.769" level="FAIL">
#(UTC) 2017/10/26 00:15:43.768937 -    5.384337 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    0
</msg>
<status status="FAIL" endtime="20171026 00:15:43.769" starttime="20171026 00:15:40.386"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'rest': '^1$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/state/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171026 00:15:45.775" level="INFO">Creating Session using : alias=openbmc, url=https://9.5.180.47, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171026 00:15:45.775" starttime="20171026 00:15:45.775"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171026 00:15:45.776" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171026 00:15:45.776" starttime="20171026 00:15:45.776"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171026 00:15:45.777" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171026 00:15:45.777" starttime="20171026 00:15:45.777"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171026 00:15:45.778" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171026 00:15:45.778" starttime="20171026 00:15:45.777"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171026 00:15:46.373" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171026 00:15:46.373" starttime="20171026 00:15:45.778"></status>
</kw>
<msg timestamp="20171026 00:15:46.373" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 00:15:46.373" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:15:46.373" starttime="20171026 00:15:45.778"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171026 00:15:46.374" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:15:46.374" starttime="20171026 00:15:46.373"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 00:15:46.374" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:15:46.375" starttime="20171026 00:15:46.374"></status>
</kw>
<status status="PASS" endtime="20171026 00:15:46.375" starttime="20171026 00:15:45.774"></status>
</kw>
<status status="PASS" endtime="20171026 00:15:46.375" starttime="20171026 00:15:45.774"></status>
</kw>
<status status="PASS" endtime="20171026 00:15:46.375" starttime="20171026 00:15:45.773"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171026 00:15:46.375" level="INFO">${base_uri} = /xyz/openbmc_project/state/enumerate</msg>
<status status="PASS" endtime="20171026 00:15:46.376" starttime="20171026 00:15:46.375"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171026 00:15:46.376" starttime="20171026 00:15:46.376"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171026 00:15:46.991" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/enumerate, headers=None json=None</msg>
<msg timestamp="20171026 00:15:46.992" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171026 00:15:46.992" starttime="20171026 00:15:46.377"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171026 00:15:46.992" starttime="20171026 00:15:46.992"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171026 00:15:46.993" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171026 00:15:46.993" starttime="20171026 00:15:46.993"></status>
</kw>
<msg timestamp="20171026 00:15:46.993" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171026 00:15:46.993" starttime="20171026 00:15:45.772"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 00:15:46.994" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171026 00:15:46.994" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20171026 00:15:46.994" starttime="20171026 00:15:46.993"></status>
</kw>
<status status="FAIL" endtime="20171026 00:15:46.994" starttime="20171026 00:15:45.772"></status>
</kw>
<msg timestamp="20171026 00:15:46.995" level="FAIL">
#(UTC) 2017/10/26 00:15:46.994282 -    3.225345 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    0
</msg>
<status status="FAIL" endtime="20171026 00:15:46.995" starttime="20171026 00:15:45.770"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'rest': '^1$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/state/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171026 00:15:49.001" level="INFO">Creating Session using : alias=openbmc, url=https://9.5.180.47, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171026 00:15:49.001" starttime="20171026 00:15:49.000"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171026 00:15:49.002" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171026 00:15:49.002" starttime="20171026 00:15:49.002"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171026 00:15:49.003" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171026 00:15:49.003" starttime="20171026 00:15:49.002"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171026 00:15:49.003" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171026 00:15:49.003" starttime="20171026 00:15:49.003"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171026 00:15:50.153" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171026 00:15:50.153" starttime="20171026 00:15:49.004"></status>
</kw>
<msg timestamp="20171026 00:15:50.153" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 00:15:50.154" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:15:50.154" starttime="20171026 00:15:49.004"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171026 00:15:50.154" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:15:50.154" starttime="20171026 00:15:50.154"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 00:15:50.155" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:15:50.155" starttime="20171026 00:15:50.155"></status>
</kw>
<status status="PASS" endtime="20171026 00:15:50.155" starttime="20171026 00:15:48.999"></status>
</kw>
<status status="PASS" endtime="20171026 00:15:50.155" starttime="20171026 00:15:48.999"></status>
</kw>
<status status="PASS" endtime="20171026 00:15:50.155" starttime="20171026 00:15:48.998"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171026 00:15:50.156" level="INFO">${base_uri} = /xyz/openbmc_project/state/enumerate</msg>
<status status="PASS" endtime="20171026 00:15:50.156" starttime="20171026 00:15:50.156"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171026 00:15:50.157" starttime="20171026 00:15:50.156"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171026 00:15:51.546" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/enumerate, headers=None json=None</msg>
<msg timestamp="20171026 00:15:51.546" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:15:51.546" starttime="20171026 00:15:50.157"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171026 00:15:51.547" starttime="20171026 00:15:51.547"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171026 00:15:51.547" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171026 00:15:51.548" starttime="20171026 00:15:51.547"></status>
</kw>
<msg timestamp="20171026 00:15:51.548" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:15:51.548" starttime="20171026 00:15:48.998"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 00:15:51.549" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:15:51.549" starttime="20171026 00:15:51.548"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171026 00:15:51.549" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/state/bmc0": {
      "CurrentBMCState": "xyz.openbmc_project.State.BMC.BMCState.NotReady", 
      "RequestedBMCTransition": "xyz.openbmc_project.State.BMC.Transition.None"
    }, 
    "/xyz/openbmc_project/state/chassis0": {
      "CurrentPowerState": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
      "RequestedPowerTransition": "xyz.openbmc_project.State.Chassis.Transition.Off"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171026 00:15:51.549" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171026 00:15:51.549" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'/xyz/openbmc_project/state/chassis0': {u'CurrentPowerState': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'RequestedPowerTransition': u'x...</msg>
<status status="PASS" endtime="20171026 00:15:51.549" starttime="20171026 00:15:51.549"></status>
</kw>
<status status="PASS" endtime="20171026 00:15:51.550" starttime="20171026 00:15:48.997"></status>
</kw>
<status status="PASS" endtime="20171026 00:15:51.550" starttime="20171026 00:15:48.995"></status>
</kw>
<msg timestamp="20171026 00:15:51.565" level="INFO">Log level changed from NONE to INFO.</msg>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'host': u'^Off$', u'chassis': u'^Off$', u'operating_system': u'^Inactive$', u'rest': u'^1$', u'boot_progress': u'^Off|Unspecified$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/state/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171026 00:15:51.585" level="INFO">Creating Session using : alias=openbmc, url=https://9.5.180.47, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171026 00:15:51.585" starttime="20171026 00:15:51.585"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171026 00:15:51.586" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171026 00:15:51.586" starttime="20171026 00:15:51.586"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171026 00:15:51.587" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171026 00:15:51.587" starttime="20171026 00:15:51.586"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171026 00:15:51.587" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171026 00:15:51.587" starttime="20171026 00:15:51.587"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171026 00:15:52.314" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171026 00:15:52.314" starttime="20171026 00:15:51.588"></status>
</kw>
<msg timestamp="20171026 00:15:52.314" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 00:15:52.315" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:15:52.315" starttime="20171026 00:15:51.588"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171026 00:15:52.315" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:15:52.315" starttime="20171026 00:15:52.315"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 00:15:52.316" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:15:52.316" starttime="20171026 00:15:52.316"></status>
</kw>
<status status="PASS" endtime="20171026 00:15:52.316" starttime="20171026 00:15:51.584"></status>
</kw>
<status status="PASS" endtime="20171026 00:15:52.316" starttime="20171026 00:15:51.584"></status>
</kw>
<status status="PASS" endtime="20171026 00:15:52.316" starttime="20171026 00:15:51.583"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171026 00:15:52.317" level="INFO">${base_uri} = /xyz/openbmc_project/state/enumerate</msg>
<status status="PASS" endtime="20171026 00:15:52.317" starttime="20171026 00:15:52.317"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171026 00:15:52.318" starttime="20171026 00:15:52.317"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171026 00:15:53.834" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/enumerate, headers=None json=None</msg>
<msg timestamp="20171026 00:15:53.834" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:15:53.834" starttime="20171026 00:15:52.318"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171026 00:15:53.835" starttime="20171026 00:15:53.835"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171026 00:15:53.835" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171026 00:15:53.836" starttime="20171026 00:15:53.835"></status>
</kw>
<msg timestamp="20171026 00:15:53.836" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:15:53.836" starttime="20171026 00:15:51.582"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 00:15:53.837" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:15:53.837" starttime="20171026 00:15:53.836"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171026 00:15:53.837" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/state/bmc0": {
      "CurrentBMCState": "xyz.openbmc_project.State.BMC.BMCState.NotReady", 
      "RequestedBMCTransition": "xyz.openbmc_project.State.BMC.Transition.None"
    }, 
    "/xyz/openbmc_project/state/chassis0": {
      "CurrentPowerState": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
      "RequestedPowerTransition": "xyz.openbmc_project.State.Chassis.Transition.Off"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171026 00:15:53.837" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171026 00:15:53.837" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'/xyz/openbmc_project/state/chassis0': {u'CurrentPowerState': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'RequestedPowerTransition': u'x...</msg>
<status status="PASS" endtime="20171026 00:15:53.838" starttime="20171026 00:15:53.837"></status>
</kw>
<status status="PASS" endtime="20171026 00:15:53.838" starttime="20171026 00:15:51.582"></status>
</kw>
<msg timestamp="20171026 00:15:53.838" level="FAIL">
#(UTC) 2017/10/26 00:15:53.838078 -    2.267299 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[chassis]:                                 Off
  state[host]:                                    
  state[operating_system]:                        
  state[boot_progress]:                           
</msg>
<status status="FAIL" endtime="20171026 00:15:53.838" starttime="20171026 00:15:51.580"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'host': u'^Off$', u'chassis': u'^Off$', u'operating_system': u'^Inactive$', u'rest': u'^1$', u'boot_progress': u'^Off|Unspecified$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/state/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171026 00:16:03.844" level="INFO">Creating Session using : alias=openbmc, url=https://9.5.180.47, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171026 00:16:03.845" starttime="20171026 00:16:03.844"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171026 00:16:03.845" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171026 00:16:03.845" starttime="20171026 00:16:03.845"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171026 00:16:03.846" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171026 00:16:03.846" starttime="20171026 00:16:03.846"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171026 00:16:03.847" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171026 00:16:03.847" starttime="20171026 00:16:03.846"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171026 00:16:04.683" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171026 00:16:04.683" starttime="20171026 00:16:03.848"></status>
</kw>
<msg timestamp="20171026 00:16:04.683" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 00:16:04.683" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:16:04.683" starttime="20171026 00:16:03.847"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171026 00:16:04.684" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:16:04.684" starttime="20171026 00:16:04.684"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 00:16:04.685" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:16:04.685" starttime="20171026 00:16:04.684"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:04.685" starttime="20171026 00:16:03.843"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:04.685" starttime="20171026 00:16:03.843"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:04.685" starttime="20171026 00:16:03.842"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171026 00:16:04.686" level="INFO">${base_uri} = /xyz/openbmc_project/state/enumerate</msg>
<status status="PASS" endtime="20171026 00:16:04.686" starttime="20171026 00:16:04.686"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171026 00:16:04.687" starttime="20171026 00:16:04.686"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171026 00:16:07.117" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/enumerate, headers=None json=None</msg>
<msg timestamp="20171026 00:16:07.117" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:16:07.117" starttime="20171026 00:16:04.687"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171026 00:16:07.118" starttime="20171026 00:16:07.117"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171026 00:16:07.118" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171026 00:16:07.118" starttime="20171026 00:16:07.118"></status>
</kw>
<msg timestamp="20171026 00:16:07.118" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:16:07.118" starttime="20171026 00:16:03.841"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 00:16:07.119" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:16:07.119" starttime="20171026 00:16:07.119"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171026 00:16:07.120" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/state/bmc0": {
      "CurrentBMCState": "xyz.openbmc_project.State.BMC.BMCState.NotReady", 
      "RequestedBMCTransition": "xyz.openbmc_project.State.BMC.Transition.None"
    }, 
    "/xyz/openbmc_project/state/chassis0": {
      "CurrentPowerState": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
      "RequestedPowerTransition": "xyz.openbmc_project.State.Chassis.Transition.Off"
    }, 
    "/xyz/openbmc_project/state/host0": {
      "AttemptsLeft": 3, 
      "BootProgress": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
      "CurrentHostState": "xyz.openbmc_project.State.Host.HostState.Off", 
      "OperatingSystemState": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
      "RequestedHostTransition": "xyz.openbmc_project.State.Host.Transition.Off"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171026 00:16:07.120" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171026 00:16:07.120" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'/xyz/openbmc_project/state/host0': {u'CurrentHostState': u'xyz.openbmc_project.State.Host.HostState.Off', u'RequestedHostTransition': u'xyz.openbm...</msg>
<status status="PASS" endtime="20171026 00:16:07.120" starttime="20171026 00:16:07.119"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:07.120" starttime="20171026 00:16:03.841"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:07.121" starttime="20171026 00:16:03.839"></status>
</kw>
<msg timestamp="20171026 00:16:07.136" level="INFO">Log level changed from NONE to INFO.</msg>
<status status="PASS" endtime="20171026 00:16:07.137" starttime="20171026 00:12:50.699"></status>
</kw>
<msg timestamp="20171026 00:16:07.153" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20171026 00:16:07.157" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20171026 00:16:07.163" level="INFO">Log level changed from NONE to INFO.</msg>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20171026 00:16:07.169" starttime="20171026 00:16:07.169"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:07.173" starttime="20171026 00:12:48.615"></status>
</kw>
<kw type="teardown" name="Obmc Boot Test Teardown" library="obmc_boot_test">
<doc>Clean up after the Main keyword.</doc>
<msg timestamp="20171026 00:16:07.178" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20171026 00:16:07.187" level="INFO">${boot_stack} = </msg>
<msg timestamp="20171026 00:16:07.187" level="INFO">${stack_mode} = normal</msg>
<msg timestamp="20171026 00:16:07.188" level="INFO">${quiet} = 0</msg>
<status status="PASS" endtime="20171026 00:16:07.188" starttime="20171026 00:16:07.173"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:07.188" starttime="20171026 00:12:48.613"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:07.188" starttime="20171026 00:12:48.610"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:07.188" starttime="20171026 00:12:48.608"></status>
</kw>
<kw name="Verify Running BMC Image" library="code_update_utils">
<doc>Verify that the version on the BMC is the same as the</doc>
<arguments>
<arg>${IMAGE_FILE_PATH}</arg>
</arguments>
<kw name="Get Version Tar" library="code_update_utils">
<doc>Read the image version from the MANIFEST inside the tarball.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<assign>
<var>${tar_version}</var>
</assign>
<msg timestamp="20171026 00:16:07.209" level="INFO">${tar_version} = v1.99.10-208-g69b2e34</msg>
<status status="PASS" endtime="20171026 00:16:07.209" starttime="20171026 00:16:07.189"></status>
</kw>
<kw name="Get BMC Version" library="utils">
<doc>Returns BMC version from /etc/os-release.</doc>
<assign>
<var>${bmc_version}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20171026 00:16:07.212" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20171026 00:16:07.212" starttime="20171026 00:16:07.211"></status>
</kw>
<msg timestamp="20171026 00:16:07.212" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20171026 00:16:07.212" starttime="20171026 00:16:07.211"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20171026 00:16:07.213" starttime="20171026 00:16:07.213"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:07.213" starttime="20171026 00:16:07.212"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20171026 00:16:07.214" starttime="20171026 00:16:07.213"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20171026 00:16:07.215" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20171026 00:16:07.215" starttime="20171026 00:16:07.215"></status>
</kw>
<msg timestamp="20171026 00:16:07.215" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20171026 00:16:07.215" starttime="20171026 00:16:07.214"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20171026 00:16:07.217" starttime="20171026 00:16:07.217"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:07.217" starttime="20171026 00:16:07.216"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:07.217" starttime="20171026 00:16:07.215"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20171026 00:16:07.218" level="INFO">Logging into '9.5.180.47:22' as 'root'.</msg>
<msg timestamp="20171026 00:16:12.073" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20171026 00:16:12.073" starttime="20171026 00:16:07.217"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:12.073" starttime="20171026 00:16:07.210"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>grep ^VERSION_ID= /etc/os-release | cut -f 2 -d '='</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20171026 00:16:12.074" level="INFO">${cmd} = grep ^VERSION_ID= /etc/os-release | cut -f 2 -d '='</msg>
<status status="PASS" endtime="20171026 00:16:12.074" starttime="20171026 00:16:12.074"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20171026 00:16:12.075" level="INFO">Executing command 'grep ^VERSION_ID= /etc/os-release | cut -f 2 -d '=''.</msg>
<msg timestamp="20171026 00:16:12.296" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20171026 00:16:12.296" level="INFO">${stdout} = "v1.99.10-208-gf39c451"</msg>
<msg timestamp="20171026 00:16:12.296" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171026 00:16:12.296" starttime="20171026 00:16:12.075"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20171026 00:16:12.296" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20171026 00:16:12.296" starttime="20171026 00:16:12.296"></status>
</kw>
<msg timestamp="20171026 00:16:12.297" level="INFO">${output} = "v1.99.10-208-gf39c451"</msg>
<status status="PASS" endtime="20171026 00:16:12.297" starttime="20171026 00:16:12.074"></status>
</kw>
<msg timestamp="20171026 00:16:12.297" level="INFO">${bmc_version} = "v1.99.10-208-gf39c451"</msg>
<status status="PASS" endtime="20171026 00:16:12.297" starttime="20171026 00:16:07.209"></status>
</kw>
<kw name="Remove String" library="String">
<doc>Removes all ``removables`` from the given ``string``.</doc>
<arguments>
<arg>${bmc_version}</arg>
<arg>"</arg>
</arguments>
<assign>
<var>${bmc_version}</var>
</assign>
<msg timestamp="20171026 00:16:12.298" level="INFO">${bmc_version} = v1.99.10-208-gf39c451</msg>
<status status="PASS" endtime="20171026 00:16:12.298" starttime="20171026 00:16:12.297"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${tar_version}</arg>
<arg>${bmc_version}</arg>
</arguments>
<msg timestamp="20171026 00:16:12.298" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171026 00:16:12.298" level="FAIL">v1.99.10-208-g69b2e34 != v1.99.10-208-gf39c451</msg>
<status status="FAIL" endtime="20171026 00:16:12.298" starttime="20171026 00:16:12.298"></status>
</kw>
<status status="FAIL" endtime="20171026 00:16:12.299" starttime="20171026 00:16:07.189"></status>
</kw>
<kw type="teardown" name="REST BMC Code Update Teardown">
<doc>Do code update test teardown.</doc>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.5.180.47</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20171026 00:16:12.312" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20171026 00:16:12.312" starttime="20171026 00:16:12.312"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20171026 00:16:12.316" level="INFO">Running command 'ping -c 4 9.5.180.47 2&gt;&amp;1'.</msg>
<msg timestamp="20171026 00:16:15.386" level="INFO">${RC} = 0</msg>
<msg timestamp="20171026 00:16:15.387" level="INFO">${output} = PING 9.5.180.47 (9.5.180.47) 56(84) bytes of data.
64 bytes from 9.5.180.47: icmp_seq=1 ttl=50 time=35.2 ms
64 bytes from 9.5.180.47: icmp_seq=2 ttl=50 time=35.0 ms
64 bytes from 9.5.180.47: icmp_seq=...</msg>
<status status="PASS" endtime="20171026 00:16:15.387" starttime="20171026 00:16:12.312"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20171026 00:16:15.407" level="INFO">RC: 0
Output:
PING 9.5.180.47 (9.5.180.47) 56(84) bytes of data.
64 bytes from 9.5.180.47: icmp_seq=1 ttl=50 time=35.2 ms
64 bytes from 9.5.180.47: icmp_seq=2 ttl=50 time=35.0 ms
64 bytes from 9.5.180.47: icmp_seq=3 ttl=50 time=35.1 ms
64 bytes from 9.5.180.47: icmp_seq=4 ttl=50 time=57.1 ms

--- 9.5.180.47 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3003ms
rtt min/avg/max/mdev = 35.018/40.621/57.115/9.523 ms</msg>
<status status="PASS" endtime="20171026 00:16:15.408" starttime="20171026 00:16:15.404"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20171026 00:16:15.410" starttime="20171026 00:16:15.409"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:15.410" starttime="20171026 00:16:12.311"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20171026 00:16:15.446" level="INFO">${cur_time} = 2017-10-26 00:16:15:445622</msg>
<status status="PASS" endtime="20171026 00:16:15.446" starttime="20171026 00:16:15.445"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20171026 00:16:15.447" level="INFO">${cur_time} = 20171026001615445622</msg>
<status status="PASS" endtime="20171026 00:16:15.447" starttime="20171026 00:16:15.446"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:15.447" starttime="20171026 00:16:15.441"></status>
</kw>
<msg timestamp="20171026 00:16:15.453" level="INFO">${FFDC_TIME} = 20171026001615445622</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20171026 00:16:15.454" level="INFO">${suite_name} = BmcCodeUpdate</msg>
<status status="PASS" endtime="20171026 00:16:15.454" starttime="20171026 00:16:15.454"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20171026 00:16:15.455" level="INFO">${suite_name} = 20171026001615445622_BmcCodeUpdate</msg>
<status status="PASS" endtime="20171026 00:16:15.455" starttime="20171026 00:16:15.455"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20171026 00:16:15.456" level="INFO">${test_name} = RESTBMCCodeUpdate</msg>
<status status="PASS" endtime="20171026 00:16:15.456" starttime="20171026 00:16:15.455"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20171026 00:16:15.456" level="INFO">${test_name} = 20171026001615445622_RESTBMCCodeUpdate</msg>
<status status="PASS" endtime="20171026 00:16:15.456" starttime="20171026 00:16:15.456"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:15.457" starttime="20171026 00:16:15.453"></status>
</kw>
<msg timestamp="20171026 00:16:15.457" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/</msg>
<msg timestamp="20171026 00:16:15.457" level="INFO">${FFDC_PREFIX} = 20171026001615445622_</msg>
<msg timestamp="20171026 00:16:15.478" level="INFO">${LOG_PREFIX} = /home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/</arg>
</arguments>
<msg timestamp="20171026 00:16:15.479" html="yes" level="INFO">Created directory '&lt;a href="file:///home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate"&gt;/home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 00:16:15.479" starttime="20171026 00:16:15.478"></status>
</kw>
<msg timestamp="20171026 00:16:15.485" level="INFO">${FFDC_FILE_PATH} = /home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 00:16:15.495" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_general.txt"&gt;/home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 00:16:15.496" starttime="20171026 00:16:15.495"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:15.496" starttime="20171026 00:16:15.494"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 00:16:15.497" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_general.txt"&gt;/home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 00:16:15.497" starttime="20171026 00:16:15.497"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:15.497" starttime="20171026 00:16:15.496"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 00:16:15.498" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_general.txt"&gt;/home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 00:16:15.498" starttime="20171026 00:16:15.498"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:15.499" starttime="20171026 00:16:15.497"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 00:16:15.500" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_general.txt"&gt;/home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 00:16:15.500" starttime="20171026 00:16:15.499"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:15.500" starttime="20171026 00:16:15.499"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 00:16:15.501" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_general.txt"&gt;/home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 00:16:15.501" starttime="20171026 00:16:15.501"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:15.501" starttime="20171026 00:16:15.500"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 00:16:15.503" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_general.txt"&gt;/home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 00:16:15.503" starttime="20171026 00:16:15.502"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:15.503" starttime="20171026 00:16:15.502"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 00:16:15.504" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_general.txt"&gt;/home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 00:16:15.504" starttime="20171026 00:16:15.504"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:15.504" starttime="20171026 00:16:15.503"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 00:16:15.506" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_general.txt"&gt;/home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 00:16:15.506" starttime="20171026 00:16:15.506"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:15.506" starttime="20171026 00:16:15.504"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 00:16:15.507" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_general.txt"&gt;/home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 00:16:15.507" starttime="20171026 00:16:15.507"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:15.508" starttime="20171026 00:16:15.506"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 00:16:15.509" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_general.txt"&gt;/home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 00:16:15.509" starttime="20171026 00:16:15.509"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:15.509" starttime="20171026 00:16:15.508"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 00:16:15.510" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_general.txt"&gt;/home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 00:16:15.510" starttime="20171026 00:16:15.510"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:15.511" starttime="20171026 00:16:15.509"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 00:16:15.512" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_general.txt"&gt;/home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 00:16:15.512" starttime="20171026 00:16:15.511"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:15.512" starttime="20171026 00:16:15.511"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 00:16:15.514" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_general.txt"&gt;/home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 00:16:15.514" starttime="20171026 00:16:15.514"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:15.514" starttime="20171026 00:16:15.513"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
<arg>test_mode=0</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20171026 00:16:15.524" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.5.180.47
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171026 00:16:15.524" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.5.180.47
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171026 00:16:15.525" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20171026 00:16:16.232" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20171026 00:16:16.241" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20171026 00:16:16.241" level="INFO">${stderr} = </msg>
<msg timestamp="20171026 00:16:16.241" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20171026 00:16:16.241" starttime="20171026 00:16:15.515"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20171026 00:16:16.242" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20171026 00:16:16.242" starttime="20171026 00:16:16.241"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20171026 00:16:16.242" level="INFO">Length is 11</msg>
<status status="PASS" endtime="20171026 00:16:16.242" starttime="20171026 00:16:16.242"></status>
</kw>
<msg timestamp="20171026 00:16:16.242" level="INFO">${model_name} = Witherspoon</msg>
<status status="PASS" endtime="20171026 00:16:16.243" starttime="20171026 00:16:15.515"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 00:16:16.244" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_general.txt"&gt;/home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 00:16:16.244" starttime="20171026 00:16:16.243"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:16.244" starttime="20171026 00:16:16.243"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:16.244" starttime="20171026 00:16:15.508"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 00:16:16.245" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_general.txt"&gt;/home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 00:16:16.245" starttime="20171026 00:16:16.245"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:16.246" starttime="20171026 00:16:16.244"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20171026 00:16:16.246" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20171026 00:16:16.246" starttime="20171026 00:16:16.246"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 00:16:16.252" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_general.txt"&gt;/home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 00:16:16.252" starttime="20171026 00:16:16.247"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:16.252" starttime="20171026 00:16:16.247"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 00:16:16.253" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_general.txt"&gt;/home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 00:16:16.253" starttime="20171026 00:16:16.253"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:16.254" starttime="20171026 00:16:16.252"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:16.254" starttime="20171026 00:16:16.246"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 00:16:16.255" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_general.txt"&gt;/home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 00:16:16.255" starttime="20171026 00:16:16.255"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:16.255" starttime="20171026 00:16:16.254"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 00:16:16.256" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_general.txt"&gt;/home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 00:16:16.256" starttime="20171026 00:16:16.256"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:16.256" starttime="20171026 00:16:16.255"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:16.256" starttime="20171026 00:16:16.254"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 00:16:16.258" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_general.txt"&gt;/home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 00:16:16.258" starttime="20171026 00:16:16.257"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:16.258" starttime="20171026 00:16:16.257"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 00:16:16.259" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_general.txt"&gt;/home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 00:16:16.259" starttime="20171026 00:16:16.259"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:16.259" starttime="20171026 00:16:16.258"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:16.259" starttime="20171026 00:16:16.257"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:16.259" starttime="20171026 00:16:16.246"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 00:16:16.260" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_general.txt"&gt;/home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 00:16:16.261" starttime="20171026 00:16:16.260"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:16.261" starttime="20171026 00:16:16.260"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:16.261" starttime="20171026 00:16:15.494"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20171026 00:16:16.267" level="INFO">@{entries} = [ BMC LOGS ]</msg>
<status status="PASS" endtime="20171026 00:16:16.267" starttime="20171026 00:16:16.267"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg timestamp="20171026 00:16:16.268" level="INFO">@{method_list} = [ ('FFDC Generic Report', 'BMC FFDC Manifest') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('Sys Inventory Files', 'System Inventory Files') | ('Core Files', 'SCP Coredump Files') | ('BMC Specif...</msg>
<status status="PASS" endtime="20171026 00:16:16.268" starttime="20171026 00:16:16.268"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw name="Get Ffdc Method Desc" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status status="PASS" endtime="20171026 00:16:16.270" starttime="20171026 00:16:16.269"></status>
</kw>
<msg timestamp="20171026 00:16:16.270" level="INFO">@{ffdc_function_list} = [ FFDC Generic Report | Get Request FFDC | Sys Inventory Files | Core Files | BMC Specific Files | SEL Log | OS FFDC ]</msg>
<status status="PASS" endtime="20171026 00:16:16.270" starttime="20171026 00:16:16.269"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20171026 00:16:16.272" starttime="20171026 00:16:16.272"></status>
</kw>
<msg timestamp="20171026 00:16:16.272" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 00:16:16.273" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20171026 00:16:16.273" starttime="20171026 00:16:16.271"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20171026 00:16:16.273" starttime="20171026 00:16:16.273"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20171026 00:16:16.288" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20171026 00:16:16.288" starttime="20171026 00:16:16.288"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20171026 00:16:16.289" level="INFO">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil state') ]</msg>
<status status="PASS" endtime="20171026 00:16:16.289" starttime="20171026 00:16:16.289"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20171026 00:16:16.296" level="INFO">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status status="PASS" endtime="20171026 00:16:16.296" starttime="20171026 00:16:16.290"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil state')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 00:16:16.300" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_general.txt"&gt;/home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 00:16:16.300" starttime="20171026 00:16:16.299"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:16.300" starttime="20171026 00:16:16.299"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 00:16:16.301" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_general.txt"&gt;/home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 00:16:16.302" starttime="20171026 00:16:16.301"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:16.302" starttime="20171026 00:16:16.300"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 00:16:16.303" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_general.txt"&gt;/home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 00:16:16.303" starttime="20171026 00:16:16.302"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:16.303" starttime="20171026 00:16:16.302"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 00:16:16.304" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_general.txt"&gt;/home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 00:16:16.304" starttime="20171026 00:16:16.304"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:16.305" starttime="20171026 00:16:16.303"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:16.305" starttime="20171026 00:16:16.298"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:16.305" starttime="20171026 00:16:16.298"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171026 00:16:16.306" level="INFO">${cmd_buf} = BMC Execute Command  /usr/sbin/obmcutil state  ignore_err=1</msg>
<status status="PASS" endtime="20171026 00:16:16.306" starttime="20171026 00:16:16.305"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>/usr/sbin/obmcutil state</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171026 00:16:16.348" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.5.180.47
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171026 00:16:16.348" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.5.180.47
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171026 00:16:16.349" level="INFO">Executing command '/usr/sbin/obmcutil state'.</msg>
<msg timestamp="20171026 00:16:21.415" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171026 00:16:21.415" starttime="20171026 00:16:16.323"></status>
</kw>
<msg timestamp="20171026 00:16:21.415" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 00:16:21.415" level="INFO">${ret_values} = (u'CurrentBMCState     : xyz.openbmc_project.State.BMC.BMCState.Ready\nCurrentPowerState   : xyz.openbmc_project.State.Chassis.PowerState.Off\nCurrentHostState    : xyz.openbmc_project.State.Host.Host...</msg>
<status status="PASS" endtime="20171026 00:16:21.415" starttime="20171026 00:16:16.306"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171026 00:16:21.416" level="INFO">${stdout} = CurrentBMCState     : xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState   : xyz.openbmc_project.State.Chassis.PowerState.Off
CurrentHostState    : xyz.openbmc_project.State.Host.HostState...</msg>
<status status="PASS" endtime="20171026 00:16:21.416" starttime="20171026 00:16:21.416"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171026 00:16:21.417" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171026 00:16:21.417" starttime="20171026 00:16:21.417"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 00:16:21.426" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_general.txt"&gt;/home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 00:16:21.426" starttime="20171026 00:16:21.425"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:21.426" starttime="20171026 00:16:21.425"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:21.426" starttime="20171026 00:16:21.417"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:21.426" starttime="20171026 00:16:16.297"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:21.426" starttime="20171026 00:16:16.297"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:21.427" starttime="20171026 00:16:16.296"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:21.427" starttime="20171026 00:16:16.288"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:21.427" starttime="20171026 00:16:16.288"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20171026 00:16:21.428" level="INFO">@{cmd_list} = [ ('FW Timestamp', 'cat /etc/timestamp') | ('FW Level', 'cat /etc/os-release') ]</msg>
<status status="PASS" endtime="20171026 00:16:21.428" starttime="20171026 00:16:21.428"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20171026 00:16:21.429" level="INFO">${ENTRY_INDEX} = DRIVER INFO</msg>
<status status="PASS" endtime="20171026 00:16:21.429" starttime="20171026 00:16:21.428"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('FW Timestamp', 'cat /etc/timestamp')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 00:16:21.432" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_general.txt"&gt;/home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 00:16:21.432" starttime="20171026 00:16:21.432"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:21.432" starttime="20171026 00:16:21.431"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 00:16:21.433" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_general.txt"&gt;/home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 00:16:21.434" starttime="20171026 00:16:21.433"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:21.434" starttime="20171026 00:16:21.432"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 00:16:21.435" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_general.txt"&gt;/home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 00:16:21.435" starttime="20171026 00:16:21.434"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:21.435" starttime="20171026 00:16:21.434"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 00:16:21.436" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_general.txt"&gt;/home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 00:16:21.437" starttime="20171026 00:16:21.436"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:21.437" starttime="20171026 00:16:21.435"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:21.437" starttime="20171026 00:16:21.430"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:21.437" starttime="20171026 00:16:21.430"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171026 00:16:21.438" level="INFO">${cmd_buf} = BMC Execute Command  cat /etc/timestamp  ignore_err=1</msg>
<status status="PASS" endtime="20171026 00:16:21.438" starttime="20171026 00:16:21.437"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/timestamp</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171026 00:16:21.479" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.5.180.47
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171026 00:16:21.479" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.5.180.47
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171026 00:16:21.480" level="INFO">Executing command 'cat /etc/timestamp'.</msg>
<msg timestamp="20171026 00:16:21.881" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171026 00:16:21.881" starttime="20171026 00:16:21.455"></status>
</kw>
<msg timestamp="20171026 00:16:21.881" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 00:16:21.881" level="INFO">${ret_values} = (u'20171025234133', u'', 0)</msg>
<status status="PASS" endtime="20171026 00:16:21.881" starttime="20171026 00:16:21.438"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171026 00:16:21.882" level="INFO">${stdout} = 20171025234133</msg>
<status status="PASS" endtime="20171026 00:16:21.882" starttime="20171026 00:16:21.882"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171026 00:16:21.883" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171026 00:16:21.883" starttime="20171026 00:16:21.882"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 00:16:21.891" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_general.txt"&gt;/home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 00:16:21.891" starttime="20171026 00:16:21.890"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:21.891" starttime="20171026 00:16:21.890"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:21.891" starttime="20171026 00:16:21.883"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:21.891" starttime="20171026 00:16:21.429"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:21.891" starttime="20171026 00:16:21.429"></status>
</kw>
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 00:16:21.894" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_general.txt"&gt;/home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 00:16:21.894" starttime="20171026 00:16:21.894"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:21.895" starttime="20171026 00:16:21.893"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 00:16:21.896" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_general.txt"&gt;/home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 00:16:21.896" starttime="20171026 00:16:21.895"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:21.896" starttime="20171026 00:16:21.895"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 00:16:21.897" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_general.txt"&gt;/home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 00:16:21.897" starttime="20171026 00:16:21.897"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:21.897" starttime="20171026 00:16:21.896"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 00:16:21.898" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_general.txt"&gt;/home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 00:16:21.899" starttime="20171026 00:16:21.898"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:21.899" starttime="20171026 00:16:21.898"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:21.899" starttime="20171026 00:16:21.893"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:21.899" starttime="20171026 00:16:21.892"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171026 00:16:21.900" level="INFO">${cmd_buf} = BMC Execute Command  cat /etc/os-release  ignore_err=1</msg>
<status status="PASS" endtime="20171026 00:16:21.900" starttime="20171026 00:16:21.899"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/os-release</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171026 00:16:21.940" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.5.180.47
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171026 00:16:21.941" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.5.180.47
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171026 00:16:21.941" level="INFO">Executing command 'cat /etc/os-release'.</msg>
<msg timestamp="20171026 00:16:22.389" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171026 00:16:22.389" starttime="20171026 00:16:21.918"></status>
</kw>
<msg timestamp="20171026 00:16:22.389" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 00:16:22.390" level="INFO">${ret_values} = (u'ID="openbmc-phosphor"\nNAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"\nVERSION="v1.99.10-208"\nVERSION_ID="v1.99.10-208-gf39c451"\nPRETTY_NAME="Phosphor OpenBMC (Phosphor OpenB...</msg>
<status status="PASS" endtime="20171026 00:16:22.390" starttime="20171026 00:16:21.900"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171026 00:16:22.390" level="INFO">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.10-208"
VERSION_ID="v1.99.10-208-gf39c451"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Proj...</msg>
<status status="PASS" endtime="20171026 00:16:22.390" starttime="20171026 00:16:22.390"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171026 00:16:22.391" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171026 00:16:22.391" starttime="20171026 00:16:22.391"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 00:16:22.399" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_general.txt"&gt;/home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 00:16:22.399" starttime="20171026 00:16:22.398"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:22.399" starttime="20171026 00:16:22.398"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:22.399" starttime="20171026 00:16:22.391"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:22.399" starttime="20171026 00:16:21.891"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:22.399" starttime="20171026 00:16:21.891"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:22.399" starttime="20171026 00:16:21.429"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:22.399" starttime="20171026 00:16:21.427"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:22.399" starttime="20171026 00:16:21.427"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20171026 00:16:22.401" level="INFO">@{cmd_list} = [ ('BMC Uptime', 'uptime') | ('BMC File System Disk Space Usage', 'df -hT') | ('BMC OS', 'uname -a') ]</msg>
<status status="PASS" endtime="20171026 00:16:22.401" starttime="20171026 00:16:22.400"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20171026 00:16:22.401" level="INFO">${ENTRY_INDEX} = BMC DATA</msg>
<status status="PASS" endtime="20171026 00:16:22.401" starttime="20171026 00:16:22.401"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 00:16:22.405" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_general.txt"&gt;/home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 00:16:22.405" starttime="20171026 00:16:22.404"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:22.405" starttime="20171026 00:16:22.404"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 00:16:22.406" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_general.txt"&gt;/home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 00:16:22.406" starttime="20171026 00:16:22.406"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:22.406" starttime="20171026 00:16:22.405"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 00:16:22.407" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_general.txt"&gt;/home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 00:16:22.407" starttime="20171026 00:16:22.407"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:22.408" starttime="20171026 00:16:22.406"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 00:16:22.409" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_general.txt"&gt;/home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 00:16:22.409" starttime="20171026 00:16:22.408"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:22.409" starttime="20171026 00:16:22.408"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:22.409" starttime="20171026 00:16:22.403"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:22.409" starttime="20171026 00:16:22.403"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171026 00:16:22.410" level="INFO">${cmd_buf} = BMC Execute Command  uptime  ignore_err=1</msg>
<status status="PASS" endtime="20171026 00:16:22.410" starttime="20171026 00:16:22.409"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uptime</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171026 00:16:22.451" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.5.180.47
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171026 00:16:22.451" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.5.180.47
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171026 00:16:22.452" level="INFO">Executing command 'uptime'.</msg>
<msg timestamp="20171026 00:16:22.777" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171026 00:16:22.777" starttime="20171026 00:16:22.428"></status>
</kw>
<msg timestamp="20171026 00:16:22.778" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 00:16:22.778" level="INFO">${ret_values} = (u' 00:16:34 up 2 min,  load average: 5.22, 2.68, 1.04', u'', 0)</msg>
<status status="PASS" endtime="20171026 00:16:22.778" starttime="20171026 00:16:22.410"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171026 00:16:22.778" level="INFO">${stdout} =  00:16:34 up 2 min,  load average: 5.22, 2.68, 1.04</msg>
<status status="PASS" endtime="20171026 00:16:22.779" starttime="20171026 00:16:22.778"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171026 00:16:22.779" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171026 00:16:22.779" starttime="20171026 00:16:22.779"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 00:16:22.787" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_general.txt"&gt;/home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 00:16:22.787" starttime="20171026 00:16:22.787"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:22.787" starttime="20171026 00:16:22.786"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:22.787" starttime="20171026 00:16:22.779"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:22.787" starttime="20171026 00:16:22.402"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:22.787" starttime="20171026 00:16:22.402"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 00:16:22.791" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_general.txt"&gt;/home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 00:16:22.791" starttime="20171026 00:16:22.790"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:22.792" starttime="20171026 00:16:22.790"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 00:16:22.793" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_general.txt"&gt;/home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 00:16:22.793" starttime="20171026 00:16:22.793"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:22.793" starttime="20171026 00:16:22.792"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 00:16:22.794" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_general.txt"&gt;/home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 00:16:22.794" starttime="20171026 00:16:22.794"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:22.794" starttime="20171026 00:16:22.793"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 00:16:22.796" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_general.txt"&gt;/home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 00:16:22.796" starttime="20171026 00:16:22.795"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:22.796" starttime="20171026 00:16:22.795"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:22.796" starttime="20171026 00:16:22.789"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:22.796" starttime="20171026 00:16:22.789"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171026 00:16:22.797" level="INFO">${cmd_buf} = BMC Execute Command  df -hT  ignore_err=1</msg>
<status status="PASS" endtime="20171026 00:16:22.797" starttime="20171026 00:16:22.796"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>df -hT</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171026 00:16:22.838" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.5.180.47
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171026 00:16:22.838" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.5.180.47
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171026 00:16:22.838" level="INFO">Executing command 'df -hT'.</msg>
<msg timestamp="20171026 00:16:23.288" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171026 00:16:23.288" starttime="20171026 00:16:22.815"></status>
</kw>
<msg timestamp="20171026 00:16:23.288" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 00:16:23.289" level="INFO">${ret_values} = (u'Filesystem           Type            Size      Used Available Use% Mounted on\n/dev/root            squashfs       14.4M     14.4M         0 100% /\ndevtmpfs             devtmpfs      210.9M       ...</msg>
<status status="PASS" endtime="20171026 00:16:23.289" starttime="20171026 00:16:22.797"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171026 00:16:23.289" level="INFO">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
/dev/root            squashfs       14.4M     14.4M         0 100% /
devtmpfs             devtmpfs      210.9M         0  ...</msg>
<status status="PASS" endtime="20171026 00:16:23.289" starttime="20171026 00:16:23.289"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171026 00:16:23.290" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171026 00:16:23.290" starttime="20171026 00:16:23.290"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 00:16:23.298" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_general.txt"&gt;/home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 00:16:23.298" starttime="20171026 00:16:23.298"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:23.298" starttime="20171026 00:16:23.297"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:23.298" starttime="20171026 00:16:23.291"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:23.299" starttime="20171026 00:16:22.788"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:23.299" starttime="20171026 00:16:22.788"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 00:16:23.302" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_general.txt"&gt;/home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 00:16:23.302" starttime="20171026 00:16:23.301"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:23.302" starttime="20171026 00:16:23.301"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 00:16:23.303" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_general.txt"&gt;/home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 00:16:23.303" starttime="20171026 00:16:23.303"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:23.303" starttime="20171026 00:16:23.302"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 00:16:23.304" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_general.txt"&gt;/home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 00:16:23.305" starttime="20171026 00:16:23.304"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:23.305" starttime="20171026 00:16:23.304"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 00:16:23.306" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_general.txt"&gt;/home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 00:16:23.306" starttime="20171026 00:16:23.306"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:23.306" starttime="20171026 00:16:23.305"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:23.306" starttime="20171026 00:16:23.300"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:23.306" starttime="20171026 00:16:23.300"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171026 00:16:23.307" level="INFO">${cmd_buf} = BMC Execute Command  uname -a  ignore_err=1</msg>
<status status="PASS" endtime="20171026 00:16:23.307" starttime="20171026 00:16:23.307"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uname -a</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171026 00:16:23.347" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.5.180.47
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171026 00:16:23.347" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.5.180.47
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171026 00:16:23.350" level="INFO">Executing command 'uname -a'.</msg>
<msg timestamp="20171026 00:16:23.639" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171026 00:16:23.639" starttime="20171026 00:16:23.325"></status>
</kw>
<msg timestamp="20171026 00:16:23.639" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 00:16:23.639" level="INFO">${ret_values} = (u'Linux witherspoon 4.10.17-da78428ac543d6d9ac2493dfa77364eb300a47cb #1 Fri Oct 20 20:00:41 UTC 2017 armv6l GNU/Linux', u'', 0)</msg>
<status status="PASS" endtime="20171026 00:16:23.639" starttime="20171026 00:16:23.307"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171026 00:16:23.640" level="INFO">${stdout} = Linux witherspoon 4.10.17-da78428ac543d6d9ac2493dfa77364eb300a47cb #1 Fri Oct 20 20:00:41 UTC 2017 armv6l GNU/Linux</msg>
<status status="PASS" endtime="20171026 00:16:23.640" starttime="20171026 00:16:23.640"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171026 00:16:23.641" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171026 00:16:23.641" starttime="20171026 00:16:23.641"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 00:16:23.649" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_general.txt"&gt;/home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 00:16:23.649" starttime="20171026 00:16:23.648"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:23.649" starttime="20171026 00:16:23.648"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:23.649" starttime="20171026 00:16:23.641"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:23.650" starttime="20171026 00:16:23.299"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:23.650" starttime="20171026 00:16:23.299"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:23.650" starttime="20171026 00:16:22.401"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:23.650" starttime="20171026 00:16:22.400"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:23.650" starttime="20171026 00:16:22.399"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:23.650" starttime="20171026 00:16:16.288"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:23.650" starttime="20171026 00:16:16.287"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:23.650" starttime="20171026 00:16:16.273"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:23.650" starttime="20171026 00:16:16.270"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:23.650" starttime="20171026 00:16:16.270"></status>
</kw>
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20171026 00:16:23.652" starttime="20171026 00:16:23.652"></status>
</kw>
<msg timestamp="20171026 00:16:23.652" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 00:16:23.652" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20171026 00:16:23.652" starttime="20171026 00:16:23.651"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20171026 00:16:23.653" starttime="20171026 00:16:23.653"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20171026 00:16:23.667" level="INFO">@{entries} = [ GET REQUESTS ]</msg>
<status status="PASS" endtime="20171026 00:16:23.667" starttime="20171026 00:16:23.667"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20171026 00:16:23.669" level="INFO">@{cmd_list} = [ ('BMC_sensor_list', '/xyz/openbmc_project/sensors/enumerate') | ('OCC_state', '/org/open_power/control/enumerate') | ('BMC_control_list', '/xyz/openbmc_project/control/enumerate') | ('BMC_led', '/xy...</msg>
<status status="PASS" endtime="20171026 00:16:23.669" starttime="20171026 00:16:23.668"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/xyz/openbmc_project/sensors/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171026 00:16:23.670" level="INFO">${logpath} = /home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_sensor_list.txt</msg>
<status status="PASS" endtime="20171026 00:16:23.670" starttime="20171026 00:16:23.669"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171026 00:16:23.673" level="INFO">Creating Session using : alias=openbmc, url=https://9.5.180.47, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171026 00:16:23.673" starttime="20171026 00:16:23.672"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171026 00:16:23.674" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171026 00:16:23.674" starttime="20171026 00:16:23.674"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171026 00:16:23.675" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171026 00:16:23.675" starttime="20171026 00:16:23.674"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171026 00:16:23.675" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171026 00:16:23.675" starttime="20171026 00:16:23.675"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171026 00:16:24.009" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171026 00:16:24.009" starttime="20171026 00:16:23.676"></status>
</kw>
<msg timestamp="20171026 00:16:24.009" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 00:16:24.009" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:16:24.009" starttime="20171026 00:16:23.676"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171026 00:16:24.010" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:16:24.010" starttime="20171026 00:16:24.010"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 00:16:24.011" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:16:24.011" starttime="20171026 00:16:24.010"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:24.011" starttime="20171026 00:16:23.672"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:24.011" starttime="20171026 00:16:23.671"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:24.011" starttime="20171026 00:16:23.671"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171026 00:16:24.012" level="INFO">${base_uri} = /xyz/openbmc_project/sensors/enumerate</msg>
<status status="PASS" endtime="20171026 00:16:24.012" starttime="20171026 00:16:24.011"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171026 00:16:24.013" starttime="20171026 00:16:24.012"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171026 00:16:25.060" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/sensors/enumerate, headers=None json=None</msg>
<msg timestamp="20171026 00:16:25.061" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:16:25.061" starttime="20171026 00:16:24.013"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171026 00:16:25.061" starttime="20171026 00:16:25.061"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171026 00:16:25.062" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171026 00:16:25.062" starttime="20171026 00:16:25.062"></status>
</kw>
<msg timestamp="20171026 00:16:25.062" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:16:25.062" starttime="20171026 00:16:23.670"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 00:16:25.063" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:16:25.063" starttime="20171026 00:16:25.063"></status>
</kw>
<msg timestamp="20171026 00:16:25.063" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20171026 00:16:25.064" starttime="20171026 00:16:25.063"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20171026 00:16:25.064" starttime="20171026 00:16:25.064"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20171026 00:16:25.067" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/sensors/current/ps0_output_current": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 180000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes", 
      "Value": 0, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 170000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/current/ps1_output_current": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 180000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes", 
      "Value": 125, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 170000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan0_0": {
      "Scale": 0, 
      "Target": 7200, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan0_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan1_0": {
      "Scale": 0, 
      "Target": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan1_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan2_0": {
      "Scale": 0, 
      "Target": 7200, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan2_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan3_0": {
      "Scale": 0, 
      "Target": 7200, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan3_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/power/ps0_input_power": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 2500000000, 
      "CriticalLow": 0, 
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 20000000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 2350000000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/power/ps1_input_power": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 2500000000, 
      "CriticalLow": 0, 
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 20000000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 2350000000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/ambient": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 35000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 23471, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 25000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vcs_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 85000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 2000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 80000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vdd_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 85000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 80000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vddr_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 85000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 80000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vdn_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 85000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 80000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vcs_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 85000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 80000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vdd_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 85000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 80000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vddr_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 85000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 2000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 80000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vdn_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 85000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 2000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 80000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps0_input_voltage": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 300000, 
      "CriticalLow": 180000, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 203000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 290000, 
      "WarningLow": 200000
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps0_output_voltage": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 13000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 0, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 12700, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps1_input_voltage": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 300000, 
      "CriticalLow": 180000, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 204000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 290000, 
      "WarningLow": 200000
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps1_output_voltage": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 13000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 0, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 12700, 
      "WarningLow": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171026 00:16:25.067" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20171026 00:16:25.067" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/sensors/current/ps0_output_current": {
            "CriticalAlarmHigh": 0,
            "CriticalAlarmLow": 0,
            "CriticalHigh": 180000,
        ...</msg>
<status status="PASS" endtime="20171026 00:16:25.067" starttime="20171026 00:16:25.065"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 00:16:25.069" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_sensor_list.txt"&gt;/home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 00:16:25.069" starttime="20171026 00:16:25.068"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:25.069" starttime="20171026 00:16:25.067"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:25.069" starttime="20171026 00:16:23.669"></status>
</kw>
<kw type="foritem" name="${cmd} = ('OCC_state', '/org/open_power/control/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171026 00:16:25.070" level="INFO">${logpath} = /home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_OCC_state.txt</msg>
<status status="PASS" endtime="20171026 00:16:25.070" starttime="20171026 00:16:25.069"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171026 00:16:25.073" level="INFO">Creating Session using : alias=openbmc, url=https://9.5.180.47, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171026 00:16:25.073" starttime="20171026 00:16:25.072"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171026 00:16:25.074" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171026 00:16:25.074" starttime="20171026 00:16:25.074"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171026 00:16:25.075" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171026 00:16:25.075" starttime="20171026 00:16:25.074"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171026 00:16:25.075" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171026 00:16:25.075" starttime="20171026 00:16:25.075"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171026 00:16:25.421" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171026 00:16:25.421" starttime="20171026 00:16:25.076"></status>
</kw>
<msg timestamp="20171026 00:16:25.421" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 00:16:25.421" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:16:25.421" starttime="20171026 00:16:25.076"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171026 00:16:25.422" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:16:25.422" starttime="20171026 00:16:25.422"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 00:16:25.423" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:16:25.423" starttime="20171026 00:16:25.422"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:25.423" starttime="20171026 00:16:25.072"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:25.423" starttime="20171026 00:16:25.071"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:25.423" starttime="20171026 00:16:25.071"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171026 00:16:25.424" level="INFO">${base_uri} = /org/open_power/control/enumerate</msg>
<status status="PASS" endtime="20171026 00:16:25.424" starttime="20171026 00:16:25.423"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171026 00:16:25.424" starttime="20171026 00:16:25.424"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171026 00:16:25.606" level="INFO">Get Request using : alias=openbmc, uri=/org/open_power/control/enumerate, headers=None json=None</msg>
<msg timestamp="20171026 00:16:25.606" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:16:25.606" starttime="20171026 00:16:25.425"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171026 00:16:25.607" starttime="20171026 00:16:25.607"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171026 00:16:25.607" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171026 00:16:25.607" starttime="20171026 00:16:25.607"></status>
</kw>
<msg timestamp="20171026 00:16:25.608" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:16:25.608" starttime="20171026 00:16:25.070"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 00:16:25.609" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:16:25.609" starttime="20171026 00:16:25.609"></status>
</kw>
<msg timestamp="20171026 00:16:25.609" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20171026 00:16:25.609" starttime="20171026 00:16:25.608"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20171026 00:16:25.610" starttime="20171026 00:16:25.609"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20171026 00:16:25.610" level="INFO">To JSON using : content={
  "data": {
    "/org/open_power/control/host0": {}, 
    "/org/open_power/control/occ0": {
      "OccActive": 0, 
      "ThrottleMemTemp": 0, 
      "ThrottleProcPower": 0, 
      "ThrottleProcTemp": 0
    }, 
    "/org/open_power/control/occ1": {
      "OccActive": 0, 
      "ThrottleMemTemp": 0, 
      "ThrottleProcPower": 0, 
      "ThrottleProcTemp": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171026 00:16:25.610" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20171026 00:16:25.611" level="INFO">${jsondata} = {
    "data": {
        "/org/open_power/control/host0": {},
        "/org/open_power/control/occ0": {
            "OccActive": 0,
            "ThrottleMemTemp": 0,
            "ThrottleProcPower": 0,...</msg>
<status status="PASS" endtime="20171026 00:16:25.611" starttime="20171026 00:16:25.610"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 00:16:25.612" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_OCC_state.txt"&gt;/home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_OCC_state.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 00:16:25.612" starttime="20171026 00:16:25.612"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:25.612" starttime="20171026 00:16:25.611"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:25.612" starttime="20171026 00:16:25.069"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_control_list', '/xyz/openbmc_project/control/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171026 00:16:25.613" level="INFO">${logpath} = /home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_control_list.txt</msg>
<status status="PASS" endtime="20171026 00:16:25.613" starttime="20171026 00:16:25.613"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171026 00:16:25.616" level="INFO">Creating Session using : alias=openbmc, url=https://9.5.180.47, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171026 00:16:25.617" starttime="20171026 00:16:25.616"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171026 00:16:25.617" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171026 00:16:25.617" starttime="20171026 00:16:25.617"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171026 00:16:25.618" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171026 00:16:25.618" starttime="20171026 00:16:25.618"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171026 00:16:25.619" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171026 00:16:25.619" starttime="20171026 00:16:25.618"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171026 00:16:25.969" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171026 00:16:25.969" starttime="20171026 00:16:25.620"></status>
</kw>
<msg timestamp="20171026 00:16:25.969" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 00:16:25.969" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:16:25.969" starttime="20171026 00:16:25.619"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171026 00:16:25.970" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:16:25.970" starttime="20171026 00:16:25.970"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 00:16:25.971" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:16:25.971" starttime="20171026 00:16:25.971"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:25.971" starttime="20171026 00:16:25.615"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:25.971" starttime="20171026 00:16:25.615"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:25.971" starttime="20171026 00:16:25.614"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171026 00:16:25.972" level="INFO">${base_uri} = /xyz/openbmc_project/control/enumerate</msg>
<status status="PASS" endtime="20171026 00:16:25.972" starttime="20171026 00:16:25.972"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171026 00:16:25.973" starttime="20171026 00:16:25.972"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171026 00:16:26.242" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/control/enumerate, headers=None json=None</msg>
<msg timestamp="20171026 00:16:26.242" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:16:26.242" starttime="20171026 00:16:25.973"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171026 00:16:26.243" starttime="20171026 00:16:26.243"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171026 00:16:26.244" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171026 00:16:26.244" starttime="20171026 00:16:26.243"></status>
</kw>
<msg timestamp="20171026 00:16:26.244" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:16:26.244" starttime="20171026 00:16:25.613"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 00:16:26.245" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:16:26.245" starttime="20171026 00:16:26.245"></status>
</kw>
<msg timestamp="20171026 00:16:26.245" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20171026 00:16:26.245" starttime="20171026 00:16:26.244"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20171026 00:16:26.246" starttime="20171026 00:16:26.246"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20171026 00:16:26.247" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/control/host0": {}, 
    "/xyz/openbmc_project/control/host0/TPMEnable": {
      "TPMEnable": 0
    }, 
    "/xyz/openbmc_project/control/host0/auto_reboot": {
      "AutoReboot": 1
    }, 
    "/xyz/openbmc_project/control/host0/boot": {
      "BootMode": "xyz.openbmc_project.Control.Boot.Mode.Modes.Regular", 
      "BootSource": "xyz.openbmc_project.Control.Boot.Source.Sources.Default"
    }, 
    "/xyz/openbmc_project/control/host0/boot/one_time": {
      "BootMode": "xyz.openbmc_project.Control.Boot.Mode.Modes.Regular", 
      "BootSource": "xyz.openbmc_project.Control.Boot.Source.Sources.Default", 
      "Enabled": 1
    }, 
    "/xyz/openbmc_project/control/host0/power_cap": {
      "PowerCap": 0, 
      "PowerCapEnable": 0
    }, 
    "/xyz/openbmc_project/control/host0/power_restore_policy": {
      "PowerRestorePolicy": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore"
    }, 
    "/xyz/openbmc_project/control/host0/restriction_mode": {
      "RestrictionMode": "xyz.openbmc_project.Control.Security.RestrictionMode.Modes.None"
    }, 
    "/xyz/openbmc_project/control/minimum_ship_level_required": {
      "MinimumShipLevelRequired": 1
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171026 00:16:26.247" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20171026 00:16:26.247" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/control/host0": {},
        "/xyz/openbmc_project/control/host0/TPMEnable": {
            "TPMEnable": 0
        },
        "/xyz/openbmc_project/control/...</msg>
<status status="PASS" endtime="20171026 00:16:26.247" starttime="20171026 00:16:26.246"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 00:16:26.248" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_control_list.txt"&gt;/home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_control_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 00:16:26.248" starttime="20171026 00:16:26.248"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:26.249" starttime="20171026 00:16:26.247"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:26.249" starttime="20171026 00:16:25.612"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/xyz/openbmc_project/led/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171026 00:16:26.249" level="INFO">${logpath} = /home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_led.txt</msg>
<status status="PASS" endtime="20171026 00:16:26.249" starttime="20171026 00:16:26.249"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171026 00:16:26.253" level="INFO">Creating Session using : alias=openbmc, url=https://9.5.180.47, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171026 00:16:26.253" starttime="20171026 00:16:26.252"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171026 00:16:26.254" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171026 00:16:26.254" starttime="20171026 00:16:26.253"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171026 00:16:26.254" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171026 00:16:26.254" starttime="20171026 00:16:26.254"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171026 00:16:26.255" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171026 00:16:26.255" starttime="20171026 00:16:26.255"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171026 00:16:26.595" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171026 00:16:26.595" starttime="20171026 00:16:26.256"></status>
</kw>
<msg timestamp="20171026 00:16:26.595" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 00:16:26.596" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:16:26.596" starttime="20171026 00:16:26.255"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171026 00:16:26.596" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:16:26.596" starttime="20171026 00:16:26.596"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 00:16:26.597" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:16:26.597" starttime="20171026 00:16:26.597"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:26.597" starttime="20171026 00:16:26.251"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:26.597" starttime="20171026 00:16:26.251"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:26.597" starttime="20171026 00:16:26.250"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171026 00:16:26.598" level="INFO">${base_uri} = /xyz/openbmc_project/led/enumerate</msg>
<status status="PASS" endtime="20171026 00:16:26.598" starttime="20171026 00:16:26.598"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171026 00:16:26.599" starttime="20171026 00:16:26.598"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171026 00:16:28.364" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/led/enumerate, headers=None json=None</msg>
<msg timestamp="20171026 00:16:28.364" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:16:28.364" starttime="20171026 00:16:26.599"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171026 00:16:28.365" starttime="20171026 00:16:28.365"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171026 00:16:28.366" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171026 00:16:28.366" starttime="20171026 00:16:28.365"></status>
</kw>
<msg timestamp="20171026 00:16:28.366" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:16:28.366" starttime="20171026 00:16:26.250"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 00:16:28.367" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:16:28.367" starttime="20171026 00:16:28.367"></status>
</kw>
<msg timestamp="20171026 00:16:28.367" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20171026 00:16:28.367" starttime="20171026 00:16:28.366"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20171026 00:16:28.368" starttime="20171026 00:16:28.368"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20171026 00:16:28.370" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/led/groups": {}, 
    "/xyz/openbmc_project/led/groups/bmc_booted": {
      "Asserted": 1
    }, 
    "/xyz/openbmc_project/led/groups/bmc_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/boxelder_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core10_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core11_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core12_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core13_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core14_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core15_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core16_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core17_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core18_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core19_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core20_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core21_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core22_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core23_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core6_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core7_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core8_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core9_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/cpu0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/cpu1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm10_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm11_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm12_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm13_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm14_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm15_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm6_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm7_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm8_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm9_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/enclosure_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/enclosure_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan0_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan1_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan2_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan3_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/lamp_test": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/motherboard_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/occ_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/power_on": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/powersupply0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/powersupply1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/system_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/physical/fan0": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/fan1": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/fan2": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/fan3": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/front_fault": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/front_id": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/front_power": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Blink"
    }, 
    "/xyz/openbmc_project/led/physical/rear_fault": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/rear_id": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/rear_power": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Blink"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171026 00:16:28.370" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20171026 00:16:28.370" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/led/groups": {},
        "/xyz/openbmc_project/led/groups/bmc_booted": {
            "Asserted": 1
        },
        "/xyz/openbmc_project/led/groups/bmc...</msg>
<status status="PASS" endtime="20171026 00:16:28.371" starttime="20171026 00:16:28.368"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 00:16:28.372" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_led.txt"&gt;/home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_led.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 00:16:28.372" starttime="20171026 00:16:28.372"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:28.372" starttime="20171026 00:16:28.371"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:28.372" starttime="20171026 00:16:26.249"></status>
</kw>
<kw type="foritem" name="${cmd} = ('FIRMWARE_list', '/xyz/openbmc_project/software/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171026 00:16:28.373" level="INFO">${logpath} = /home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_FIRMWARE_list.txt</msg>
<status status="PASS" endtime="20171026 00:16:28.373" starttime="20171026 00:16:28.373"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171026 00:16:28.378" level="INFO">Creating Session using : alias=openbmc, url=https://9.5.180.47, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171026 00:16:28.378" starttime="20171026 00:16:28.378"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171026 00:16:28.379" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171026 00:16:28.379" starttime="20171026 00:16:28.379"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171026 00:16:28.380" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171026 00:16:28.380" starttime="20171026 00:16:28.379"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171026 00:16:28.380" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171026 00:16:28.380" starttime="20171026 00:16:28.380"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171026 00:16:28.710" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171026 00:16:28.710" starttime="20171026 00:16:28.381"></status>
</kw>
<msg timestamp="20171026 00:16:28.710" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 00:16:28.710" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:16:28.710" starttime="20171026 00:16:28.381"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171026 00:16:28.711" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:16:28.711" starttime="20171026 00:16:28.711"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 00:16:28.712" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:16:28.712" starttime="20171026 00:16:28.711"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:28.712" starttime="20171026 00:16:28.375"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:28.712" starttime="20171026 00:16:28.375"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:28.712" starttime="20171026 00:16:28.374"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171026 00:16:28.713" level="INFO">${base_uri} = /xyz/openbmc_project/software/enumerate</msg>
<status status="PASS" endtime="20171026 00:16:28.713" starttime="20171026 00:16:28.712"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171026 00:16:28.714" starttime="20171026 00:16:28.713"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171026 00:16:29.059" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/enumerate, headers=None json=None</msg>
<msg timestamp="20171026 00:16:29.059" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:16:29.059" starttime="20171026 00:16:28.714"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171026 00:16:29.060" starttime="20171026 00:16:29.060"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171026 00:16:29.061" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171026 00:16:29.061" starttime="20171026 00:16:29.061"></status>
</kw>
<msg timestamp="20171026 00:16:29.061" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:16:29.061" starttime="20171026 00:16:28.373"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 00:16:29.062" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:16:29.063" starttime="20171026 00:16:29.062"></status>
</kw>
<msg timestamp="20171026 00:16:29.063" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20171026 00:16:29.063" starttime="20171026 00:16:29.062"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20171026 00:16:29.063" starttime="20171026 00:16:29.063"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20171026 00:16:29.064" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/software/347855ea": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "Path": "", 
      "Priority": 0, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "v1.99.10-208-g69b2e34", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/347855ea/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    }, 
    "/xyz/openbmc_project/software/347855ea/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/390e9d0f": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "ExtendedVersion": "op-build-v1.7-1471-g8043efb,buildroot-2017.08-8-g5e23247,skiboot-v5.8-150-gabb1d4e81f33-p74eca7d,hostboot-b01e6bb,linux-4.13.5-openpower1-pd2c0bbb,petitboot-v1.6.0-p3dc37e1,machine-xml-389c56f,occ-ba4e81e,hostboot-binaries-0886586,capp-ucode-p9-dd2-v2,sbe-374add4", 
      "Path": "", 
      "Priority": 0, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "IBM-witherspoon-ibm-OP9_v1.19_1.62", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/390e9d0f/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis"
      ]
    }, 
    "/xyz/openbmc_project/software/390e9d0f/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/active": {
      "endpoints": [
        "/xyz/openbmc_project/software/390e9d0f", 
        "/xyz/openbmc_project/software/c7ba7361", 
        "/xyz/openbmc_project/software/347855ea"
      ]
    }, 
    "/xyz/openbmc_project/software/c7ba7361": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "Path": "", 
      "Priority": 1, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "v1.99.10-208-gf39c451", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/c7ba7361/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    }, 
    "/xyz/openbmc_project/software/c7ba7361/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/functional": {
      "endpoints": [
        "/xyz/openbmc_project/software/390e9d0f", 
        "/xyz/openbmc_project/software/c7ba7361"
      ]
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171026 00:16:29.064" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20171026 00:16:29.065" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/software/347855ea": {
            "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active",
            "Path": "",
            "Priorit...</msg>
<status status="PASS" endtime="20171026 00:16:29.065" starttime="20171026 00:16:29.064"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 00:16:29.066" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_FIRMWARE_list.txt"&gt;/home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_FIRMWARE_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 00:16:29.066" starttime="20171026 00:16:29.066"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:29.066" starttime="20171026 00:16:29.065"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:29.066" starttime="20171026 00:16:28.372"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171026 00:16:29.067" level="INFO">${logpath} = /home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_elog.txt</msg>
<status status="PASS" endtime="20171026 00:16:29.067" starttime="20171026 00:16:29.067"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171026 00:16:29.070" level="INFO">Creating Session using : alias=openbmc, url=https://9.5.180.47, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171026 00:16:29.071" starttime="20171026 00:16:29.070"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171026 00:16:29.072" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171026 00:16:29.072" starttime="20171026 00:16:29.071"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171026 00:16:29.072" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171026 00:16:29.072" starttime="20171026 00:16:29.072"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171026 00:16:29.073" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171026 00:16:29.073" starttime="20171026 00:16:29.073"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171026 00:16:29.377" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171026 00:16:29.377" starttime="20171026 00:16:29.074"></status>
</kw>
<msg timestamp="20171026 00:16:29.378" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 00:16:29.378" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:16:29.378" starttime="20171026 00:16:29.073"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171026 00:16:29.378" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:16:29.378" starttime="20171026 00:16:29.378"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 00:16:29.379" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:16:29.379" starttime="20171026 00:16:29.379"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:29.379" starttime="20171026 00:16:29.069"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:29.379" starttime="20171026 00:16:29.069"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:29.380" starttime="20171026 00:16:29.068"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171026 00:16:29.380" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status status="PASS" endtime="20171026 00:16:29.380" starttime="20171026 00:16:29.380"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171026 00:16:29.381" starttime="20171026 00:16:29.381"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171026 00:16:29.469" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg timestamp="20171026 00:16:29.470" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171026 00:16:29.470" starttime="20171026 00:16:29.381"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171026 00:16:29.470" starttime="20171026 00:16:29.470"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171026 00:16:29.471" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171026 00:16:29.471" starttime="20171026 00:16:29.471"></status>
</kw>
<msg timestamp="20171026 00:16:29.471" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171026 00:16:29.471" starttime="20171026 00:16:29.067"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 00:16:29.472" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171026 00:16:29.473" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20171026 00:16:29.473" starttime="20171026 00:16:29.472"></status>
</kw>
<msg timestamp="20171026 00:16:29.473" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20171026 00:16:29.473" starttime="20171026 00:16:29.472"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20171026 00:16:29.474" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20171026 00:16:29.474" starttime="20171026 00:16:29.474"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:29.474" starttime="20171026 00:16:29.473"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:29.474" starttime="20171026 00:16:29.066"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171026 00:16:29.475" level="INFO">${logpath} = /home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_inventory.txt</msg>
<status status="PASS" endtime="20171026 00:16:29.475" starttime="20171026 00:16:29.475"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171026 00:16:29.478" level="INFO">Creating Session using : alias=openbmc, url=https://9.5.180.47, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171026 00:16:29.479" starttime="20171026 00:16:29.478"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171026 00:16:29.479" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171026 00:16:29.479" starttime="20171026 00:16:29.479"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171026 00:16:29.480" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171026 00:16:29.480" starttime="20171026 00:16:29.480"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171026 00:16:29.481" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171026 00:16:29.481" starttime="20171026 00:16:29.480"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171026 00:16:30.071" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171026 00:16:30.071" starttime="20171026 00:16:29.482"></status>
</kw>
<msg timestamp="20171026 00:16:30.071" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 00:16:30.071" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:16:30.071" starttime="20171026 00:16:29.481"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171026 00:16:30.072" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:16:30.072" starttime="20171026 00:16:30.072"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 00:16:30.073" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:16:30.073" starttime="20171026 00:16:30.072"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:30.073" starttime="20171026 00:16:29.477"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:30.073" starttime="20171026 00:16:29.477"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:30.073" starttime="20171026 00:16:29.476"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171026 00:16:30.074" level="INFO">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status status="PASS" endtime="20171026 00:16:30.074" starttime="20171026 00:16:30.073"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171026 00:16:30.074" starttime="20171026 00:16:30.074"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171026 00:16:32.892" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg timestamp="20171026 00:16:32.892" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:16:32.892" starttime="20171026 00:16:30.075"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171026 00:16:32.893" starttime="20171026 00:16:32.893"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171026 00:16:32.894" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171026 00:16:32.894" starttime="20171026 00:16:32.894"></status>
</kw>
<msg timestamp="20171026 00:16:32.894" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:16:32.894" starttime="20171026 00:16:29.475"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 00:16:32.895" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:16:32.895" starttime="20171026 00:16:32.895"></status>
</kw>
<msg timestamp="20171026 00:16:32.895" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20171026 00:16:32.895" starttime="20171026 00:16:32.894"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20171026 00:16:32.896" starttime="20171026 00:16:32.896"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20171026 00:16:32.899" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system": {
      "AssetTag": "", 
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 0, 
      "Manufacturer": "", 
      "Model": "'8335-GTW000000'", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "", 
      "SerialNumber": "'1318AAA0000000'"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 1
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/activation": {
      "endpoints": [
        "/xyz/openbmc_project/software/390e9d0f"
      ]
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard": {
      "BuildDate": "1996-01-01 - 00:00:00", 
      "Cached": 0, 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM WS", 
      "Model": "", 
      "PartNumber": "'00VK5250000000'", 
      "Present": 1, 
      "PrettyName": "FRU DESCRIPTION", 
      "SerialNumber": "Y130UF72702N0000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH118", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000", 
      "UUID": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/activation": {
      "endpoints": [
        "/xyz/openbmc_project/software/347855ea", 
        "/xyz/openbmc_project/software/c7ba7361"
      ]
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "70:e2:84:14:2a:08", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0": {
      "BuildDate": "1996-01-01 - 00:00:00", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "02AA862", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA1934095325", 
      "Version": "21"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core0": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core1": {
      "Functional": 0, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core12": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core13": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core14": {
      "Functional": 0, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core15": {
      "Functional": 0, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core16": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core17": {
      "Functional": 0, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core18": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core19": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core22": {
      "Functional": 0, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core23": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core3": {
      "Functional": 0, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core6": {
      "Functional": 0, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core7": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core8": {
      "Functional": 0, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core9": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1": {
      "BuildDate": "1996-01-01 - 00:00:00", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "02AA862", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA1934095327", 
      "Version": "21"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core0": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core1": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core10": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core11": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core12": {
      "Functional": 0, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core13": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core14": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core15": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core16": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core17": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core18": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core19": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core20": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core21": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core6": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core7": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core8": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core9": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A4K40BB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x3447ab88", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A4K40BB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x34479965", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm10": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF4G72PZ-2G6D1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16106206", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm11": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF4G72PZ-2G6D1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16106774", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm12": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF4G72PZ-2G6D1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x1610632b", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm13": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF4G72PZ-2G6D1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x161067d9", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm14": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF4G72PZ-2G6D1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16105459", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm15": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF4G72PZ-2G6D1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16106032", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm2": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A4K40BB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x3447b3cb", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm3": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A4K40BB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x3447b1ae", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm4": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A4K40BB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x347a74db", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm5": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A4K40BB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x3447a78b", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm6": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A4K40BB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x3447ab90", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm7": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A4K40BB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x347a7465", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm8": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF4G72PZ-2G6D1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x161067bc", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm9": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF4G72PZ-2G6D1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16106204", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan0": {
      "Functional": 1, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan1": {
      "Functional": 0, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 0, 
      "PrettyName": "fan1"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan2": {
      "Functional": 1, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan2"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan3": {
      "Functional": 1, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan3"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply0": {
      "Present": 1, 
      "PrettyName": "power_supply0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply1": {
      "Present": 1, 
      "PrettyName": "power_supply1"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171026 00:16:32.899" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20171026 00:16:32.899" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system": {
            "AssetTag": "",
            "BuildDate": "",
            "Cached": 0,
            "FieldReplaceable": 0,
            "Man...</msg>
<status status="PASS" endtime="20171026 00:16:32.900" starttime="20171026 00:16:32.896"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 00:16:32.901" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_inventory.txt"&gt;/home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 00:16:32.901" starttime="20171026 00:16:32.901"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:32.901" starttime="20171026 00:16:32.900"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:32.901" starttime="20171026 00:16:29.474"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:32.901" starttime="20171026 00:16:23.669"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:32.902" starttime="20171026 00:16:23.668"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:32.902" starttime="20171026 00:16:23.667"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:32.902" starttime="20171026 00:16:23.667"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:32.902" starttime="20171026 00:16:23.666"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:32.902" starttime="20171026 00:16:23.653"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:32.902" starttime="20171026 00:16:23.651"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:32.902" starttime="20171026 00:16:23.650"></status>
</kw>
<kw type="foritem" name="${method} = ('Sys Inventory Files', 'System Inventory Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20171026 00:16:32.904" starttime="20171026 00:16:32.904"></status>
</kw>
<msg timestamp="20171026 00:16:32.904" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 00:16:32.904" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20171026 00:16:32.904" starttime="20171026 00:16:32.903"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20171026 00:16:32.905" starttime="20171026 00:16:32.905"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="System Inventory Files" library="openbmc_ffdc_methods">
<doc>Copy systest os_inventory files.</doc>
<kw name="Copy Files" library="OperatingSystem">
<doc>Copies specified files to the target directory.</doc>
<arguments>
<arg>os_inventory_*.json</arg>
<arg>${ffdc_dir_path}</arg>
</arguments>
<status status="PASS" endtime="20171026 00:16:32.920" starttime="20171026 00:16:32.919"></status>
</kw>
<kw name="Remove Files" library="OperatingSystem">
<doc>Uses `Remove File` to remove multiple files one-by-one.</doc>
<arguments>
<arg>os_inventory_*.json</arg>
</arguments>
<msg timestamp="20171026 00:16:32.921" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/os_inventory_*.json"&gt;/home/fspcibld/os_inventory_*.json&lt;/a&gt;' does not exist.</msg>
<status status="PASS" endtime="20171026 00:16:32.921" starttime="20171026 00:16:32.920"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:32.921" starttime="20171026 00:16:32.918"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:32.921" starttime="20171026 00:16:32.905"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:32.921" starttime="20171026 00:16:32.902"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:32.921" starttime="20171026 00:16:32.902"></status>
</kw>
<kw type="foritem" name="${method} = ('Core Files', 'SCP Coredump Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20171026 00:16:32.923" starttime="20171026 00:16:32.923"></status>
</kw>
<msg timestamp="20171026 00:16:32.923" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 00:16:32.923" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20171026 00:16:32.923" starttime="20171026 00:16:32.922"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20171026 00:16:32.924" starttime="20171026 00:16:32.924"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20171026 00:16:32.958" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.5.180.47
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171026 00:16:32.958" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.5.180.47
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171026 00:16:32.958" level="INFO">Executing command 'ls /tmp/core_*'.</msg>
<msg timestamp="20171026 00:16:33.161" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20171026 00:16:33.171" level="INFO">${core_files} = None</msg>
<msg timestamp="20171026 00:16:33.171" level="INFO">${stderr} = None</msg>
<msg timestamp="20171026 00:16:33.171" level="INFO">${rc} = None</msg>
<msg timestamp="20171026 00:16:33.171" level="FAIL">#(UTC) 2017/10/26 00:16:33.170336 -    0.212721 - **ERROR** The prior SSH command returned a non-zero return code:
rc:                                               0x00000001
ls: /tmp/core_*: No such file or directory
: 1 != 0</msg>
<status status="FAIL" endtime="20171026 00:16:33.171" starttime="20171026 00:16:32.938"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg timestamp="20171026 00:16:33.172" level="INFO">@{core_list} = [ ]</msg>
<msg timestamp="20171026 00:16:33.172" level="FAIL">AttributeError: 'NoneType' object has no attribute 'split'</msg>
<status status="FAIL" endtime="20171026 00:16:33.172" starttime="20171026 00:16:33.172"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Open Connection for SCP</arg>
</arguments>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20171026 00:16:33.182" starttime="20171026 00:16:33.181"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" endtime="20171026 00:16:34.049" starttime="20171026 00:16:33.183"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:34.050" starttime="20171026 00:16:33.182"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:34.050" starttime="20171026 00:16:33.180"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:34.050" starttime="20171026 00:16:33.173"></status>
</kw>
<kw type="for" name="${index} IN [ @{core_list} ]">
<status status="PASS" endtime="20171026 00:16:34.050" starttime="20171026 00:16:34.050"></status>
</kw>
<status status="FAIL" endtime="20171026 00:16:34.050" starttime="20171026 00:16:32.938"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:34.050" starttime="20171026 00:16:32.924"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:34.050" starttime="20171026 00:16:32.921"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:34.050" starttime="20171026 00:16:32.921"></status>
</kw>
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20171026 00:16:34.053" starttime="20171026 00:16:34.052"></status>
</kw>
<msg timestamp="20171026 00:16:34.053" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 00:16:34.053" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20171026 00:16:34.053" starttime="20171026 00:16:34.052"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20171026 00:16:34.053" starttime="20171026 00:16:34.053"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20171026 00:16:34.068" level="INFO">@{entries} = [ BMC FILES ]</msg>
<status status="PASS" endtime="20171026 00:16:34.068" starttime="20171026 00:16:34.067"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20171026 00:16:34.069" level="INFO">@{cmd_list} = [ ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/') | ('BMC_journalctl_nopager', 'journalctl --no-pager') | ('BMC_journalctl_pretty', 'journalctl -o json-pretty...</msg>
<status status="PASS" endtime="20171026 00:16:34.070" starttime="20171026 00:16:34.069"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171026 00:16:34.070" level="INFO">${logpath} = /home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_procinfo.txt</msg>
<status status="PASS" endtime="20171026 00:16:34.070" starttime="20171026 00:16:34.070"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20171026 00:16:34.072" starttime="20171026 00:16:34.072"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171026 00:16:34.073" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/cpuinfo  ignore_err=1</msg>
<status status="PASS" endtime="20171026 00:16:34.073" starttime="20171026 00:16:34.072"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/cpuinfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171026 00:16:34.113" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.5.180.47
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171026 00:16:34.113" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.5.180.47
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171026 00:16:34.114" level="INFO">Executing command 'cat /proc/cpuinfo'.</msg>
<msg timestamp="20171026 00:16:34.303" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171026 00:16:34.303" starttime="20171026 00:16:34.090"></status>
</kw>
<msg timestamp="20171026 00:16:34.303" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 00:16:34.303" level="INFO">${ret_values} = (u'processor\t: 0\nmodel name\t: ARMv6-compatible processor rev 7 (v6l)\nBogoMIPS\t: 789.70\nFeatures\t: half thumb fastmult edsp java tls \nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t...</msg>
<status status="PASS" endtime="20171026 00:16:34.303" starttime="20171026 00:16:34.073"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171026 00:16:34.304" level="INFO">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<status status="PASS" endtime="20171026 00:16:34.304" starttime="20171026 00:16:34.303"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171026 00:16:34.304" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171026 00:16:34.304" starttime="20171026 00:16:34.304"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 00:16:34.312" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_procinfo.txt"&gt;/home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 00:16:34.312" starttime="20171026 00:16:34.312"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:34.312" starttime="20171026 00:16:34.311"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:34.312" starttime="20171026 00:16:34.305"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:34.313" starttime="20171026 00:16:34.071"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:34.313" starttime="20171026 00:16:34.070"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171026 00:16:34.313" level="INFO">${logpath} = /home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_proc_fd_active_list.txt</msg>
<status status="PASS" endtime="20171026 00:16:34.313" starttime="20171026 00:16:34.313"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20171026 00:16:34.315" starttime="20171026 00:16:34.314"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171026 00:16:34.316" level="INFO">${cmd_buf} = BMC Execute Command  ls -Al /proc/*/fd/  ignore_err=1</msg>
<status status="PASS" endtime="20171026 00:16:34.316" starttime="20171026 00:16:34.315"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls -Al /proc/*/fd/</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171026 00:16:34.356" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.5.180.47
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171026 00:16:34.356" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.5.180.47
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171026 00:16:34.357" level="INFO">Executing command 'ls -Al /proc/*/fd/'.</msg>
<msg timestamp="20171026 00:16:36.235" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171026 00:16:36.235" starttime="20171026 00:16:34.333"></status>
</kw>
<msg timestamp="20171026 00:16:36.235" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 00:16:36.236" level="INFO">${ret_values} = (u'/proc/1/fd/:\ntotal 0\nlrwx------    1 root     root            64 Oct 26 00:16 0 -&gt; /dev/null\nlrwx------    1 root     root            64 Oct 26 00:16 1 -&gt; /dev/null\nlr-x------    1 root     roo...</msg>
<status status="PASS" endtime="20171026 00:16:36.237" starttime="20171026 00:16:34.316"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171026 00:16:36.237" level="INFO">${stdout} = /proc/1/fd/:
total 0
lrwx------    1 root     root            64 Oct 26 00:16 0 -&gt; /dev/null
lrwx------    1 root     root            64 Oct 26 00:16 1 -&gt; /dev/null
lr-x------    1 root     root      ...</msg>
<status status="PASS" endtime="20171026 00:16:36.238" starttime="20171026 00:16:36.237"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171026 00:16:36.238" level="INFO">${stderr} = ls: /proc/1478/fd/3: cannot read link: No such file or directory
ls: /proc/self/fd/3: cannot read link: No such file or directory
ls: /proc/thread-self/fd/3: cannot read link: No such file or director...</msg>
<status status="PASS" endtime="20171026 00:16:36.238" starttime="20171026 00:16:36.238"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 00:16:36.250" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_proc_fd_active_list.txt"&gt;/home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_proc_fd_active_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 00:16:36.250" starttime="20171026 00:16:36.249"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:36.250" starttime="20171026 00:16:36.247"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:36.250" starttime="20171026 00:16:36.239"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:36.250" starttime="20171026 00:16:34.314"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:36.250" starttime="20171026 00:16:34.313"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl_nopager', 'journalctl --no-pager')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171026 00:16:36.251" level="INFO">${logpath} = /home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_journalctl_nopager.txt</msg>
<status status="PASS" endtime="20171026 00:16:36.251" starttime="20171026 00:16:36.250"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20171026 00:16:36.252" starttime="20171026 00:16:36.252"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171026 00:16:36.253" level="INFO">${cmd_buf} = BMC Execute Command  journalctl --no-pager  ignore_err=1</msg>
<status status="PASS" endtime="20171026 00:16:36.253" starttime="20171026 00:16:36.253"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl --no-pager</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171026 00:16:36.293" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.5.180.47
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171026 00:16:36.294" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.5.180.47
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171026 00:16:36.294" level="INFO">Executing command 'journalctl --no-pager'.</msg>
<msg timestamp="20171026 00:16:37.790" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171026 00:16:37.790" starttime="20171026 00:16:36.271"></status>
</kw>
<msg timestamp="20171026 00:16:37.790" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 00:16:37.792" level="INFO">${ret_values} = (u'-- Logs begin at Wed 2017-10-25 23:16:01 UTC, end at Wed 2017-10-25 23:24:15 UTC. --\nOct 25 23:16:01 witherspoon ipmid[1300]: IPMI SET_SENSOR [0x24]\nOct 25 23:16:01 witherspoon ipmid[1300]: IPMI ...</msg>
<status status="PASS" endtime="20171026 00:16:37.792" starttime="20171026 00:16:36.253"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171026 00:16:37.793" level="INFO">${stdout} = -- Logs begin at Wed 2017-10-25 23:16:01 UTC, end at Wed 2017-10-25 23:24:15 UTC. --
Oct 25 23:16:01 witherspoon ipmid[1300]: IPMI SET_SENSOR [0x24]
Oct 25 23:16:01 witherspoon ipmid[1300]: IPMI SET_S...</msg>
<status status="PASS" endtime="20171026 00:16:37.793" starttime="20171026 00:16:37.792"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171026 00:16:37.793" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171026 00:16:37.793" starttime="20171026 00:16:37.793"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 00:16:37.801" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_journalctl_nopager.txt"&gt;/home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_journalctl_nopager.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 00:16:37.802" starttime="20171026 00:16:37.801"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:37.802" starttime="20171026 00:16:37.800"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:37.802" starttime="20171026 00:16:37.794"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:37.802" starttime="20171026 00:16:36.251"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:37.802" starttime="20171026 00:16:36.250"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl_pretty', 'journalctl -o json-pretty')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171026 00:16:37.803" level="INFO">${logpath} = /home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_journalctl_pretty.txt</msg>
<status status="PASS" endtime="20171026 00:16:37.803" starttime="20171026 00:16:37.802"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20171026 00:16:37.804" starttime="20171026 00:16:37.804"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171026 00:16:37.805" level="INFO">${cmd_buf} = BMC Execute Command  journalctl -o json-pretty  ignore_err=1</msg>
<status status="PASS" endtime="20171026 00:16:37.805" starttime="20171026 00:16:37.804"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl -o json-pretty</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171026 00:16:37.846" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.5.180.47
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171026 00:16:37.846" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.5.180.47
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171026 00:16:37.846" level="INFO">Executing command 'journalctl -o json-pretty'.</msg>
<msg timestamp="20171026 00:16:40.873" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171026 00:16:40.874" starttime="20171026 00:16:37.823"></status>
</kw>
<msg timestamp="20171026 00:16:40.874" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 00:16:40.888" level="INFO">${ret_values} = (u'{\n\t"__CURSOR" : "s=f0f9238ee5b84b4fb9f08bec038ca7af;i=811;b=54ea8355bb7e45c9bea5a8899dc0cd2c;m=1fa3bc24;t=55c673d2a7533;x=1a5bd86b6f2c1a10",\n\t"__REALTIME_TIMESTAMP" : "1508973361132851",\n\t"__...</msg>
<status status="PASS" endtime="20171026 00:16:40.888" starttime="20171026 00:16:37.805"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171026 00:16:40.892" level="INFO">${stdout} = {
	"__CURSOR" : "s=f0f9238ee5b84b4fb9f08bec038ca7af;i=811;b=54ea8355bb7e45c9bea5a8899dc0cd2c;m=1fa3bc24;t=55c673d2a7533;x=1a5bd86b6f2c1a10",
	"__REALTIME_TIMESTAMP" : "1508973361132851",
	"__MONOTONIC...</msg>
<status status="PASS" endtime="20171026 00:16:40.892" starttime="20171026 00:16:40.889"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171026 00:16:40.893" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171026 00:16:40.893" starttime="20171026 00:16:40.893"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 00:16:40.907" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_journalctl_pretty.txt"&gt;/home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_journalctl_pretty.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 00:16:40.907" starttime="20171026 00:16:40.904"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:40.907" starttime="20171026 00:16:40.900"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:40.907" starttime="20171026 00:16:40.893"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:40.907" starttime="20171026 00:16:37.803"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:40.907" starttime="20171026 00:16:37.802"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171026 00:16:40.908" level="INFO">${logpath} = /home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_meminfo.txt</msg>
<status status="PASS" endtime="20171026 00:16:40.908" starttime="20171026 00:16:40.907"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20171026 00:16:40.909" starttime="20171026 00:16:40.909"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171026 00:16:40.910" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/meminfo  ignore_err=1</msg>
<status status="PASS" endtime="20171026 00:16:40.910" starttime="20171026 00:16:40.910"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/meminfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171026 00:16:40.951" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.5.180.47
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171026 00:16:40.951" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.5.180.47
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171026 00:16:40.952" level="INFO">Executing command 'cat /proc/meminfo'.</msg>
<msg timestamp="20171026 00:16:41.123" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171026 00:16:41.123" starttime="20171026 00:16:40.929"></status>
</kw>
<msg timestamp="20171026 00:16:41.123" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 00:16:41.123" level="INFO">${ret_values} = (u'MemTotal:         432252 kB\nMemFree:          293052 kB\nMemAvailable:     338108 kB\nBuffers:           11820 kB\nCached:            37004 kB\nSwapCached:            0 kB\nActive:            9287...</msg>
<status status="PASS" endtime="20171026 00:16:41.123" starttime="20171026 00:16:40.911"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171026 00:16:41.124" level="INFO">${stdout} = MemTotal:         432252 kB
MemFree:          293052 kB
MemAvailable:     338108 kB
Buffers:           11820 kB
Cached:            37004 kB
SwapCached:            0 kB
Active:            92872 kB
Inac...</msg>
<status status="PASS" endtime="20171026 00:16:41.124" starttime="20171026 00:16:41.124"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171026 00:16:41.125" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171026 00:16:41.125" starttime="20171026 00:16:41.124"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 00:16:41.132" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_meminfo.txt"&gt;/home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 00:16:41.132" starttime="20171026 00:16:41.132"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:41.132" starttime="20171026 00:16:41.131"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:41.133" starttime="20171026 00:16:41.125"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:41.133" starttime="20171026 00:16:40.908"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:41.133" starttime="20171026 00:16:40.907"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171026 00:16:41.133" level="INFO">${logpath} = /home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_proc_list.txt</msg>
<status status="PASS" endtime="20171026 00:16:41.134" starttime="20171026 00:16:41.133"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20171026 00:16:41.135" starttime="20171026 00:16:41.135"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171026 00:16:41.136" level="INFO">${cmd_buf} = BMC Execute Command  top -n 1 -b  ignore_err=1</msg>
<status status="PASS" endtime="20171026 00:16:41.136" starttime="20171026 00:16:41.135"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>top -n 1 -b</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171026 00:16:41.176" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.5.180.47
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171026 00:16:41.176" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.5.180.47
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171026 00:16:41.177" level="INFO">Executing command 'top -n 1 -b'.</msg>
<msg timestamp="20171026 00:16:41.644" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171026 00:16:41.644" starttime="20171026 00:16:41.153"></status>
</kw>
<msg timestamp="20171026 00:16:41.644" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 00:16:41.644" level="INFO">${ret_values} = (u'Mem: 139200K used, 293052K free, 668K shrd, 11820K buff, 37008K cached\nCPU:   0% usr  23% sys   0% nic  76% idle   0% io   0% irq   0% sirq\nLoad average: 3.81 2.53 1.03 1/163 1482\n  PID  PPID US...</msg>
<status status="PASS" endtime="20171026 00:16:41.644" starttime="20171026 00:16:41.136"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171026 00:16:41.645" level="INFO">${stdout} = Mem: 139200K used, 293052K free, 668K shrd, 11820K buff, 37008K cached
CPU:   0% usr  23% sys   0% nic  76% idle   0% io   0% irq   0% sirq
Load average: 3.81 2.53 1.03 1/163 1482
  PID  PPID USER    ...</msg>
<status status="PASS" endtime="20171026 00:16:41.645" starttime="20171026 00:16:41.645"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171026 00:16:41.646" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171026 00:16:41.646" starttime="20171026 00:16:41.646"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 00:16:41.654" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_proc_list.txt"&gt;/home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 00:16:41.654" starttime="20171026 00:16:41.653"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:41.654" starttime="20171026 00:16:41.652"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:41.654" starttime="20171026 00:16:41.646"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:41.654" starttime="20171026 00:16:41.134"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:41.654" starttime="20171026 00:16:41.133"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171026 00:16:41.655" level="INFO">${logpath} = /home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_dmesg.txt</msg>
<status status="PASS" endtime="20171026 00:16:41.655" starttime="20171026 00:16:41.654"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20171026 00:16:41.656" starttime="20171026 00:16:41.656"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171026 00:16:41.657" level="INFO">${cmd_buf} = BMC Execute Command  dmesg  ignore_err=1</msg>
<status status="PASS" endtime="20171026 00:16:41.657" starttime="20171026 00:16:41.657"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>dmesg</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171026 00:16:41.698" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.5.180.47
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171026 00:16:41.698" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.5.180.47
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171026 00:16:41.699" level="INFO">Executing command 'dmesg'.</msg>
<msg timestamp="20171026 00:16:41.877" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171026 00:16:41.877" starttime="20171026 00:16:41.675"></status>
</kw>
<msg timestamp="20171026 00:16:41.877" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 00:16:41.878" level="INFO">${ret_values} = (u'[    0.250000] io scheduler noop registered\n[    0.250000] io scheduler deadline registered\n[    0.250000] io scheduler cfq registered (default)\n[    0.270000] ipmi-bt-host 1e789140.ibt: Found b...</msg>
<status status="PASS" endtime="20171026 00:16:41.878" starttime="20171026 00:16:41.658"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171026 00:16:41.878" level="INFO">${stdout} = [    0.250000] io scheduler noop registered
[    0.250000] io scheduler deadline registered
[    0.250000] io scheduler cfq registered (default)
[    0.270000] ipmi-bt-host 1e789140.ibt: Found bt bmc ...</msg>
<status status="PASS" endtime="20171026 00:16:41.878" starttime="20171026 00:16:41.878"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171026 00:16:41.879" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171026 00:16:41.879" starttime="20171026 00:16:41.879"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 00:16:41.887" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_dmesg.txt"&gt;/home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/20171026001615445622_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 00:16:41.887" starttime="20171026 00:16:41.886"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:41.887" starttime="20171026 00:16:41.886"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:41.887" starttime="20171026 00:16:41.879"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:41.887" starttime="20171026 00:16:41.655"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:41.887" starttime="20171026 00:16:41.654"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:41.887" starttime="20171026 00:16:34.070"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:41.887" starttime="20171026 00:16:34.069"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:41.887" starttime="20171026 00:16:34.068"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:41.888" starttime="20171026 00:16:34.068"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:41.888" starttime="20171026 00:16:34.067"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:41.888" starttime="20171026 00:16:34.054"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:41.888" starttime="20171026 00:16:34.051"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:41.888" starttime="20171026 00:16:34.051"></status>
</kw>
<kw type="foritem" name="${method} = ('SEL Log', 'Collect eSEL Log')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20171026 00:16:41.890" starttime="20171026 00:16:41.889"></status>
</kw>
<msg timestamp="20171026 00:16:41.890" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 00:16:41.890" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20171026 00:16:41.890" starttime="20171026 00:16:41.889"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20171026 00:16:41.891" starttime="20171026 00:16:41.890"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171026 00:16:41.908" level="INFO">Creating Session using : alias=openbmc, url=https://9.5.180.47, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171026 00:16:41.908" starttime="20171026 00:16:41.907"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171026 00:16:41.909" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171026 00:16:41.909" starttime="20171026 00:16:41.908"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171026 00:16:41.909" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171026 00:16:41.909" starttime="20171026 00:16:41.909"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171026 00:16:41.910" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171026 00:16:41.910" starttime="20171026 00:16:41.910"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171026 00:16:42.258" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171026 00:16:42.258" starttime="20171026 00:16:41.911"></status>
</kw>
<msg timestamp="20171026 00:16:42.258" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 00:16:42.258" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:16:42.258" starttime="20171026 00:16:41.910"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171026 00:16:42.259" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:16:42.259" starttime="20171026 00:16:42.259"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 00:16:42.260" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:16:42.260" starttime="20171026 00:16:42.260"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:42.260" starttime="20171026 00:16:41.906"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:42.260" starttime="20171026 00:16:41.906"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:42.260" starttime="20171026 00:16:41.905"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171026 00:16:42.261" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status status="PASS" endtime="20171026 00:16:42.261" starttime="20171026 00:16:42.261"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171026 00:16:42.262" starttime="20171026 00:16:42.261"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171026 00:16:42.352" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg timestamp="20171026 00:16:42.352" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171026 00:16:42.352" starttime="20171026 00:16:42.262"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171026 00:16:42.353" starttime="20171026 00:16:42.353"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171026 00:16:42.354" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171026 00:16:42.354" starttime="20171026 00:16:42.353"></status>
</kw>
<msg timestamp="20171026 00:16:42.354" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171026 00:16:42.354" starttime="20171026 00:16:41.905"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 00:16:42.355" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171026 00:16:42.355" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20171026 00:16:42.355" starttime="20171026 00:16:42.355"></status>
</kw>
<msg timestamp="20171026 00:16:42.355" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20171026 00:16:42.355" starttime="20171026 00:16:42.354"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg timestamp="20171026 00:16:42.356" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20171026 00:16:42.356" starttime="20171026 00:16:42.356"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:42.356" starttime="20171026 00:16:41.904"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:42.356" starttime="20171026 00:16:41.891"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:42.356" starttime="20171026 00:16:41.888"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:42.356" starttime="20171026 00:16:41.888"></status>
</kw>
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20171026 00:16:42.359" starttime="20171026 00:16:42.358"></status>
</kw>
<msg timestamp="20171026 00:16:42.359" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 00:16:42.359" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20171026 00:16:42.359" starttime="20171026 00:16:42.358"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20171026 00:16:42.360" starttime="20171026 00:16:42.360"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg timestamp="20171026 00:16:42.379" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20171026 00:16:42.379" starttime="20171026 00:16:42.379"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:42.379" starttime="20171026 00:16:42.374"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:42.379" starttime="20171026 00:16:42.361"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:42.379" starttime="20171026 00:16:42.357"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:42.379" starttime="20171026 00:16:42.357"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:42.379" starttime="20171026 00:16:16.270"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:42.380" starttime="20171026 00:16:16.267"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:42.380" starttime="20171026 00:16:16.267"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:42.380" starttime="20171026 00:16:16.267"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>SSHLibrary.Close All Connections</arg>
</arguments>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20171026 00:16:42.449" starttime="20171026 00:16:42.385"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:42.450" starttime="20171026 00:16:42.380"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:42.450" starttime="20171026 00:16:16.266"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:42.450" starttime="20171026 00:16:12.301"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:42.450" starttime="20171026 00:16:12.301"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20171026 00:16:42.455" level="INFO">${FFDC_DIR_PATH_STYLE} = 0</msg>
<status status="PASS" endtime="20171026 00:16:42.455" starttime="20171026 00:16:42.455"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20171026 00:16:42.456" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20171026001615445622_BmcCodeUpdate/20171026001615445622_RESTBMCCodeUpdate/</msg>
<status status="PASS" endtime="20171026 00:16:42.456" starttime="20171026 00:16:42.456"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status status="PASS" endtime="20171026 00:16:42.457" starttime="20171026 00:16:42.456"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" endtime="20171026 00:16:42.457" starttime="20171026 00:16:42.457"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20171026 00:16:42.458" html="yes" level="INFO">Directory '&lt;a href="file:///home/fspcibld"&gt;/home/fspcibld&lt;/a&gt;' already exists.</msg>
<status status="PASS" endtime="20171026 00:16:42.458" starttime="20171026 00:16:42.458"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20171026 00:16:42.459" level="FAIL">File '/home/fspcibld/logs/test_history.txt' does not exist.</msg>
<status status="FAIL" endtime="20171026 00:16:42.459" starttime="20171026 00:16:42.459"></status>
</kw>
<msg timestamp="20171026 00:16:42.459" level="INFO">${exist} = False</msg>
<status status="PASS" endtime="20171026 00:16:42.459" starttime="20171026 00:16:42.458"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20171026 00:16:42.461" html="yes" level="INFO">Created file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 00:16:42.461" starttime="20171026 00:16:42.460"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:42.461" starttime="20171026 00:16:42.460"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" endtime="20171026 00:16:42.461" starttime="20171026 00:16:42.461"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20171026 00:16:42.462" level="INFO">${cur_time} = 2017-10-26 00:16:42:462370</msg>
<status status="PASS" endtime="20171026 00:16:42.463" starttime="20171026 00:16:42.462"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20171026 00:16:42.463" level="INFO">${cur_time} = 20171026001642462370</msg>
<status status="PASS" endtime="20171026 00:16:42.463" starttime="20171026 00:16:42.463"></status>
</kw>
<msg timestamp="20171026 00:16:42.463" level="INFO">${cur_time} = 20171026001642462370</msg>
<status status="PASS" endtime="20171026 00:16:42.463" starttime="20171026 00:16:42.461"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20171026 00:16:42.465" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 00:16:42.465" starttime="20171026 00:16:42.464"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:42.465" starttime="20171026 00:16:42.450"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>Run Keywords</arg>
<arg>Delete Error Logs</arg>
<arg>AND</arg>
<arg>Delete All Dumps</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Delete Error Logs</arg>
<arg>AND</arg>
<arg>Delete All Dumps</arg>
</arguments>
<kw name="Delete Error Logs" library="utils">
<doc>Delete error logs.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}${/}list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171026 00:16:42.469" level="INFO">Creating Session using : alias=openbmc, url=https://9.5.180.47, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171026 00:16:42.470" starttime="20171026 00:16:42.469"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171026 00:16:42.471" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171026 00:16:42.471" starttime="20171026 00:16:42.470"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171026 00:16:42.472" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171026 00:16:42.472" starttime="20171026 00:16:42.471"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171026 00:16:42.473" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171026 00:16:42.473" starttime="20171026 00:16:42.472"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171026 00:16:42.795" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171026 00:16:42.795" starttime="20171026 00:16:42.474"></status>
</kw>
<msg timestamp="20171026 00:16:42.795" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 00:16:42.795" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:16:42.795" starttime="20171026 00:16:42.474"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171026 00:16:42.796" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:16:42.796" starttime="20171026 00:16:42.796"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 00:16:42.797" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:16:42.797" starttime="20171026 00:16:42.797"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:42.797" starttime="20171026 00:16:42.468"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:42.797" starttime="20171026 00:16:42.468"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:42.797" starttime="20171026 00:16:42.467"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171026 00:16:42.798" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//list</msg>
<status status="PASS" endtime="20171026 00:16:42.798" starttime="20171026 00:16:42.798"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171026 00:16:42.799" starttime="20171026 00:16:42.798"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171026 00:16:42.877" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//list, headers=None json=None</msg>
<msg timestamp="20171026 00:16:42.877" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171026 00:16:42.877" starttime="20171026 00:16:42.799"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171026 00:16:42.878" starttime="20171026 00:16:42.877"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171026 00:16:42.878" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171026 00:16:42.878" starttime="20171026 00:16:42.878"></status>
</kw>
<msg timestamp="20171026 00:16:42.878" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171026 00:16:42.878" starttime="20171026 00:16:42.467"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} == ${HTTP_NOT_FOUND}</arg>
</arguments>
<msg timestamp="20171026 00:16:42.879" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20171026 00:16:42.879" starttime="20171026 00:16:42.879"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:42.879" starttime="20171026 00:16:42.466"></status>
</kw>
<kw name="Delete All Dumps" library="dump_utils">
<doc>Delete all dumps.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${DUMP_ENTRY_URI}list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171026 00:16:42.883" level="INFO">Creating Session using : alias=openbmc, url=https://9.5.180.47, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171026 00:16:42.883" starttime="20171026 00:16:42.882"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171026 00:16:42.883" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171026 00:16:42.883" starttime="20171026 00:16:42.883"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171026 00:16:42.884" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171026 00:16:42.884" starttime="20171026 00:16:42.884"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171026 00:16:42.885" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171026 00:16:42.885" starttime="20171026 00:16:42.885"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171026 00:16:43.215" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171026 00:16:43.215" starttime="20171026 00:16:42.886"></status>
</kw>
<msg timestamp="20171026 00:16:43.215" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 00:16:43.215" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 00:16:43.215" starttime="20171026 00:16:42.885"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171026 00:16:43.216" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:16:43.216" starttime="20171026 00:16:43.216"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 00:16:43.217" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 00:16:43.217" starttime="20171026 00:16:43.216"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:43.217" starttime="20171026 00:16:42.882"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:43.217" starttime="20171026 00:16:42.881"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:43.217" starttime="20171026 00:16:42.880"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171026 00:16:43.218" level="INFO">${base_uri} = /xyz/openbmc_project//dump/entry/list</msg>
<status status="PASS" endtime="20171026 00:16:43.218" starttime="20171026 00:16:43.217"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171026 00:16:43.218" starttime="20171026 00:16:43.218"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171026 00:16:43.310" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project//dump/entry/list, headers=None json=None</msg>
<msg timestamp="20171026 00:16:43.310" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171026 00:16:43.311" starttime="20171026 00:16:43.219"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171026 00:16:43.311" starttime="20171026 00:16:43.311"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171026 00:16:43.312" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171026 00:16:43.312" starttime="20171026 00:16:43.312"></status>
</kw>
<msg timestamp="20171026 00:16:43.312" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171026 00:16:43.312" starttime="20171026 00:16:42.880"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} == ${HTTP_NOT_FOUND}</arg>
</arguments>
<msg timestamp="20171026 00:16:43.313" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20171026 00:16:43.313" starttime="20171026 00:16:43.312"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:43.313" starttime="20171026 00:16:42.879"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:43.313" starttime="20171026 00:16:42.466"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:43.313" starttime="20171026 00:16:42.465"></status>
</kw>
<status status="PASS" endtime="20171026 00:16:43.313" starttime="20171026 00:16:12.300"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Fatal Error</arg>
<arg>msg=Code update failed.</arg>
</arguments>
<kw name="Fatal Error" library="BuiltIn">
<doc>Stops the whole test execution.</doc>
<arguments>
<arg>msg=Code update failed.</arg>
</arguments>
<msg timestamp="20171026 00:16:43.314" level="FAIL">Code update failed.</msg>
<status status="FAIL" endtime="20171026 00:16:43.314" starttime="20171026 00:16:43.314"></status>
</kw>
<status status="FAIL" endtime="20171026 00:16:43.314" starttime="20171026 00:16:43.313"></status>
</kw>
<status status="FAIL" endtime="20171026 00:16:43.314" starttime="20171026 00:16:12.299">Code update failed.</status>
</kw>
<doc>Do a BMC code update by uploading image on BMC via REST.</doc>
<tags>
<tag>BMC_Code_Update</tag>
<tag>REST_BMC_Code_Update</tag>
</tags>
<status status="FAIL" endtime="20171026 00:16:43.315" critical="yes" starttime="20171026 00:09:35.057">v1.99.10-208-g69b2e34 != v1.99.10-208-gf39c451

Also teardown failed:
Code update failed.</status>
</test>
<doc>Update the BMC code on a target BMC.
Execution Method:
python -m robot -v OPENBMC_HOST:&lt;hostname&gt;
-v IMAGE_FILE_PATH:&lt;path/*.tar&gt; bmc_code_update.robot</doc>
<status status="FAIL" endtime="20171026 00:16:43.315" starttime="20171026 00:09:29.533"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="0">Critical Tests</stat>
<stat fail="1" pass="0">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">BMC_Code_Update</stat>
<stat fail="1" pass="0">REST_BMC_Code_Update</stat>
</tag>
<suite>
<stat fail="1" id="s1" name="Bmc Code Update" pass="0">Bmc Code Update</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
