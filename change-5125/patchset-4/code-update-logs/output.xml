<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170708 15:47:31.537" generator="Robot 3.0.2 (Python 2.7.12 on linux2)">
<suite source="/home/fspcibld/openbmc-test-automation/extended/code_update/update_bmc.robot" id="s1" name="Update Bmc">
<test id="s1-t1" name="Initiate Code Update BMC">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${FORCE_UPDATE} == ${0}</arg>
<arg>Prepare BMC For Update</arg>
</arguments>
<kw name="Prepare BMC For Update">
<doc>Prerequisite operation before code update.</doc>
<kw name="Check Boot Count And Time">
<doc>Check for unexpected reboots.</doc>
<kw name="Set BMC Reset Reference Time" library="utils">
<doc>Set current boot time as a reference and increment</doc>
<kw name="Get BMC Boot Time" library="utils">
<doc>Get boot time from /proc/stat.</doc>
<assign>
<var>${cur_btime}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170708 15:47:32.351" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170708 15:47:32.351" starttime="20170708 15:47:32.351"></status>
</kw>
<msg timestamp="20170708 15:47:32.351" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170708 15:47:32.352" starttime="20170708 15:47:32.350"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:47:32.353" starttime="20170708 15:47:32.352"></status>
</kw>
<status status="PASS" endtime="20170708 15:47:32.353" starttime="20170708 15:47:32.352"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170708 15:47:32.354" starttime="20170708 15:47:32.353"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170708 15:47:32.355" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170708 15:47:32.355" starttime="20170708 15:47:32.354"></status>
</kw>
<msg timestamp="20170708 15:47:32.355" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170708 15:47:32.355" starttime="20170708 15:47:32.354"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:47:32.357" starttime="20170708 15:47:32.356"></status>
</kw>
<status status="PASS" endtime="20170708 15:47:32.357" starttime="20170708 15:47:32.356"></status>
</kw>
<status status="PASS" endtime="20170708 15:47:32.357" starttime="20170708 15:47:32.355"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170708 15:47:32.357" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170708 15:47:34.045" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170708 15:47:34.045" starttime="20170708 15:47:32.357"></status>
</kw>
<status status="PASS" endtime="20170708 15:47:34.045" starttime="20170708 15:47:32.350"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>egrep '^btime ' /proc/stat | cut -f 2 -d ' '</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170708 15:47:34.046" level="INFO">Executing command 'egrep '^btime ' /proc/stat | cut -f 2 -d ' ''.</msg>
<msg timestamp="20170708 15:47:34.123" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170708 15:47:34.123" level="INFO">${output} = 1499528353</msg>
<msg timestamp="20170708 15:47:34.123" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170708 15:47:34.123" starttime="20170708 15:47:34.046"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170708 15:47:34.123" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170708 15:47:34.123" starttime="20170708 15:47:34.123"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${btime}</var>
</assign>
<msg timestamp="20170708 15:47:34.124" level="INFO">${btime} = 1499528353</msg>
<status status="PASS" endtime="20170708 15:47:34.124" starttime="20170708 15:47:34.124"></status>
</kw>
<msg timestamp="20170708 15:47:34.124" level="INFO">${cur_btime} = 1499528353</msg>
<status status="PASS" endtime="20170708 15:47:34.124" starttime="20170708 15:47:32.349"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${BOOT_TIME} == ${0} and ${BOOT_COUNT} == ${0}</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
<arg>ELSE IF</arg>
<arg>${cur_btime} &gt; ${BOOT_TIME}</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_COUNT}</arg>
<arg>${BOOT_COUNT + 1}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
</arguments>
<msg timestamp="20170708 15:47:34.126" level="INFO">${BOOT_TIME} = 1499528353</msg>
<status status="PASS" endtime="20170708 15:47:34.126" starttime="20170708 15:47:34.126"></status>
</kw>
<status status="PASS" endtime="20170708 15:47:34.126" starttime="20170708 15:47:34.125"></status>
</kw>
<status status="PASS" endtime="20170708 15:47:34.126" starttime="20170708 15:47:32.349"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\n Boot Count: ${BOOT_COUNT}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:47:34.127" starttime="20170708 15:47:34.127"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\n Boot Time: ${BOOT_TIME}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:47:34.127" starttime="20170708 15:47:34.127"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${BOOT_COUNT} &gt; ${MAX_BOOT_COUNT}</arg>
<arg>Log</arg>
<arg>Phantom Reboot!!! Unexpected reboot detected</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20170708 15:47:34.128" starttime="20170708 15:47:34.128"></status>
</kw>
<status status="PASS" endtime="20170708 15:47:34.128" starttime="20170708 15:47:32.348"></status>
</kw>
<kw name="Prune Journal Log" library="utils">
<doc>Prune archived journal logs.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170708 15:47:34.131" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170708 15:47:34.131" starttime="20170708 15:47:34.131"></status>
</kw>
<msg timestamp="20170708 15:47:34.132" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170708 15:47:34.132" starttime="20170708 15:47:34.130"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:47:34.133" starttime="20170708 15:47:34.132"></status>
</kw>
<status status="PASS" endtime="20170708 15:47:34.133" starttime="20170708 15:47:34.132"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170708 15:47:34.134" starttime="20170708 15:47:34.133"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170708 15:47:34.135" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170708 15:47:34.135" starttime="20170708 15:47:34.134"></status>
</kw>
<msg timestamp="20170708 15:47:34.135" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170708 15:47:34.135" starttime="20170708 15:47:34.134"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:47:34.137" starttime="20170708 15:47:34.136"></status>
</kw>
<status status="PASS" endtime="20170708 15:47:34.137" starttime="20170708 15:47:34.136"></status>
</kw>
<status status="PASS" endtime="20170708 15:47:34.137" starttime="20170708 15:47:34.135"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170708 15:47:34.137" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170708 15:47:35.946" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170708 15:47:35.946" starttime="20170708 15:47:34.137"></status>
</kw>
<status status="PASS" endtime="20170708 15:47:35.946" starttime="20170708 15:47:34.129"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>journalctl --vacuum-size=${vacuum_size}</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170708 15:47:35.947" level="INFO">Executing command 'journalctl --vacuum-size=1M'.</msg>
<msg timestamp="20170708 15:47:36.024" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170708 15:47:36.024" level="INFO">${output} = </msg>
<msg timestamp="20170708 15:47:36.024" level="INFO">${stderr} = Vacuuming done, freed 0B of archived journals from /run/log/journal/169f9b5a822f4338824a4e146beb5550.</msg>
<msg timestamp="20170708 15:47:36.024" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20170708 15:47:36.024" starttime="20170708 15:47:35.947"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${stderr}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:47:36.025" starttime="20170708 15:47:36.024"></status>
</kw>
<status status="PASS" endtime="20170708 15:47:36.025" starttime="20170708 15:47:34.129"></status>
</kw>
<kw name="Power Off Request" library="state_manager">
<doc>Select appropriate poweroff keyword.</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${OBMC_STATES_VERSION}' == '${0}'</arg>
<arg>Initiate Power Off</arg>
<arg>ELSE</arg>
<arg>Initiate Host PowerOff</arg>
</arguments>
<kw name="Initiate Host PowerOff" library="state_manager">
<doc>Initiate host power off.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170708 15:47:36.027" level="INFO">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status status="PASS" endtime="20170708 15:47:36.027" starttime="20170708 15:47:36.027"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 15:47:36.029" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status status="PASS" endtime="20170708 15:47:36.029" starttime="20170708 15:47:36.028"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 15:47:36.032" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 15:47:36.033" starttime="20170708 15:47:36.032"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 15:47:36.033" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 15:47:36.033" starttime="20170708 15:47:36.033"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 15:47:36.034" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 15:47:36.034" starttime="20170708 15:47:36.034"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 15:47:36.035" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 15:47:36.035" starttime="20170708 15:47:36.034"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 15:47:36.235" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170708 15:47:36.235" starttime="20170708 15:47:36.036"></status>
</kw>
<msg timestamp="20170708 15:47:36.235" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 15:47:36.235" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:47:36.235" starttime="20170708 15:47:36.035"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 15:47:36.236" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:47:36.236" starttime="20170708 15:47:36.235"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:47:36.236" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:47:36.237" starttime="20170708 15:47:36.236"></status>
</kw>
<status status="PASS" endtime="20170708 15:47:36.237" starttime="20170708 15:47:36.031"></status>
</kw>
<status status="PASS" endtime="20170708 15:47:36.237" starttime="20170708 15:47:36.030"></status>
</kw>
<status status="PASS" endtime="20170708 15:47:36.237" starttime="20170708 15:47:36.030"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 15:47:36.237" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status status="PASS" endtime="20170708 15:47:36.237" starttime="20170708 15:47:36.237"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 15:47:36.238" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 15:47:36.238" starttime="20170708 15:47:36.238"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:47:36.239" starttime="20170708 15:47:36.238"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170708 15:47:36.240" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type...</msg>
<status status="PASS" endtime="20170708 15:47:36.240" starttime="20170708 15:47:36.240"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170708 15:47:36.242" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170708 15:47:36.242" starttime="20170708 15:47:36.241"></status>
</kw>
<status status="PASS" endtime="20170708 15:47:36.242" starttime="20170708 15:47:36.241"></status>
</kw>
<status status="PASS" endtime="20170708 15:47:36.242" starttime="20170708 15:47:36.239"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170708 15:47:36.501" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170708 15:47:36.502" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:47:36.502" starttime="20170708 15:47:36.242"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170708 15:47:36.503" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170708 15:47:36.503" starttime="20170708 15:47:36.502"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170708 15:47:36.504" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170708 15:47:36.504" starttime="20170708 15:47:36.504"></status>
</kw>
<status status="PASS" endtime="20170708 15:47:36.505" starttime="20170708 15:47:36.503"></status>
</kw>
<status status="PASS" endtime="20170708 15:47:36.505" starttime="20170708 15:47:36.502"></status>
</kw>
<msg timestamp="20170708 15:47:36.505" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:47:36.505" starttime="20170708 15:47:36.029"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:47:36.507" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:47:36.507" starttime="20170708 15:47:36.506"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170708 15:47:36.507" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170708 15:47:36.508" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170708 15:47:36.508" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170708 15:47:36.508" starttime="20170708 15:47:36.507"></status>
</kw>
<status status="PASS" endtime="20170708 15:47:36.508" starttime="20170708 15:47:36.027"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status status="PASS" endtime="20170708 15:47:36.508" starttime="20170708 15:47:36.508"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>3 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 15:47:36.513" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 15:47:36.514" starttime="20170708 15:47:36.513"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 15:47:36.514" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 15:47:36.514" starttime="20170708 15:47:36.514"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 15:47:36.515" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 15:47:36.515" starttime="20170708 15:47:36.515"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 15:47:36.516" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 15:47:36.516" starttime="20170708 15:47:36.515"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 15:47:37.693" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170708 15:47:37.694" starttime="20170708 15:47:36.517"></status>
</kw>
<msg timestamp="20170708 15:47:37.694" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 15:47:37.694" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:47:37.694" starttime="20170708 15:47:36.516"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 15:47:37.694" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:47:37.695" starttime="20170708 15:47:37.694"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:47:37.695" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:47:37.695" starttime="20170708 15:47:37.695"></status>
</kw>
<status status="PASS" endtime="20170708 15:47:37.695" starttime="20170708 15:47:36.512"></status>
</kw>
<status status="PASS" endtime="20170708 15:47:37.695" starttime="20170708 15:47:36.512"></status>
</kw>
<status status="PASS" endtime="20170708 15:47:37.696" starttime="20170708 15:47:36.511"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 15:47:37.696" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170708 15:47:37.696" starttime="20170708 15:47:37.696"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:47:37.697" starttime="20170708 15:47:37.697"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170708 15:47:41.781" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170708 15:47:41.781" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:47:41.781" starttime="20170708 15:47:37.697"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:47:41.782" starttime="20170708 15:47:41.781"></status>
</kw>
<msg timestamp="20170708 15:47:41.782" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:47:41.782" starttime="20170708 15:47:36.511"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:47:41.783" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:47:41.783" starttime="20170708 15:47:41.782"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170708 15:47:41.783" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170708 15:47:41.783" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170708 15:47:41.783" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170708 15:47:41.783" starttime="20170708 15:47:41.783"></status>
</kw>
<msg timestamp="20170708 15:47:41.784" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170708 15:47:41.784" starttime="20170708 15:47:36.510"></status>
</kw>
<msg timestamp="20170708 15:47:41.784" level="INFO">${host_state} = Off</msg>
<status status="PASS" endtime="20170708 15:47:41.784" starttime="20170708 15:47:36.510"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:47:41.785" starttime="20170708 15:47:41.784"></status>
</kw>
<status status="PASS" endtime="20170708 15:47:41.785" starttime="20170708 15:47:36.509"></status>
</kw>
<status status="PASS" endtime="20170708 15:47:41.785" starttime="20170708 15:47:36.509"></status>
</kw>
<status status="PASS" endtime="20170708 15:47:41.785" starttime="20170708 15:47:36.026"></status>
</kw>
<status status="PASS" endtime="20170708 15:47:41.785" starttime="20170708 15:47:36.026"></status>
</kw>
<status status="PASS" endtime="20170708 15:47:41.785" starttime="20170708 15:47:36.025"></status>
</kw>
<kw name="Set Policy Setting" library="code_update_utils">
<doc>Set the given test policy</doc>
<arguments>
<arg>RESTORE_LAST_STATE</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${policy}</arg>
</arguments>
<assign>
<var>${valueDict}</var>
</assign>
<msg timestamp="20170708 15:47:41.786" level="INFO">${valueDict} = {u'data': u'RESTORE_LAST_STATE'}</msg>
<status status="PASS" endtime="20170708 15:47:41.786" starttime="20170708 15:47:41.786"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_SETTING}</arg>
<arg>power_policy</arg>
<arg>data=${valueDict}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 15:47:41.787" level="INFO">${base_uri} = /org/openbmc/settings/host0</msg>
<status status="PASS" endtime="20170708 15:47:41.787" starttime="20170708 15:47:41.787"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 15:47:41.791" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 15:47:41.791" starttime="20170708 15:47:41.790"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 15:47:41.792" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 15:47:41.792" starttime="20170708 15:47:41.791"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 15:47:41.792" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 15:47:41.792" starttime="20170708 15:47:41.792"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 15:47:41.793" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 15:47:41.793" starttime="20170708 15:47:41.793"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 15:47:42.364" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170708 15:47:42.364" starttime="20170708 15:47:41.794"></status>
</kw>
<msg timestamp="20170708 15:47:42.364" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 15:47:42.364" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:47:42.364" starttime="20170708 15:47:41.793"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 15:47:42.365" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:47:42.365" starttime="20170708 15:47:42.365"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:47:42.366" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:47:42.366" starttime="20170708 15:47:42.365"></status>
</kw>
<status status="PASS" endtime="20170708 15:47:42.366" starttime="20170708 15:47:41.789"></status>
</kw>
<status status="PASS" endtime="20170708 15:47:42.366" starttime="20170708 15:47:41.789"></status>
</kw>
<status status="PASS" endtime="20170708 15:47:42.366" starttime="20170708 15:47:41.788"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 15:47:42.367" level="INFO">${base_uri} = /org/openbmc/settings/host0/attr/power_policy</msg>
<status status="PASS" endtime="20170708 15:47:42.367" starttime="20170708 15:47:42.366"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 15:47:42.367" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 15:47:42.367" starttime="20170708 15:47:42.367"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:47:42.368" starttime="20170708 15:47:42.367"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170708 15:47:42.369" level="INFO">${msg} = URI:https://9.3.86.161/org/openbmc/settings/host0/attr/power_policy, method:Put, args:{u'data': {u'data': u'RESTORE_LAST_STATE'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170708 15:47:42.369" starttime="20170708 15:47:42.369"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170708 15:47:42.370" level="INFO">URI:https://9.3.86.161/org/openbmc/settings/host0/attr/power_policy, method:Put, args:{u'data': {u'data': u'RESTORE_LAST_STATE'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170708 15:47:42.370" starttime="20170708 15:47:42.370"></status>
</kw>
<status status="PASS" endtime="20170708 15:47:42.371" starttime="20170708 15:47:42.370"></status>
</kw>
<status status="PASS" endtime="20170708 15:47:42.371" starttime="20170708 15:47:42.368"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170708 15:47:43.407" level="INFO">Put Request using : alias=openbmc, uri=/org/openbmc/settings/host0/attr/power_policy, data={"data": "RESTORE_LAST_STATE"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170708 15:47:43.407" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:47:43.407" starttime="20170708 15:47:42.371"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170708 15:47:43.409" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170708 15:47:43.409" starttime="20170708 15:47:43.408"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170708 15:47:43.410" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170708 15:47:43.410" starttime="20170708 15:47:43.409"></status>
</kw>
<status status="PASS" endtime="20170708 15:47:43.410" starttime="20170708 15:47:43.409"></status>
</kw>
<status status="PASS" endtime="20170708 15:47:43.410" starttime="20170708 15:47:43.407"></status>
</kw>
<msg timestamp="20170708 15:47:43.410" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:47:43.410" starttime="20170708 15:47:41.788"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:47:43.411" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:47:43.411" starttime="20170708 15:47:43.411"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170708 15:47:43.412" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170708 15:47:43.412" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170708 15:47:43.412" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170708 15:47:43.412" starttime="20170708 15:47:43.412"></status>
</kw>
<status status="PASS" endtime="20170708 15:47:43.412" starttime="20170708 15:47:41.786"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_SETTING}</arg>
<arg>power_policy</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 15:47:43.416" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 15:47:43.416" starttime="20170708 15:47:43.416"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 15:47:43.417" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 15:47:43.417" starttime="20170708 15:47:43.417"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 15:47:43.418" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 15:47:43.418" starttime="20170708 15:47:43.417"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 15:47:43.418" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 15:47:43.418" starttime="20170708 15:47:43.418"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 15:47:44.121" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170708 15:47:44.121" starttime="20170708 15:47:43.419"></status>
</kw>
<msg timestamp="20170708 15:47:44.122" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 15:47:44.122" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:47:44.122" starttime="20170708 15:47:43.419"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 15:47:44.122" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:47:44.122" starttime="20170708 15:47:44.122"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:47:44.123" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:47:44.123" starttime="20170708 15:47:44.123"></status>
</kw>
<status status="PASS" endtime="20170708 15:47:44.123" starttime="20170708 15:47:43.415"></status>
</kw>
<status status="PASS" endtime="20170708 15:47:44.123" starttime="20170708 15:47:43.415"></status>
</kw>
<status status="PASS" endtime="20170708 15:47:44.123" starttime="20170708 15:47:43.414"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 15:47:44.124" level="INFO">${base_uri} = /org/openbmc/settings/host0/attr/power_policy</msg>
<status status="PASS" endtime="20170708 15:47:44.124" starttime="20170708 15:47:44.124"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:47:44.125" starttime="20170708 15:47:44.124"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170708 15:47:44.399" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/settings/host0/attr/power_policy, headers=None json=None</msg>
<msg timestamp="20170708 15:47:44.399" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:47:44.399" starttime="20170708 15:47:44.125"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:47:44.400" starttime="20170708 15:47:44.399"></status>
</kw>
<msg timestamp="20170708 15:47:44.400" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:47:44.400" starttime="20170708 15:47:43.413"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:47:44.401" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:47:44.401" starttime="20170708 15:47:44.400"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170708 15:47:44.401" level="INFO">To JSON using : content={
  "data": "RESTORE_LAST_STATE", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170708 15:47:44.401" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170708 15:47:44.402" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'RESTORE_LAST_STATE'}</msg>
<status status="PASS" endtime="20170708 15:47:44.402" starttime="20170708 15:47:44.401"></status>
</kw>
<msg timestamp="20170708 15:47:44.402" level="INFO">${currentPolicy} = RESTORE_LAST_STATE</msg>
<status status="PASS" endtime="20170708 15:47:44.402" starttime="20170708 15:47:43.413"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${currentPolicy}</arg>
<arg>${policy}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:47:44.402" starttime="20170708 15:47:44.402"></status>
</kw>
<status status="PASS" endtime="20170708 15:47:44.403" starttime="20170708 15:47:41.785"></status>
</kw>
<kw name="Prepare For Update" library="code_update_utils">
<doc>Switch to update mode in progress. This method calls</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 15:47:44.404" level="INFO">${data} = {u'data': []}</msg>
<status status="PASS" endtime="20170708 15:47:44.404" starttime="20170708 15:47:44.403"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${BMC_PREP_METHOD}</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 15:47:44.407" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 15:47:44.407" starttime="20170708 15:47:44.406"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 15:47:44.408" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 15:47:44.408" starttime="20170708 15:47:44.407"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 15:47:44.408" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 15:47:44.408" starttime="20170708 15:47:44.408"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 15:47:44.409" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 15:47:44.409" starttime="20170708 15:47:44.409"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 15:47:44.622" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170708 15:47:44.622" starttime="20170708 15:47:44.410"></status>
</kw>
<msg timestamp="20170708 15:47:44.622" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 15:47:44.622" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:47:44.622" starttime="20170708 15:47:44.409"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 15:47:44.623" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:47:44.623" starttime="20170708 15:47:44.623"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:47:44.624" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:47:44.624" starttime="20170708 15:47:44.623"></status>
</kw>
<status status="PASS" endtime="20170708 15:47:44.624" starttime="20170708 15:47:44.406"></status>
</kw>
<status status="PASS" endtime="20170708 15:47:44.624" starttime="20170708 15:47:44.405"></status>
</kw>
<status status="PASS" endtime="20170708 15:47:44.624" starttime="20170708 15:47:44.405"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 15:47:44.625" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc/action/PrepareForUpdate</msg>
<status status="PASS" endtime="20170708 15:47:44.625" starttime="20170708 15:47:44.625"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 15:47:44.626" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 15:47:44.626" starttime="20170708 15:47:44.625"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:47:44.626" starttime="20170708 15:47:44.626"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:47:44.627" starttime="20170708 15:47:44.626"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170708 15:47:45.030" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc/action/PrepareForUpdate, data={"data": []}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20170708 15:47:45.030" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:47:45.030" starttime="20170708 15:47:44.627"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:47:45.031" starttime="20170708 15:47:45.031"></status>
</kw>
<msg timestamp="20170708 15:47:45.031" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:47:45.031" starttime="20170708 15:47:44.404"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:47:45.032" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:47:45.032" starttime="20170708 15:47:45.032"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10s</arg>
</arguments>
<msg timestamp="20170708 15:47:55.033" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20170708 15:47:55.034" starttime="20170708 15:47:45.033"></status>
</kw>
<status status="PASS" endtime="20170708 15:47:55.034" starttime="20170708 15:47:44.403"></status>
</kw>
<kw name="Check If BMC is Up" library="utils">
<doc>Wait for Host to be online. Checks every X seconds</doc>
<arguments>
<arg>20 min</arg>
<arg>10 sec</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${max_timeout}</arg>
<arg>${interval}</arg>
<arg>Verify Ping and REST Authentication</arg>
</arguments>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170708 15:47:55.037" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20170708 15:47:55.038" starttime="20170708 15:47:55.037"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170708 15:47:55.044" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20170708 15:47:58.051" level="INFO">${RC} = 0</msg>
<msg timestamp="20170708 15:47:58.051" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=1.54 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.603 ms
64 bytes from 9.3.86.161: icmp_seq...</msg>
<status status="PASS" endtime="20170708 15:47:58.051" starttime="20170708 15:47:55.038"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170708 15:47:58.055" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=1.54 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.603 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.539 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.569 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3000ms
rtt min/avg/max/mdev = 0.539/0.813/1.541/0.420 ms</msg>
<status status="PASS" endtime="20170708 15:47:58.055" starttime="20170708 15:47:58.054"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:47:58.056" starttime="20170708 15:47:58.055"></status>
</kw>
<status status="PASS" endtime="20170708 15:47:58.056" starttime="20170708 15:47:55.037"></status>
</kw>
<msg timestamp="20170708 15:47:58.056" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20170708 15:47:58.056" starttime="20170708 15:47:55.036"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20170708 15:47:58.057" starttime="20170708 15:47:58.056"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 15:47:58.060" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 15:47:58.061" starttime="20170708 15:47:58.060"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 15:47:58.062" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 15:47:58.062" starttime="20170708 15:47:58.062"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 15:47:58.063" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 15:47:58.063" starttime="20170708 15:47:58.062"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 15:47:58.063" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 15:47:58.064" starttime="20170708 15:47:58.063"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 15:47:58.087" level="WARN">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fffa2fcc990&gt;: Failed to establish a new connection: [Errno 111] Connection refused',)': /login</msg>
<msg timestamp="20170708 15:47:58.288" level="WARN">Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fffa2fccad0&gt;: Failed to establish a new connection: [Errno 111] Connection refused',)': /login</msg>
<msg timestamp="20170708 15:47:58.691" level="WARN">Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fffa2fccc50&gt;: Failed to establish a new connection: [Errno 111] Connection refused',)': /login</msg>
<msg timestamp="20170708 15:47:58.695" level="FAIL">ConnectionError: HTTPSConnectionPool(host='9.3.86.161', port=443): Max retries exceeded with url: /login (Caused by NewConnectionError('&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fffa2fccd90&gt;: Failed to establish a new connection: [Errno 111] Connection refused',))</msg>
<status status="FAIL" endtime="20170708 15:47:58.695" starttime="20170708 15:47:58.064"></status>
</kw>
<msg timestamp="20170708 15:47:58.695" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170708 15:47:58.695" level="INFO">${resp} = ConnectionError: HTTPSConnectionPool(host='9.3.86.161', port=443): Max retries exceeded with url: /login (Caused by NewConnectionError('&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fffa2fc...</msg>
<status status="PASS" endtime="20170708 15:47:58.695" starttime="20170708 15:47:58.064"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 15:47:58.696" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170708 15:47:58.696" level="FAIL">ConnectionError: HTTPSConnectionPool(host='9.3.86.161', port=443): Max retries exceeded with url: /login (Caused by NewConnectionError('&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fffa2fccd90&gt;: Failed to establish a new connection: [Errno 111] Connection refused',)): FAIL != PASS</msg>
<status status="FAIL" endtime="20170708 15:47:58.696" starttime="20170708 15:47:58.696"></status>
</kw>
<status status="FAIL" endtime="20170708 15:47:58.697" starttime="20170708 15:47:58.059"></status>
</kw>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 15:48:18.702" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 15:48:18.702" starttime="20170708 15:48:18.699"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 15:48:18.703" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 15:48:18.703" starttime="20170708 15:48:18.703"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 15:48:18.704" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 15:48:18.704" starttime="20170708 15:48:18.703"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 15:48:18.704" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 15:48:18.704" starttime="20170708 15:48:18.704"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 15:48:38.727" level="WARN">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fffa8060250&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=20.0)')': /login</msg>
<msg timestamp="20170708 15:48:58.949" level="WARN">Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fffa8060810&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=20.0)')': /login</msg>
<msg timestamp="20170708 15:49:25.965" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="FAIL" endtime="20170708 15:49:25.966" starttime="20170708 15:48:18.705"></status>
</kw>
<msg timestamp="20170708 15:49:25.966" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170708 15:49:25.966" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="PASS" endtime="20170708 15:49:25.966" starttime="20170708 15:48:18.705"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 15:49:25.967" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170708 15:49:25.967" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=20.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170708 15:49:25.967" starttime="20170708 15:49:25.966"></status>
</kw>
<status status="FAIL" endtime="20170708 15:49:25.967" starttime="20170708 15:48:18.697"></status>
</kw>
<msg timestamp="20170708 15:49:25.967" level="FAIL">Keyword 'Post Login Request' failed after retrying for 40 seconds. The last error was: ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=20.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170708 15:49:25.967" starttime="20170708 15:47:58.059"></status>
</kw>
<status status="FAIL" endtime="20170708 15:49:25.968" starttime="20170708 15:47:58.058"></status>
</kw>
<msg timestamp="20170708 15:49:25.968" level="INFO">${l_rest} = False</msg>
<status status="PASS" endtime="20170708 15:49:25.968" starttime="20170708 15:47:58.057"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<msg timestamp="20170708 15:49:25.969" level="FAIL">REST Authentication Failed</msg>
<status status="FAIL" endtime="20170708 15:49:25.969" starttime="20170708 15:49:25.969"></status>
</kw>
<status status="FAIL" endtime="20170708 15:49:25.969" starttime="20170708 15:49:25.968"></status>
</kw>
<status status="FAIL" endtime="20170708 15:49:25.969" starttime="20170708 15:47:55.036"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170708 15:49:35.972" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20170708 15:49:35.972" starttime="20170708 15:49:35.972"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170708 15:49:35.977" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20170708 15:49:38.993" level="INFO">${RC} = 0</msg>
<msg timestamp="20170708 15:49:38.993" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=1.41 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.608 ms
64 bytes from 9.3.86.161: icmp_seq...</msg>
<status status="PASS" endtime="20170708 15:49:38.994" starttime="20170708 15:49:35.973"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170708 15:49:39.015" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=1.41 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.608 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.596 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.649 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2999ms
rtt min/avg/max/mdev = 0.596/0.816/1.412/0.345 ms</msg>
<status status="PASS" endtime="20170708 15:49:39.015" starttime="20170708 15:49:39.011"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:49:39.016" starttime="20170708 15:49:39.015"></status>
</kw>
<status status="PASS" endtime="20170708 15:49:39.016" starttime="20170708 15:49:35.971"></status>
</kw>
<msg timestamp="20170708 15:49:39.017" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20170708 15:49:39.017" starttime="20170708 15:49:35.971"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20170708 15:49:39.020" starttime="20170708 15:49:39.018"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 15:49:39.023" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 15:49:39.024" starttime="20170708 15:49:39.023"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 15:49:39.025" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 15:49:39.025" starttime="20170708 15:49:39.024"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 15:49:39.026" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 15:49:39.026" starttime="20170708 15:49:39.025"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 15:49:39.026" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 15:49:39.026" starttime="20170708 15:49:39.026"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 15:49:59.045" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="FAIL" endtime="20170708 15:49:59.045" starttime="20170708 15:49:39.028"></status>
</kw>
<msg timestamp="20170708 15:49:59.046" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170708 15:49:59.046" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="PASS" endtime="20170708 15:49:59.046" starttime="20170708 15:49:39.027"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 15:49:59.046" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170708 15:49:59.047" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=20.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170708 15:49:59.047" starttime="20170708 15:49:59.046"></status>
</kw>
<status status="FAIL" endtime="20170708 15:49:59.047" starttime="20170708 15:49:39.022"></status>
</kw>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 15:50:19.049" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 15:50:19.049" starttime="20170708 15:50:19.048"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 15:50:19.050" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 15:50:19.050" starttime="20170708 15:50:19.050"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 15:50:19.051" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 15:50:19.051" starttime="20170708 15:50:19.050"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 15:50:19.051" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 15:50:19.052" starttime="20170708 15:50:19.051"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 15:50:19.271" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170708 15:50:19.271" starttime="20170708 15:50:19.052"></status>
</kw>
<msg timestamp="20170708 15:50:19.271" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 15:50:19.271" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:50:19.271" starttime="20170708 15:50:19.052"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 15:50:19.272" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:50:19.272" starttime="20170708 15:50:19.271"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:50:19.273" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:50:19.273" starttime="20170708 15:50:19.272"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:19.273" starttime="20170708 15:50:19.047"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:19.273" starttime="20170708 15:49:39.021"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:19.273" starttime="20170708 15:49:39.020"></status>
</kw>
<msg timestamp="20170708 15:50:19.273" level="INFO">${l_rest} = True</msg>
<status status="PASS" endtime="20170708 15:50:19.273" starttime="20170708 15:49:39.020"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<status status="PASS" endtime="20170708 15:50:19.274" starttime="20170708 15:50:19.274"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170708 15:50:19.276" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170708 15:50:19.276" starttime="20170708 15:50:19.275"></status>
</kw>
<msg timestamp="20170708 15:50:19.276" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170708 15:50:19.276" starttime="20170708 15:50:19.275"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:50:19.277" starttime="20170708 15:50:19.277"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:19.277" starttime="20170708 15:50:19.276"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170708 15:50:19.278" starttime="20170708 15:50:19.277"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170708 15:50:19.279" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170708 15:50:19.279" starttime="20170708 15:50:19.279"></status>
</kw>
<msg timestamp="20170708 15:50:19.279" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170708 15:50:19.279" starttime="20170708 15:50:19.278"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:50:19.282" starttime="20170708 15:50:19.281"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:19.282" starttime="20170708 15:50:19.280"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:19.282" starttime="20170708 15:50:19.279"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170708 15:50:19.283" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170708 15:50:21.396" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170708 15:50:21.396" starttime="20170708 15:50:19.282"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:21.396" starttime="20170708 15:50:19.274"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>hostname</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${system}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170708 15:50:21.397" level="INFO">Executing command 'hostname'.</msg>
<msg timestamp="20170708 15:50:21.453" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170708 15:50:21.453" level="INFO">${system} = witherspoon</msg>
<msg timestamp="20170708 15:50:21.454" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170708 15:50:21.454" starttime="20170708 15:50:21.397"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170708 15:50:21.454" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170708 15:50:21.454" starttime="20170708 15:50:21.454"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:21.454" starttime="20170708 15:49:35.970"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:21.454" starttime="20170708 15:47:55.035"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:21.455" starttime="20170708 15:47:55.034"></status>
</kw>
<kw name="Check Boot Count And Time">
<doc>Check for unexpected reboots.</doc>
<kw name="Set BMC Reset Reference Time" library="utils">
<doc>Set current boot time as a reference and increment</doc>
<kw name="Get BMC Boot Time" library="utils">
<doc>Get boot time from /proc/stat.</doc>
<assign>
<var>${cur_btime}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170708 15:50:21.457" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170708 15:50:21.457" starttime="20170708 15:50:21.457"></status>
</kw>
<msg timestamp="20170708 15:50:21.457" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170708 15:50:21.457" starttime="20170708 15:50:21.456"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:50:21.459" starttime="20170708 15:50:21.458"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:21.459" starttime="20170708 15:50:21.458"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170708 15:50:21.460" starttime="20170708 15:50:21.459"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170708 15:50:21.461" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170708 15:50:21.461" starttime="20170708 15:50:21.460"></status>
</kw>
<msg timestamp="20170708 15:50:21.461" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170708 15:50:21.461" starttime="20170708 15:50:21.460"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:50:21.463" starttime="20170708 15:50:21.462"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:21.463" starttime="20170708 15:50:21.462"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:21.463" starttime="20170708 15:50:21.461"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170708 15:50:21.463" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170708 15:50:23.109" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170708 15:50:23.109" starttime="20170708 15:50:21.463"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:23.109" starttime="20170708 15:50:21.456"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>egrep '^btime ' /proc/stat | cut -f 2 -d ' '</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170708 15:50:23.110" level="INFO">Executing command 'egrep '^btime ' /proc/stat | cut -f 2 -d ' ''.</msg>
<msg timestamp="20170708 15:50:23.187" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170708 15:50:23.187" level="INFO">${output} = 1499528913</msg>
<msg timestamp="20170708 15:50:23.187" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170708 15:50:23.187" starttime="20170708 15:50:23.110"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170708 15:50:23.188" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170708 15:50:23.188" starttime="20170708 15:50:23.187"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${btime}</var>
</assign>
<msg timestamp="20170708 15:50:23.188" level="INFO">${btime} = 1499528913</msg>
<status status="PASS" endtime="20170708 15:50:23.188" starttime="20170708 15:50:23.188"></status>
</kw>
<msg timestamp="20170708 15:50:23.189" level="INFO">${cur_btime} = 1499528913</msg>
<status status="PASS" endtime="20170708 15:50:23.189" starttime="20170708 15:50:21.455"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${BOOT_TIME} == ${0} and ${BOOT_COUNT} == ${0}</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
<arg>ELSE IF</arg>
<arg>${cur_btime} &gt; ${BOOT_TIME}</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_COUNT}</arg>
<arg>${BOOT_COUNT + 1}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set Global Variable</arg>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_COUNT}</arg>
<arg>${BOOT_COUNT + 1}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
</arguments>
<msg timestamp="20170708 15:50:23.191" level="INFO">${BOOT_TIME} = 1499528913</msg>
<status status="PASS" endtime="20170708 15:50:23.191" starttime="20170708 15:50:23.190"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${BOOT_COUNT}</arg>
<arg>${BOOT_COUNT + 1}</arg>
</arguments>
<msg timestamp="20170708 15:50:23.192" level="INFO">${BOOT_COUNT} = 1</msg>
<status status="PASS" endtime="20170708 15:50:23.192" starttime="20170708 15:50:23.191"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:23.192" starttime="20170708 15:50:23.190"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:23.192" starttime="20170708 15:50:23.189"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:23.192" starttime="20170708 15:50:21.455"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\n Boot Count: ${BOOT_COUNT}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:50:23.193" starttime="20170708 15:50:23.192"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\n Boot Time: ${BOOT_TIME}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:50:23.193" starttime="20170708 15:50:23.193"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${BOOT_COUNT} &gt; ${MAX_BOOT_COUNT}</arg>
<arg>Log</arg>
<arg>Phantom Reboot!!! Unexpected reboot detected</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20170708 15:50:23.194" starttime="20170708 15:50:23.193"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:23.194" starttime="20170708 15:50:21.455"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Temp BMC URI Check</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Temp BMC URI Check">
<doc>Check for transient "BMC0" interface.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/state/BMC0/</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 15:50:23.197" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 15:50:23.198" starttime="20170708 15:50:23.197"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 15:50:23.198" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 15:50:23.198" starttime="20170708 15:50:23.198"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 15:50:23.200" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 15:50:23.200" starttime="20170708 15:50:23.199"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 15:50:23.200" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 15:50:23.200" starttime="20170708 15:50:23.200"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 15:50:23.396" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170708 15:50:23.396" starttime="20170708 15:50:23.201"></status>
</kw>
<msg timestamp="20170708 15:50:23.396" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 15:50:23.396" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:50:23.396" starttime="20170708 15:50:23.201"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 15:50:23.397" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:50:23.397" starttime="20170708 15:50:23.396"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:50:23.397" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:50:23.398" starttime="20170708 15:50:23.397"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:23.398" starttime="20170708 15:50:23.196"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:23.398" starttime="20170708 15:50:23.196"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:23.398" starttime="20170708 15:50:23.195"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 15:50:23.398" level="INFO">${base_uri} = /xyz/openbmc_project/state/BMC0/</msg>
<status status="PASS" endtime="20170708 15:50:23.399" starttime="20170708 15:50:23.398"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:50:23.399" starttime="20170708 15:50:23.399"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170708 15:50:23.452" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/BMC0/, headers=None json=None</msg>
<msg timestamp="20170708 15:50:23.453" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170708 15:50:23.453" starttime="20170708 15:50:23.399"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:50:23.453" starttime="20170708 15:50:23.453"></status>
</kw>
<msg timestamp="20170708 15:50:23.454" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170708 15:50:23.454" starttime="20170708 15:50:23.195"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:50:23.454" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170708 15:50:23.455" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170708 15:50:23.455" starttime="20170708 15:50:23.454"></status>
</kw>
<status status="FAIL" endtime="20170708 15:50:23.455" starttime="20170708 15:50:23.194"></status>
</kw>
<msg timestamp="20170708 15:50:23.455" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170708 15:50:23.455" starttime="20170708 15:50:23.194"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Wait For BMC Ready</arg>
<arg>ELSE</arg>
<arg>Wait For Temp BMC Ready</arg>
</arguments>
<kw name="Wait For BMC Ready" library="state_manager">
<doc>Check BMC state and wait for BMC Ready.</doc>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>BMC_READY</arg>
<arg>HOST_POWERED_OFF</arg>
</arguments>
<assign>
<var>@{states}</var>
</assign>
<msg timestamp="20170708 15:50:23.456" level="INFO">@{states} = [ BMC_READY | HOST_POWERED_OFF ]</msg>
<status status="PASS" endtime="20170708 15:50:23.456" starttime="20170708 15:50:23.456"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${OBMC_STATES_VERSION}' == '${0}'</arg>
<arg>Wait Until Keyword Succeeds</arg>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Verify BMC State</arg>
<arg>${states}</arg>
<arg>ELSE</arg>
<arg>Wait Until Keyword Succeeds</arg>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is BMC Ready</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is BMC Ready</arg>
</arguments>
<kw name="Is BMC Ready" library="state_manager">
<doc>Check if BMC state is Ready.</doc>
<kw name="Get BMC State" library="state_manager">
<doc>Return the state of the BMC.</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${BMC_STATE_URI}</arg>
<arg>CurrentBMCState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 15:50:23.462" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 15:50:23.463" starttime="20170708 15:50:23.462"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 15:50:23.463" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 15:50:23.463" starttime="20170708 15:50:23.463"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 15:50:23.464" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 15:50:23.464" starttime="20170708 15:50:23.464"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 15:50:23.465" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 15:50:23.465" starttime="20170708 15:50:23.464"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 15:50:23.741" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170708 15:50:23.742" starttime="20170708 15:50:23.465"></status>
</kw>
<msg timestamp="20170708 15:50:23.742" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 15:50:23.742" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:50:23.742" starttime="20170708 15:50:23.465"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 15:50:23.742" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:50:23.743" starttime="20170708 15:50:23.742"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:50:23.743" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:50:23.743" starttime="20170708 15:50:23.743"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:23.743" starttime="20170708 15:50:23.461"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:23.743" starttime="20170708 15:50:23.461"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:23.744" starttime="20170708 15:50:23.460"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 15:50:23.744" level="INFO">${base_uri} = /xyz/openbmc_project/state/bmc0//attr/CurrentBMCState</msg>
<status status="PASS" endtime="20170708 15:50:23.744" starttime="20170708 15:50:23.744"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:50:23.745" starttime="20170708 15:50:23.745"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170708 15:50:23.823" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/bmc0//attr/CurrentBMCState, headers=None json=None</msg>
<msg timestamp="20170708 15:50:23.823" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:50:23.823" starttime="20170708 15:50:23.745"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:50:23.824" starttime="20170708 15:50:23.823"></status>
</kw>
<msg timestamp="20170708 15:50:23.824" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:50:23.824" starttime="20170708 15:50:23.459"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:50:23.825" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:50:23.825" starttime="20170708 15:50:23.824"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170708 15:50:23.825" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170708 15:50:23.825" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170708 15:50:23.826" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.BMC.BMCState.Ready'}</msg>
<status status="PASS" endtime="20170708 15:50:23.826" starttime="20170708 15:50:23.825"></status>
</kw>
<msg timestamp="20170708 15:50:23.826" level="INFO">${state} = xyz.openbmc_project.State.BMC.BMCState.Ready</msg>
<status status="PASS" endtime="20170708 15:50:23.826" starttime="20170708 15:50:23.459"></status>
</kw>
<msg timestamp="20170708 15:50:23.827" level="INFO">${bmc_state} = Ready</msg>
<status status="PASS" endtime="20170708 15:50:23.827" starttime="20170708 15:50:23.458"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${BMC_READY_STATE}</arg>
<arg>${bmc_state}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:50:23.827" starttime="20170708 15:50:23.827"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:23.827" starttime="20170708 15:50:23.458"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:23.827" starttime="20170708 15:50:23.457"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:23.828" starttime="20170708 15:50:23.457"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:23.828" starttime="20170708 15:50:23.456"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:23.828" starttime="20170708 15:50:23.455"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:23.828" starttime="20170708 15:47:32.348"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:23.828" starttime="20170708 15:47:32.348"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Preserve BMC Network Setting</arg>
</arguments>
<kw name="Preserve BMC Network Setting" library="code_update_utils">
<doc>Preserve Network setting</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${1}</arg>
</arguments>
<assign>
<var>${policy}</var>
</assign>
<msg timestamp="20170708 15:50:23.834" level="INFO">${policy} = 1</msg>
<status status="PASS" endtime="20170708 15:50:23.834" starttime="20170708 15:50:23.834"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${policy}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20170708 15:50:23.835" level="INFO">${value} = {u'data': 1}</msg>
<status status="PASS" endtime="20170708 15:50:23.835" starttime="20170708 15:50:23.834"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${BMC_UPD_ATTR}</arg>
<arg>preserve_network_settings</arg>
<arg>data=${value}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 15:50:23.836" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc</msg>
<status status="PASS" endtime="20170708 15:50:23.836" starttime="20170708 15:50:23.836"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 15:50:23.839" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 15:50:23.840" starttime="20170708 15:50:23.838"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 15:50:23.840" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 15:50:23.840" starttime="20170708 15:50:23.840"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 15:50:23.841" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 15:50:23.841" starttime="20170708 15:50:23.841"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 15:50:23.842" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 15:50:23.842" starttime="20170708 15:50:23.841"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 15:50:24.036" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170708 15:50:24.036" starttime="20170708 15:50:23.842"></status>
</kw>
<msg timestamp="20170708 15:50:24.036" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 15:50:24.036" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:50:24.036" starttime="20170708 15:50:23.842"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 15:50:24.037" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:50:24.037" starttime="20170708 15:50:24.036"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:50:24.038" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:50:24.038" starttime="20170708 15:50:24.037"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:24.038" starttime="20170708 15:50:23.838"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:24.038" starttime="20170708 15:50:23.837"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:24.038" starttime="20170708 15:50:23.837"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 15:50:24.039" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc/attr/preserve_network_settings</msg>
<status status="PASS" endtime="20170708 15:50:24.039" starttime="20170708 15:50:24.038"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 15:50:24.039" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 15:50:24.039" starttime="20170708 15:50:24.039"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:50:24.040" starttime="20170708 15:50:24.039"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170708 15:50:24.041" level="INFO">${msg} = URI:https://9.3.86.161/org/openbmc/control/flash/bmc/attr/preserve_network_settings, method:Put, args:{u'data': {u'data': 1}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170708 15:50:24.042" starttime="20170708 15:50:24.041"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170708 15:50:24.042" level="INFO">URI:https://9.3.86.161/org/openbmc/control/flash/bmc/attr/preserve_network_settings, method:Put, args:{u'data': {u'data': 1}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170708 15:50:24.043" starttime="20170708 15:50:24.042"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:24.043" starttime="20170708 15:50:24.042"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:24.043" starttime="20170708 15:50:24.040"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170708 15:50:24.357" level="INFO">Put Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc/attr/preserve_network_settings, data={"data": 1},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170708 15:50:24.357" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:50:24.357" starttime="20170708 15:50:24.043"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170708 15:50:24.359" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170708 15:50:24.359" starttime="20170708 15:50:24.358"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170708 15:50:24.360" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170708 15:50:24.360" starttime="20170708 15:50:24.359"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:24.360" starttime="20170708 15:50:24.359"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:24.360" starttime="20170708 15:50:24.357"></status>
</kw>
<msg timestamp="20170708 15:50:24.361" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:50:24.361" starttime="20170708 15:50:23.836"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:50:24.362" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:50:24.362" starttime="20170708 15:50:24.362"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170708 15:50:24.363" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170708 15:50:24.363" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170708 15:50:24.363" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170708 15:50:24.363" starttime="20170708 15:50:24.362"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:24.363" starttime="20170708 15:50:23.835"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${BMC_UPD_ATTR}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 15:50:24.367" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 15:50:24.367" starttime="20170708 15:50:24.366"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 15:50:24.368" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 15:50:24.368" starttime="20170708 15:50:24.367"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 15:50:24.368" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 15:50:24.368" starttime="20170708 15:50:24.368"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 15:50:24.369" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 15:50:24.369" starttime="20170708 15:50:24.369"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 15:50:24.548" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170708 15:50:24.548" starttime="20170708 15:50:24.370"></status>
</kw>
<msg timestamp="20170708 15:50:24.548" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 15:50:24.548" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:50:24.548" starttime="20170708 15:50:24.369"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 15:50:24.549" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:50:24.549" starttime="20170708 15:50:24.548"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:50:24.549" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:50:24.549" starttime="20170708 15:50:24.549"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:24.550" starttime="20170708 15:50:24.366"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:24.550" starttime="20170708 15:50:24.365"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:24.550" starttime="20170708 15:50:24.365"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 15:50:24.551" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc</msg>
<status status="PASS" endtime="20170708 15:50:24.551" starttime="20170708 15:50:24.550"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:50:24.552" starttime="20170708 15:50:24.551"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170708 15:50:24.684" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc, headers=None json=None</msg>
<msg timestamp="20170708 15:50:24.684" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:50:24.684" starttime="20170708 15:50:24.552"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:50:24.685" starttime="20170708 15:50:24.685"></status>
</kw>
<msg timestamp="20170708 15:50:24.685" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:50:24.686" starttime="20170708 15:50:24.364"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:50:24.686" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:50:24.687" starttime="20170708 15:50:24.686"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170708 15:50:24.687" level="INFO">To JSON using : content={
  "auto_apply": 0, 
  "clear_persistent_files": 0, 
  "filename": "", 
  "preserve_network_settings": 1, 
  "restore_application_defaults": 0, 
  "status": "Idle", 
  "update_kernel_and_apps": 0
} </msg>
<msg timestamp="20170708 15:50:24.687" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170708 15:50:24.688" level="INFO">${content} = {u'status': u'Idle', u'update_kernel_and_apps': 0, u'clear_persistent_files': 0, u'auto_apply': 0, u'filename': u'', u'preserve_network_settings': 1, u'restore_application_defaults': 0}</msg>
<status status="PASS" endtime="20170708 15:50:24.688" starttime="20170708 15:50:24.687"></status>
</kw>
<msg timestamp="20170708 15:50:24.688" level="FAIL">Replacing variables from keyword return value failed: Resolving variable '${content["data"]}' failed: KeyError: 'data'</msg>
<status status="FAIL" endtime="20170708 15:50:24.688" starttime="20170708 15:50:24.363"></status>
</kw>
<status status="FAIL" endtime="20170708 15:50:24.688" starttime="20170708 15:50:23.833"></status>
</kw>
<msg timestamp="20170708 15:50:24.690" level="FAIL">Replacing variables from keyword return value failed: Resolving variable '${content["data"]}' failed: KeyError: 'data'</msg>
<status status="FAIL" endtime="20170708 15:50:24.690" starttime="20170708 15:50:23.828"></status>
</kw>
<kw type="teardown" name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>FFDC On Test Case Fail</arg>
</arguments>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 15:50:24.703" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 15:50:24.704" starttime="20170708 15:50:24.703"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 15:50:24.704" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 15:50:24.704" starttime="20170708 15:50:24.704"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 15:50:24.705" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 15:50:24.705" starttime="20170708 15:50:24.704"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 15:50:24.705" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 15:50:24.706" starttime="20170708 15:50:24.705"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 15:50:24.931" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170708 15:50:24.931" starttime="20170708 15:50:24.706"></status>
</kw>
<msg timestamp="20170708 15:50:24.931" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 15:50:24.931" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:50:24.931" starttime="20170708 15:50:24.706"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 15:50:24.932" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:50:24.932" starttime="20170708 15:50:24.931"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:50:24.933" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:50:24.933" starttime="20170708 15:50:24.932"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:24.933" starttime="20170708 15:50:24.702"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:24.933" starttime="20170708 15:50:24.702"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:24.933" starttime="20170708 15:50:24.701"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 15:50:24.934" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170708 15:50:24.934" starttime="20170708 15:50:24.933"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:50:24.934" starttime="20170708 15:50:24.934"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170708 15:50:25.001" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170708 15:50:25.001" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:50:25.001" starttime="20170708 15:50:24.935"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:50:25.002" starttime="20170708 15:50:25.001"></status>
</kw>
<msg timestamp="20170708 15:50:25.002" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:50:25.002" starttime="20170708 15:50:24.700"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:50:25.003" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:50:25.003" starttime="20170708 15:50:25.002"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170708 15:50:25.003" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170708 15:50:25.003" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170708 15:50:25.004" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170708 15:50:25.004" starttime="20170708 15:50:25.003"></status>
</kw>
<msg timestamp="20170708 15:50:25.004" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170708 15:50:25.004" starttime="20170708 15:50:24.700"></status>
</kw>
<msg timestamp="20170708 15:50:25.004" level="INFO">${host_state} = Off</msg>
<status status="PASS" endtime="20170708 15:50:25.004" starttime="20170708 15:50:24.699"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg timestamp="20170708 15:50:25.006" level="FAIL">Off != Quiesced</msg>
<status status="FAIL" endtime="20170708 15:50:25.006" starttime="20170708 15:50:25.005"></status>
</kw>
<msg timestamp="20170708 15:50:25.006" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170708 15:50:25.006" starttime="20170708 15:50:25.005"></status>
</kw>
<msg timestamp="20170708 15:50:25.006" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170708 15:50:25.006" starttime="20170708 15:50:24.698"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.3.86.161</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170708 15:50:25.017" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20170708 15:50:25.017" starttime="20170708 15:50:25.017"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170708 15:50:25.022" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20170708 15:50:28.026" level="INFO">${RC} = 0</msg>
<msg timestamp="20170708 15:50:28.026" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=1.39 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.579 ms
64 bytes from 9.3.86.161: icmp_seq...</msg>
<status status="PASS" endtime="20170708 15:50:28.027" starttime="20170708 15:50:25.017"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170708 15:50:28.030" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=1.39 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.579 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.541 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.566 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3000ms
rtt min/avg/max/mdev = 0.541/0.770/1.395/0.361 ms</msg>
<status status="PASS" endtime="20170708 15:50:28.030" starttime="20170708 15:50:28.029"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:50:28.031" starttime="20170708 15:50:28.030"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:28.031" starttime="20170708 15:50:25.016"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170708 15:50:28.050" level="INFO">${cur_time} = 2017-07-08 15:50:28:049593</msg>
<status status="PASS" endtime="20170708 15:50:28.050" starttime="20170708 15:50:28.049"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170708 15:50:28.050" level="INFO">${cur_time} = 20170708155028049593</msg>
<status status="PASS" endtime="20170708 15:50:28.050" starttime="20170708 15:50:28.050"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:28.051" starttime="20170708 15:50:28.048"></status>
</kw>
<msg timestamp="20170708 15:50:28.055" level="INFO">${FFDC_TIME} = 20170708155028049593</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170708 15:50:28.057" level="INFO">${suite_name} = UpdateBmc</msg>
<status status="PASS" endtime="20170708 15:50:28.057" starttime="20170708 15:50:28.056"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170708 15:50:28.057" level="INFO">${suite_name} = 20170708155028049593_UpdateBmc</msg>
<status status="PASS" endtime="20170708 15:50:28.057" starttime="20170708 15:50:28.057"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170708 15:50:28.058" level="INFO">${test_name} = InitiateCodeUpdateBMC</msg>
<status status="PASS" endtime="20170708 15:50:28.058" starttime="20170708 15:50:28.058"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170708 15:50:28.059" level="INFO">${test_name} = 20170708155028049593_InitiateCodeUpdateBMC</msg>
<status status="PASS" endtime="20170708 15:50:28.059" starttime="20170708 15:50:28.058"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:28.059" starttime="20170708 15:50:28.056"></status>
</kw>
<msg timestamp="20170708 15:50:28.066" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/</msg>
<msg timestamp="20170708 15:50:28.071" level="INFO">${FFDC_PREFIX} = 20170708155028049593_</msg>
<msg timestamp="20170708 15:50:28.090" level="INFO">${LOG_PREFIX} = /home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/</arg>
</arguments>
<msg timestamp="20170708 15:50:28.092" html="yes" level="INFO">Created directory '&lt;a href="file:///home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC"&gt;/home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:50:28.092" starttime="20170708 15:50:28.091"></status>
</kw>
<msg timestamp="20170708 15:50:28.098" level="INFO">${FFDC_FILE_PATH} = /home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:50:28.109" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_general.txt"&gt;/home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:50:28.109" starttime="20170708 15:50:28.108"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:28.109" starttime="20170708 15:50:28.108"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:50:28.110" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_general.txt"&gt;/home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:50:28.110" starttime="20170708 15:50:28.110"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:28.110" starttime="20170708 15:50:28.109"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:50:28.111" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_general.txt"&gt;/home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:50:28.112" starttime="20170708 15:50:28.111"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:28.112" starttime="20170708 15:50:28.110"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:50:28.113" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_general.txt"&gt;/home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:50:28.113" starttime="20170708 15:50:28.112"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:28.113" starttime="20170708 15:50:28.112"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:50:28.114" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_general.txt"&gt;/home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:50:28.114" starttime="20170708 15:50:28.114"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:28.114" starttime="20170708 15:50:28.113"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:50:28.115" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_general.txt"&gt;/home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:50:28.116" starttime="20170708 15:50:28.115"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:28.116" starttime="20170708 15:50:28.115"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:50:28.119" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_general.txt"&gt;/home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:50:28.119" starttime="20170708 15:50:28.117"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:28.120" starttime="20170708 15:50:28.116"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:50:28.121" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_general.txt"&gt;/home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:50:28.121" starttime="20170708 15:50:28.121"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:28.121" starttime="20170708 15:50:28.120"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:50:28.122" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_general.txt"&gt;/home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:50:28.122" starttime="20170708 15:50:28.122"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:28.122" starttime="20170708 15:50:28.121"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:50:28.124" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_general.txt"&gt;/home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:50:28.124" starttime="20170708 15:50:28.124"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:28.124" starttime="20170708 15:50:28.123"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:50:28.125" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_general.txt"&gt;/home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:50:28.125" starttime="20170708 15:50:28.125"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:28.125" starttime="20170708 15:50:28.124"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:50:28.127" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_general.txt"&gt;/home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:50:28.127" starttime="20170708 15:50:28.126"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:28.127" starttime="20170708 15:50:28.125"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:50:28.128" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_general.txt"&gt;/home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:50:28.128" starttime="20170708 15:50:28.128"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:28.128" starttime="20170708 15:50:28.127"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170708 15:50:28.130" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170708 15:50:28.130" starttime="20170708 15:50:28.130"></status>
</kw>
<msg timestamp="20170708 15:50:28.130" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170708 15:50:28.131" starttime="20170708 15:50:28.129"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:50:28.132" starttime="20170708 15:50:28.131"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:28.132" starttime="20170708 15:50:28.131"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170708 15:50:28.133" starttime="20170708 15:50:28.132"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170708 15:50:28.134" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170708 15:50:28.134" starttime="20170708 15:50:28.133"></status>
</kw>
<msg timestamp="20170708 15:50:28.134" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170708 15:50:28.134" starttime="20170708 15:50:28.133"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:50:28.136" starttime="20170708 15:50:28.136"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:28.136" starttime="20170708 15:50:28.135"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:28.136" starttime="20170708 15:50:28.134"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170708 15:50:28.137" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170708 15:50:29.845" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170708 15:50:29.846" starttime="20170708 15:50:28.136"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:29.846" starttime="20170708 15:50:28.129"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170708 15:50:29.846" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170708 15:50:29.923" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170708 15:50:29.923" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170708 15:50:29.923" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170708 15:50:29.923" starttime="20170708 15:50:29.846"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170708 15:50:29.924" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170708 15:50:29.924" starttime="20170708 15:50:29.924"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170708 15:50:29.924" level="INFO">Length is 11</msg>
<status status="PASS" endtime="20170708 15:50:29.924" starttime="20170708 15:50:29.924"></status>
</kw>
<msg timestamp="20170708 15:50:29.925" level="INFO">${model_name} = Witherspoon</msg>
<status status="PASS" endtime="20170708 15:50:29.925" starttime="20170708 15:50:28.128"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:50:29.926" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_general.txt"&gt;/home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:50:29.926" starttime="20170708 15:50:29.926"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:29.926" starttime="20170708 15:50:29.925"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:29.926" starttime="20170708 15:50:28.123"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:50:29.928" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_general.txt"&gt;/home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:50:29.928" starttime="20170708 15:50:29.927"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:29.928" starttime="20170708 15:50:29.927"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170708 15:50:29.928" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170708 15:50:29.928" starttime="20170708 15:50:29.928"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:50:29.930" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_general.txt"&gt;/home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:50:29.930" starttime="20170708 15:50:29.930"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:29.930" starttime="20170708 15:50:29.929"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:50:29.931" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_general.txt"&gt;/home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:50:29.931" starttime="20170708 15:50:29.931"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:29.931" starttime="20170708 15:50:29.930"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:29.932" starttime="20170708 15:50:29.929"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:50:29.933" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_general.txt"&gt;/home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:50:29.933" starttime="20170708 15:50:29.932"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:29.933" starttime="20170708 15:50:29.932"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:50:29.934" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_general.txt"&gt;/home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:50:29.934" starttime="20170708 15:50:29.934"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:29.935" starttime="20170708 15:50:29.933"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:29.935" starttime="20170708 15:50:29.932"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:50:29.936" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_general.txt"&gt;/home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:50:29.936" starttime="20170708 15:50:29.936"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:29.936" starttime="20170708 15:50:29.935"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:50:29.937" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_general.txt"&gt;/home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:50:29.937" starttime="20170708 15:50:29.937"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:29.937" starttime="20170708 15:50:29.936"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:29.937" starttime="20170708 15:50:29.935"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:29.937" starttime="20170708 15:50:29.928"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:50:29.939" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_general.txt"&gt;/home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:50:29.939" starttime="20170708 15:50:29.938"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:29.939" starttime="20170708 15:50:29.938"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:29.939" starttime="20170708 15:50:28.107"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170708 15:50:29.945" level="INFO">@{entries} = [ BMC LOGS ]</msg>
<status status="PASS" endtime="20170708 15:50:29.945" starttime="20170708 15:50:29.944"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg timestamp="20170708 15:50:29.946" level="INFO">@{method_list} = [ ('FFDC Generic Report', 'BMC FFDC Manifest') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('Core Files', 'SCP Coredump Files') | ('BMC Specific Files', 'BMC FFDC Files') | ('SEL Log', 'Collect ...</msg>
<status status="PASS" endtime="20170708 15:50:29.946" starttime="20170708 15:50:29.946"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw name="Get Ffdc Method Desc" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:50:29.947" starttime="20170708 15:50:29.947"></status>
</kw>
<msg timestamp="20170708 15:50:29.947" level="INFO">@{ffdc_function_list} = [ FFDC Generic Report | Get Request FFDC | Core Files | BMC Specific Files | SEL Log | OS FFDC ]</msg>
<status status="PASS" endtime="20170708 15:50:29.947" starttime="20170708 15:50:29.946"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:50:29.949" starttime="20170708 15:50:29.949"></status>
</kw>
<msg timestamp="20170708 15:50:29.950" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 15:50:29.950" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170708 15:50:29.950" starttime="20170708 15:50:29.949"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170708 15:50:29.950" starttime="20170708 15:50:29.950"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170708 15:50:29.966" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170708 15:50:29.966" starttime="20170708 15:50:29.966"></status>
</kw>
<msg timestamp="20170708 15:50:29.966" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170708 15:50:29.966" starttime="20170708 15:50:29.965"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:50:29.967" starttime="20170708 15:50:29.967"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:29.967" starttime="20170708 15:50:29.967"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170708 15:50:29.968" starttime="20170708 15:50:29.968"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170708 15:50:29.969" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170708 15:50:29.969" starttime="20170708 15:50:29.969"></status>
</kw>
<msg timestamp="20170708 15:50:29.970" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170708 15:50:29.970" starttime="20170708 15:50:29.968"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:50:29.972" starttime="20170708 15:50:29.972"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:29.972" starttime="20170708 15:50:29.971"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:29.973" starttime="20170708 15:50:29.970"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170708 15:50:29.973" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170708 15:50:31.715" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170708 15:50:31.715" starttime="20170708 15:50:29.973"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:31.715" starttime="20170708 15:50:29.964"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170708 15:50:31.716" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170708 15:50:31.716" starttime="20170708 15:50:31.716"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170708 15:50:31.718" level="INFO">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil  state') ]</msg>
<status status="PASS" endtime="20170708 15:50:31.718" starttime="20170708 15:50:31.717"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170708 15:50:31.724" level="INFO">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status status="PASS" endtime="20170708 15:50:31.724" starttime="20170708 15:50:31.718"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil  state')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:50:31.727" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_general.txt"&gt;/home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:50:31.727" starttime="20170708 15:50:31.727"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:31.727" starttime="20170708 15:50:31.726"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:50:31.728" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_general.txt"&gt;/home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:50:31.729" starttime="20170708 15:50:31.728"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:31.729" starttime="20170708 15:50:31.727"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:50:31.730" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_general.txt"&gt;/home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:50:31.730" starttime="20170708 15:50:31.729"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:31.730" starttime="20170708 15:50:31.729"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:50:31.731" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_general.txt"&gt;/home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:50:31.731" starttime="20170708 15:50:31.731"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:31.731" starttime="20170708 15:50:31.730"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:31.731" starttime="20170708 15:50:31.726"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:31.732" starttime="20170708 15:50:31.725"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170708 15:50:31.732" level="INFO">Executing command '/usr/sbin/obmcutil  state'.</msg>
<msg timestamp="20170708 15:50:33.098" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170708 15:50:33.098" level="INFO">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Off</msg>
<msg timestamp="20170708 15:50:33.098" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170708 15:50:33.098" starttime="20170708 15:50:31.732"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:50:33.105" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_general.txt"&gt;/home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:50:33.105" starttime="20170708 15:50:33.105"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:33.105" starttime="20170708 15:50:33.104"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:33.105" starttime="20170708 15:50:33.099"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:33.106" starttime="20170708 15:50:31.724"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:33.106" starttime="20170708 15:50:31.724"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:33.106" starttime="20170708 15:50:31.724"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:33.106" starttime="20170708 15:50:31.716"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:33.106" starttime="20170708 15:50:31.716"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170708 15:50:33.107" level="INFO">@{cmd_list} = [ ('Build Info', 'cat /etc/version') | ('FW Level', 'cat /etc/os-release') ]</msg>
<status status="PASS" endtime="20170708 15:50:33.107" starttime="20170708 15:50:33.107"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170708 15:50:33.108" level="INFO">${ENTRY_INDEX} = DRIVER INFO</msg>
<status status="PASS" endtime="20170708 15:50:33.108" starttime="20170708 15:50:33.107"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('Build Info', 'cat /etc/version')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:50:33.111" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_general.txt"&gt;/home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:50:33.111" starttime="20170708 15:50:33.111"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:33.111" starttime="20170708 15:50:33.110"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:50:33.113" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_general.txt"&gt;/home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:50:33.113" starttime="20170708 15:50:33.112"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:33.113" starttime="20170708 15:50:33.112"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:50:33.114" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_general.txt"&gt;/home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:50:33.114" starttime="20170708 15:50:33.114"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:33.114" starttime="20170708 15:50:33.113"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:50:33.115" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_general.txt"&gt;/home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:50:33.115" starttime="20170708 15:50:33.115"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:33.116" starttime="20170708 15:50:33.114"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:33.116" starttime="20170708 15:50:33.110"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:33.116" starttime="20170708 15:50:33.109"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170708 15:50:33.116" level="INFO">Executing command 'cat /etc/version'.</msg>
<msg timestamp="20170708 15:50:33.201" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170708 15:50:33.201" level="INFO">${stdout} = </msg>
<msg timestamp="20170708 15:50:33.201" level="INFO">${stderr} = cat: can't open '/etc/version': No such file or directory</msg>
<status status="PASS" endtime="20170708 15:50:33.201" starttime="20170708 15:50:33.116"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:50:33.209" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_general.txt"&gt;/home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:50:33.209" starttime="20170708 15:50:33.208"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:33.209" starttime="20170708 15:50:33.207"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:33.209" starttime="20170708 15:50:33.202"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:33.209" starttime="20170708 15:50:33.108"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:33.209" starttime="20170708 15:50:33.108"></status>
</kw>
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:50:33.212" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_general.txt"&gt;/home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:50:33.213" starttime="20170708 15:50:33.212"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:33.213" starttime="20170708 15:50:33.211"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:50:33.214" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_general.txt"&gt;/home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:50:33.214" starttime="20170708 15:50:33.214"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:33.214" starttime="20170708 15:50:33.213"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:50:33.215" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_general.txt"&gt;/home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:50:33.215" starttime="20170708 15:50:33.215"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:33.216" starttime="20170708 15:50:33.214"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:50:33.217" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_general.txt"&gt;/home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:50:33.217" starttime="20170708 15:50:33.217"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:33.217" starttime="20170708 15:50:33.216"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:33.217" starttime="20170708 15:50:33.211"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:33.217" starttime="20170708 15:50:33.210"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170708 15:50:33.218" level="INFO">Executing command 'cat /etc/os-release'.</msg>
<msg timestamp="20170708 15:50:33.293" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170708 15:50:33.293" level="INFO">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.7-108"
VERSION_ID="v1.99.7-108-gc34efb9"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Projec...</msg>
<msg timestamp="20170708 15:50:33.293" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170708 15:50:33.293" starttime="20170708 15:50:33.218"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:50:33.300" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_general.txt"&gt;/home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:50:33.300" starttime="20170708 15:50:33.299"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:33.300" starttime="20170708 15:50:33.299"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:33.300" starttime="20170708 15:50:33.294"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:33.300" starttime="20170708 15:50:33.210"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:33.300" starttime="20170708 15:50:33.209"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:33.300" starttime="20170708 15:50:33.108"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:33.300" starttime="20170708 15:50:33.106"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:33.300" starttime="20170708 15:50:33.106"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170708 15:50:33.301" level="INFO">@{cmd_list} = [ ('BMC Uptime', 'uptime') | ('BMC File System Disk Space Usage', 'df -hT') | ('BMC OS', 'uname -a') ]</msg>
<status status="PASS" endtime="20170708 15:50:33.302" starttime="20170708 15:50:33.301"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170708 15:50:33.302" level="INFO">${ENTRY_INDEX} = BMC DATA</msg>
<status status="PASS" endtime="20170708 15:50:33.302" starttime="20170708 15:50:33.302"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:50:33.305" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_general.txt"&gt;/home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:50:33.306" starttime="20170708 15:50:33.305"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:33.306" starttime="20170708 15:50:33.305"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:50:33.307" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_general.txt"&gt;/home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:50:33.307" starttime="20170708 15:50:33.307"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:33.307" starttime="20170708 15:50:33.306"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:50:33.308" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_general.txt"&gt;/home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:50:33.308" starttime="20170708 15:50:33.308"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:33.308" starttime="20170708 15:50:33.307"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:50:33.310" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_general.txt"&gt;/home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:50:33.310" starttime="20170708 15:50:33.309"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:33.310" starttime="20170708 15:50:33.309"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:33.310" starttime="20170708 15:50:33.304"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:33.310" starttime="20170708 15:50:33.304"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170708 15:50:33.311" level="INFO">Executing command 'uptime'.</msg>
<msg timestamp="20170708 15:50:33.395" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170708 15:50:33.395" level="INFO">${stdout} =  15:50:46 up 2 min,  load average: 2.95, 1.45, 0.54</msg>
<msg timestamp="20170708 15:50:33.395" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170708 15:50:33.395" starttime="20170708 15:50:33.310"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:50:33.403" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_general.txt"&gt;/home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:50:33.403" starttime="20170708 15:50:33.402"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:33.403" starttime="20170708 15:50:33.401"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:33.403" starttime="20170708 15:50:33.396"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:33.403" starttime="20170708 15:50:33.303"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:33.403" starttime="20170708 15:50:33.302"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:50:33.407" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_general.txt"&gt;/home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:50:33.407" starttime="20170708 15:50:33.406"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:33.407" starttime="20170708 15:50:33.406"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:50:33.408" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_general.txt"&gt;/home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:50:33.408" starttime="20170708 15:50:33.408"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:33.408" starttime="20170708 15:50:33.407"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:50:33.409" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_general.txt"&gt;/home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:50:33.409" starttime="20170708 15:50:33.409"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:33.410" starttime="20170708 15:50:33.408"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:50:33.411" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_general.txt"&gt;/home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:50:33.411" starttime="20170708 15:50:33.411"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:33.411" starttime="20170708 15:50:33.410"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:33.412" starttime="20170708 15:50:33.405"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:33.412" starttime="20170708 15:50:33.404"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170708 15:50:33.412" level="INFO">Executing command 'df -hT'.</msg>
<msg timestamp="20170708 15:50:33.507" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170708 15:50:33.507" level="INFO">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.2M         0    210.2M   0% /dev
tmpfs                tmpfs         211.1M     37.4...</msg>
<msg timestamp="20170708 15:50:33.507" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170708 15:50:33.507" starttime="20170708 15:50:33.412"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:50:33.515" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_general.txt"&gt;/home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:50:33.515" starttime="20170708 15:50:33.514"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:33.515" starttime="20170708 15:50:33.513"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:33.515" starttime="20170708 15:50:33.508"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:33.515" starttime="20170708 15:50:33.403"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:33.515" starttime="20170708 15:50:33.403"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:50:33.518" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_general.txt"&gt;/home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:50:33.519" starttime="20170708 15:50:33.518"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:33.519" starttime="20170708 15:50:33.518"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:50:33.520" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_general.txt"&gt;/home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:50:33.520" starttime="20170708 15:50:33.520"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:33.520" starttime="20170708 15:50:33.519"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:50:33.521" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_general.txt"&gt;/home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:50:33.521" starttime="20170708 15:50:33.521"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:33.521" starttime="20170708 15:50:33.520"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:50:33.523" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_general.txt"&gt;/home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:50:33.523" starttime="20170708 15:50:33.522"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:33.523" starttime="20170708 15:50:33.522"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:33.523" starttime="20170708 15:50:33.517"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:33.523" starttime="20170708 15:50:33.517"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170708 15:50:33.524" level="INFO">Executing command 'uname -a'.</msg>
<msg timestamp="20170708 15:50:33.575" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170708 15:50:33.575" level="INFO">${stdout} = Linux witherspoon 4.10.17-7858cdff46b6d8aa4a4f88884a0623ff50fb78c9 #1 Sat Jul 8 06:02:17 UTC 2017 armv6l GNU/Linux</msg>
<msg timestamp="20170708 15:50:33.575" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170708 15:50:33.575" starttime="20170708 15:50:33.523"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:50:33.584" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_general.txt"&gt;/home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:50:33.584" starttime="20170708 15:50:33.583"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:33.584" starttime="20170708 15:50:33.582"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:33.584" starttime="20170708 15:50:33.576"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:33.584" starttime="20170708 15:50:33.516"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:33.584" starttime="20170708 15:50:33.516"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:33.584" starttime="20170708 15:50:33.302"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:33.584" starttime="20170708 15:50:33.301"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:33.585" starttime="20170708 15:50:33.300"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:33.585" starttime="20170708 15:50:31.716"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:33.585" starttime="20170708 15:50:29.964"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:33.585" starttime="20170708 15:50:29.951"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:33.585" starttime="20170708 15:50:29.948"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:33.585" starttime="20170708 15:50:29.948"></status>
</kw>
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:50:33.587" starttime="20170708 15:50:33.587"></status>
</kw>
<msg timestamp="20170708 15:50:33.587" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 15:50:33.587" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170708 15:50:33.587" starttime="20170708 15:50:33.586"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170708 15:50:33.588" starttime="20170708 15:50:33.588"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170708 15:50:33.604" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170708 15:50:33.604" starttime="20170708 15:50:33.603"></status>
</kw>
<msg timestamp="20170708 15:50:33.604" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170708 15:50:33.604" starttime="20170708 15:50:33.603"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:50:33.605" starttime="20170708 15:50:33.605"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:33.605" starttime="20170708 15:50:33.604"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170708 15:50:33.606" starttime="20170708 15:50:33.606"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170708 15:50:33.607" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170708 15:50:33.607" starttime="20170708 15:50:33.607"></status>
</kw>
<msg timestamp="20170708 15:50:33.607" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170708 15:50:33.607" starttime="20170708 15:50:33.606"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:50:33.609" starttime="20170708 15:50:33.609"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:33.609" starttime="20170708 15:50:33.608"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:33.609" starttime="20170708 15:50:33.608"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170708 15:50:33.610" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170708 15:50:35.357" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170708 15:50:35.357" starttime="20170708 15:50:33.609"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:35.357" starttime="20170708 15:50:33.602"></status>
</kw>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170708 15:50:35.358" level="INFO">@{entries} = [ GET REQUESTS ]</msg>
<status status="PASS" endtime="20170708 15:50:35.358" starttime="20170708 15:50:35.357"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170708 15:50:35.359" level="INFO">@{cmd_list} = [ ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate') | ('BMC_sensor_list', '/org/openbmc/sensors/enumerate') | ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate') | ('BMC_led', '/o...</msg>
<status status="PASS" endtime="20170708 15:50:35.359" starttime="20170708 15:50:35.359"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170708 15:50:35.360" level="INFO">${logpath} = /home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_elog.txt</msg>
<status status="PASS" endtime="20170708 15:50:35.360" starttime="20170708 15:50:35.360"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 15:50:35.363" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 15:50:35.364" starttime="20170708 15:50:35.363"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 15:50:35.364" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 15:50:35.365" starttime="20170708 15:50:35.364"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 15:50:35.365" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 15:50:35.365" starttime="20170708 15:50:35.365"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 15:50:35.366" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 15:50:35.366" starttime="20170708 15:50:35.365"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 15:50:35.556" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170708 15:50:35.556" starttime="20170708 15:50:35.367"></status>
</kw>
<msg timestamp="20170708 15:50:35.557" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 15:50:35.557" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:50:35.557" starttime="20170708 15:50:35.366"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 15:50:35.557" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:50:35.557" starttime="20170708 15:50:35.557"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:50:35.558" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:50:35.558" starttime="20170708 15:50:35.558"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:35.558" starttime="20170708 15:50:35.362"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:35.558" starttime="20170708 15:50:35.362"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:35.558" starttime="20170708 15:50:35.361"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 15:50:35.559" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status status="PASS" endtime="20170708 15:50:35.559" starttime="20170708 15:50:35.559"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:50:35.560" starttime="20170708 15:50:35.559"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170708 15:50:35.616" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg timestamp="20170708 15:50:35.616" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170708 15:50:35.616" starttime="20170708 15:50:35.560"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:50:35.617" starttime="20170708 15:50:35.617"></status>
</kw>
<msg timestamp="20170708 15:50:35.617" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170708 15:50:35.617" starttime="20170708 15:50:35.361"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:50:35.619" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170708 15:50:35.619" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170708 15:50:35.619" starttime="20170708 15:50:35.618"></status>
</kw>
<msg timestamp="20170708 15:50:35.619" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170708 15:50:35.619" starttime="20170708 15:50:35.618"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170708 15:50:35.621" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170708 15:50:35.621" starttime="20170708 15:50:35.621"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:35.621" starttime="20170708 15:50:35.620"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:35.621" starttime="20170708 15:50:35.359"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170708 15:50:35.623" level="INFO">${logpath} = /home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_sensor_list.txt</msg>
<status status="PASS" endtime="20170708 15:50:35.623" starttime="20170708 15:50:35.622"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 15:50:35.627" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 15:50:35.628" starttime="20170708 15:50:35.627"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 15:50:35.629" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 15:50:35.629" starttime="20170708 15:50:35.628"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 15:50:35.630" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 15:50:35.630" starttime="20170708 15:50:35.629"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 15:50:35.631" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 15:50:35.631" starttime="20170708 15:50:35.630"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 15:50:35.818" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170708 15:50:35.818" starttime="20170708 15:50:35.632"></status>
</kw>
<msg timestamp="20170708 15:50:35.818" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 15:50:35.818" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:50:35.818" starttime="20170708 15:50:35.631"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 15:50:35.819" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:50:35.819" starttime="20170708 15:50:35.819"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:50:35.820" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:50:35.820" starttime="20170708 15:50:35.819"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:35.820" starttime="20170708 15:50:35.626"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:35.820" starttime="20170708 15:50:35.625"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:35.820" starttime="20170708 15:50:35.624"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 15:50:35.821" level="INFO">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status status="PASS" endtime="20170708 15:50:35.821" starttime="20170708 15:50:35.821"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:50:35.822" starttime="20170708 15:50:35.821"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170708 15:50:36.076" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None json=None</msg>
<msg timestamp="20170708 15:50:36.076" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:50:36.076" starttime="20170708 15:50:35.822"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:50:36.077" starttime="20170708 15:50:36.077"></status>
</kw>
<msg timestamp="20170708 15:50:36.077" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:50:36.077" starttime="20170708 15:50:35.623"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:50:36.079" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:50:36.079" starttime="20170708 15:50:36.078"></status>
</kw>
<msg timestamp="20170708 15:50:36.079" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170708 15:50:36.079" starttime="20170708 15:50:36.078"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170708 15:50:36.080" starttime="20170708 15:50:36.080"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170708 15:50:36.081" level="INFO">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 3
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/PowerSupplyDerating": {
      "error": 0, 
      "units": "", 
      "value": 10
    }, 
    "/org/openbmc/sensors/host/PowerSupplyRedundancy": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/TurboAllowed": {
      "error": 0, 
      "units": "", 
      "value": 0
    }, 
    "/org/openbmc/sensors/host/cpu0/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/cpu1/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/powercap": {
      "error": 0, 
      "units": "", 
      "value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170708 15:50:36.082" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170708 15:50:36.082" level="INFO">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/host/BootCount": {
            "error": 0,
            "units": "",
            "value": 3
        },
        "/org/openbmc/sensors/host/BootProgress": {
...</msg>
<status status="PASS" endtime="20170708 15:50:36.082" starttime="20170708 15:50:36.081"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:50:36.083" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_sensor_list.txt"&gt;/home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:50:36.083" starttime="20170708 15:50:36.083"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:36.083" starttime="20170708 15:50:36.082"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:36.083" starttime="20170708 15:50:35.621"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170708 15:50:36.084" level="INFO">${logpath} = /home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_inventory.txt</msg>
<status status="PASS" endtime="20170708 15:50:36.084" starttime="20170708 15:50:36.084"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 15:50:36.087" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 15:50:36.088" starttime="20170708 15:50:36.087"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 15:50:36.089" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 15:50:36.089" starttime="20170708 15:50:36.088"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 15:50:36.090" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 15:50:36.090" starttime="20170708 15:50:36.089"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 15:50:36.091" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 15:50:36.091" starttime="20170708 15:50:36.090"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 15:50:36.315" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170708 15:50:36.315" starttime="20170708 15:50:36.092"></status>
</kw>
<msg timestamp="20170708 15:50:36.315" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 15:50:36.315" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:50:36.315" starttime="20170708 15:50:36.091"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 15:50:36.316" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:50:36.316" starttime="20170708 15:50:36.316"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:50:36.317" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:50:36.317" starttime="20170708 15:50:36.316"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:36.317" starttime="20170708 15:50:36.086"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:36.317" starttime="20170708 15:50:36.086"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:36.317" starttime="20170708 15:50:36.085"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 15:50:36.318" level="INFO">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status status="PASS" endtime="20170708 15:50:36.318" starttime="20170708 15:50:36.317"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:50:36.318" starttime="20170708 15:50:36.318"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170708 15:50:36.506" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg timestamp="20170708 15:50:36.507" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:50:36.507" starttime="20170708 15:50:36.319"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:50:36.507" starttime="20170708 15:50:36.507"></status>
</kw>
<msg timestamp="20170708 15:50:36.508" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:50:36.508" starttime="20170708 15:50:36.084"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:50:36.509" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:50:36.509" starttime="20170708 15:50:36.508"></status>
</kw>
<msg timestamp="20170708 15:50:36.509" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170708 15:50:36.509" starttime="20170708 15:50:36.508"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170708 15:50:36.510" starttime="20170708 15:50:36.509"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170708 15:50:36.510" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 1
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH051", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "00:00:00:00:00:00", 
      "Present": 1, 
      "PrettyName": ""
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170708 15:50:36.510" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170708 15:50:36.511" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system/chassis": {
            "AirCooled": 1,
            "WaterCooled": 1
        },
        "/xyz/openbmc_project/inventory/system/chassis/mo...</msg>
<status status="PASS" endtime="20170708 15:50:36.511" starttime="20170708 15:50:36.510"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:50:36.512" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_inventory.txt"&gt;/home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:50:36.512" starttime="20170708 15:50:36.512"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:36.512" starttime="20170708 15:50:36.511"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:36.512" starttime="20170708 15:50:36.083"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170708 15:50:36.513" level="INFO">${logpath} = /home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_led.txt</msg>
<status status="PASS" endtime="20170708 15:50:36.513" starttime="20170708 15:50:36.513"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 15:50:36.516" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 15:50:36.516" starttime="20170708 15:50:36.516"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 15:50:36.517" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 15:50:36.517" starttime="20170708 15:50:36.517"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 15:50:36.518" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 15:50:36.518" starttime="20170708 15:50:36.517"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 15:50:36.519" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 15:50:36.519" starttime="20170708 15:50:36.518"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 15:50:36.706" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170708 15:50:36.707" starttime="20170708 15:50:36.519"></status>
</kw>
<msg timestamp="20170708 15:50:36.707" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 15:50:36.707" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:50:36.707" starttime="20170708 15:50:36.519"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 15:50:36.707" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:50:36.708" starttime="20170708 15:50:36.707"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:50:36.708" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:50:36.708" starttime="20170708 15:50:36.708"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:36.708" starttime="20170708 15:50:36.515"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:36.708" starttime="20170708 15:50:36.515"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:36.709" starttime="20170708 15:50:36.514"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 15:50:36.709" level="INFO">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status status="PASS" endtime="20170708 15:50:36.709" starttime="20170708 15:50:36.709"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:50:36.710" starttime="20170708 15:50:36.710"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170708 15:50:36.763" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None json=None</msg>
<msg timestamp="20170708 15:50:36.763" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170708 15:50:36.763" starttime="20170708 15:50:36.710"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:50:36.764" starttime="20170708 15:50:36.764"></status>
</kw>
<msg timestamp="20170708 15:50:36.764" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170708 15:50:36.764" starttime="20170708 15:50:36.513"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:50:36.765" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170708 15:50:36.765" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170708 15:50:36.766" starttime="20170708 15:50:36.765"></status>
</kw>
<msg timestamp="20170708 15:50:36.766" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170708 15:50:36.766" starttime="20170708 15:50:36.765"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170708 15:50:36.767" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170708 15:50:36.767" starttime="20170708 15:50:36.767"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:36.767" starttime="20170708 15:50:36.766"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:36.767" starttime="20170708 15:50:36.512"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170708 15:50:36.768" level="INFO">${logpath} = /home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_record_log.txt</msg>
<status status="PASS" endtime="20170708 15:50:36.768" starttime="20170708 15:50:36.767"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 15:50:36.771" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 15:50:36.771" starttime="20170708 15:50:36.770"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 15:50:36.772" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 15:50:36.772" starttime="20170708 15:50:36.771"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 15:50:36.772" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 15:50:36.772" starttime="20170708 15:50:36.772"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 15:50:36.773" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 15:50:36.773" starttime="20170708 15:50:36.773"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 15:50:36.970" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170708 15:50:36.970" starttime="20170708 15:50:36.774"></status>
</kw>
<msg timestamp="20170708 15:50:36.971" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 15:50:36.971" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:50:36.971" starttime="20170708 15:50:36.773"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 15:50:36.971" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:50:36.971" starttime="20170708 15:50:36.971"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:50:36.972" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:50:36.972" starttime="20170708 15:50:36.972"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:36.972" starttime="20170708 15:50:36.770"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:36.972" starttime="20170708 15:50:36.769"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:36.972" starttime="20170708 15:50:36.769"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 15:50:36.973" level="INFO">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status status="PASS" endtime="20170708 15:50:36.973" starttime="20170708 15:50:36.973"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:50:36.974" starttime="20170708 15:50:36.973"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170708 15:50:37.024" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None json=None</msg>
<msg timestamp="20170708 15:50:37.024" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170708 15:50:37.024" starttime="20170708 15:50:36.974"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:50:37.025" starttime="20170708 15:50:37.025"></status>
</kw>
<msg timestamp="20170708 15:50:37.025" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170708 15:50:37.025" starttime="20170708 15:50:36.768"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:50:37.026" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170708 15:50:37.027" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170708 15:50:37.027" starttime="20170708 15:50:37.026"></status>
</kw>
<msg timestamp="20170708 15:50:37.027" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170708 15:50:37.027" starttime="20170708 15:50:37.026"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170708 15:50:37.028" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170708 15:50:37.028" starttime="20170708 15:50:37.028"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:37.028" starttime="20170708 15:50:37.027"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:37.028" starttime="20170708 15:50:36.767"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:37.028" starttime="20170708 15:50:35.359"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:37.028" starttime="20170708 15:50:35.358"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:37.028" starttime="20170708 15:50:35.358"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:37.028" starttime="20170708 15:50:35.358"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:37.028" starttime="20170708 15:50:33.602"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:37.029" starttime="20170708 15:50:33.588"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:37.029" starttime="20170708 15:50:33.585"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:37.029" starttime="20170708 15:50:33.585"></status>
</kw>
<kw type="foritem" name="${method} = ('Core Files', 'SCP Coredump Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:50:37.031" starttime="20170708 15:50:37.031"></status>
</kw>
<msg timestamp="20170708 15:50:37.031" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 15:50:37.031" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170708 15:50:37.031" starttime="20170708 15:50:37.030"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170708 15:50:37.032" starttime="20170708 15:50:37.032"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170708 15:50:37.048" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170708 15:50:37.048" starttime="20170708 15:50:37.047"></status>
</kw>
<msg timestamp="20170708 15:50:37.048" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170708 15:50:37.048" starttime="20170708 15:50:37.047"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:50:37.049" starttime="20170708 15:50:37.049"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:37.049" starttime="20170708 15:50:37.048"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170708 15:50:37.050" starttime="20170708 15:50:37.049"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170708 15:50:37.051" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170708 15:50:37.051" starttime="20170708 15:50:37.051"></status>
</kw>
<msg timestamp="20170708 15:50:37.051" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170708 15:50:37.051" starttime="20170708 15:50:37.050"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:50:37.053" starttime="20170708 15:50:37.052"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:37.053" starttime="20170708 15:50:37.052"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:37.053" starttime="20170708 15:50:37.051"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170708 15:50:37.054" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170708 15:50:38.763" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170708 15:50:38.763" starttime="20170708 15:50:37.054"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:38.763" starttime="20170708 15:50:37.046"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
</assign>
<msg timestamp="20170708 15:50:38.764" level="INFO">Executing command 'ls /tmp/core_*'.</msg>
<msg timestamp="20170708 15:50:38.812" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170708 15:50:38.812" level="INFO">${core_files} = </msg>
<status status="PASS" endtime="20170708 15:50:38.812" starttime="20170708 15:50:38.763"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg timestamp="20170708 15:50:38.812" level="INFO">@{core_list} = [ ]</msg>
<status status="PASS" endtime="20170708 15:50:38.812" starttime="20170708 15:50:38.812"></status>
</kw>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20170708 15:50:38.833" starttime="20170708 15:50:38.813"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:50:39.473" starttime="20170708 15:50:38.834"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:39.473" starttime="20170708 15:50:38.833"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:39.473" starttime="20170708 15:50:38.813"></status>
</kw>
<kw type="for" name="${index} IN [ @{core_list} ]">
<status status="PASS" endtime="20170708 15:50:39.474" starttime="20170708 15:50:39.473"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:39.474" starttime="20170708 15:50:37.046"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:39.474" starttime="20170708 15:50:37.032"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:39.474" starttime="20170708 15:50:37.029"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:39.474" starttime="20170708 15:50:37.029"></status>
</kw>
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:50:39.476" starttime="20170708 15:50:39.476"></status>
</kw>
<msg timestamp="20170708 15:50:39.476" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 15:50:39.476" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170708 15:50:39.476" starttime="20170708 15:50:39.475"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170708 15:50:39.477" starttime="20170708 15:50:39.477"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170708 15:50:39.492" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170708 15:50:39.493" starttime="20170708 15:50:39.492"></status>
</kw>
<msg timestamp="20170708 15:50:39.493" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170708 15:50:39.493" starttime="20170708 15:50:39.492"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:50:39.494" starttime="20170708 15:50:39.494"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:39.494" starttime="20170708 15:50:39.493"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170708 15:50:39.495" starttime="20170708 15:50:39.494"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170708 15:50:39.496" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170708 15:50:39.496" starttime="20170708 15:50:39.495"></status>
</kw>
<msg timestamp="20170708 15:50:39.496" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170708 15:50:39.496" starttime="20170708 15:50:39.495"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:50:39.498" starttime="20170708 15:50:39.497"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:39.498" starttime="20170708 15:50:39.497"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:39.498" starttime="20170708 15:50:39.496"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170708 15:50:39.498" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170708 15:50:41.297" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170708 15:50:41.298" starttime="20170708 15:50:39.498"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:41.298" starttime="20170708 15:50:39.491"></status>
</kw>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170708 15:50:41.299" level="INFO">@{entries} = [ BMC FILES ]</msg>
<status status="PASS" endtime="20170708 15:50:41.299" starttime="20170708 15:50:41.298"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170708 15:50:41.300" level="INFO">@{cmd_list} = [ ('BMC_proc_list', 'top -n 1 -b') | ('BMC_dmesg', 'dmesg') | ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_journalctl', 'journalctl --no-pager') ]</msg>
<status status="PASS" endtime="20170708 15:50:41.300" starttime="20170708 15:50:41.300"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170708 15:50:41.301" level="INFO">${logpath} = /home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_proc_list.txt</msg>
<status status="PASS" endtime="20170708 15:50:41.301" starttime="20170708 15:50:41.301"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:50:41.303" starttime="20170708 15:50:41.303"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170708 15:50:41.304" level="INFO">Executing command 'top -n 1 -b'.</msg>
<msg timestamp="20170708 15:50:41.613" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170708 15:50:41.613" level="INFO">${stdout} = Mem: 175440K used, 256860K free, 38372K shrd, 10836K buff, 73980K cached
CPU:   0% usr  23% sys   0% nic  76% idle   0% io   0% irq   0% sirq
Load average: 2.57 1.42 0.55 1/148 1167
  PID  PPID USER  ...</msg>
<msg timestamp="20170708 15:50:41.613" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170708 15:50:41.613" starttime="20170708 15:50:41.304"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:50:41.622" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_proc_list.txt"&gt;/home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:50:41.623" starttime="20170708 15:50:41.621"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:41.623" starttime="20170708 15:50:41.620"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:41.623" starttime="20170708 15:50:41.614"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:41.623" starttime="20170708 15:50:41.302"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:41.623" starttime="20170708 15:50:41.300"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170708 15:50:41.624" level="INFO">${logpath} = /home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_dmesg.txt</msg>
<status status="PASS" endtime="20170708 15:50:41.624" starttime="20170708 15:50:41.623"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:50:41.625" starttime="20170708 15:50:41.625"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170708 15:50:41.626" level="INFO">Executing command 'dmesg'.</msg>
<msg timestamp="20170708 15:50:41.743" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170708 15:50:41.743" level="INFO">${stdout} = [    0.000000] Booting Linux on physical CPU 0x0
[    0.000000] Linux version 4.10.17-7858cdff46b6d8aa4a4f88884a0623ff50fb78c9 (jenkins@openbmc-builder1) (gcc version 6.2.0 (GCC) ) #1 Sat Jul 8 06:02:...</msg>
<msg timestamp="20170708 15:50:41.743" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170708 15:50:41.743" starttime="20170708 15:50:41.626"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:50:41.753" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_dmesg.txt"&gt;/home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:50:41.753" starttime="20170708 15:50:41.752"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:41.753" starttime="20170708 15:50:41.751"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:41.753" starttime="20170708 15:50:41.744"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:41.754" starttime="20170708 15:50:41.624"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:41.754" starttime="20170708 15:50:41.623"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170708 15:50:41.755" level="INFO">${logpath} = /home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_meminfo.txt</msg>
<status status="PASS" endtime="20170708 15:50:41.755" starttime="20170708 15:50:41.754"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:50:41.757" starttime="20170708 15:50:41.756"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170708 15:50:41.758" level="INFO">Executing command 'cat /proc/meminfo'.</msg>
<msg timestamp="20170708 15:50:41.834" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170708 15:50:41.835" level="INFO">${stdout} = MemTotal:         432300 kB
MemFree:          256828 kB
MemAvailable:     300024 kB
Buffers:           10836 kB
Cached:            73984 kB
SwapCached:            0 kB
Active:           109224 kB
Inac...</msg>
<msg timestamp="20170708 15:50:41.835" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170708 15:50:41.835" starttime="20170708 15:50:41.757"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:50:41.843" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_meminfo.txt"&gt;/home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:50:41.843" starttime="20170708 15:50:41.842"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:41.843" starttime="20170708 15:50:41.841"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:41.843" starttime="20170708 15:50:41.835"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:41.843" starttime="20170708 15:50:41.755"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:41.843" starttime="20170708 15:50:41.754"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170708 15:50:41.844" level="INFO">${logpath} = /home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_procinfo.txt</msg>
<status status="PASS" endtime="20170708 15:50:41.844" starttime="20170708 15:50:41.844"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:50:41.845" starttime="20170708 15:50:41.845"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170708 15:50:41.846" level="INFO">Executing command 'cat /proc/cpuinfo'.</msg>
<msg timestamp="20170708 15:50:41.952" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170708 15:50:41.953" level="INFO">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<msg timestamp="20170708 15:50:41.953" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170708 15:50:41.953" starttime="20170708 15:50:41.846"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:50:41.960" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_procinfo.txt"&gt;/home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:50:41.960" starttime="20170708 15:50:41.959"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:41.960" starttime="20170708 15:50:41.958"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:41.961" starttime="20170708 15:50:41.953"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:41.961" starttime="20170708 15:50:41.844"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:41.961" starttime="20170708 15:50:41.843"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170708 15:50:41.961" level="INFO">${logpath} = /home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_journalctl.txt</msg>
<status status="PASS" endtime="20170708 15:50:41.962" starttime="20170708 15:50:41.961"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:50:41.963" starttime="20170708 15:50:41.963"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170708 15:50:41.963" level="INFO">Executing command 'journalctl --no-pager'.</msg>
<msg timestamp="20170708 15:50:43.032" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170708 15:50:43.034" level="INFO">${stdout} = -- Logs begin at Sat 2017-07-08 15:48:50 UTC, end at Sat 2017-07-08 15:50:53 UTC. --
Jul 08 15:48:50 witherspoon kernel: Booting Linux on physical CPU 0x0
Jul 08 15:48:50 witherspoon kernel: Linux ver...</msg>
<msg timestamp="20170708 15:50:43.034" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170708 15:50:43.034" starttime="20170708 15:50:41.963"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:50:43.042" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_journalctl.txt"&gt;/home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/20170708155028049593_BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:50:43.042" starttime="20170708 15:50:43.040"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:43.042" starttime="20170708 15:50:43.039"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:43.042" starttime="20170708 15:50:43.034"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:43.043" starttime="20170708 15:50:41.962"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:43.043" starttime="20170708 15:50:41.961"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:43.043" starttime="20170708 15:50:41.300"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:43.043" starttime="20170708 15:50:41.299"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:43.043" starttime="20170708 15:50:41.299"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:43.043" starttime="20170708 15:50:41.299"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:43.043" starttime="20170708 15:50:39.491"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:43.043" starttime="20170708 15:50:39.477"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:43.044" starttime="20170708 15:50:39.474"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:43.044" starttime="20170708 15:50:39.474"></status>
</kw>
<kw type="foritem" name="${method} = ('SEL Log', 'Collect eSEL Log')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:50:43.047" starttime="20170708 15:50:43.046"></status>
</kw>
<msg timestamp="20170708 15:50:43.047" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 15:50:43.047" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170708 15:50:43.047" starttime="20170708 15:50:43.046"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170708 15:50:43.048" starttime="20170708 15:50:43.047"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 15:50:43.068" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 15:50:43.068" starttime="20170708 15:50:43.067"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 15:50:43.069" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 15:50:43.069" starttime="20170708 15:50:43.069"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 15:50:43.070" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 15:50:43.071" starttime="20170708 15:50:43.070"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 15:50:43.071" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 15:50:43.071" starttime="20170708 15:50:43.071"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 15:50:43.294" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170708 15:50:43.294" starttime="20170708 15:50:43.072"></status>
</kw>
<msg timestamp="20170708 15:50:43.294" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 15:50:43.294" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:50:43.294" starttime="20170708 15:50:43.072"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 15:50:43.295" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:50:43.295" starttime="20170708 15:50:43.294"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:50:43.295" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:50:43.295" starttime="20170708 15:50:43.295"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:43.296" starttime="20170708 15:50:43.066"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:43.296" starttime="20170708 15:50:43.065"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:43.296" starttime="20170708 15:50:43.064"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 15:50:43.296" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status status="PASS" endtime="20170708 15:50:43.296" starttime="20170708 15:50:43.296"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:50:43.297" starttime="20170708 15:50:43.297"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170708 15:50:43.414" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg timestamp="20170708 15:50:43.414" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170708 15:50:43.414" starttime="20170708 15:50:43.297"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:50:43.415" starttime="20170708 15:50:43.415"></status>
</kw>
<msg timestamp="20170708 15:50:43.415" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170708 15:50:43.415" starttime="20170708 15:50:43.063"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:50:43.416" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170708 15:50:43.417" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170708 15:50:43.417" starttime="20170708 15:50:43.416"></status>
</kw>
<msg timestamp="20170708 15:50:43.417" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170708 15:50:43.417" starttime="20170708 15:50:43.416"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg timestamp="20170708 15:50:43.417" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170708 15:50:43.418" starttime="20170708 15:50:43.417"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:43.418" starttime="20170708 15:50:43.063"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:43.418" starttime="20170708 15:50:43.048"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:43.418" starttime="20170708 15:50:43.044"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:43.418" starttime="20170708 15:50:43.044"></status>
</kw>
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:50:43.420" starttime="20170708 15:50:43.420"></status>
</kw>
<msg timestamp="20170708 15:50:43.420" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 15:50:43.420" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170708 15:50:43.420" starttime="20170708 15:50:43.419"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170708 15:50:43.421" starttime="20170708 15:50:43.421"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg timestamp="20170708 15:50:43.436" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170708 15:50:43.436" starttime="20170708 15:50:43.436"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:43.436" starttime="20170708 15:50:43.435"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:43.436" starttime="20170708 15:50:43.421"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:43.437" starttime="20170708 15:50:43.418"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:43.437" starttime="20170708 15:50:43.418"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:43.437" starttime="20170708 15:50:29.947"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:43.437" starttime="20170708 15:50:29.945"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:43.437" starttime="20170708 15:50:29.945"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:43.437" starttime="20170708 15:50:29.945"></status>
</kw>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20170708 15:50:43.596" starttime="20170708 15:50:43.437"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:43.596" starttime="20170708 15:50:29.944"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:43.597" starttime="20170708 15:50:25.007"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:43.597" starttime="20170708 15:50:25.006"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status status="PASS" endtime="20170708 15:50:43.597" starttime="20170708 15:50:43.597"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170708 15:50:43.599" level="INFO">${FFDC_DIR_PATH_STYLE} = </msg>
<status status="PASS" endtime="20170708 15:50:43.599" starttime="20170708 15:50:43.598"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170708 15:50:43.599" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20170708155028049593_UpdateBmc/20170708155028049593_InitiateCodeUpdateBMC/</msg>
<status status="PASS" endtime="20170708 15:50:43.599" starttime="20170708 15:50:43.599"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status status="PASS" endtime="20170708 15:50:43.601" starttime="20170708 15:50:43.600"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" endtime="20170708 15:50:43.601" starttime="20170708 15:50:43.601"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20170708 15:50:43.602" html="yes" level="INFO">Directory '&lt;a href="file:///home/fspcibld/logs"&gt;/home/fspcibld/logs&lt;/a&gt;' already exists.</msg>
<status status="PASS" endtime="20170708 15:50:43.602" starttime="20170708 15:50:43.602"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170708 15:50:43.603" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20170708 15:50:43.604" starttime="20170708 15:50:43.603"></status>
</kw>
<msg timestamp="20170708 15:50:43.604" level="INFO">${exist} = True</msg>
<status status="PASS" endtime="20170708 15:50:43.604" starttime="20170708 15:50:43.603"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:50:43.604" starttime="20170708 15:50:43.604"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" endtime="20170708 15:50:43.605" starttime="20170708 15:50:43.605"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170708 15:50:43.606" level="INFO">${cur_time} = 2017-07-08 15:50:43:606136</msg>
<status status="PASS" endtime="20170708 15:50:43.606" starttime="20170708 15:50:43.606"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170708 15:50:43.607" level="INFO">${cur_time} = 20170708155043606136</msg>
<status status="PASS" endtime="20170708 15:50:43.607" starttime="20170708 15:50:43.607"></status>
</kw>
<msg timestamp="20170708 15:50:43.607" level="INFO">${cur_time} = 20170708155043606136</msg>
<status status="PASS" endtime="20170708 15:50:43.607" starttime="20170708 15:50:43.605"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20170708 15:50:43.608" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:50:43.608" starttime="20170708 15:50:43.607"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:43.608" starttime="20170708 15:50:43.598"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:43.608" starttime="20170708 15:50:24.698"></status>
</kw>
<status status="PASS" endtime="20170708 15:50:43.608" starttime="20170708 15:50:24.691"></status>
</kw>
<doc>Initiate a code update on the BMC.</doc>
<tags>
<tag>Initiate_Code_Update_BMC</tag>
</tags>
<status status="FAIL" endtime="20170708 15:50:43.609" critical="yes" starttime="20170708 15:47:32.345">Replacing variables from keyword return value failed: Resolving variable '${content["data"]}' failed: KeyError: 'data'</status>
</test>
<doc>Trigger code update to a target BMC.
Execution Method :
python -m robot -v OPENBMC_HOST:&lt;hostname&gt;
-v FILE_PATH:&lt;path/*all.tar&gt; update_bmc.robot

Code update method BMC using REST
Update work flow sequence:
- User input BMC File existence check
- Ping Test and REST authentication
- Set Host Power host setting Policy to RESTORE_LAST_STATE
On reboot this policy would ensure the BMC comes
online and stays at HOST_POWERED_OFF state.
- Issue poweroff
- Prune archived journal logs
- Prepare for Update
- Wait for BMC to come online clean
- Wait for BMC_READY state
- Apply preserve BMC Network setting
- SCP image to BMC
- Activate the flash image
- Warm Reset BMC to activate code
- Wait for BMC to come online time out 30 minutes
- Version check post update
- Identify REST url post update</doc>
<status status="FAIL" endtime="20170708 15:50:43.610" starttime="20170708 15:47:31.539"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="0">Critical Tests</stat>
<stat fail="1" pass="0">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">Initiate_Code_Update_BMC</stat>
</tag>
<suite>
<stat fail="1" id="s1" name="Update Bmc" pass="0">Update Bmc</stat>
</suite>
</statistics>
<errors>
<msg timestamp="20170708 15:47:58.087" level="WARN">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fffa2fcc990&gt;: Failed to establish a new connection: [Errno 111] Connection refused',)': /login</msg>
<msg timestamp="20170708 15:47:58.288" level="WARN">Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fffa2fccad0&gt;: Failed to establish a new connection: [Errno 111] Connection refused',)': /login</msg>
<msg timestamp="20170708 15:47:58.691" level="WARN">Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fffa2fccc50&gt;: Failed to establish a new connection: [Errno 111] Connection refused',)': /login</msg>
<msg timestamp="20170708 15:48:38.727" level="WARN">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fffa8060250&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=20.0)')': /login</msg>
<msg timestamp="20170708 15:48:58.949" level="WARN">Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fffa8060810&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=20.0)')': /login</msg>
</errors>
</robot>
