<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20171108 13:53:27.603" generator="Robot 3.0.2 (Python 2.7.12 on linux2)">
<suite source="/home/fspcibld/openbmc-test-automation/extended/code_update/bmc_code_update.robot" id="s1" name="Bmc Code Update">
<kw type="setup" name="Suite Setup Execution">
<doc>Do code update test case setup.</doc>
<kw name="Delete All Dumps" library="dump_utils">
<doc>Delete all dumps.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${DUMP_ENTRY_URI}list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171108 13:53:28.636" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171108 13:53:28.637" starttime="20171108 13:53:28.636"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171108 13:53:28.638" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171108 13:53:28.638" starttime="20171108 13:53:28.637"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171108 13:53:28.638" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171108 13:53:28.638" starttime="20171108 13:53:28.638"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171108 13:53:28.639" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171108 13:53:28.639" starttime="20171108 13:53:28.639"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171108 13:53:28.837" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171108 13:53:28.837" starttime="20171108 13:53:28.640"></status>
</kw>
<msg timestamp="20171108 13:53:28.837" level="INFO">${status} = PASS</msg>
<msg timestamp="20171108 13:53:28.837" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171108 13:53:28.837" starttime="20171108 13:53:28.639"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171108 13:53:28.838" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171108 13:53:28.838" starttime="20171108 13:53:28.838"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171108 13:53:28.839" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171108 13:53:28.839" starttime="20171108 13:53:28.838"></status>
</kw>
<status status="PASS" endtime="20171108 13:53:28.839" starttime="20171108 13:53:28.635"></status>
</kw>
<status status="PASS" endtime="20171108 13:53:28.839" starttime="20171108 13:53:28.634"></status>
</kw>
<status status="PASS" endtime="20171108 13:53:28.839" starttime="20171108 13:53:28.634"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171108 13:53:28.840" level="INFO">${base_uri} = /xyz/openbmc_project//dump/entry/list</msg>
<status status="PASS" endtime="20171108 13:53:28.840" starttime="20171108 13:53:28.839"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171108 13:53:28.840" starttime="20171108 13:53:28.840"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171108 13:53:28.902" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project//dump/entry/list, headers=None json=None</msg>
<msg timestamp="20171108 13:53:28.902" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171108 13:53:28.902" starttime="20171108 13:53:28.841"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171108 13:53:28.903" starttime="20171108 13:53:28.902"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171108 13:53:28.903" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171108 13:53:28.903" starttime="20171108 13:53:28.903"></status>
</kw>
<msg timestamp="20171108 13:53:28.903" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171108 13:53:28.903" starttime="20171108 13:53:28.633"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} == ${HTTP_NOT_FOUND}</arg>
</arguments>
<msg timestamp="20171108 13:53:28.904" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20171108 13:53:28.904" starttime="20171108 13:53:28.904"></status>
</kw>
<status status="PASS" endtime="20171108 13:53:28.904" starttime="20171108 13:53:28.633"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Smart Power Off</arg>
</arguments>
<kw name="Smart Power Off" library="boot_utils">
<doc>Do a smart power off.</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${quiet}</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg timestamp="20171108 13:53:28.906" level="INFO">${loc_quiet} = 0</msg>
<status status="PASS" endtime="20171108 13:53:28.906" starttime="20171108 13:53:28.906"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>REST Power Off \ stack_mode=skip</arg>
<arg>\ \ quiet=${loc_quiet}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171108 13:53:28.907" level="INFO">${cmd_buf} = REST Power Off  stack_mode=skip   quiet=0</msg>
<status status="PASS" endtime="20171108 13:53:28.907" starttime="20171108 13:53:28.906"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
<arg>quiet=${loc_quiet}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="REST Power Off" library="boot_utils">
<doc>Do "REST Power Off" boot test.</doc>
<arguments>
<arg>stack_mode=skip</arg>
<arg>quiet=0</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>OBMC Boot Test \ loc_boot_stack=REST Power Off</arg>
<arg>\ loc_stack_mode=${stack_mode} \ loc_quiet=${quiet}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171108 13:53:28.909" level="INFO">${cmd_buf} = OBMC Boot Test  loc_boot_stack=REST Power Off  loc_stack_mode=skip  loc_quiet=0</msg>
<status status="PASS" endtime="20171108 13:53:28.909" starttime="20171108 13:53:28.909"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<kw name="OBMC Boot Test" library="obmc_boot_test_resource">
<arguments>
<arg>loc_boot_stack=REST Power Off</arg>
<arg>loc_stack_mode=skip</arg>
<arg>loc_quiet=0</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${pos_arg1}' != '${EMPTY}'</arg>
<arg>Set To Dictionary</arg>
<arg>${arguments}</arg>
<arg>loc_boot_stack=${pos_arg1}</arg>
</arguments>
<status status="PASS" endtime="20171108 13:53:28.918" starttime="20171108 13:53:28.917"></status>
</kw>
<kw name="Obmc Boot Test Py" library="obmc_boot_test">
<doc>Do main program processing.</doc>
<arguments>
<arg>&amp;{arguments}</arg>
</arguments>
<msg timestamp="20171108 13:53:28.919" level="INFO">${boot_stack} = REST Power Off</msg>
<msg timestamp="20171108 13:53:28.920" level="INFO">${stack_mode} = skip</msg>
<msg timestamp="20171108 13:53:28.920" level="INFO">${quiet} = 0</msg>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
<arg>test_mode=0</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20171108 13:53:29.017" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171108 13:53:29.017" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20171108 13:53:29.810" level="INFO">Read output: root@witherspoon:~#</msg>
<msg timestamp="20171108 13:53:29.810" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20171108 13:53:29.888" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20171108 13:53:29.898" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20171108 13:53:29.898" level="INFO">${stderr} = </msg>
<msg timestamp="20171108 13:53:29.898" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20171108 13:53:29.898" starttime="20171108 13:53:29.005"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20171108 13:53:29.899" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20171108 13:53:29.899" starttime="20171108 13:53:29.898"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20171108 13:53:29.899" level="INFO">Length is 11</msg>
<status status="PASS" endtime="20171108 13:53:29.899" starttime="20171108 13:53:29.899"></status>
</kw>
<status status="PASS" endtime="20171108 13:53:29.900" starttime="20171108 13:53:29.003"></status>
</kw>
<msg timestamp="20171108 13:53:29.900" level="INFO">${openbmc_model} = Witherspoon</msg>
<msg timestamp="20171108 13:53:30.112" level="INFO">${plug_in_packages_list} = []</msg>
<msg timestamp="20171108 13:53:30.124" level="INFO">${program_pid} = 1</msg>
<kw name="Set BMC Power Policy" library="utils">
<doc>Set the given BMC power policy.</doc>
<arguments>
<arg>RESTORE_LAST_STATE</arg>
</arguments>
<kw name="Set Power Policy Method" library="utils">
<doc>Set the global bmc_power_policy_method to either 'Old' or 'New'.</doc>
<kw name="New Get Power Policy" library="utils">
<doc>Get the BMC power policy (new method).</doc>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${POWER_RESTORE_URI}</arg>
<arg>PowerRestorePolicy</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171108 13:53:30.151" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171108 13:53:30.152" starttime="20171108 13:53:30.151"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171108 13:53:30.153" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171108 13:53:30.153" starttime="20171108 13:53:30.152"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171108 13:53:30.154" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171108 13:53:30.154" starttime="20171108 13:53:30.153"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171108 13:53:30.154" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171108 13:53:30.154" starttime="20171108 13:53:30.154"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171108 13:53:30.369" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171108 13:53:30.369" starttime="20171108 13:53:30.155"></status>
</kw>
<msg timestamp="20171108 13:53:30.369" level="INFO">${status} = PASS</msg>
<msg timestamp="20171108 13:53:30.369" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171108 13:53:30.369" starttime="20171108 13:53:30.155"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171108 13:53:30.370" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171108 13:53:30.370" starttime="20171108 13:53:30.370"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171108 13:53:30.371" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171108 13:53:30.371" starttime="20171108 13:53:30.370"></status>
</kw>
<status status="PASS" endtime="20171108 13:53:30.371" starttime="20171108 13:53:30.150"></status>
</kw>
<status status="PASS" endtime="20171108 13:53:30.371" starttime="20171108 13:53:30.150"></status>
</kw>
<status status="PASS" endtime="20171108 13:53:30.371" starttime="20171108 13:53:30.149"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171108 13:53:30.372" level="INFO">${base_uri} = /xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy</msg>
<status status="PASS" endtime="20171108 13:53:30.372" starttime="20171108 13:53:30.371"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171108 13:53:30.374" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Get, args:{}</msg>
<status status="PASS" endtime="20171108 13:53:30.374" starttime="20171108 13:53:30.373"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171108 13:53:30.375" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Get, args:{}</msg>
<status status="PASS" endtime="20171108 13:53:30.375" starttime="20171108 13:53:30.375"></status>
</kw>
<status status="PASS" endtime="20171108 13:53:30.375" starttime="20171108 13:53:30.374"></status>
</kw>
<status status="PASS" endtime="20171108 13:53:30.376" starttime="20171108 13:53:30.373"></status>
</kw>
<status status="PASS" endtime="20171108 13:53:30.376" starttime="20171108 13:53:30.372"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171108 13:53:30.439" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, headers=None json=None</msg>
<msg timestamp="20171108 13:53:30.439" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171108 13:53:30.439" starttime="20171108 13:53:30.376"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171108 13:53:30.441" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171108 13:53:30.442" starttime="20171108 13:53:30.441"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171108 13:53:30.442" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171108 13:53:30.443" starttime="20171108 13:53:30.442"></status>
</kw>
<status status="PASS" endtime="20171108 13:53:30.443" starttime="20171108 13:53:30.442"></status>
</kw>
<status status="PASS" endtime="20171108 13:53:30.443" starttime="20171108 13:53:30.440"></status>
</kw>
<status status="PASS" endtime="20171108 13:53:30.443" starttime="20171108 13:53:30.440"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171108 13:53:30.444" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171108 13:53:30.444" starttime="20171108 13:53:30.443"></status>
</kw>
<msg timestamp="20171108 13:53:30.444" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171108 13:53:30.444" starttime="20171108 13:53:30.148"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171108 13:53:30.445" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171108 13:53:30.445" starttime="20171108 13:53:30.445"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171108 13:53:30.446" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171108 13:53:30.446" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171108 13:53:30.446" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore'}</msg>
<status status="PASS" endtime="20171108 13:53:30.446" starttime="20171108 13:53:30.445"></status>
</kw>
<msg timestamp="20171108 13:53:30.446" level="INFO">${currentPolicy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20171108 13:53:30.446" starttime="20171108 13:53:30.147"></status>
</kw>
<status status="PASS" endtime="20171108 13:53:30.446" starttime="20171108 13:53:30.147"></status>
</kw>
<msg timestamp="20171108 13:53:30.463" level="INFO">${bmc_power_policy_method} = New</msg>
<msg timestamp="20171108 13:53:30.463" level="INFO">${power_policy_setup} = 1</msg>
<status status="PASS" endtime="20171108 13:53:30.463" starttime="20171108 13:53:30.139"></status>
</kw>
<kw name="Translate Power Policy Value" library="utils">
<doc>Translate the policy value and return the result.</doc>
<arguments>
<arg>${policy}</arg>
</arguments>
<assign>
<var>${policy}</var>
</assign>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${RESTORE_LAST_STATE}</arg>
</arguments>
<status status="PASS" endtime="20171108 13:53:30.464" starttime="20171108 13:53:30.464"></status>
</kw>
<msg timestamp="20171108 13:53:30.465" level="INFO">${policy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20171108 13:53:30.465" starttime="20171108 13:53:30.464"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${bmc_power_policy_method} Set Power Policy \ ${policy}</arg>
</arguments>
<kw name="New Set Power Policy" library="utils">
<doc>Set the given BMC power policy (new method).</doc>
<arguments>
<arg>xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${policy}</arg>
</arguments>
<assign>
<var>${valueDict}</var>
</assign>
<msg timestamp="20171108 13:53:30.480" level="INFO">${valueDict} = {u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore'}</msg>
<status status="PASS" endtime="20171108 13:53:30.480" starttime="20171108 13:53:30.480"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<doc>Write a D-Bus attribute with REST.</doc>
<arguments>
<arg>${POWER_RESTORE_URI}</arg>
<arg>PowerRestorePolicy</arg>
<arg>data=${valueDict}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171108 13:53:30.481" level="INFO">${base_uri} = /xyz/openbmc_project/control/host0/power_restore_policy</msg>
<status status="PASS" endtime="20171108 13:53:30.482" starttime="20171108 13:53:30.481"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171108 13:53:30.484" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171108 13:53:30.485" starttime="20171108 13:53:30.484"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171108 13:53:30.485" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171108 13:53:30.485" starttime="20171108 13:53:30.485"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171108 13:53:30.486" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171108 13:53:30.486" starttime="20171108 13:53:30.486"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171108 13:53:30.487" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171108 13:53:30.487" starttime="20171108 13:53:30.486"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171108 13:53:30.678" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171108 13:53:30.678" starttime="20171108 13:53:30.487"></status>
</kw>
<msg timestamp="20171108 13:53:30.678" level="INFO">${status} = PASS</msg>
<msg timestamp="20171108 13:53:30.678" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171108 13:53:30.678" starttime="20171108 13:53:30.487"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171108 13:53:30.679" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171108 13:53:30.679" starttime="20171108 13:53:30.679"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171108 13:53:30.680" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171108 13:53:30.680" starttime="20171108 13:53:30.680"></status>
</kw>
<status status="PASS" endtime="20171108 13:53:30.680" starttime="20171108 13:53:30.483"></status>
</kw>
<status status="PASS" endtime="20171108 13:53:30.680" starttime="20171108 13:53:30.483"></status>
</kw>
<status status="PASS" endtime="20171108 13:53:30.680" starttime="20171108 13:53:30.482"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171108 13:53:30.681" level="INFO">${base_uri} = /xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy</msg>
<status status="PASS" endtime="20171108 13:53:30.681" starttime="20171108 13:53:30.681"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171108 13:53:30.682" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171108 13:53:30.682" starttime="20171108 13:53:30.681"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20171108 13:53:30.682" starttime="20171108 13:53:30.682"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171108 13:53:30.684" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Put, args:{u'data': {u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Res...</msg>
<status status="PASS" endtime="20171108 13:53:30.684" starttime="20171108 13:53:30.683"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171108 13:53:30.685" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Put, args:{u'data': {u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20171108 13:53:30.685" starttime="20171108 13:53:30.685"></status>
</kw>
<status status="PASS" endtime="20171108 13:53:30.685" starttime="20171108 13:53:30.684"></status>
</kw>
<status status="PASS" endtime="20171108 13:53:30.685" starttime="20171108 13:53:30.682"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171108 13:53:30.813" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, data={"data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20171108 13:53:30.813" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171108 13:53:30.813" starttime="20171108 13:53:30.686"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171108 13:53:30.815" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171108 13:53:30.815" starttime="20171108 13:53:30.814"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171108 13:53:30.816" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171108 13:53:30.816" starttime="20171108 13:53:30.815"></status>
</kw>
<status status="PASS" endtime="20171108 13:53:30.816" starttime="20171108 13:53:30.815"></status>
</kw>
<status status="PASS" endtime="20171108 13:53:30.816" starttime="20171108 13:53:30.813"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171108 13:53:30.817" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171108 13:53:30.817" starttime="20171108 13:53:30.816"></status>
</kw>
<msg timestamp="20171108 13:53:30.817" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171108 13:53:30.817" starttime="20171108 13:53:30.482"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171108 13:53:30.818" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171108 13:53:30.818" starttime="20171108 13:53:30.817"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${verify} == ${FALSE}</arg>
</arguments>
<msg timestamp="20171108 13:53:30.818" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20171108 13:53:30.819" starttime="20171108 13:53:30.818"></status>
</kw>
<status status="PASS" endtime="20171108 13:53:30.819" starttime="20171108 13:53:30.480"></status>
</kw>
<status status="PASS" endtime="20171108 13:53:30.819" starttime="20171108 13:53:30.479"></status>
</kw>
<status status="PASS" endtime="20171108 13:53:30.819" starttime="20171108 13:53:30.465"></status>
</kw>
<kw name="Get System Power Policy" library="utils">
<doc>Get the BMC power policy.</doc>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="Set Power Policy Method" library="utils">
<doc>Set the global bmc_power_policy_method to either 'Old' or 'New'.</doc>
<status status="PASS" endtime="20171108 13:53:30.820" starttime="20171108 13:53:30.820"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${bmc_power_policy_method} Get Power Policy</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171108 13:53:30.821" level="INFO">${cmd_buf} = [u'New Get Power Policy']</msg>
<status status="PASS" endtime="20171108 13:53:30.821" starttime="20171108 13:53:30.820"></status>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>@{cmd_buf}</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="New Get Power Policy" library="utils">
<doc>Get the BMC power policy (new method).</doc>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${POWER_RESTORE_URI}</arg>
<arg>PowerRestorePolicy</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171108 13:53:30.825" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171108 13:53:30.825" starttime="20171108 13:53:30.825"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171108 13:53:30.826" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171108 13:53:30.826" starttime="20171108 13:53:30.826"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171108 13:53:30.827" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171108 13:53:30.827" starttime="20171108 13:53:30.826"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171108 13:53:30.827" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171108 13:53:30.827" starttime="20171108 13:53:30.827"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171108 13:53:31.032" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171108 13:53:31.032" starttime="20171108 13:53:30.828"></status>
</kw>
<msg timestamp="20171108 13:53:31.032" level="INFO">${status} = PASS</msg>
<msg timestamp="20171108 13:53:31.032" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171108 13:53:31.032" starttime="20171108 13:53:30.828"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171108 13:53:31.033" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171108 13:53:31.033" starttime="20171108 13:53:31.032"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171108 13:53:31.033" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171108 13:53:31.033" starttime="20171108 13:53:31.033"></status>
</kw>
<status status="PASS" endtime="20171108 13:53:31.034" starttime="20171108 13:53:30.824"></status>
</kw>
<status status="PASS" endtime="20171108 13:53:31.034" starttime="20171108 13:53:30.823"></status>
</kw>
<status status="PASS" endtime="20171108 13:53:31.034" starttime="20171108 13:53:30.823"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171108 13:53:31.034" level="INFO">${base_uri} = /xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy</msg>
<status status="PASS" endtime="20171108 13:53:31.035" starttime="20171108 13:53:31.034"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171108 13:53:31.037" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Get, args:{}</msg>
<status status="PASS" endtime="20171108 13:53:31.037" starttime="20171108 13:53:31.036"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171108 13:53:31.038" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Get, args:{}</msg>
<status status="PASS" endtime="20171108 13:53:31.038" starttime="20171108 13:53:31.037"></status>
</kw>
<status status="PASS" endtime="20171108 13:53:31.038" starttime="20171108 13:53:31.037"></status>
</kw>
<status status="PASS" endtime="20171108 13:53:31.038" starttime="20171108 13:53:31.035"></status>
</kw>
<status status="PASS" endtime="20171108 13:53:31.038" starttime="20171108 13:53:31.035"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171108 13:53:31.103" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, headers=None json=None</msg>
<msg timestamp="20171108 13:53:31.103" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171108 13:53:31.103" starttime="20171108 13:53:31.038"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171108 13:53:31.105" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171108 13:53:31.105" starttime="20171108 13:53:31.104"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171108 13:53:31.106" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171108 13:53:31.106" starttime="20171108 13:53:31.106"></status>
</kw>
<status status="PASS" endtime="20171108 13:53:31.106" starttime="20171108 13:53:31.105"></status>
</kw>
<status status="PASS" endtime="20171108 13:53:31.106" starttime="20171108 13:53:31.104"></status>
</kw>
<status status="PASS" endtime="20171108 13:53:31.107" starttime="20171108 13:53:31.103"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171108 13:53:31.107" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171108 13:53:31.107" starttime="20171108 13:53:31.107"></status>
</kw>
<msg timestamp="20171108 13:53:31.108" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171108 13:53:31.108" starttime="20171108 13:53:30.822"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171108 13:53:31.108" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171108 13:53:31.108" starttime="20171108 13:53:31.108"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171108 13:53:31.109" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171108 13:53:31.109" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171108 13:53:31.109" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore'}</msg>
<status status="PASS" endtime="20171108 13:53:31.109" starttime="20171108 13:53:31.109"></status>
</kw>
<msg timestamp="20171108 13:53:31.109" level="INFO">${currentPolicy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20171108 13:53:31.109" starttime="20171108 13:53:30.822"></status>
</kw>
<status status="PASS" endtime="20171108 13:53:31.110" starttime="20171108 13:53:30.821"></status>
</kw>
<msg timestamp="20171108 13:53:31.110" level="INFO">${currentPolicy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20171108 13:53:31.110" starttime="20171108 13:53:30.821"></status>
</kw>
<msg timestamp="20171108 13:53:31.110" level="INFO">${currentPolicy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20171108 13:53:31.110" starttime="20171108 13:53:30.819"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${currentPolicy}</arg>
<arg>${policy}</arg>
</arguments>
<msg timestamp="20171108 13:53:31.110" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20171108 13:53:31.111" starttime="20171108 13:53:31.110"></status>
</kw>
<status status="PASS" endtime="20171108 13:53:31.111" starttime="20171108 13:53:30.138"></status>
</kw>
<msg timestamp="20171108 13:53:31.154" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20171108 13:53:31.187" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20171108 13:53:31.194" level="INFO">${TEST_MESSAGE} = </msg>
<msg timestamp="20171108 13:53:31.195" level="INFO">${FFDC_LOG_PATH} = ./</msg>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/state/enumerate</arg>
<arg>quiet=${0}</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171108 13:53:31.232" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171108 13:53:31.234" starttime="20171108 13:53:31.232"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171108 13:53:31.235" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171108 13:53:31.235" starttime="20171108 13:53:31.234"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171108 13:53:31.236" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171108 13:53:31.236" starttime="20171108 13:53:31.235"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171108 13:53:31.236" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171108 13:53:31.236" starttime="20171108 13:53:31.236"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171108 13:53:31.483" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171108 13:53:31.483" starttime="20171108 13:53:31.237"></status>
</kw>
<msg timestamp="20171108 13:53:31.483" level="INFO">${status} = PASS</msg>
<msg timestamp="20171108 13:53:31.483" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171108 13:53:31.483" starttime="20171108 13:53:31.237"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171108 13:53:31.484" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171108 13:53:31.484" starttime="20171108 13:53:31.484"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171108 13:53:31.485" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171108 13:53:31.485" starttime="20171108 13:53:31.484"></status>
</kw>
<status status="PASS" endtime="20171108 13:53:31.485" starttime="20171108 13:53:31.231"></status>
</kw>
<status status="PASS" endtime="20171108 13:53:31.485" starttime="20171108 13:53:31.230"></status>
</kw>
<status status="PASS" endtime="20171108 13:53:31.485" starttime="20171108 13:53:31.229"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171108 13:53:31.486" level="INFO">${base_uri} = /xyz/openbmc_project/state/enumerate</msg>
<status status="PASS" endtime="20171108 13:53:31.486" starttime="20171108 13:53:31.485"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171108 13:53:31.488" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/state/enumerate, method:Get, args:{}</msg>
<status status="PASS" endtime="20171108 13:53:31.488" starttime="20171108 13:53:31.487"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171108 13:53:31.489" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/state/enumerate, method:Get, args:{}</msg>
<status status="PASS" endtime="20171108 13:53:31.489" starttime="20171108 13:53:31.489"></status>
</kw>
<status status="PASS" endtime="20171108 13:53:31.489" starttime="20171108 13:53:31.488"></status>
</kw>
<status status="PASS" endtime="20171108 13:53:31.489" starttime="20171108 13:53:31.487"></status>
</kw>
<status status="PASS" endtime="20171108 13:53:31.489" starttime="20171108 13:53:31.486"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171108 13:53:31.712" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/enumerate, headers=None json=None</msg>
<msg timestamp="20171108 13:53:31.712" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171108 13:53:31.712" starttime="20171108 13:53:31.490"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171108 13:53:31.714" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "/xyz/openbmc_project/state/bmc0": {
      "CurrentBMCState": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
      "RequestedBMCTransition": "xyz.openbmc...</msg>
<status status="PASS" endtime="20171108 13:53:31.714" starttime="20171108 13:53:31.714"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171108 13:53:31.715" level="INFO">Response code:200, Content:{
  "data": {
    "/xyz/openbmc_project/state/bmc0": {
      "CurrentBMCState": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
      "RequestedBMCTransition": "xyz.openbmc_project.State.BMC.Transition.None"
    }, 
    "/xyz/openbmc_project/state/chassis0": {
      "CurrentPowerState": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
      "RequestedPowerTransition": "xyz.openbmc_project.State.Chassis.Transition.Off"
    }, 
    "/xyz/openbmc_project/state/host0": {
      "AttemptsLeft": 3, 
      "BootProgress": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
      "CurrentHostState": "xyz.openbmc_project.State.Host.HostState.Off", 
      "OperatingSystemState": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
      "RequestedHostTransition": "xyz.openbmc_project.State.Host.Transition.Off"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171108 13:53:31.716" starttime="20171108 13:53:31.715"></status>
</kw>
<status status="PASS" endtime="20171108 13:53:31.716" starttime="20171108 13:53:31.714"></status>
</kw>
<status status="PASS" endtime="20171108 13:53:31.716" starttime="20171108 13:53:31.713"></status>
</kw>
<status status="PASS" endtime="20171108 13:53:31.716" starttime="20171108 13:53:31.713"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171108 13:53:31.716" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171108 13:53:31.716" starttime="20171108 13:53:31.716"></status>
</kw>
<msg timestamp="20171108 13:53:31.717" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171108 13:53:31.717" starttime="20171108 13:53:31.228"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171108 13:53:31.717" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171108 13:53:31.717" starttime="20171108 13:53:31.717"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171108 13:53:31.718" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/state/bmc0": {
      "CurrentBMCState": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
      "RequestedBMCTransition": "xyz.openbmc_project.State.BMC.Transition.None"
    }, 
    "/xyz/openbmc_project/state/chassis0": {
      "CurrentPowerState": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
      "RequestedPowerTransition": "xyz.openbmc_project.State.Chassis.Transition.Off"
    }, 
    "/xyz/openbmc_project/state/host0": {
      "AttemptsLeft": 3, 
      "BootProgress": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
      "CurrentHostState": "xyz.openbmc_project.State.Host.HostState.Off", 
      "OperatingSystemState": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
      "RequestedHostTransition": "xyz.openbmc_project.State.Host.Transition.Off"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171108 13:53:31.718" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171108 13:53:31.718" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'/xyz/openbmc_project/state/host0': {u'CurrentHostState': u'xyz.openbmc_project.State.Host.HostState.Off', u'RequestedHostTransition': u'xyz.openbm...</msg>
<status status="PASS" endtime="20171108 13:53:31.718" starttime="20171108 13:53:31.718"></status>
</kw>
<status status="PASS" endtime="20171108 13:53:31.719" starttime="20171108 13:53:31.227"></status>
</kw>
<status status="PASS" endtime="20171108 13:53:31.779" starttime="20171108 13:53:28.918"></status>
</kw>
<kw type="teardown" name="Obmc Boot Test Teardown" library="obmc_boot_test">
<doc>Clean up after the Main keyword.</doc>
<msg timestamp="20171108 13:53:31.785" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20171108 13:53:31.795" level="INFO">${boot_stack} = </msg>
<msg timestamp="20171108 13:53:31.795" level="INFO">${stack_mode} = normal</msg>
<msg timestamp="20171108 13:53:31.796" level="INFO">${quiet} = 0</msg>
<status status="PASS" endtime="20171108 13:53:31.796" starttime="20171108 13:53:31.780"></status>
</kw>
<status status="PASS" endtime="20171108 13:53:31.796" starttime="20171108 13:53:28.916"></status>
</kw>
<status status="PASS" endtime="20171108 13:53:31.796" starttime="20171108 13:53:28.909"></status>
</kw>
<status status="PASS" endtime="20171108 13:53:31.796" starttime="20171108 13:53:28.908"></status>
</kw>
<msg timestamp="20171108 13:53:31.796" level="INFO">${status} = PASS</msg>
<msg timestamp="20171108 13:53:31.796" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20171108 13:53:31.796" starttime="20171108 13:53:28.907"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == 'PASS'</arg>
<arg>Return From Keyword</arg>
</arguments>
<kw name="Return From Keyword" library="BuiltIn">
<doc>Returns from the enclosing user keyword.</doc>
<msg timestamp="20171108 13:53:31.798" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20171108 13:53:31.798" starttime="20171108 13:53:31.797"></status>
</kw>
<status status="PASS" endtime="20171108 13:53:31.798" starttime="20171108 13:53:31.797"></status>
</kw>
<status status="PASS" endtime="20171108 13:53:31.798" starttime="20171108 13:53:28.905"></status>
</kw>
<status status="PASS" endtime="20171108 13:53:31.798" starttime="20171108 13:53:28.905"></status>
</kw>
<status status="PASS" endtime="20171108 13:53:31.798" starttime="20171108 13:53:28.632"></status>
</kw>
<test id="s1-t1" name="REST BMC Code Update">
<kw name="Upload And Activate Image" library="code_update_utils">
<doc>Upload an image to the BMC and activate it with REST.</doc>
<arguments>
<arg>${IMAGE_FILE_PATH}</arg>
<arg>skip_if_active=${SKIP_UPDATE_IF_ACTIVE}</arg>
</arguments>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<msg timestamp="20171108 13:53:31.800" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/obmc-phosphor-image-witherspoon.ubi.mtd.tar"&gt;/home/fspcibld/obmc-phosphor-image-witherspoon.ubi.mtd.tar&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20171108 13:53:31.800" starttime="20171108 13:53:31.800"></status>
</kw>
<kw name="Get Version Tar" library="code_update_utils">
<doc>Read the image version from the MANIFEST inside the tarball.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<assign>
<var>${image_version}</var>
</assign>
<msg timestamp="20171108 13:53:31.817" level="INFO">${image_version} = v2.0-21-g7155d02</msg>
<status status="PASS" endtime="20171108 13:53:31.817" starttime="20171108 13:53:31.801"></status>
</kw>
<kw name="Get Binary File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<assign>
<var>${image_data}</var>
</assign>
<msg timestamp="20171108 13:53:31.818" html="yes" level="INFO">Getting file '&lt;a href="file:///home/fspcibld/obmc-phosphor-image-witherspoon.ubi.mtd.tar"&gt;/home/fspcibld/obmc-phosphor-image-witherspoon.ubi.mtd.tar&lt;/a&gt;'.</msg>
<msg timestamp="20171108 13:53:44.655" level="INFO">${image_data} = image-u-boot0000644000175100017520000113142013172401721013155 0...</msg>
<status status="PASS" endtime="20171108 13:53:44.656" starttime="20171108 13:53:31.818"></status>
</kw>
<kw name="Upload Image To BMC" library="rest_client">
<arguments>
<arg>/upload/image</arg>
<arg>data=${image_data}</arg>
</arguments>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171108 13:53:44.660" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171108 13:53:44.661" starttime="20171108 13:53:44.660"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171108 13:53:44.661" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171108 13:53:44.662" starttime="20171108 13:53:44.661"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171108 13:53:44.662" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171108 13:53:44.662" starttime="20171108 13:53:44.662"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171108 13:53:44.663" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171108 13:53:44.663" starttime="20171108 13:53:44.662"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171108 13:53:44.864" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171108 13:53:44.864" starttime="20171108 13:53:44.666"></status>
</kw>
<msg timestamp="20171108 13:53:44.864" level="INFO">${status} = PASS</msg>
<msg timestamp="20171108 13:53:44.864" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171108 13:53:44.864" starttime="20171108 13:53:44.663"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171108 13:53:44.865" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171108 13:53:44.865" starttime="20171108 13:53:44.864"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171108 13:53:44.866" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171108 13:53:44.866" starttime="20171108 13:53:44.865"></status>
</kw>
<status status="PASS" endtime="20171108 13:53:44.866" starttime="20171108 13:53:44.659"></status>
</kw>
<status status="PASS" endtime="20171108 13:53:44.866" starttime="20171108 13:53:44.658"></status>
</kw>
<status status="PASS" endtime="20171108 13:53:44.866" starttime="20171108 13:53:44.657"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171108 13:53:44.867" level="INFO">${base_uri} = /upload/image</msg>
<status status="PASS" endtime="20171108 13:53:44.867" starttime="20171108 13:53:44.866"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/octet-stream</arg>
<arg>Accept=application/octet-stream</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171108 13:53:44.867" level="INFO">${headers} = {u'Content-Type': u'application/octet-stream', u'Accept': u'application/octet-stream'}</msg>
<status status="PASS" endtime="20171108 13:53:44.867" starttime="20171108 13:53:44.867"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20171108 13:53:44.868" starttime="20171108 13:53:44.868"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171108 13:53:44.869" starttime="20171108 13:53:44.868"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171108 13:53:50.980" level="INFO">Post Request using : alias=openbmc, uri=/upload/image, data=&lt;application/octet-stream&gt;, headers={u'Content-Type': u'application/octet-stream', u'Accept': u'application/octet-stream'}, files=None, allow_redirects=True </msg>
<msg timestamp="20171108 13:53:50.980" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171108 13:53:50.980" starttime="20171108 13:53:44.869"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171108 13:53:50.981" starttime="20171108 13:53:50.980"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ret.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171108 13:53:50.981" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171108 13:53:50.982" starttime="20171108 13:53:50.981"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171108 13:53:50.982" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171108 13:53:50.982" starttime="20171108 13:53:50.982"></status>
</kw>
<status status="PASS" endtime="20171108 13:53:50.982" starttime="20171108 13:53:44.656"></status>
</kw>
<kw name="Verify Image Upload" library="code_update_utils">
<doc>Verify the image was uploaded correctly and that it created</doc>
<arguments>
<arg>${image_version}</arg>
</arguments>
<assign>
<var>${ret}</var>
<var>${version_id}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20171108 13:53:50.989" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20171108 13:53:50.989" starttime="20171108 13:53:50.988"></status>
</kw>
<msg timestamp="20171108 13:53:50.989" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20171108 13:53:50.989" starttime="20171108 13:53:50.988"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20171108 13:53:50.990" starttime="20171108 13:53:50.990"></status>
</kw>
<status status="PASS" endtime="20171108 13:53:50.990" starttime="20171108 13:53:50.989"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20171108 13:53:50.991" starttime="20171108 13:53:50.990"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20171108 13:53:50.992" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20171108 13:53:50.992" starttime="20171108 13:53:50.992"></status>
</kw>
<msg timestamp="20171108 13:53:50.992" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20171108 13:53:50.992" starttime="20171108 13:53:50.991"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20171108 13:53:50.994" starttime="20171108 13:53:50.994"></status>
</kw>
<status status="PASS" endtime="20171108 13:53:50.994" starttime="20171108 13:53:50.993"></status>
</kw>
<status status="PASS" endtime="20171108 13:53:50.994" starttime="20171108 13:53:50.993"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20171108 13:53:50.995" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20171108 13:53:53.172" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20171108 13:53:53.172" starttime="20171108 13:53:50.995"></status>
</kw>
<status status="PASS" endtime="20171108 13:53:53.173" starttime="20171108 13:53:50.987"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>ls -d /tmp/images/*/</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20171108 13:53:53.181" level="INFO">Executing command 'ls -d /tmp/images/*/'.</msg>
<msg timestamp="20171108 13:53:53.237" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20171108 13:53:53.238" level="INFO">${stdout} = /tmp/images/3fbe03eb/</msg>
<msg timestamp="20171108 13:53:53.238" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171108 13:53:53.238" starttime="20171108 13:53:53.181"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20171108 13:53:53.238" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20171108 13:53:53.238" starttime="20171108 13:53:53.238"></status>
</kw>
<status status="PASS" endtime="20171108 13:53:53.239" starttime="20171108 13:53:53.180"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20171108 13:53:53.244" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20171108 13:53:53.244" starttime="20171108 13:53:53.244"></status>
</kw>
<msg timestamp="20171108 13:53:53.244" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20171108 13:53:53.244" starttime="20171108 13:53:53.243"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20171108 13:53:53.245" starttime="20171108 13:53:53.245"></status>
</kw>
<status status="PASS" endtime="20171108 13:53:53.245" starttime="20171108 13:53:53.244"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20171108 13:53:53.246" starttime="20171108 13:53:53.246"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20171108 13:53:53.247" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20171108 13:53:53.247" starttime="20171108 13:53:53.247"></status>
</kw>
<msg timestamp="20171108 13:53:53.248" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20171108 13:53:53.248" starttime="20171108 13:53:53.247"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20171108 13:53:53.249" starttime="20171108 13:53:53.249"></status>
</kw>
<status status="PASS" endtime="20171108 13:53:53.249" starttime="20171108 13:53:53.249"></status>
</kw>
<status status="PASS" endtime="20171108 13:53:53.250" starttime="20171108 13:53:53.248"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20171108 13:53:53.250" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20171108 13:53:54.959" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20171108 13:53:54.959" starttime="20171108 13:53:53.250"></status>
</kw>
<status status="PASS" endtime="20171108 13:53:54.960" starttime="20171108 13:53:53.242"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>cat /tmp/images/3fbe03eb/MANIFEST | grep "version="</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20171108 13:53:54.968" level="INFO">Executing command 'cat /tmp/images/3fbe03eb/MANIFEST | grep "version="'.</msg>
<msg timestamp="20171108 13:53:55.034" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20171108 13:53:55.034" level="INFO">${stdout} = version=v2.0-21-g7155d02</msg>
<msg timestamp="20171108 13:53:55.035" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171108 13:53:55.035" starttime="20171108 13:53:54.967"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20171108 13:53:55.035" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20171108 13:53:55.035" starttime="20171108 13:53:55.035"></status>
</kw>
<status status="PASS" endtime="20171108 13:53:55.035" starttime="20171108 13:53:54.967"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20171108 13:53:55.042" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20171108 13:53:55.042" starttime="20171108 13:53:55.041"></status>
</kw>
<msg timestamp="20171108 13:53:55.042" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20171108 13:53:55.042" starttime="20171108 13:53:55.040"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20171108 13:53:55.044" starttime="20171108 13:53:55.043"></status>
</kw>
<status status="PASS" endtime="20171108 13:53:55.044" starttime="20171108 13:53:55.042"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20171108 13:53:55.045" starttime="20171108 13:53:55.044"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20171108 13:53:55.047" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20171108 13:53:55.047" starttime="20171108 13:53:55.046"></status>
</kw>
<msg timestamp="20171108 13:53:55.047" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20171108 13:53:55.047" starttime="20171108 13:53:55.046"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20171108 13:53:55.050" starttime="20171108 13:53:55.049"></status>
</kw>
<status status="PASS" endtime="20171108 13:53:55.050" starttime="20171108 13:53:55.049"></status>
</kw>
<status status="PASS" endtime="20171108 13:53:55.050" starttime="20171108 13:53:55.047"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20171108 13:53:55.051" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20171108 13:53:56.768" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20171108 13:53:56.768" starttime="20171108 13:53:55.050"></status>
</kw>
<status status="PASS" endtime="20171108 13:53:56.768" starttime="20171108 13:53:55.039"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20171108 13:53:56.774" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20171108 13:53:56.774" starttime="20171108 13:53:56.774"></status>
</kw>
<msg timestamp="20171108 13:53:56.774" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20171108 13:53:56.774" starttime="20171108 13:53:56.773"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20171108 13:53:56.776" starttime="20171108 13:53:56.775"></status>
</kw>
<status status="PASS" endtime="20171108 13:53:56.776" starttime="20171108 13:53:56.775"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20171108 13:53:56.777" starttime="20171108 13:53:56.776"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20171108 13:53:56.778" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20171108 13:53:56.778" starttime="20171108 13:53:56.777"></status>
</kw>
<msg timestamp="20171108 13:53:56.778" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20171108 13:53:56.778" starttime="20171108 13:53:56.777"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20171108 13:53:56.781" starttime="20171108 13:53:56.781"></status>
</kw>
<status status="PASS" endtime="20171108 13:53:56.781" starttime="20171108 13:53:56.780"></status>
</kw>
<status status="PASS" endtime="20171108 13:53:56.781" starttime="20171108 13:53:56.779"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20171108 13:53:56.782" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20171108 13:53:58.427" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20171108 13:53:58.427" starttime="20171108 13:53:56.782"></status>
</kw>
<status status="PASS" endtime="20171108 13:53:58.427" starttime="20171108 13:53:56.772"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>cat /tmp/images/3fbe03eb/MANIFEST | grep "purpose="</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20171108 13:53:58.436" level="INFO">Executing command 'cat /tmp/images/3fbe03eb/MANIFEST | grep "purpose="'.</msg>
<msg timestamp="20171108 13:53:58.523" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20171108 13:53:58.523" level="INFO">${stdout} = purpose=xyz.openbmc_project.Software.Version.VersionPurpose.BMC</msg>
<msg timestamp="20171108 13:53:58.523" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171108 13:53:58.523" starttime="20171108 13:53:58.436"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20171108 13:53:58.523" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20171108 13:53:58.524" starttime="20171108 13:53:58.523"></status>
</kw>
<status status="PASS" endtime="20171108 13:53:58.524" starttime="20171108 13:53:58.435"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/3fbe03eb</arg>
<arg>Activation</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171108 13:53:58.535" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171108 13:53:58.536" starttime="20171108 13:53:58.534"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171108 13:53:58.537" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171108 13:53:58.537" starttime="20171108 13:53:58.536"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171108 13:53:58.537" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171108 13:53:58.537" starttime="20171108 13:53:58.537"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171108 13:53:58.538" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171108 13:53:58.538" starttime="20171108 13:53:58.538"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171108 13:53:58.778" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171108 13:53:58.778" starttime="20171108 13:53:58.540"></status>
</kw>
<msg timestamp="20171108 13:53:58.778" level="INFO">${status} = PASS</msg>
<msg timestamp="20171108 13:53:58.778" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171108 13:53:58.778" starttime="20171108 13:53:58.539"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171108 13:53:58.779" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171108 13:53:58.779" starttime="20171108 13:53:58.779"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171108 13:53:58.780" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171108 13:53:58.780" starttime="20171108 13:53:58.779"></status>
</kw>
<status status="PASS" endtime="20171108 13:53:58.780" starttime="20171108 13:53:58.534"></status>
</kw>
<status status="PASS" endtime="20171108 13:53:58.780" starttime="20171108 13:53:58.533"></status>
</kw>
<status status="PASS" endtime="20171108 13:53:58.780" starttime="20171108 13:53:58.532"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171108 13:53:58.781" level="INFO">${base_uri} = /xyz/openbmc_project/software/3fbe03eb/attr/Activation</msg>
<status status="PASS" endtime="20171108 13:53:58.781" starttime="20171108 13:53:58.781"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171108 13:53:58.783" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/software/3fbe03eb/attr/Activation, method:Get, args:{}</msg>
<status status="PASS" endtime="20171108 13:53:58.783" starttime="20171108 13:53:58.782"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171108 13:53:58.784" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/software/3fbe03eb/attr/Activation, method:Get, args:{}</msg>
<status status="PASS" endtime="20171108 13:53:58.784" starttime="20171108 13:53:58.784"></status>
</kw>
<status status="PASS" endtime="20171108 13:53:58.784" starttime="20171108 13:53:58.783"></status>
</kw>
<status status="PASS" endtime="20171108 13:53:58.784" starttime="20171108 13:53:58.782"></status>
</kw>
<status status="PASS" endtime="20171108 13:53:58.784" starttime="20171108 13:53:58.781"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171108 13:53:58.961" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/3fbe03eb/attr/Activation, headers=None json=None</msg>
<msg timestamp="20171108 13:53:58.961" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171108 13:53:58.961" starttime="20171108 13:53:58.785"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171108 13:53:58.964" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.Software.Activation.Activations.Ready", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171108 13:53:58.964" starttime="20171108 13:53:58.963"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171108 13:53:58.965" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.Software.Activation.Activations.Ready", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171108 13:53:58.965" starttime="20171108 13:53:58.964"></status>
</kw>
<status status="PASS" endtime="20171108 13:53:58.965" starttime="20171108 13:53:58.964"></status>
</kw>
<status status="PASS" endtime="20171108 13:53:58.965" starttime="20171108 13:53:58.962"></status>
</kw>
<status status="PASS" endtime="20171108 13:53:58.965" starttime="20171108 13:53:58.962"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171108 13:53:58.966" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171108 13:53:58.966" starttime="20171108 13:53:58.965"></status>
</kw>
<msg timestamp="20171108 13:53:58.966" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171108 13:53:58.966" starttime="20171108 13:53:58.532"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171108 13:53:58.967" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171108 13:53:58.967" starttime="20171108 13:53:58.966"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171108 13:53:58.967" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.Software.Activation.Activations.Ready", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171108 13:53:58.967" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171108 13:53:58.967" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.Software.Activation.Activations.Ready'}</msg>
<status status="PASS" endtime="20171108 13:53:58.967" starttime="20171108 13:53:58.967"></status>
</kw>
<status status="PASS" endtime="20171108 13:53:58.968" starttime="20171108 13:53:58.531"></status>
</kw>
<msg timestamp="20171108 13:53:58.968" level="INFO">${ret} = True</msg>
<msg timestamp="20171108 13:53:58.968" level="INFO">${version_id} = 3fbe03eb</msg>
<status status="PASS" endtime="20171108 13:53:58.968" starttime="20171108 13:53:50.983"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171108 13:53:58.968" starttime="20171108 13:53:58.968"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${SOFTWARE_VERSION_URI}${version_id}</arg>
</arguments>
<assign>
<var>${software_state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171108 13:53:58.972" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171108 13:53:58.972" starttime="20171108 13:53:58.971"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171108 13:53:58.973" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171108 13:53:58.973" starttime="20171108 13:53:58.972"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171108 13:53:58.973" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171108 13:53:58.973" starttime="20171108 13:53:58.973"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171108 13:53:58.974" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171108 13:53:58.974" starttime="20171108 13:53:58.974"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171108 13:53:59.458" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171108 13:53:59.458" starttime="20171108 13:53:58.975"></status>
</kw>
<msg timestamp="20171108 13:53:59.459" level="INFO">${status} = PASS</msg>
<msg timestamp="20171108 13:53:59.459" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171108 13:53:59.459" starttime="20171108 13:53:58.974"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171108 13:53:59.460" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171108 13:53:59.460" starttime="20171108 13:53:59.459"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171108 13:53:59.461" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171108 13:53:59.461" starttime="20171108 13:53:59.460"></status>
</kw>
<status status="PASS" endtime="20171108 13:53:59.461" starttime="20171108 13:53:58.971"></status>
</kw>
<status status="PASS" endtime="20171108 13:53:59.461" starttime="20171108 13:53:58.970"></status>
</kw>
<status status="PASS" endtime="20171108 13:53:59.461" starttime="20171108 13:53:58.970"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171108 13:53:59.462" level="INFO">${base_uri} = /xyz/openbmc_project/software/3fbe03eb</msg>
<status status="PASS" endtime="20171108 13:53:59.462" starttime="20171108 13:53:59.462"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171108 13:53:59.465" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/software/3fbe03eb, method:Get, args:{}</msg>
<status status="PASS" endtime="20171108 13:53:59.465" starttime="20171108 13:53:59.464"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171108 13:53:59.466" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/software/3fbe03eb, method:Get, args:{}</msg>
<status status="PASS" endtime="20171108 13:53:59.467" starttime="20171108 13:53:59.466"></status>
</kw>
<status status="PASS" endtime="20171108 13:53:59.467" starttime="20171108 13:53:59.466"></status>
</kw>
<status status="PASS" endtime="20171108 13:53:59.467" starttime="20171108 13:53:59.464"></status>
</kw>
<status status="PASS" endtime="20171108 13:53:59.467" starttime="20171108 13:53:59.463"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171108 13:53:59.699" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/3fbe03eb, headers=None json=None</msg>
<msg timestamp="20171108 13:53:59.699" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171108 13:53:59.699" starttime="20171108 13:53:59.467"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171108 13:53:59.701" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Ready", 
    "Path": "/tmp/images/3fbe03eb", 
    "Purpose": "xyz.openbmc_project.Softwa...</msg>
<status status="PASS" endtime="20171108 13:53:59.701" starttime="20171108 13:53:59.700"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171108 13:53:59.702" level="INFO">Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Ready", 
    "Path": "/tmp/images/3fbe03eb", 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
    "Version": "v2.0-21-g7155d02", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171108 13:53:59.702" starttime="20171108 13:53:59.702"></status>
</kw>
<status status="PASS" endtime="20171108 13:53:59.702" starttime="20171108 13:53:59.701"></status>
</kw>
<status status="PASS" endtime="20171108 13:53:59.702" starttime="20171108 13:53:59.700"></status>
</kw>
<status status="PASS" endtime="20171108 13:53:59.702" starttime="20171108 13:53:59.699"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171108 13:53:59.703" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171108 13:53:59.703" starttime="20171108 13:53:59.703"></status>
</kw>
<msg timestamp="20171108 13:53:59.703" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171108 13:53:59.703" starttime="20171108 13:53:58.969"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171108 13:53:59.704" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171108 13:53:59.704" starttime="20171108 13:53:59.703"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171108 13:53:59.704" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Ready", 
    "Path": "/tmp/images/3fbe03eb", 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
    "Version": "v2.0-21-g7155d02", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171108 13:53:59.705" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171108 13:53:59.705" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20171108 13:53:59.705" starttime="20171108 13:53:59.704"></status>
</kw>
<msg timestamp="20171108 13:53:59.705" level="INFO">${software_state} = {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Ready...</msg>
<status status="PASS" endtime="20171108 13:53:59.705" starttime="20171108 13:53:58.969"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>&amp;{software_state}[Activation]</arg>
</arguments>
<assign>
<var>${activation}</var>
</assign>
<msg timestamp="20171108 13:53:59.706" level="INFO">${activation} = xyz.openbmc_project.Software.Activation.Activations.Ready</msg>
<status status="PASS" endtime="20171108 13:53:59.706" starttime="20171108 13:53:59.705"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${skip_if_active}' == 'true' and '${activation}' == '${ACTIVE}'</arg>
<arg>Switch To Active Image And Pass</arg>
<arg>${SOFTWARE_VERSION_URI}${version_id}</arg>
</arguments>
<status status="PASS" endtime="20171108 13:53:59.706" starttime="20171108 13:53:59.706"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>&amp;{software_state}[Activation]</arg>
<arg>${READY}</arg>
</arguments>
<msg timestamp="20171108 13:53:59.707" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20171108 13:53:59.707" starttime="20171108 13:53:59.707"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${REQUESTED_ACTIVE}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20171108 13:53:59.708" level="INFO">${args} = {u'data': 'xyz.openbmc_project.Software.Activation.RequestedActivations.Active'}</msg>
<status status="PASS" endtime="20171108 13:53:59.708" starttime="20171108 13:53:59.708"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<doc>Write a D-Bus attribute with REST.</doc>
<arguments>
<arg>${SOFTWARE_VERSION_URI}${version_id}</arg>
<arg>RequestedActivation</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171108 13:53:59.709" level="INFO">${base_uri} = /xyz/openbmc_project/software/3fbe03eb</msg>
<status status="PASS" endtime="20171108 13:53:59.709" starttime="20171108 13:53:59.709"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171108 13:53:59.712" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171108 13:53:59.713" starttime="20171108 13:53:59.712"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171108 13:53:59.713" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171108 13:53:59.713" starttime="20171108 13:53:59.713"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171108 13:53:59.714" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171108 13:53:59.714" starttime="20171108 13:53:59.714"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171108 13:53:59.715" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171108 13:53:59.715" starttime="20171108 13:53:59.714"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171108 13:54:00.180" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171108 13:54:00.180" starttime="20171108 13:53:59.716"></status>
</kw>
<msg timestamp="20171108 13:54:00.180" level="INFO">${status} = PASS</msg>
<msg timestamp="20171108 13:54:00.180" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171108 13:54:00.180" starttime="20171108 13:53:59.715"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171108 13:54:00.181" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171108 13:54:00.181" starttime="20171108 13:54:00.180"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171108 13:54:00.181" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171108 13:54:00.181" starttime="20171108 13:54:00.181"></status>
</kw>
<status status="PASS" endtime="20171108 13:54:00.182" starttime="20171108 13:53:59.711"></status>
</kw>
<status status="PASS" endtime="20171108 13:54:00.182" starttime="20171108 13:53:59.711"></status>
</kw>
<status status="PASS" endtime="20171108 13:54:00.182" starttime="20171108 13:53:59.710"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171108 13:54:00.182" level="INFO">${base_uri} = /xyz/openbmc_project/software/3fbe03eb/attr/RequestedActivation</msg>
<status status="PASS" endtime="20171108 13:54:00.182" starttime="20171108 13:54:00.182"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171108 13:54:00.183" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171108 13:54:00.183" starttime="20171108 13:54:00.183"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20171108 13:54:00.184" starttime="20171108 13:54:00.183"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171108 13:54:00.185" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/software/3fbe03eb/attr/RequestedActivation, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.Software.Activation.RequestedActivations.Active'}, u'he...</msg>
<status status="PASS" endtime="20171108 13:54:00.185" starttime="20171108 13:54:00.185"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171108 13:54:00.186" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/software/3fbe03eb/attr/RequestedActivation, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.Software.Activation.RequestedActivations.Active'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20171108 13:54:00.186" starttime="20171108 13:54:00.186"></status>
</kw>
<status status="PASS" endtime="20171108 13:54:00.187" starttime="20171108 13:54:00.185"></status>
</kw>
<status status="PASS" endtime="20171108 13:54:00.187" starttime="20171108 13:54:00.184"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171108 13:54:00.751" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/software/3fbe03eb/attr/RequestedActivation, data={"data": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20171108 13:54:00.751" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171108 13:54:00.751" starttime="20171108 13:54:00.187"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171108 13:54:00.753" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171108 13:54:00.753" starttime="20171108 13:54:00.752"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171108 13:54:00.754" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171108 13:54:00.754" starttime="20171108 13:54:00.753"></status>
</kw>
<status status="PASS" endtime="20171108 13:54:00.754" starttime="20171108 13:54:00.753"></status>
</kw>
<status status="PASS" endtime="20171108 13:54:00.754" starttime="20171108 13:54:00.751"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171108 13:54:00.754" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171108 13:54:00.754" starttime="20171108 13:54:00.754"></status>
</kw>
<msg timestamp="20171108 13:54:00.755" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171108 13:54:00.755" starttime="20171108 13:53:59.710"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171108 13:54:00.756" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171108 13:54:00.756" starttime="20171108 13:54:00.755"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${verify} == ${FALSE}</arg>
</arguments>
<msg timestamp="20171108 13:54:00.757" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20171108 13:54:00.757" starttime="20171108 13:54:00.756"></status>
</kw>
<status status="PASS" endtime="20171108 13:54:00.757" starttime="20171108 13:53:59.708"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${SOFTWARE_VERSION_URI}${version_id}</arg>
</arguments>
<assign>
<var>${software_state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171108 13:54:00.762" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171108 13:54:00.762" starttime="20171108 13:54:00.761"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171108 13:54:00.763" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171108 13:54:00.763" starttime="20171108 13:54:00.762"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171108 13:54:00.764" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171108 13:54:00.764" starttime="20171108 13:54:00.763"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171108 13:54:00.765" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171108 13:54:00.765" starttime="20171108 13:54:00.764"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171108 13:54:01.465" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171108 13:54:01.465" starttime="20171108 13:54:00.766"></status>
</kw>
<msg timestamp="20171108 13:54:01.465" level="INFO">${status} = PASS</msg>
<msg timestamp="20171108 13:54:01.465" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171108 13:54:01.465" starttime="20171108 13:54:00.766"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171108 13:54:01.466" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171108 13:54:01.466" starttime="20171108 13:54:01.466"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171108 13:54:01.467" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171108 13:54:01.467" starttime="20171108 13:54:01.466"></status>
</kw>
<status status="PASS" endtime="20171108 13:54:01.467" starttime="20171108 13:54:00.760"></status>
</kw>
<status status="PASS" endtime="20171108 13:54:01.467" starttime="20171108 13:54:00.759"></status>
</kw>
<status status="PASS" endtime="20171108 13:54:01.467" starttime="20171108 13:54:00.758"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171108 13:54:01.468" level="INFO">${base_uri} = /xyz/openbmc_project/software/3fbe03eb</msg>
<status status="PASS" endtime="20171108 13:54:01.468" starttime="20171108 13:54:01.467"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171108 13:54:01.471" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/software/3fbe03eb, method:Get, args:{}</msg>
<status status="PASS" endtime="20171108 13:54:01.471" starttime="20171108 13:54:01.470"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171108 13:54:01.473" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/software/3fbe03eb, method:Get, args:{}</msg>
<status status="PASS" endtime="20171108 13:54:01.473" starttime="20171108 13:54:01.472"></status>
</kw>
<status status="PASS" endtime="20171108 13:54:01.473" starttime="20171108 13:54:01.471"></status>
</kw>
<status status="PASS" endtime="20171108 13:54:01.473" starttime="20171108 13:54:01.469"></status>
</kw>
<status status="PASS" endtime="20171108 13:54:01.473" starttime="20171108 13:54:01.469"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171108 13:54:01.669" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/3fbe03eb, headers=None json=None</msg>
<msg timestamp="20171108 13:54:01.669" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171108 13:54:01.669" starttime="20171108 13:54:01.473"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171108 13:54:01.671" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/3fbe03eb", 
    "Progress": 30, 
    "Purpose": "...</msg>
<status status="PASS" endtime="20171108 13:54:01.671" starttime="20171108 13:54:01.670"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171108 13:54:01.672" level="INFO">Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/3fbe03eb", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v2.0-21-g7155d02", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171108 13:54:01.672" starttime="20171108 13:54:01.672"></status>
</kw>
<status status="PASS" endtime="20171108 13:54:01.672" starttime="20171108 13:54:01.671"></status>
</kw>
<status status="PASS" endtime="20171108 13:54:01.672" starttime="20171108 13:54:01.670"></status>
</kw>
<status status="PASS" endtime="20171108 13:54:01.673" starttime="20171108 13:54:01.669"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171108 13:54:01.673" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171108 13:54:01.673" starttime="20171108 13:54:01.673"></status>
</kw>
<msg timestamp="20171108 13:54:01.674" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171108 13:54:01.674" starttime="20171108 13:54:00.758"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171108 13:54:01.675" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171108 13:54:01.675" starttime="20171108 13:54:01.674"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171108 13:54:01.676" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/3fbe03eb", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v2.0-21-g7155d02", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171108 13:54:01.677" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171108 13:54:01.677" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20171108 13:54:01.677" starttime="20171108 13:54:01.676"></status>
</kw>
<msg timestamp="20171108 13:54:01.677" level="INFO">${software_state} = {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Activ...</msg>
<status status="PASS" endtime="20171108 13:54:01.677" starttime="20171108 13:54:00.757"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>&amp;{software_state}[RequestedActivation]</arg>
<arg>${REQUESTED_ACTIVE}</arg>
</arguments>
<msg timestamp="20171108 13:54:01.678" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20171108 13:54:01.678" starttime="20171108 13:54:01.678"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>${version_id}</arg>
</arguments>
<status status="PASS" endtime="20171108 13:54:01.679" starttime="20171108 13:54:01.679"></status>
</kw>
<kw name="Wait For Activation State Change" library="code_update_utils">
<doc>Wait for the current activation state of ${version_id} to</doc>
<arguments>
<arg>${version_id}</arg>
<arg>${ACTIVATING}</arg>
</arguments>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20171108 13:54:01.686" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20171108 13:54:01.686" starttime="20171108 13:54:01.685"></status>
</kw>
<msg timestamp="20171108 13:54:01.686" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20171108 13:54:01.686" starttime="20171108 13:54:01.684"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20171108 13:54:01.687" starttime="20171108 13:54:01.687"></status>
</kw>
<status status="PASS" endtime="20171108 13:54:01.687" starttime="20171108 13:54:01.686"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20171108 13:54:01.688" starttime="20171108 13:54:01.688"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20171108 13:54:01.689" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20171108 13:54:01.689" starttime="20171108 13:54:01.689"></status>
</kw>
<msg timestamp="20171108 13:54:01.689" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20171108 13:54:01.689" starttime="20171108 13:54:01.688"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20171108 13:54:01.692" starttime="20171108 13:54:01.692"></status>
</kw>
<status status="PASS" endtime="20171108 13:54:01.692" starttime="20171108 13:54:01.691"></status>
</kw>
<status status="PASS" endtime="20171108 13:54:01.692" starttime="20171108 13:54:01.690"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20171108 13:54:01.693" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20171108 13:54:03.703" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20171108 13:54:03.703" starttime="20171108 13:54:01.693"></status>
</kw>
<status status="PASS" endtime="20171108 13:54:03.703" starttime="20171108 13:54:01.684"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/3fbe03eb</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171108 13:54:03.713" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171108 13:54:03.714" starttime="20171108 13:54:03.713"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171108 13:54:03.714" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171108 13:54:03.714" starttime="20171108 13:54:03.714"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171108 13:54:03.715" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171108 13:54:03.715" starttime="20171108 13:54:03.715"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171108 13:54:03.716" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171108 13:54:03.716" starttime="20171108 13:54:03.716"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171108 13:54:04.089" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171108 13:54:04.090" starttime="20171108 13:54:03.717"></status>
</kw>
<msg timestamp="20171108 13:54:04.090" level="INFO">${status} = PASS</msg>
<msg timestamp="20171108 13:54:04.090" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171108 13:54:04.090" starttime="20171108 13:54:03.716"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171108 13:54:04.090" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171108 13:54:04.090" starttime="20171108 13:54:04.090"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171108 13:54:04.091" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171108 13:54:04.091" starttime="20171108 13:54:04.091"></status>
</kw>
<status status="PASS" endtime="20171108 13:54:04.091" starttime="20171108 13:54:03.712"></status>
</kw>
<status status="PASS" endtime="20171108 13:54:04.091" starttime="20171108 13:54:03.712"></status>
</kw>
<status status="PASS" endtime="20171108 13:54:04.091" starttime="20171108 13:54:03.711"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171108 13:54:04.092" level="INFO">${base_uri} = /xyz/openbmc_project/software/3fbe03eb</msg>
<status status="PASS" endtime="20171108 13:54:04.092" starttime="20171108 13:54:04.092"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171108 13:54:04.094" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/software/3fbe03eb, method:Get, args:{}</msg>
<status status="PASS" endtime="20171108 13:54:04.094" starttime="20171108 13:54:04.094"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171108 13:54:04.095" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/software/3fbe03eb, method:Get, args:{}</msg>
<status status="PASS" endtime="20171108 13:54:04.095" starttime="20171108 13:54:04.095"></status>
</kw>
<status status="PASS" endtime="20171108 13:54:04.096" starttime="20171108 13:54:04.095"></status>
</kw>
<status status="PASS" endtime="20171108 13:54:04.096" starttime="20171108 13:54:04.093"></status>
</kw>
<status status="PASS" endtime="20171108 13:54:04.096" starttime="20171108 13:54:04.093"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171108 13:54:05.164" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/3fbe03eb, headers=None json=None</msg>
<msg timestamp="20171108 13:54:05.165" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171108 13:54:05.165" starttime="20171108 13:54:04.096"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171108 13:54:05.167" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/3fbe03eb", 
    "Progress": 30, 
    "Purpose": "...</msg>
<status status="PASS" endtime="20171108 13:54:05.167" starttime="20171108 13:54:05.166"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171108 13:54:05.168" level="INFO">Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/3fbe03eb", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v2.0-21-g7155d02", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171108 13:54:05.168" starttime="20171108 13:54:05.167"></status>
</kw>
<status status="PASS" endtime="20171108 13:54:05.168" starttime="20171108 13:54:05.167"></status>
</kw>
<status status="PASS" endtime="20171108 13:54:05.168" starttime="20171108 13:54:05.166"></status>
</kw>
<status status="PASS" endtime="20171108 13:54:05.168" starttime="20171108 13:54:05.165"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171108 13:54:05.169" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171108 13:54:05.169" starttime="20171108 13:54:05.169"></status>
</kw>
<msg timestamp="20171108 13:54:05.170" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171108 13:54:05.170" starttime="20171108 13:54:03.710"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171108 13:54:05.170" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171108 13:54:05.170" starttime="20171108 13:54:05.170"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171108 13:54:05.171" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/3fbe03eb", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v2.0-21-g7155d02", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171108 13:54:05.171" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171108 13:54:05.171" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20171108 13:54:05.171" starttime="20171108 13:54:05.171"></status>
</kw>
<status status="PASS" endtime="20171108 13:54:05.171" starttime="20171108 13:54:03.710"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/3fbe03eb</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171108 13:54:15.201" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171108 13:54:15.202" starttime="20171108 13:54:15.201"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171108 13:54:15.203" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171108 13:54:15.203" starttime="20171108 13:54:15.202"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171108 13:54:15.204" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171108 13:54:15.204" starttime="20171108 13:54:15.203"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171108 13:54:15.205" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171108 13:54:15.205" starttime="20171108 13:54:15.204"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171108 13:54:15.390" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171108 13:54:15.391" starttime="20171108 13:54:15.206"></status>
</kw>
<msg timestamp="20171108 13:54:15.391" level="INFO">${status} = PASS</msg>
<msg timestamp="20171108 13:54:15.391" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171108 13:54:15.391" starttime="20171108 13:54:15.206"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171108 13:54:15.391" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171108 13:54:15.391" starttime="20171108 13:54:15.391"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171108 13:54:15.395" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171108 13:54:15.395" starttime="20171108 13:54:15.392"></status>
</kw>
<status status="PASS" endtime="20171108 13:54:15.395" starttime="20171108 13:54:15.200"></status>
</kw>
<status status="PASS" endtime="20171108 13:54:15.395" starttime="20171108 13:54:15.199"></status>
</kw>
<status status="PASS" endtime="20171108 13:54:15.396" starttime="20171108 13:54:15.190"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171108 13:54:15.397" level="INFO">${base_uri} = /xyz/openbmc_project/software/3fbe03eb</msg>
<status status="PASS" endtime="20171108 13:54:15.397" starttime="20171108 13:54:15.396"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171108 13:54:15.399" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/software/3fbe03eb, method:Get, args:{}</msg>
<status status="PASS" endtime="20171108 13:54:15.399" starttime="20171108 13:54:15.398"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171108 13:54:15.401" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/software/3fbe03eb, method:Get, args:{}</msg>
<status status="PASS" endtime="20171108 13:54:15.402" starttime="20171108 13:54:15.401"></status>
</kw>
<status status="PASS" endtime="20171108 13:54:15.402" starttime="20171108 13:54:15.401"></status>
</kw>
<status status="PASS" endtime="20171108 13:54:15.402" starttime="20171108 13:54:15.397"></status>
</kw>
<status status="PASS" endtime="20171108 13:54:15.402" starttime="20171108 13:54:15.397"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171108 13:54:15.965" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/3fbe03eb, headers=None json=None</msg>
<msg timestamp="20171108 13:54:15.965" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171108 13:54:15.965" starttime="20171108 13:54:15.403"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171108 13:54:15.967" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/3fbe03eb", 
    "Progress": 30, 
    "Purpose": "...</msg>
<status status="PASS" endtime="20171108 13:54:15.967" starttime="20171108 13:54:15.966"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171108 13:54:15.968" level="INFO">Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/3fbe03eb", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v2.0-21-g7155d02", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171108 13:54:15.968" starttime="20171108 13:54:15.968"></status>
</kw>
<status status="PASS" endtime="20171108 13:54:15.968" starttime="20171108 13:54:15.967"></status>
</kw>
<status status="PASS" endtime="20171108 13:54:15.969" starttime="20171108 13:54:15.966"></status>
</kw>
<status status="PASS" endtime="20171108 13:54:15.969" starttime="20171108 13:54:15.965"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171108 13:54:15.973" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171108 13:54:15.973" starttime="20171108 13:54:15.972"></status>
</kw>
<msg timestamp="20171108 13:54:15.973" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171108 13:54:15.973" starttime="20171108 13:54:15.189"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171108 13:54:15.974" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171108 13:54:15.974" starttime="20171108 13:54:15.973"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171108 13:54:15.974" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/3fbe03eb", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v2.0-21-g7155d02", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171108 13:54:15.974" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171108 13:54:15.974" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20171108 13:54:15.975" starttime="20171108 13:54:15.974"></status>
</kw>
<status status="PASS" endtime="20171108 13:54:15.975" starttime="20171108 13:54:15.189"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/3fbe03eb</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171108 13:54:25.998" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171108 13:54:25.999" starttime="20171108 13:54:25.997"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171108 13:54:25.999" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171108 13:54:25.999" starttime="20171108 13:54:25.999"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171108 13:54:26.000" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171108 13:54:26.000" starttime="20171108 13:54:26.000"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171108 13:54:26.001" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171108 13:54:26.001" starttime="20171108 13:54:26.000"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171108 13:54:26.731" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171108 13:54:26.731" starttime="20171108 13:54:26.001"></status>
</kw>
<msg timestamp="20171108 13:54:26.731" level="INFO">${status} = PASS</msg>
<msg timestamp="20171108 13:54:26.732" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171108 13:54:26.732" starttime="20171108 13:54:26.001"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171108 13:54:26.732" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171108 13:54:26.732" starttime="20171108 13:54:26.732"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171108 13:54:26.733" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171108 13:54:26.733" starttime="20171108 13:54:26.733"></status>
</kw>
<status status="PASS" endtime="20171108 13:54:26.733" starttime="20171108 13:54:25.989"></status>
</kw>
<status status="PASS" endtime="20171108 13:54:26.733" starttime="20171108 13:54:25.989"></status>
</kw>
<status status="PASS" endtime="20171108 13:54:26.733" starttime="20171108 13:54:25.988"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171108 13:54:26.734" level="INFO">${base_uri} = /xyz/openbmc_project/software/3fbe03eb</msg>
<status status="PASS" endtime="20171108 13:54:26.734" starttime="20171108 13:54:26.734"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171108 13:54:26.736" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/software/3fbe03eb, method:Get, args:{}</msg>
<status status="PASS" endtime="20171108 13:54:26.736" starttime="20171108 13:54:26.735"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171108 13:54:26.737" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/software/3fbe03eb, method:Get, args:{}</msg>
<status status="PASS" endtime="20171108 13:54:26.737" starttime="20171108 13:54:26.737"></status>
</kw>
<status status="PASS" endtime="20171108 13:54:26.737" starttime="20171108 13:54:26.736"></status>
</kw>
<status status="PASS" endtime="20171108 13:54:26.738" starttime="20171108 13:54:26.735"></status>
</kw>
<status status="PASS" endtime="20171108 13:54:26.738" starttime="20171108 13:54:26.734"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171108 13:54:27.315" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/3fbe03eb, headers=None json=None</msg>
<msg timestamp="20171108 13:54:27.315" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171108 13:54:27.315" starttime="20171108 13:54:26.738"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171108 13:54:27.317" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/3fbe03eb", 
    "Progress": 30, 
    "Purpose": "...</msg>
<status status="PASS" endtime="20171108 13:54:27.317" starttime="20171108 13:54:27.316"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171108 13:54:27.318" level="INFO">Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/3fbe03eb", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v2.0-21-g7155d02", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171108 13:54:27.318" starttime="20171108 13:54:27.318"></status>
</kw>
<status status="PASS" endtime="20171108 13:54:27.318" starttime="20171108 13:54:27.317"></status>
</kw>
<status status="PASS" endtime="20171108 13:54:27.318" starttime="20171108 13:54:27.316"></status>
</kw>
<status status="PASS" endtime="20171108 13:54:27.318" starttime="20171108 13:54:27.315"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171108 13:54:27.323" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171108 13:54:27.323" starttime="20171108 13:54:27.319"></status>
</kw>
<msg timestamp="20171108 13:54:27.323" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171108 13:54:27.323" starttime="20171108 13:54:25.988"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171108 13:54:27.324" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171108 13:54:27.324" starttime="20171108 13:54:27.324"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171108 13:54:27.325" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/3fbe03eb", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v2.0-21-g7155d02", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171108 13:54:27.325" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171108 13:54:27.325" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20171108 13:54:27.326" starttime="20171108 13:54:27.325"></status>
</kw>
<status status="PASS" endtime="20171108 13:54:27.326" starttime="20171108 13:54:25.987"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/3fbe03eb</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171108 13:54:37.350" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171108 13:54:37.350" starttime="20171108 13:54:37.350"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171108 13:54:37.351" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171108 13:54:37.351" starttime="20171108 13:54:37.351"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171108 13:54:37.352" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171108 13:54:37.352" starttime="20171108 13:54:37.351"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171108 13:54:37.353" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171108 13:54:37.353" starttime="20171108 13:54:37.352"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171108 13:54:37.538" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171108 13:54:37.538" starttime="20171108 13:54:37.353"></status>
</kw>
<msg timestamp="20171108 13:54:37.538" level="INFO">${status} = PASS</msg>
<msg timestamp="20171108 13:54:37.538" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171108 13:54:37.538" starttime="20171108 13:54:37.353"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171108 13:54:37.539" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171108 13:54:37.539" starttime="20171108 13:54:37.538"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171108 13:54:37.540" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171108 13:54:37.540" starttime="20171108 13:54:37.539"></status>
</kw>
<status status="PASS" endtime="20171108 13:54:37.540" starttime="20171108 13:54:37.349"></status>
</kw>
<status status="PASS" endtime="20171108 13:54:37.540" starttime="20171108 13:54:37.349"></status>
</kw>
<status status="PASS" endtime="20171108 13:54:37.540" starttime="20171108 13:54:37.346"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171108 13:54:37.541" level="INFO">${base_uri} = /xyz/openbmc_project/software/3fbe03eb</msg>
<status status="PASS" endtime="20171108 13:54:37.541" starttime="20171108 13:54:37.540"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171108 13:54:37.543" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/software/3fbe03eb, method:Get, args:{}</msg>
<status status="PASS" endtime="20171108 13:54:37.544" starttime="20171108 13:54:37.543"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171108 13:54:37.545" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/software/3fbe03eb, method:Get, args:{}</msg>
<status status="PASS" endtime="20171108 13:54:37.545" starttime="20171108 13:54:37.545"></status>
</kw>
<status status="PASS" endtime="20171108 13:54:37.545" starttime="20171108 13:54:37.544"></status>
</kw>
<status status="PASS" endtime="20171108 13:54:37.545" starttime="20171108 13:54:37.541"></status>
</kw>
<status status="PASS" endtime="20171108 13:54:37.545" starttime="20171108 13:54:37.541"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171108 13:54:38.316" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/3fbe03eb, headers=None json=None</msg>
<msg timestamp="20171108 13:54:38.316" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171108 13:54:38.316" starttime="20171108 13:54:37.546"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171108 13:54:38.318" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/3fbe03eb", 
    "Progress": 30, 
    "Purpose": "...</msg>
<status status="PASS" endtime="20171108 13:54:38.318" starttime="20171108 13:54:38.317"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171108 13:54:38.319" level="INFO">Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/3fbe03eb", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v2.0-21-g7155d02", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171108 13:54:38.319" starttime="20171108 13:54:38.319"></status>
</kw>
<status status="PASS" endtime="20171108 13:54:38.320" starttime="20171108 13:54:38.318"></status>
</kw>
<status status="PASS" endtime="20171108 13:54:38.320" starttime="20171108 13:54:38.317"></status>
</kw>
<status status="PASS" endtime="20171108 13:54:38.320" starttime="20171108 13:54:38.316"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171108 13:54:38.320" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171108 13:54:38.320" starttime="20171108 13:54:38.320"></status>
</kw>
<msg timestamp="20171108 13:54:38.320" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171108 13:54:38.320" starttime="20171108 13:54:37.345"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171108 13:54:38.321" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171108 13:54:38.322" starttime="20171108 13:54:38.321"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171108 13:54:38.322" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/3fbe03eb", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v2.0-21-g7155d02", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171108 13:54:38.322" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171108 13:54:38.322" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20171108 13:54:38.322" starttime="20171108 13:54:38.322"></status>
</kw>
<status status="PASS" endtime="20171108 13:54:38.323" starttime="20171108 13:54:37.345"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/3fbe03eb</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171108 13:54:48.345" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171108 13:54:48.345" starttime="20171108 13:54:48.344"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171108 13:54:48.346" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171108 13:54:48.346" starttime="20171108 13:54:48.345"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171108 13:54:48.346" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171108 13:54:48.346" starttime="20171108 13:54:48.346"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171108 13:54:48.347" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171108 13:54:48.347" starttime="20171108 13:54:48.347"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171108 13:54:48.526" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171108 13:54:48.527" starttime="20171108 13:54:48.349"></status>
</kw>
<msg timestamp="20171108 13:54:48.527" level="INFO">${status} = PASS</msg>
<msg timestamp="20171108 13:54:48.527" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171108 13:54:48.527" starttime="20171108 13:54:48.348"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171108 13:54:48.528" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171108 13:54:48.528" starttime="20171108 13:54:48.527"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171108 13:54:48.528" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171108 13:54:48.528" starttime="20171108 13:54:48.528"></status>
</kw>
<status status="PASS" endtime="20171108 13:54:48.529" starttime="20171108 13:54:48.343"></status>
</kw>
<status status="PASS" endtime="20171108 13:54:48.529" starttime="20171108 13:54:48.342"></status>
</kw>
<status status="PASS" endtime="20171108 13:54:48.529" starttime="20171108 13:54:48.341"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171108 13:54:48.529" level="INFO">${base_uri} = /xyz/openbmc_project/software/3fbe03eb</msg>
<status status="PASS" endtime="20171108 13:54:48.529" starttime="20171108 13:54:48.529"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171108 13:54:48.532" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/software/3fbe03eb, method:Get, args:{}</msg>
<status status="PASS" endtime="20171108 13:54:48.532" starttime="20171108 13:54:48.531"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171108 13:54:48.533" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/software/3fbe03eb, method:Get, args:{}</msg>
<status status="PASS" endtime="20171108 13:54:48.533" starttime="20171108 13:54:48.533"></status>
</kw>
<status status="PASS" endtime="20171108 13:54:48.533" starttime="20171108 13:54:48.532"></status>
</kw>
<status status="PASS" endtime="20171108 13:54:48.533" starttime="20171108 13:54:48.530"></status>
</kw>
<status status="PASS" endtime="20171108 13:54:48.533" starttime="20171108 13:54:48.530"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171108 13:54:49.463" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/3fbe03eb, headers=None json=None</msg>
<msg timestamp="20171108 13:54:49.463" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171108 13:54:49.463" starttime="20171108 13:54:48.534"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171108 13:54:49.465" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/3fbe03eb", 
    "Progress": 30, 
    "Purpose": "...</msg>
<status status="PASS" endtime="20171108 13:54:49.465" starttime="20171108 13:54:49.464"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171108 13:54:49.466" level="INFO">Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/3fbe03eb", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v2.0-21-g7155d02", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171108 13:54:49.466" starttime="20171108 13:54:49.466"></status>
</kw>
<status status="PASS" endtime="20171108 13:54:49.466" starttime="20171108 13:54:49.465"></status>
</kw>
<status status="PASS" endtime="20171108 13:54:49.466" starttime="20171108 13:54:49.464"></status>
</kw>
<status status="PASS" endtime="20171108 13:54:49.466" starttime="20171108 13:54:49.463"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171108 13:54:49.467" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171108 13:54:49.467" starttime="20171108 13:54:49.467"></status>
</kw>
<msg timestamp="20171108 13:54:49.467" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171108 13:54:49.467" starttime="20171108 13:54:48.341"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171108 13:54:49.468" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171108 13:54:49.469" starttime="20171108 13:54:49.468"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171108 13:54:49.469" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/3fbe03eb", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v2.0-21-g7155d02", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171108 13:54:49.469" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171108 13:54:49.469" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20171108 13:54:49.469" starttime="20171108 13:54:49.469"></status>
</kw>
<status status="PASS" endtime="20171108 13:54:49.470" starttime="20171108 13:54:48.340"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/3fbe03eb</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171108 13:54:59.494" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171108 13:54:59.494" starttime="20171108 13:54:59.493"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171108 13:54:59.495" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171108 13:54:59.495" starttime="20171108 13:54:59.495"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171108 13:54:59.496" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171108 13:54:59.496" starttime="20171108 13:54:59.496"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171108 13:54:59.497" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171108 13:54:59.497" starttime="20171108 13:54:59.497"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171108 13:54:59.676" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171108 13:54:59.676" starttime="20171108 13:54:59.499"></status>
</kw>
<msg timestamp="20171108 13:54:59.676" level="INFO">${status} = PASS</msg>
<msg timestamp="20171108 13:54:59.676" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171108 13:54:59.676" starttime="20171108 13:54:59.498"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171108 13:54:59.677" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171108 13:54:59.677" starttime="20171108 13:54:59.676"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171108 13:54:59.678" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171108 13:54:59.678" starttime="20171108 13:54:59.677"></status>
</kw>
<status status="PASS" endtime="20171108 13:54:59.678" starttime="20171108 13:54:59.492"></status>
</kw>
<status status="PASS" endtime="20171108 13:54:59.678" starttime="20171108 13:54:59.492"></status>
</kw>
<status status="PASS" endtime="20171108 13:54:59.678" starttime="20171108 13:54:59.490"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171108 13:54:59.679" level="INFO">${base_uri} = /xyz/openbmc_project/software/3fbe03eb</msg>
<status status="PASS" endtime="20171108 13:54:59.679" starttime="20171108 13:54:59.678"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171108 13:54:59.681" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/software/3fbe03eb, method:Get, args:{}</msg>
<status status="PASS" endtime="20171108 13:54:59.681" starttime="20171108 13:54:59.680"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171108 13:54:59.682" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/software/3fbe03eb, method:Get, args:{}</msg>
<status status="PASS" endtime="20171108 13:54:59.682" starttime="20171108 13:54:59.681"></status>
</kw>
<status status="PASS" endtime="20171108 13:54:59.682" starttime="20171108 13:54:59.681"></status>
</kw>
<status status="PASS" endtime="20171108 13:54:59.682" starttime="20171108 13:54:59.679"></status>
</kw>
<status status="PASS" endtime="20171108 13:54:59.682" starttime="20171108 13:54:59.679"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171108 13:54:59.825" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/3fbe03eb, headers=None json=None</msg>
<msg timestamp="20171108 13:54:59.825" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171108 13:54:59.825" starttime="20171108 13:54:59.682"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171108 13:54:59.827" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/3fbe03eb", 
    "Progress": 30, 
    "Purpose": "...</msg>
<status status="PASS" endtime="20171108 13:54:59.827" starttime="20171108 13:54:59.827"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171108 13:54:59.828" level="INFO">Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/3fbe03eb", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v2.0-21-g7155d02", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171108 13:54:59.828" starttime="20171108 13:54:59.828"></status>
</kw>
<status status="PASS" endtime="20171108 13:54:59.829" starttime="20171108 13:54:59.827"></status>
</kw>
<status status="PASS" endtime="20171108 13:54:59.829" starttime="20171108 13:54:59.826"></status>
</kw>
<status status="PASS" endtime="20171108 13:54:59.829" starttime="20171108 13:54:59.826"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171108 13:54:59.829" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171108 13:54:59.833" starttime="20171108 13:54:59.829"></status>
</kw>
<msg timestamp="20171108 13:54:59.833" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171108 13:54:59.833" starttime="20171108 13:54:59.489"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171108 13:54:59.834" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171108 13:54:59.834" starttime="20171108 13:54:59.834"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171108 13:54:59.835" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/3fbe03eb", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v2.0-21-g7155d02", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171108 13:54:59.835" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171108 13:54:59.835" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20171108 13:54:59.835" starttime="20171108 13:54:59.835"></status>
</kw>
<status status="PASS" endtime="20171108 13:54:59.835" starttime="20171108 13:54:59.488"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/3fbe03eb</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171108 13:55:09.855" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171108 13:55:09.856" starttime="20171108 13:55:09.855"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171108 13:55:09.857" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171108 13:55:09.857" starttime="20171108 13:55:09.857"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171108 13:55:09.858" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171108 13:55:09.858" starttime="20171108 13:55:09.857"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171108 13:55:09.858" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171108 13:55:09.858" starttime="20171108 13:55:09.858"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171108 13:55:10.034" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171108 13:55:10.034" starttime="20171108 13:55:09.859"></status>
</kw>
<msg timestamp="20171108 13:55:10.034" level="INFO">${status} = PASS</msg>
<msg timestamp="20171108 13:55:10.034" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171108 13:55:10.034" starttime="20171108 13:55:09.859"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171108 13:55:10.035" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171108 13:55:10.035" starttime="20171108 13:55:10.035"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171108 13:55:10.036" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171108 13:55:10.036" starttime="20171108 13:55:10.035"></status>
</kw>
<status status="PASS" endtime="20171108 13:55:10.036" starttime="20171108 13:55:09.855"></status>
</kw>
<status status="PASS" endtime="20171108 13:55:10.036" starttime="20171108 13:55:09.854"></status>
</kw>
<status status="PASS" endtime="20171108 13:55:10.036" starttime="20171108 13:55:09.853"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171108 13:55:10.037" level="INFO">${base_uri} = /xyz/openbmc_project/software/3fbe03eb</msg>
<status status="PASS" endtime="20171108 13:55:10.037" starttime="20171108 13:55:10.036"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171108 13:55:10.039" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/software/3fbe03eb, method:Get, args:{}</msg>
<status status="PASS" endtime="20171108 13:55:10.039" starttime="20171108 13:55:10.038"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171108 13:55:10.040" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/software/3fbe03eb, method:Get, args:{}</msg>
<status status="PASS" endtime="20171108 13:55:10.040" starttime="20171108 13:55:10.040"></status>
</kw>
<status status="PASS" endtime="20171108 13:55:10.040" starttime="20171108 13:55:10.039"></status>
</kw>
<status status="PASS" endtime="20171108 13:55:10.040" starttime="20171108 13:55:10.038"></status>
</kw>
<status status="PASS" endtime="20171108 13:55:10.040" starttime="20171108 13:55:10.037"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171108 13:55:10.174" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/3fbe03eb, headers=None json=None</msg>
<msg timestamp="20171108 13:55:10.174" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171108 13:55:10.174" starttime="20171108 13:55:10.041"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171108 13:55:10.176" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/3fbe03eb", 
    "Progress": 30, 
    "Purpose": "...</msg>
<status status="PASS" endtime="20171108 13:55:10.176" starttime="20171108 13:55:10.175"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171108 13:55:10.177" level="INFO">Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/3fbe03eb", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v2.0-21-g7155d02", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171108 13:55:10.177" starttime="20171108 13:55:10.177"></status>
</kw>
<status status="PASS" endtime="20171108 13:55:10.177" starttime="20171108 13:55:10.176"></status>
</kw>
<status status="PASS" endtime="20171108 13:55:10.177" starttime="20171108 13:55:10.175"></status>
</kw>
<status status="PASS" endtime="20171108 13:55:10.177" starttime="20171108 13:55:10.174"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171108 13:55:10.178" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171108 13:55:10.178" starttime="20171108 13:55:10.178"></status>
</kw>
<msg timestamp="20171108 13:55:10.178" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171108 13:55:10.178" starttime="20171108 13:55:09.852"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171108 13:55:10.179" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171108 13:55:10.179" starttime="20171108 13:55:10.179"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171108 13:55:10.180" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/3fbe03eb", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v2.0-21-g7155d02", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171108 13:55:10.180" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171108 13:55:10.180" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20171108 13:55:10.180" starttime="20171108 13:55:10.179"></status>
</kw>
<status status="PASS" endtime="20171108 13:55:10.180" starttime="20171108 13:55:09.851"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/3fbe03eb</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171108 13:55:20.202" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171108 13:55:20.202" starttime="20171108 13:55:20.202"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171108 13:55:20.203" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171108 13:55:20.203" starttime="20171108 13:55:20.203"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171108 13:55:20.204" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171108 13:55:20.204" starttime="20171108 13:55:20.204"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171108 13:55:20.205" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171108 13:55:20.205" starttime="20171108 13:55:20.204"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171108 13:55:20.386" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171108 13:55:20.386" starttime="20171108 13:55:20.206"></status>
</kw>
<msg timestamp="20171108 13:55:20.386" level="INFO">${status} = PASS</msg>
<msg timestamp="20171108 13:55:20.386" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171108 13:55:20.386" starttime="20171108 13:55:20.205"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171108 13:55:20.387" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171108 13:55:20.387" starttime="20171108 13:55:20.387"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171108 13:55:20.388" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171108 13:55:20.388" starttime="20171108 13:55:20.387"></status>
</kw>
<status status="PASS" endtime="20171108 13:55:20.388" starttime="20171108 13:55:20.201"></status>
</kw>
<status status="PASS" endtime="20171108 13:55:20.388" starttime="20171108 13:55:20.201"></status>
</kw>
<status status="PASS" endtime="20171108 13:55:20.388" starttime="20171108 13:55:20.199"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171108 13:55:20.389" level="INFO">${base_uri} = /xyz/openbmc_project/software/3fbe03eb</msg>
<status status="PASS" endtime="20171108 13:55:20.389" starttime="20171108 13:55:20.389"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171108 13:55:20.391" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/software/3fbe03eb, method:Get, args:{}</msg>
<status status="PASS" endtime="20171108 13:55:20.391" starttime="20171108 13:55:20.391"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171108 13:55:20.392" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/software/3fbe03eb, method:Get, args:{}</msg>
<status status="PASS" endtime="20171108 13:55:20.392" starttime="20171108 13:55:20.392"></status>
</kw>
<status status="PASS" endtime="20171108 13:55:20.392" starttime="20171108 13:55:20.391"></status>
</kw>
<status status="PASS" endtime="20171108 13:55:20.393" starttime="20171108 13:55:20.390"></status>
</kw>
<status status="PASS" endtime="20171108 13:55:20.393" starttime="20171108 13:55:20.389"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171108 13:55:20.534" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/3fbe03eb, headers=None json=None</msg>
<msg timestamp="20171108 13:55:20.535" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171108 13:55:20.535" starttime="20171108 13:55:20.393"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171108 13:55:20.537" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/3fbe03eb", 
    "Progress": 30, 
    "Purpose": "...</msg>
<status status="PASS" endtime="20171108 13:55:20.537" starttime="20171108 13:55:20.536"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171108 13:55:20.538" level="INFO">Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/3fbe03eb", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v2.0-21-g7155d02", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171108 13:55:20.538" starttime="20171108 13:55:20.538"></status>
</kw>
<status status="PASS" endtime="20171108 13:55:20.538" starttime="20171108 13:55:20.537"></status>
</kw>
<status status="PASS" endtime="20171108 13:55:20.538" starttime="20171108 13:55:20.535"></status>
</kw>
<status status="PASS" endtime="20171108 13:55:20.538" starttime="20171108 13:55:20.535"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171108 13:55:20.543" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171108 13:55:20.543" starttime="20171108 13:55:20.539"></status>
</kw>
<msg timestamp="20171108 13:55:20.543" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171108 13:55:20.543" starttime="20171108 13:55:20.198"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171108 13:55:20.544" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171108 13:55:20.544" starttime="20171108 13:55:20.544"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171108 13:55:20.545" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/3fbe03eb", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v2.0-21-g7155d02", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171108 13:55:20.545" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171108 13:55:20.545" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20171108 13:55:20.545" starttime="20171108 13:55:20.545"></status>
</kw>
<status status="PASS" endtime="20171108 13:55:20.545" starttime="20171108 13:55:20.198"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/3fbe03eb</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171108 13:55:30.574" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171108 13:55:30.574" starttime="20171108 13:55:30.574"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171108 13:55:30.575" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171108 13:55:30.575" starttime="20171108 13:55:30.575"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171108 13:55:30.576" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171108 13:55:30.576" starttime="20171108 13:55:30.575"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171108 13:55:30.576" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171108 13:55:30.576" starttime="20171108 13:55:30.576"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171108 13:55:30.756" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171108 13:55:30.756" starttime="20171108 13:55:30.577"></status>
</kw>
<msg timestamp="20171108 13:55:30.757" level="INFO">${status} = PASS</msg>
<msg timestamp="20171108 13:55:30.757" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171108 13:55:30.757" starttime="20171108 13:55:30.577"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171108 13:55:30.758" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171108 13:55:30.758" starttime="20171108 13:55:30.757"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171108 13:55:30.759" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171108 13:55:30.759" starttime="20171108 13:55:30.758"></status>
</kw>
<status status="PASS" endtime="20171108 13:55:30.759" starttime="20171108 13:55:30.573"></status>
</kw>
<status status="PASS" endtime="20171108 13:55:30.759" starttime="20171108 13:55:30.573"></status>
</kw>
<status status="PASS" endtime="20171108 13:55:30.759" starttime="20171108 13:55:30.565"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171108 13:55:30.760" level="INFO">${base_uri} = /xyz/openbmc_project/software/3fbe03eb</msg>
<status status="PASS" endtime="20171108 13:55:30.760" starttime="20171108 13:55:30.760"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171108 13:55:30.764" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/software/3fbe03eb, method:Get, args:{}</msg>
<status status="PASS" endtime="20171108 13:55:30.764" starttime="20171108 13:55:30.763"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171108 13:55:30.765" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/software/3fbe03eb, method:Get, args:{}</msg>
<status status="PASS" endtime="20171108 13:55:30.765" starttime="20171108 13:55:30.765"></status>
</kw>
<status status="PASS" endtime="20171108 13:55:30.765" starttime="20171108 13:55:30.764"></status>
</kw>
<status status="PASS" endtime="20171108 13:55:30.765" starttime="20171108 13:55:30.762"></status>
</kw>
<status status="PASS" endtime="20171108 13:55:30.766" starttime="20171108 13:55:30.761"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171108 13:55:30.900" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/3fbe03eb, headers=None json=None</msg>
<msg timestamp="20171108 13:55:30.900" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171108 13:55:30.900" starttime="20171108 13:55:30.766"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171108 13:55:30.902" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/3fbe03eb", 
    "Progress": 30, 
    "Purpose": "...</msg>
<status status="PASS" endtime="20171108 13:55:30.902" starttime="20171108 13:55:30.902"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171108 13:55:30.903" level="INFO">Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/3fbe03eb", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v2.0-21-g7155d02", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171108 13:55:30.903" starttime="20171108 13:55:30.903"></status>
</kw>
<status status="PASS" endtime="20171108 13:55:30.903" starttime="20171108 13:55:30.902"></status>
</kw>
<status status="PASS" endtime="20171108 13:55:30.904" starttime="20171108 13:55:30.901"></status>
</kw>
<status status="PASS" endtime="20171108 13:55:30.904" starttime="20171108 13:55:30.901"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171108 13:55:30.905" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171108 13:55:30.905" starttime="20171108 13:55:30.904"></status>
</kw>
<msg timestamp="20171108 13:55:30.905" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171108 13:55:30.905" starttime="20171108 13:55:30.564"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171108 13:55:30.906" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171108 13:55:30.906" starttime="20171108 13:55:30.906"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171108 13:55:30.907" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/3fbe03eb", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v2.0-21-g7155d02", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171108 13:55:30.907" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171108 13:55:30.907" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20171108 13:55:30.907" starttime="20171108 13:55:30.906"></status>
</kw>
<status status="PASS" endtime="20171108 13:55:30.907" starttime="20171108 13:55:30.563"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/3fbe03eb</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171108 13:55:40.928" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171108 13:55:40.928" starttime="20171108 13:55:40.928"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171108 13:55:40.929" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171108 13:55:40.929" starttime="20171108 13:55:40.929"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171108 13:55:40.930" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171108 13:55:40.930" starttime="20171108 13:55:40.929"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171108 13:55:40.931" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171108 13:55:40.931" starttime="20171108 13:55:40.930"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171108 13:55:41.108" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171108 13:55:41.108" starttime="20171108 13:55:40.931"></status>
</kw>
<msg timestamp="20171108 13:55:41.108" level="INFO">${status} = PASS</msg>
<msg timestamp="20171108 13:55:41.108" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171108 13:55:41.108" starttime="20171108 13:55:40.931"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171108 13:55:41.109" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171108 13:55:41.109" starttime="20171108 13:55:41.108"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171108 13:55:41.109" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171108 13:55:41.110" starttime="20171108 13:55:41.109"></status>
</kw>
<status status="PASS" endtime="20171108 13:55:41.110" starttime="20171108 13:55:40.927"></status>
</kw>
<status status="PASS" endtime="20171108 13:55:41.110" starttime="20171108 13:55:40.927"></status>
</kw>
<status status="PASS" endtime="20171108 13:55:41.110" starttime="20171108 13:55:40.926"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171108 13:55:41.110" level="INFO">${base_uri} = /xyz/openbmc_project/software/3fbe03eb</msg>
<status status="PASS" endtime="20171108 13:55:41.110" starttime="20171108 13:55:41.110"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171108 13:55:41.113" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/software/3fbe03eb, method:Get, args:{}</msg>
<status status="PASS" endtime="20171108 13:55:41.113" starttime="20171108 13:55:41.112"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171108 13:55:41.114" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/software/3fbe03eb, method:Get, args:{}</msg>
<status status="PASS" endtime="20171108 13:55:41.114" starttime="20171108 13:55:41.113"></status>
</kw>
<status status="PASS" endtime="20171108 13:55:41.114" starttime="20171108 13:55:41.113"></status>
</kw>
<status status="PASS" endtime="20171108 13:55:41.114" starttime="20171108 13:55:41.111"></status>
</kw>
<status status="PASS" endtime="20171108 13:55:41.114" starttime="20171108 13:55:41.111"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171108 13:55:41.251" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/3fbe03eb, headers=None json=None</msg>
<msg timestamp="20171108 13:55:41.251" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171108 13:55:41.251" starttime="20171108 13:55:41.119"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171108 13:55:41.253" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/3fbe03eb", 
    "Progress": 30, 
    "Purpose": "...</msg>
<status status="PASS" endtime="20171108 13:55:41.253" starttime="20171108 13:55:41.253"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171108 13:55:41.254" level="INFO">Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/3fbe03eb", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v2.0-21-g7155d02", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171108 13:55:41.255" starttime="20171108 13:55:41.254"></status>
</kw>
<status status="PASS" endtime="20171108 13:55:41.255" starttime="20171108 13:55:41.253"></status>
</kw>
<status status="PASS" endtime="20171108 13:55:41.255" starttime="20171108 13:55:41.252"></status>
</kw>
<status status="PASS" endtime="20171108 13:55:41.255" starttime="20171108 13:55:41.252"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171108 13:55:41.256" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171108 13:55:41.256" starttime="20171108 13:55:41.256"></status>
</kw>
<msg timestamp="20171108 13:55:41.256" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171108 13:55:41.256" starttime="20171108 13:55:40.925"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171108 13:55:41.257" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171108 13:55:41.257" starttime="20171108 13:55:41.257"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171108 13:55:41.258" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/3fbe03eb", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v2.0-21-g7155d02", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171108 13:55:41.258" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171108 13:55:41.258" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20171108 13:55:41.258" starttime="20171108 13:55:41.257"></status>
</kw>
<status status="PASS" endtime="20171108 13:55:41.258" starttime="20171108 13:55:40.924"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/3fbe03eb</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171108 13:55:51.273" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171108 13:55:51.274" starttime="20171108 13:55:51.273"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171108 13:55:51.275" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171108 13:55:51.275" starttime="20171108 13:55:51.275"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171108 13:55:51.276" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171108 13:55:51.276" starttime="20171108 13:55:51.276"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171108 13:55:51.277" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171108 13:55:51.277" starttime="20171108 13:55:51.277"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171108 13:55:51.773" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171108 13:55:51.773" starttime="20171108 13:55:51.279"></status>
</kw>
<msg timestamp="20171108 13:55:51.773" level="INFO">${status} = PASS</msg>
<msg timestamp="20171108 13:55:51.773" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171108 13:55:51.773" starttime="20171108 13:55:51.278"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171108 13:55:51.774" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171108 13:55:51.774" starttime="20171108 13:55:51.773"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171108 13:55:51.774" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171108 13:55:51.775" starttime="20171108 13:55:51.774"></status>
</kw>
<status status="PASS" endtime="20171108 13:55:51.775" starttime="20171108 13:55:51.272"></status>
</kw>
<status status="PASS" endtime="20171108 13:55:51.775" starttime="20171108 13:55:51.271"></status>
</kw>
<status status="PASS" endtime="20171108 13:55:51.775" starttime="20171108 13:55:51.270"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171108 13:55:51.775" level="INFO">${base_uri} = /xyz/openbmc_project/software/3fbe03eb</msg>
<status status="PASS" endtime="20171108 13:55:51.776" starttime="20171108 13:55:51.775"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171108 13:55:51.778" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/software/3fbe03eb, method:Get, args:{}</msg>
<status status="PASS" endtime="20171108 13:55:51.778" starttime="20171108 13:55:51.777"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171108 13:55:51.779" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/software/3fbe03eb, method:Get, args:{}</msg>
<status status="PASS" endtime="20171108 13:55:51.779" starttime="20171108 13:55:51.779"></status>
</kw>
<status status="PASS" endtime="20171108 13:55:51.779" starttime="20171108 13:55:51.778"></status>
</kw>
<status status="PASS" endtime="20171108 13:55:51.779" starttime="20171108 13:55:51.776"></status>
</kw>
<status status="PASS" endtime="20171108 13:55:51.779" starttime="20171108 13:55:51.776"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171108 13:55:53.021" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/3fbe03eb, headers=None json=None</msg>
<msg timestamp="20171108 13:55:53.021" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171108 13:55:53.021" starttime="20171108 13:55:51.780"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171108 13:55:53.023" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/3fbe03eb", 
    "Progress": 30, 
    "Purpose": "...</msg>
<status status="PASS" endtime="20171108 13:55:53.023" starttime="20171108 13:55:53.023"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171108 13:55:53.024" level="INFO">Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/3fbe03eb", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v2.0-21-g7155d02", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171108 13:55:53.025" starttime="20171108 13:55:53.024"></status>
</kw>
<status status="PASS" endtime="20171108 13:55:53.025" starttime="20171108 13:55:53.024"></status>
</kw>
<status status="PASS" endtime="20171108 13:55:53.025" starttime="20171108 13:55:53.022"></status>
</kw>
<status status="PASS" endtime="20171108 13:55:53.025" starttime="20171108 13:55:53.022"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171108 13:55:53.025" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171108 13:55:53.025" starttime="20171108 13:55:53.025"></status>
</kw>
<msg timestamp="20171108 13:55:53.029" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171108 13:55:53.029" starttime="20171108 13:55:51.269"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171108 13:55:53.030" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171108 13:55:53.030" starttime="20171108 13:55:53.030"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171108 13:55:53.031" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/3fbe03eb", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v2.0-21-g7155d02", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171108 13:55:53.031" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171108 13:55:53.031" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20171108 13:55:53.031" starttime="20171108 13:55:53.030"></status>
</kw>
<status status="PASS" endtime="20171108 13:55:53.031" starttime="20171108 13:55:51.268"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/3fbe03eb</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171108 13:56:03.060" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171108 13:56:03.060" starttime="20171108 13:56:03.059"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171108 13:56:03.061" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171108 13:56:03.061" starttime="20171108 13:56:03.061"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171108 13:56:03.062" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171108 13:56:03.062" starttime="20171108 13:56:03.061"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171108 13:56:03.063" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171108 13:56:03.063" starttime="20171108 13:56:03.062"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171108 13:56:03.266" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171108 13:56:03.266" starttime="20171108 13:56:03.064"></status>
</kw>
<msg timestamp="20171108 13:56:03.266" level="INFO">${status} = PASS</msg>
<msg timestamp="20171108 13:56:03.266" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171108 13:56:03.266" starttime="20171108 13:56:03.063"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171108 13:56:03.267" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171108 13:56:03.267" starttime="20171108 13:56:03.266"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171108 13:56:03.267" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171108 13:56:03.267" starttime="20171108 13:56:03.267"></status>
</kw>
<status status="PASS" endtime="20171108 13:56:03.268" starttime="20171108 13:56:03.059"></status>
</kw>
<status status="PASS" endtime="20171108 13:56:03.268" starttime="20171108 13:56:03.058"></status>
</kw>
<status status="PASS" endtime="20171108 13:56:03.268" starttime="20171108 13:56:03.052"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171108 13:56:03.268" level="INFO">${base_uri} = /xyz/openbmc_project/software/3fbe03eb</msg>
<status status="PASS" endtime="20171108 13:56:03.268" starttime="20171108 13:56:03.268"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171108 13:56:03.271" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/software/3fbe03eb, method:Get, args:{}</msg>
<status status="PASS" endtime="20171108 13:56:03.271" starttime="20171108 13:56:03.270"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171108 13:56:03.272" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/software/3fbe03eb, method:Get, args:{}</msg>
<status status="PASS" endtime="20171108 13:56:03.272" starttime="20171108 13:56:03.271"></status>
</kw>
<status status="PASS" endtime="20171108 13:56:03.272" starttime="20171108 13:56:03.271"></status>
</kw>
<status status="PASS" endtime="20171108 13:56:03.273" starttime="20171108 13:56:03.269"></status>
</kw>
<status status="PASS" endtime="20171108 13:56:03.273" starttime="20171108 13:56:03.269"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171108 13:56:03.407" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/3fbe03eb, headers=None json=None</msg>
<msg timestamp="20171108 13:56:03.407" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171108 13:56:03.407" starttime="20171108 13:56:03.274"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171108 13:56:03.410" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/3fbe03eb", 
    "Progress": 30, 
    "Purpose": "...</msg>
<status status="PASS" endtime="20171108 13:56:03.410" starttime="20171108 13:56:03.409"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171108 13:56:03.411" level="INFO">Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/3fbe03eb", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v2.0-21-g7155d02", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171108 13:56:03.411" starttime="20171108 13:56:03.410"></status>
</kw>
<status status="PASS" endtime="20171108 13:56:03.411" starttime="20171108 13:56:03.410"></status>
</kw>
<status status="PASS" endtime="20171108 13:56:03.411" starttime="20171108 13:56:03.408"></status>
</kw>
<status status="PASS" endtime="20171108 13:56:03.411" starttime="20171108 13:56:03.408"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171108 13:56:03.412" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171108 13:56:03.412" starttime="20171108 13:56:03.411"></status>
</kw>
<msg timestamp="20171108 13:56:03.412" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171108 13:56:03.412" starttime="20171108 13:56:03.051"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171108 13:56:03.413" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171108 13:56:03.413" starttime="20171108 13:56:03.412"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171108 13:56:03.413" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/3fbe03eb", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v2.0-21-g7155d02", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171108 13:56:03.413" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171108 13:56:03.414" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20171108 13:56:03.414" starttime="20171108 13:56:03.413"></status>
</kw>
<status status="PASS" endtime="20171108 13:56:03.414" starttime="20171108 13:56:03.050"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/3fbe03eb</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171108 13:56:13.431" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171108 13:56:13.431" starttime="20171108 13:56:13.431"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171108 13:56:13.432" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171108 13:56:13.432" starttime="20171108 13:56:13.432"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171108 13:56:13.433" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171108 13:56:13.433" starttime="20171108 13:56:13.432"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171108 13:56:13.433" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171108 13:56:13.433" starttime="20171108 13:56:13.433"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171108 13:56:13.611" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171108 13:56:13.611" starttime="20171108 13:56:13.434"></status>
</kw>
<msg timestamp="20171108 13:56:13.611" level="INFO">${status} = PASS</msg>
<msg timestamp="20171108 13:56:13.611" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171108 13:56:13.611" starttime="20171108 13:56:13.434"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171108 13:56:13.612" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171108 13:56:13.612" starttime="20171108 13:56:13.612"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171108 13:56:13.613" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171108 13:56:13.613" starttime="20171108 13:56:13.612"></status>
</kw>
<status status="PASS" endtime="20171108 13:56:13.613" starttime="20171108 13:56:13.430"></status>
</kw>
<status status="PASS" endtime="20171108 13:56:13.613" starttime="20171108 13:56:13.429"></status>
</kw>
<status status="PASS" endtime="20171108 13:56:13.613" starttime="20171108 13:56:13.429"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171108 13:56:13.614" level="INFO">${base_uri} = /xyz/openbmc_project/software/3fbe03eb</msg>
<status status="PASS" endtime="20171108 13:56:13.614" starttime="20171108 13:56:13.614"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171108 13:56:13.617" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/software/3fbe03eb, method:Get, args:{}</msg>
<status status="PASS" endtime="20171108 13:56:13.617" starttime="20171108 13:56:13.616"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171108 13:56:13.618" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/software/3fbe03eb, method:Get, args:{}</msg>
<status status="PASS" endtime="20171108 13:56:13.618" starttime="20171108 13:56:13.618"></status>
</kw>
<status status="PASS" endtime="20171108 13:56:13.618" starttime="20171108 13:56:13.617"></status>
</kw>
<status status="PASS" endtime="20171108 13:56:13.618" starttime="20171108 13:56:13.615"></status>
</kw>
<status status="PASS" endtime="20171108 13:56:13.618" starttime="20171108 13:56:13.614"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171108 13:56:13.761" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/3fbe03eb, headers=None json=None</msg>
<msg timestamp="20171108 13:56:13.761" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171108 13:56:13.761" starttime="20171108 13:56:13.619"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171108 13:56:13.763" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/3fbe03eb", 
    "Progress": 30, 
    "Purpose": "...</msg>
<status status="PASS" endtime="20171108 13:56:13.763" starttime="20171108 13:56:13.762"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171108 13:56:13.764" level="INFO">Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/3fbe03eb", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v2.0-21-g7155d02", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171108 13:56:13.764" starttime="20171108 13:56:13.763"></status>
</kw>
<status status="PASS" endtime="20171108 13:56:13.764" starttime="20171108 13:56:13.763"></status>
</kw>
<status status="PASS" endtime="20171108 13:56:13.764" starttime="20171108 13:56:13.762"></status>
</kw>
<status status="PASS" endtime="20171108 13:56:13.764" starttime="20171108 13:56:13.761"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171108 13:56:13.765" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171108 13:56:13.765" starttime="20171108 13:56:13.765"></status>
</kw>
<msg timestamp="20171108 13:56:13.765" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171108 13:56:13.765" starttime="20171108 13:56:13.428"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171108 13:56:13.766" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171108 13:56:13.766" starttime="20171108 13:56:13.765"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171108 13:56:13.766" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/3fbe03eb", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v2.0-21-g7155d02", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171108 13:56:13.766" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171108 13:56:13.767" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20171108 13:56:13.767" starttime="20171108 13:56:13.766"></status>
</kw>
<status status="PASS" endtime="20171108 13:56:13.767" starttime="20171108 13:56:13.427"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/3fbe03eb</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171108 13:56:23.787" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171108 13:56:23.787" starttime="20171108 13:56:23.786"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171108 13:56:23.788" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171108 13:56:23.788" starttime="20171108 13:56:23.787"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171108 13:56:23.788" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171108 13:56:23.788" starttime="20171108 13:56:23.788"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171108 13:56:23.789" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171108 13:56:23.789" starttime="20171108 13:56:23.789"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171108 13:56:23.970" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171108 13:56:23.970" starttime="20171108 13:56:23.790"></status>
</kw>
<msg timestamp="20171108 13:56:23.971" level="INFO">${status} = PASS</msg>
<msg timestamp="20171108 13:56:23.971" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171108 13:56:23.971" starttime="20171108 13:56:23.789"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171108 13:56:23.972" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171108 13:56:23.972" starttime="20171108 13:56:23.971"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171108 13:56:23.973" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171108 13:56:23.973" starttime="20171108 13:56:23.972"></status>
</kw>
<status status="PASS" endtime="20171108 13:56:23.973" starttime="20171108 13:56:23.786"></status>
</kw>
<status status="PASS" endtime="20171108 13:56:23.973" starttime="20171108 13:56:23.785"></status>
</kw>
<status status="PASS" endtime="20171108 13:56:23.973" starttime="20171108 13:56:23.784"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171108 13:56:23.974" level="INFO">${base_uri} = /xyz/openbmc_project/software/3fbe03eb</msg>
<status status="PASS" endtime="20171108 13:56:23.974" starttime="20171108 13:56:23.973"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171108 13:56:23.976" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/software/3fbe03eb, method:Get, args:{}</msg>
<status status="PASS" endtime="20171108 13:56:23.976" starttime="20171108 13:56:23.975"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171108 13:56:23.977" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/software/3fbe03eb, method:Get, args:{}</msg>
<status status="PASS" endtime="20171108 13:56:23.977" starttime="20171108 13:56:23.977"></status>
</kw>
<status status="PASS" endtime="20171108 13:56:23.977" starttime="20171108 13:56:23.976"></status>
</kw>
<status status="PASS" endtime="20171108 13:56:23.977" starttime="20171108 13:56:23.974"></status>
</kw>
<status status="PASS" endtime="20171108 13:56:23.977" starttime="20171108 13:56:23.974"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171108 13:56:25.387" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/3fbe03eb, headers=None json=None</msg>
<msg timestamp="20171108 13:56:25.387" level="INFO">${ret} = &lt;Response [500]&gt;</msg>
<status status="PASS" endtime="20171108 13:56:25.387" starttime="20171108 13:56:23.985"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171108 13:56:25.390" level="INFO">${msg} = Response code:500, Content:{
  "data": {
    "description": "Internal Server Error", 
    "exception": "DBusException(\"Unknown interface 'xyz.openbmc_project.Software.ActivationProgress'.\",)", 
    ...</msg>
<status status="PASS" endtime="20171108 13:56:25.390" starttime="20171108 13:56:25.389"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171108 13:56:25.391" level="INFO">Response code:500, Content:{
  "data": {
    "description": "Internal Server Error", 
    "exception": "DBusException(\"Unknown interface 'xyz.openbmc_project.Software.ActivationProgress'.\",)", 
    "traceback": [
      "Traceback (most recent call last):", 
      "  File \"/usr/lib/python2.7/site-packages/bottle.py\", line 862, in _handle", 
      "    return route.call(**args)", 
      "  File \"/usr/lib/python2.7/site-packages/obmc/wsgi/apps/rest_dbus.py\", line 909, in __call__", 
      "    return self.callback(*a, **kw)", 
      "  File \"/usr/lib/python2.7/site-packages/obmc/wsgi/apps/rest_dbus.py\", line 966, in wrap", 
      "    return callback(*a, **kw)", 
      "  File \"/usr/lib/python2.7/site-packages/obmc/wsgi/apps/rest_dbus.py\", line 1149, in __call__", 
      "    return self.callback(*a, **kw)", 
      "  File \"/usr/lib/python2.7/site-packages/obmc/wsgi/apps/rest_dbus.py\", line 1123, in wrap", 
      "    return self.to_jsonp(callback(*a, **kw))", 
      "  File \"/usr/lib/python2.7/site-packages/bottle.py\", line 1734, in wrapper", 
      "    rv = callback(*a, **ka)", 
      "  File \"/usr/lib/python2.7/site-packages/obmc/wsgi/apps/rest_dbus.py\", line 1088, in wrap", 
      "    data = callback(*a, **kw)", 
      "  File \"/usr/lib/python2.7/site-packages/obmc/wsgi/apps/rest_dbus.py\", line 209, in __call__", 
      "    return getattr(self, 'do_' + request.method.lower())(**kw)", 
      "  File \"/usr/lib/python2.7/site-packages/obmc/wsgi/apps/rest_dbus.py\", line 547, in do_get", 
      "    mapper_data=request.route_data['map'])", 
      "  File \"/usr/lib/python2.7/site-packages/obmc/mapper/bindings.py\", line 126, in enumerate_object", 
      "    path, owner, interfaces, match))", 
      "  File \"/usr/lib/python2.7/site-packages/obmc/mapper/bindings.py\", line 110, in __get_properties_on_bus", 
      "    properties_iface, i))", 
      "  File \"/usr/lib/python2.7/site-packages/obmc/mapper/bindings.py\", line 96, in __get_properties_on_iface", 
      "    properties_iface.GetAll, iface)", 
      "  File \"/usr/lib/python2.7/site-packages/obmc/mapper/bindings.py\", line 82, in __try_properties_interface", 
      "    return f(*a)", 
      "  File \"/usr/lib/python2.7/site-packages/dbus/proxies.py\", line 145, in __call__", 
      "    **keywords)", 
      "  File \"/usr/lib/python2.7/site-packages/dbus/connection.py\", line 651, in call_blocking", 
      "    message, timeout)", 
      "DBusException: org.freedesktop.DBus.Error.UnknownInterface: Unknown interface 'xyz.openbmc_project.Software.ActivationProgress'."
    ]
  }, 
  "message": "500 Internal Server Error", 
  "status": "error"
}</msg>
<status status="PASS" endtime="20171108 13:56:25.391" starttime="20171108 13:56:25.390"></status>
</kw>
<status status="PASS" endtime="20171108 13:56:25.391" starttime="20171108 13:56:25.390"></status>
</kw>
<status status="PASS" endtime="20171108 13:56:25.391" starttime="20171108 13:56:25.388"></status>
</kw>
<status status="PASS" endtime="20171108 13:56:25.391" starttime="20171108 13:56:25.388"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171108 13:56:25.392" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171108 13:56:25.392" starttime="20171108 13:56:25.391"></status>
</kw>
<msg timestamp="20171108 13:56:25.392" level="INFO">${resp} = &lt;Response [500]&gt;</msg>
<status status="PASS" endtime="20171108 13:56:25.393" starttime="20171108 13:56:23.784"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171108 13:56:25.394" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171108 13:56:25.394" level="FAIL">500 != 200</msg>
<status status="FAIL" endtime="20171108 13:56:25.394" starttime="20171108 13:56:25.393"></status>
</kw>
<status status="FAIL" endtime="20171108 13:56:25.394" starttime="20171108 13:56:23.783"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/3fbe03eb</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171108 13:56:35.417" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171108 13:56:35.418" starttime="20171108 13:56:35.417"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171108 13:56:35.419" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171108 13:56:35.419" starttime="20171108 13:56:35.418"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171108 13:56:35.420" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171108 13:56:35.420" starttime="20171108 13:56:35.419"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171108 13:56:35.421" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171108 13:56:35.421" starttime="20171108 13:56:35.421"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171108 13:56:35.629" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171108 13:56:35.629" starttime="20171108 13:56:35.422"></status>
</kw>
<msg timestamp="20171108 13:56:35.629" level="INFO">${status} = PASS</msg>
<msg timestamp="20171108 13:56:35.630" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171108 13:56:35.630" starttime="20171108 13:56:35.422"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171108 13:56:35.630" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171108 13:56:35.630" starttime="20171108 13:56:35.630"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171108 13:56:35.631" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171108 13:56:35.631" starttime="20171108 13:56:35.631"></status>
</kw>
<status status="PASS" endtime="20171108 13:56:35.631" starttime="20171108 13:56:35.416"></status>
</kw>
<status status="PASS" endtime="20171108 13:56:35.631" starttime="20171108 13:56:35.415"></status>
</kw>
<status status="PASS" endtime="20171108 13:56:35.632" starttime="20171108 13:56:35.414"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171108 13:56:35.632" level="INFO">${base_uri} = /xyz/openbmc_project/software/3fbe03eb</msg>
<status status="PASS" endtime="20171108 13:56:35.632" starttime="20171108 13:56:35.632"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171108 13:56:35.634" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/software/3fbe03eb, method:Get, args:{}</msg>
<status status="PASS" endtime="20171108 13:56:35.634" starttime="20171108 13:56:35.634"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171108 13:56:35.635" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/software/3fbe03eb, method:Get, args:{}</msg>
<status status="PASS" endtime="20171108 13:56:35.636" starttime="20171108 13:56:35.635"></status>
</kw>
<status status="PASS" endtime="20171108 13:56:35.636" starttime="20171108 13:56:35.635"></status>
</kw>
<status status="PASS" endtime="20171108 13:56:35.636" starttime="20171108 13:56:35.633"></status>
</kw>
<status status="PASS" endtime="20171108 13:56:35.636" starttime="20171108 13:56:35.633"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171108 13:56:35.743" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/3fbe03eb, headers=None json=None</msg>
<msg timestamp="20171108 13:56:35.743" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171108 13:56:35.743" starttime="20171108 13:56:35.636"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171108 13:56:35.745" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
    "Path": "/tmp/images/3fbe03eb", 
    "Priority": 0, 
    "Purpose": "xyz.o...</msg>
<status status="PASS" endtime="20171108 13:56:35.746" starttime="20171108 13:56:35.745"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171108 13:56:35.747" level="INFO">Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
    "Path": "/tmp/images/3fbe03eb", 
    "Priority": 0, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v2.0-21-g7155d02", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171108 13:56:35.747" starttime="20171108 13:56:35.747"></status>
</kw>
<status status="PASS" endtime="20171108 13:56:35.747" starttime="20171108 13:56:35.746"></status>
</kw>
<status status="PASS" endtime="20171108 13:56:35.747" starttime="20171108 13:56:35.744"></status>
</kw>
<status status="PASS" endtime="20171108 13:56:35.747" starttime="20171108 13:56:35.744"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171108 13:56:35.748" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171108 13:56:35.749" starttime="20171108 13:56:35.748"></status>
</kw>
<msg timestamp="20171108 13:56:35.749" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171108 13:56:35.749" starttime="20171108 13:56:35.412"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171108 13:56:35.750" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171108 13:56:35.750" starttime="20171108 13:56:35.749"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171108 13:56:35.750" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
    "Path": "/tmp/images/3fbe03eb", 
    "Priority": 0, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v2.0-21-g7155d02", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171108 13:56:35.750" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171108 13:56:35.751" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20171108 13:56:35.751" starttime="20171108 13:56:35.750"></status>
</kw>
<status status="PASS" endtime="20171108 13:56:35.751" starttime="20171108 13:56:35.411"></status>
</kw>
<status status="PASS" endtime="20171108 13:56:35.751" starttime="20171108 13:54:01.680"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${SOFTWARE_VERSION_URI}${version_id}</arg>
</arguments>
<assign>
<var>${software_state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171108 13:56:35.755" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171108 13:56:35.755" starttime="20171108 13:56:35.754"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171108 13:56:35.756" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171108 13:56:35.756" starttime="20171108 13:56:35.755"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171108 13:56:35.756" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171108 13:56:35.756" starttime="20171108 13:56:35.756"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171108 13:56:35.757" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171108 13:56:35.757" starttime="20171108 13:56:35.757"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171108 13:56:35.953" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171108 13:56:35.953" starttime="20171108 13:56:35.758"></status>
</kw>
<msg timestamp="20171108 13:56:35.953" level="INFO">${status} = PASS</msg>
<msg timestamp="20171108 13:56:35.953" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171108 13:56:35.953" starttime="20171108 13:56:35.757"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171108 13:56:35.954" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171108 13:56:35.954" starttime="20171108 13:56:35.954"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171108 13:56:35.955" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171108 13:56:35.955" starttime="20171108 13:56:35.954"></status>
</kw>
<status status="PASS" endtime="20171108 13:56:35.955" starttime="20171108 13:56:35.754"></status>
</kw>
<status status="PASS" endtime="20171108 13:56:35.955" starttime="20171108 13:56:35.753"></status>
</kw>
<status status="PASS" endtime="20171108 13:56:35.955" starttime="20171108 13:56:35.752"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171108 13:56:35.956" level="INFO">${base_uri} = /xyz/openbmc_project/software/3fbe03eb</msg>
<status status="PASS" endtime="20171108 13:56:35.956" starttime="20171108 13:56:35.955"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171108 13:56:35.958" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/software/3fbe03eb, method:Get, args:{}</msg>
<status status="PASS" endtime="20171108 13:56:35.958" starttime="20171108 13:56:35.957"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171108 13:56:35.959" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/software/3fbe03eb, method:Get, args:{}</msg>
<status status="PASS" endtime="20171108 13:56:35.959" starttime="20171108 13:56:35.959"></status>
</kw>
<status status="PASS" endtime="20171108 13:56:35.959" starttime="20171108 13:56:35.958"></status>
</kw>
<status status="PASS" endtime="20171108 13:56:35.959" starttime="20171108 13:56:35.956"></status>
</kw>
<status status="PASS" endtime="20171108 13:56:35.959" starttime="20171108 13:56:35.956"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171108 13:56:36.066" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/3fbe03eb, headers=None json=None</msg>
<msg timestamp="20171108 13:56:36.066" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171108 13:56:36.066" starttime="20171108 13:56:35.960"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171108 13:56:36.068" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
    "Path": "/tmp/images/3fbe03eb", 
    "Priority": 0, 
    "Purpose": "xyz.o...</msg>
<status status="PASS" endtime="20171108 13:56:36.068" starttime="20171108 13:56:36.067"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171108 13:56:36.069" level="INFO">Response code:200, Content:{
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
    "Path": "/tmp/images/3fbe03eb", 
    "Priority": 0, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v2.0-21-g7155d02", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171108 13:56:36.069" starttime="20171108 13:56:36.069"></status>
</kw>
<status status="PASS" endtime="20171108 13:56:36.069" starttime="20171108 13:56:36.068"></status>
</kw>
<status status="PASS" endtime="20171108 13:56:36.070" starttime="20171108 13:56:36.067"></status>
</kw>
<status status="PASS" endtime="20171108 13:56:36.070" starttime="20171108 13:56:36.066"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171108 13:56:36.071" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171108 13:56:36.071" starttime="20171108 13:56:36.070"></status>
</kw>
<msg timestamp="20171108 13:56:36.071" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171108 13:56:36.071" starttime="20171108 13:56:35.752"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171108 13:56:36.072" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171108 13:56:36.072" starttime="20171108 13:56:36.071"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171108 13:56:36.072" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
    "Path": "/tmp/images/3fbe03eb", 
    "Priority": 0, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v2.0-21-g7155d02", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171108 13:56:36.072" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171108 13:56:36.073" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20171108 13:56:36.073" starttime="20171108 13:56:36.072"></status>
</kw>
<msg timestamp="20171108 13:56:36.073" level="INFO">${software_state} = {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Activ...</msg>
<status status="PASS" endtime="20171108 13:56:36.073" starttime="20171108 13:56:35.751"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>&amp;{software_state}[Activation]</arg>
<arg>${ACTIVE}</arg>
</arguments>
<msg timestamp="20171108 13:56:36.074" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20171108 13:56:36.074" starttime="20171108 13:56:36.073"></status>
</kw>
<status status="PASS" endtime="20171108 13:56:36.074" starttime="20171108 13:53:31.799"></status>
</kw>
<kw name="OBMC Reboot (off)" library="boot_utils">
<doc>Do "OBMC Reboot (off)" boot test.</doc>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>OBMC Boot Test \ loc_boot_stack=OBMC Reboot (off)</arg>
<arg>\ loc_stack_mode=${stack_mode} \ loc_quiet=${quiet}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171108 13:56:36.088" level="INFO">${cmd_buf} = OBMC Boot Test  loc_boot_stack=OBMC Reboot (off)  loc_stack_mode=normal  loc_quiet=0</msg>
<status status="PASS" endtime="20171108 13:56:36.088" starttime="20171108 13:56:36.087"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<kw name="OBMC Boot Test" library="obmc_boot_test_resource">
<arguments>
<arg>loc_boot_stack=OBMC Reboot (off)</arg>
<arg>loc_stack_mode=normal</arg>
<arg>loc_quiet=0</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${pos_arg1}' != '${EMPTY}'</arg>
<arg>Set To Dictionary</arg>
<arg>${arguments}</arg>
<arg>loc_boot_stack=${pos_arg1}</arg>
</arguments>
<status status="PASS" endtime="20171108 13:56:36.094" starttime="20171108 13:56:36.094"></status>
</kw>
<kw name="Obmc Boot Test Py" library="obmc_boot_test">
<doc>Do main program processing.</doc>
<arguments>
<arg>&amp;{arguments}</arg>
</arguments>
<msg timestamp="20171108 13:56:36.096" level="INFO">${boot_stack} = OBMC Reboot (off)</msg>
<msg timestamp="20171108 13:56:36.096" level="INFO">${stack_mode} = normal</msg>
<msg timestamp="20171108 13:56:36.097" level="INFO">${quiet} = 0</msg>
<msg timestamp="20171108 13:56:36.384" level="INFO">${plug_in_packages_list} = []</msg>
<msg timestamp="20171108 13:56:36.391" level="INFO">${program_pid} = 1</msg>
<kw name="Set BMC Power Policy" library="utils">
<doc>Set the given BMC power policy.</doc>
<arguments>
<arg>RESTORE_LAST_STATE</arg>
</arguments>
<kw name="Set Power Policy Method" library="utils">
<doc>Set the global bmc_power_policy_method to either 'Old' or 'New'.</doc>
<status status="PASS" endtime="20171108 13:56:36.404" starttime="20171108 13:56:36.404"></status>
</kw>
<kw name="Translate Power Policy Value" library="utils">
<doc>Translate the policy value and return the result.</doc>
<arguments>
<arg>${policy}</arg>
</arguments>
<assign>
<var>${policy}</var>
</assign>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${RESTORE_LAST_STATE}</arg>
</arguments>
<status status="PASS" endtime="20171108 13:56:36.405" starttime="20171108 13:56:36.405"></status>
</kw>
<msg timestamp="20171108 13:56:36.405" level="INFO">${policy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20171108 13:56:36.405" starttime="20171108 13:56:36.404"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${bmc_power_policy_method} Set Power Policy \ ${policy}</arg>
</arguments>
<kw name="New Set Power Policy" library="utils">
<doc>Set the given BMC power policy (new method).</doc>
<arguments>
<arg>xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${policy}</arg>
</arguments>
<assign>
<var>${valueDict}</var>
</assign>
<msg timestamp="20171108 13:56:36.419" level="INFO">${valueDict} = {u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore'}</msg>
<status status="PASS" endtime="20171108 13:56:36.419" starttime="20171108 13:56:36.419"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<doc>Write a D-Bus attribute with REST.</doc>
<arguments>
<arg>${POWER_RESTORE_URI}</arg>
<arg>PowerRestorePolicy</arg>
<arg>data=${valueDict}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171108 13:56:36.421" level="INFO">${base_uri} = /xyz/openbmc_project/control/host0/power_restore_policy</msg>
<status status="PASS" endtime="20171108 13:56:36.421" starttime="20171108 13:56:36.420"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171108 13:56:36.427" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171108 13:56:36.431" starttime="20171108 13:56:36.425"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171108 13:56:36.432" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171108 13:56:36.432" starttime="20171108 13:56:36.431"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171108 13:56:36.433" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171108 13:56:36.433" starttime="20171108 13:56:36.432"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171108 13:56:36.434" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171108 13:56:36.434" starttime="20171108 13:56:36.433"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171108 13:56:36.714" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171108 13:56:36.714" starttime="20171108 13:56:36.436"></status>
</kw>
<msg timestamp="20171108 13:56:36.715" level="INFO">${status} = PASS</msg>
<msg timestamp="20171108 13:56:36.715" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171108 13:56:36.715" starttime="20171108 13:56:36.435"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171108 13:56:36.715" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171108 13:56:36.715" starttime="20171108 13:56:36.715"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171108 13:56:36.716" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171108 13:56:36.716" starttime="20171108 13:56:36.716"></status>
</kw>
<status status="PASS" endtime="20171108 13:56:36.716" starttime="20171108 13:56:36.424"></status>
</kw>
<status status="PASS" endtime="20171108 13:56:36.717" starttime="20171108 13:56:36.423"></status>
</kw>
<status status="PASS" endtime="20171108 13:56:36.717" starttime="20171108 13:56:36.422"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171108 13:56:36.717" level="INFO">${base_uri} = /xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy</msg>
<status status="PASS" endtime="20171108 13:56:36.717" starttime="20171108 13:56:36.717"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171108 13:56:36.718" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171108 13:56:36.718" starttime="20171108 13:56:36.718"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20171108 13:56:36.719" starttime="20171108 13:56:36.718"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171108 13:56:36.721" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Put, args:{u'data': {u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Res...</msg>
<status status="PASS" endtime="20171108 13:56:36.721" starttime="20171108 13:56:36.719"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171108 13:56:36.722" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Put, args:{u'data': {u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20171108 13:56:36.722" starttime="20171108 13:56:36.722"></status>
</kw>
<status status="PASS" endtime="20171108 13:56:36.722" starttime="20171108 13:56:36.721"></status>
</kw>
<status status="PASS" endtime="20171108 13:56:36.723" starttime="20171108 13:56:36.719"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171108 13:56:36.851" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, data={"data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20171108 13:56:36.852" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171108 13:56:36.852" starttime="20171108 13:56:36.723"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171108 13:56:36.853" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171108 13:56:36.853" starttime="20171108 13:56:36.853"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171108 13:56:36.854" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171108 13:56:36.854" starttime="20171108 13:56:36.854"></status>
</kw>
<status status="PASS" endtime="20171108 13:56:36.855" starttime="20171108 13:56:36.854"></status>
</kw>
<status status="PASS" endtime="20171108 13:56:36.855" starttime="20171108 13:56:36.852"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171108 13:56:36.855" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171108 13:56:36.855" starttime="20171108 13:56:36.855"></status>
</kw>
<msg timestamp="20171108 13:56:36.856" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171108 13:56:36.856" starttime="20171108 13:56:36.421"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171108 13:56:36.856" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171108 13:56:36.856" starttime="20171108 13:56:36.856"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${verify} == ${FALSE}</arg>
</arguments>
<msg timestamp="20171108 13:56:36.857" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20171108 13:56:36.857" starttime="20171108 13:56:36.857"></status>
</kw>
<status status="PASS" endtime="20171108 13:56:36.857" starttime="20171108 13:56:36.419"></status>
</kw>
<status status="PASS" endtime="20171108 13:56:36.857" starttime="20171108 13:56:36.418"></status>
</kw>
<status status="PASS" endtime="20171108 13:56:36.857" starttime="20171108 13:56:36.406"></status>
</kw>
<kw name="Get System Power Policy" library="utils">
<doc>Get the BMC power policy.</doc>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="Set Power Policy Method" library="utils">
<doc>Set the global bmc_power_policy_method to either 'Old' or 'New'.</doc>
<status status="PASS" endtime="20171108 13:56:36.858" starttime="20171108 13:56:36.858"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${bmc_power_policy_method} Get Power Policy</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171108 13:56:36.859" level="INFO">${cmd_buf} = [u'New Get Power Policy']</msg>
<status status="PASS" endtime="20171108 13:56:36.859" starttime="20171108 13:56:36.859"></status>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>@{cmd_buf}</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="New Get Power Policy" library="utils">
<doc>Get the BMC power policy (new method).</doc>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${POWER_RESTORE_URI}</arg>
<arg>PowerRestorePolicy</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171108 13:56:36.864" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171108 13:56:36.864" starttime="20171108 13:56:36.864"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171108 13:56:36.865" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171108 13:56:36.865" starttime="20171108 13:56:36.865"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171108 13:56:36.866" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171108 13:56:36.866" starttime="20171108 13:56:36.865"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171108 13:56:36.866" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171108 13:56:36.866" starttime="20171108 13:56:36.866"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171108 13:56:37.051" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171108 13:56:37.051" starttime="20171108 13:56:36.867"></status>
</kw>
<msg timestamp="20171108 13:56:37.051" level="INFO">${status} = PASS</msg>
<msg timestamp="20171108 13:56:37.051" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171108 13:56:37.051" starttime="20171108 13:56:36.867"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171108 13:56:37.052" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171108 13:56:37.052" starttime="20171108 13:56:37.052"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171108 13:56:37.053" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171108 13:56:37.053" starttime="20171108 13:56:37.052"></status>
</kw>
<status status="PASS" endtime="20171108 13:56:37.053" starttime="20171108 13:56:36.863"></status>
</kw>
<status status="PASS" endtime="20171108 13:56:37.053" starttime="20171108 13:56:36.863"></status>
</kw>
<status status="PASS" endtime="20171108 13:56:37.053" starttime="20171108 13:56:36.862"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171108 13:56:37.054" level="INFO">${base_uri} = /xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy</msg>
<status status="PASS" endtime="20171108 13:56:37.054" starttime="20171108 13:56:37.053"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171108 13:56:37.056" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Get, args:{}</msg>
<status status="PASS" endtime="20171108 13:56:37.056" starttime="20171108 13:56:37.055"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171108 13:56:37.057" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Get, args:{}</msg>
<status status="PASS" endtime="20171108 13:56:37.057" starttime="20171108 13:56:37.057"></status>
</kw>
<status status="PASS" endtime="20171108 13:56:37.057" starttime="20171108 13:56:37.056"></status>
</kw>
<status status="PASS" endtime="20171108 13:56:37.057" starttime="20171108 13:56:37.055"></status>
</kw>
<status status="PASS" endtime="20171108 13:56:37.057" starttime="20171108 13:56:37.054"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171108 13:56:37.122" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, headers=None json=None</msg>
<msg timestamp="20171108 13:56:37.122" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171108 13:56:37.122" starttime="20171108 13:56:37.058"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171108 13:56:37.124" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171108 13:56:37.124" starttime="20171108 13:56:37.123"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171108 13:56:37.125" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171108 13:56:37.125" starttime="20171108 13:56:37.125"></status>
</kw>
<status status="PASS" endtime="20171108 13:56:37.125" starttime="20171108 13:56:37.124"></status>
</kw>
<status status="PASS" endtime="20171108 13:56:37.125" starttime="20171108 13:56:37.123"></status>
</kw>
<status status="PASS" endtime="20171108 13:56:37.125" starttime="20171108 13:56:37.122"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171108 13:56:37.126" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171108 13:56:37.126" starttime="20171108 13:56:37.126"></status>
</kw>
<msg timestamp="20171108 13:56:37.126" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171108 13:56:37.126" starttime="20171108 13:56:36.861"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171108 13:56:37.127" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171108 13:56:37.127" starttime="20171108 13:56:37.126"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171108 13:56:37.127" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171108 13:56:37.128" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171108 13:56:37.128" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore'}</msg>
<status status="PASS" endtime="20171108 13:56:37.128" starttime="20171108 13:56:37.127"></status>
</kw>
<msg timestamp="20171108 13:56:37.128" level="INFO">${currentPolicy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20171108 13:56:37.128" starttime="20171108 13:56:36.861"></status>
</kw>
<status status="PASS" endtime="20171108 13:56:37.128" starttime="20171108 13:56:36.860"></status>
</kw>
<msg timestamp="20171108 13:56:37.128" level="INFO">${currentPolicy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20171108 13:56:37.128" starttime="20171108 13:56:36.860"></status>
</kw>
<msg timestamp="20171108 13:56:37.128" level="INFO">${currentPolicy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20171108 13:56:37.129" starttime="20171108 13:56:36.858"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${currentPolicy}</arg>
<arg>${policy}</arg>
</arguments>
<msg timestamp="20171108 13:56:37.129" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20171108 13:56:37.129" starttime="20171108 13:56:37.129"></status>
</kw>
<status status="PASS" endtime="20171108 13:56:37.129" starttime="20171108 13:56:36.402"></status>
</kw>
<msg timestamp="20171108 13:56:37.135" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20171108 13:56:37.142" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20171108 13:56:37.143" level="INFO">${TEST_MESSAGE} = </msg>
<msg timestamp="20171108 13:56:37.143" level="INFO">${FFDC_LOG_PATH} = ./</msg>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/state/enumerate</arg>
<arg>quiet=${0}</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171108 13:56:37.228" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171108 13:56:37.232" starttime="20171108 13:56:37.226"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171108 13:56:37.233" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171108 13:56:37.233" starttime="20171108 13:56:37.233"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171108 13:56:37.234" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171108 13:56:37.234" starttime="20171108 13:56:37.233"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171108 13:56:37.235" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171108 13:56:37.235" starttime="20171108 13:56:37.234"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171108 13:56:37.420" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171108 13:56:37.420" starttime="20171108 13:56:37.236"></status>
</kw>
<msg timestamp="20171108 13:56:37.420" level="INFO">${status} = PASS</msg>
<msg timestamp="20171108 13:56:37.420" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171108 13:56:37.420" starttime="20171108 13:56:37.235"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171108 13:56:37.421" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171108 13:56:37.421" starttime="20171108 13:56:37.420"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171108 13:56:37.421" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171108 13:56:37.421" starttime="20171108 13:56:37.421"></status>
</kw>
<status status="PASS" endtime="20171108 13:56:37.422" starttime="20171108 13:56:37.226"></status>
</kw>
<status status="PASS" endtime="20171108 13:56:37.422" starttime="20171108 13:56:37.224"></status>
</kw>
<status status="PASS" endtime="20171108 13:56:37.422" starttime="20171108 13:56:37.222"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171108 13:56:37.422" level="INFO">${base_uri} = /xyz/openbmc_project/state/enumerate</msg>
<status status="PASS" endtime="20171108 13:56:37.422" starttime="20171108 13:56:37.422"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171108 13:56:37.425" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/state/enumerate, method:Get, args:{}</msg>
<status status="PASS" endtime="20171108 13:56:37.425" starttime="20171108 13:56:37.424"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171108 13:56:37.426" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/state/enumerate, method:Get, args:{}</msg>
<status status="PASS" endtime="20171108 13:56:37.426" starttime="20171108 13:56:37.425"></status>
</kw>
<status status="PASS" endtime="20171108 13:56:37.426" starttime="20171108 13:56:37.425"></status>
</kw>
<status status="PASS" endtime="20171108 13:56:37.426" starttime="20171108 13:56:37.423"></status>
</kw>
<status status="PASS" endtime="20171108 13:56:37.426" starttime="20171108 13:56:37.423"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171108 13:56:37.686" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/enumerate, headers=None json=None</msg>
<msg timestamp="20171108 13:56:37.686" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171108 13:56:37.686" starttime="20171108 13:56:37.426"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171108 13:56:37.688" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "/xyz/openbmc_project/state/bmc0": {
      "CurrentBMCState": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
      "RequestedBMCTransition": "xyz.openbmc...</msg>
<status status="PASS" endtime="20171108 13:56:37.688" starttime="20171108 13:56:37.688"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171108 13:56:37.689" level="INFO">Response code:200, Content:{
  "data": {
    "/xyz/openbmc_project/state/bmc0": {
      "CurrentBMCState": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
      "RequestedBMCTransition": "xyz.openbmc_project.State.BMC.Transition.None"
    }, 
    "/xyz/openbmc_project/state/chassis0": {
      "CurrentPowerState": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
      "RequestedPowerTransition": "xyz.openbmc_project.State.Chassis.Transition.Off"
    }, 
    "/xyz/openbmc_project/state/host0": {
      "AttemptsLeft": 3, 
      "BootProgress": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
      "CurrentHostState": "xyz.openbmc_project.State.Host.HostState.Off", 
      "OperatingSystemState": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
      "RequestedHostTransition": "xyz.openbmc_project.State.Host.Transition.Off"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171108 13:56:37.689" starttime="20171108 13:56:37.689"></status>
</kw>
<status status="PASS" endtime="20171108 13:56:37.690" starttime="20171108 13:56:37.688"></status>
</kw>
<status status="PASS" endtime="20171108 13:56:37.690" starttime="20171108 13:56:37.687"></status>
</kw>
<status status="PASS" endtime="20171108 13:56:37.690" starttime="20171108 13:56:37.687"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171108 13:56:37.690" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171108 13:56:37.690" starttime="20171108 13:56:37.690"></status>
</kw>
<msg timestamp="20171108 13:56:37.691" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171108 13:56:37.691" starttime="20171108 13:56:37.214"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171108 13:56:37.691" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171108 13:56:37.691" starttime="20171108 13:56:37.691"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171108 13:56:37.692" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/state/bmc0": {
      "CurrentBMCState": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
      "RequestedBMCTransition": "xyz.openbmc_project.State.BMC.Transition.None"
    }, 
    "/xyz/openbmc_project/state/chassis0": {
      "CurrentPowerState": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
      "RequestedPowerTransition": "xyz.openbmc_project.State.Chassis.Transition.Off"
    }, 
    "/xyz/openbmc_project/state/host0": {
      "AttemptsLeft": 3, 
      "BootProgress": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
      "CurrentHostState": "xyz.openbmc_project.State.Host.HostState.Off", 
      "OperatingSystemState": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
      "RequestedHostTransition": "xyz.openbmc_project.State.Host.Transition.Off"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171108 13:56:37.692" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171108 13:56:37.692" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'/xyz/openbmc_project/state/host0': {u'CurrentHostState': u'xyz.openbmc_project.State.Host.HostState.Off', u'RequestedHostTransition': u'xyz.openbm...</msg>
<status status="PASS" endtime="20171108 13:56:37.692" starttime="20171108 13:56:37.692"></status>
</kw>
<status status="PASS" endtime="20171108 13:56:37.693" starttime="20171108 13:56:37.203"></status>
</kw>
<kw name="Run Boot" library="obmc_boot_test">
<doc>Run the specified boot.</doc>
<arguments>
<arg>OBMC Reboot (off)</arg>
</arguments>
<msg timestamp="20171108 13:56:37.735" level="INFO">Log level changed from NONE to INFO.</msg>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>/sbin/reboot</arg>
<arg>fork=${1}</arg>
</arguments>
<msg timestamp="20171108 13:56:37.754" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171108 13:56:37.755" level="INFO">Starting command '/sbin/reboot'.</msg>
<status status="PASS" endtime="20171108 13:56:37.762" starttime="20171108 13:56:37.736"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171108 13:56:41.796" level="FAIL">
#(UTC) 2017/11/08 13:56:41.793272 -    4.019995 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20171108 13:56:41.797" starttime="20171108 13:56:37.783"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171108 13:56:45.816" level="FAIL">
#(UTC) 2017/11/08 13:56:45.812937 -    4.019665 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20171108 13:56:45.817" starttime="20171108 13:56:41.800"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171108 13:56:49.846" level="FAIL">
#(UTC) 2017/11/08 13:56:49.837346 -    4.024409 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20171108 13:56:49.851" starttime="20171108 13:56:45.820"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171108 13:56:53.879" level="FAIL">
#(UTC) 2017/11/08 13:56:53.876535 -    4.039189 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20171108 13:56:53.880" starttime="20171108 13:56:49.865"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171108 13:56:58.911" level="FAIL">
#(UTC) 2017/11/08 13:56:58.900332 -    5.023797 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             20
</msg>
<status status="FAIL" endtime="20171108 13:56:58.915" starttime="20171108 13:56:53.883"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<status status="PASS" endtime="20171108 13:57:03.946" starttime="20171108 13:56:58.929"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171108 13:57:08.992" level="FAIL">
#(UTC) 2017/11/08 13:57:08.988727 -    5.020214 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171108 13:57:08.993" starttime="20171108 13:57:03.978"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171108 13:57:14.038" level="FAIL">
#(UTC) 2017/11/08 13:57:14.023607 -    5.034880 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171108 13:57:14.044" starttime="20171108 13:57:08.998"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171108 13:57:19.103" level="FAIL">
#(UTC) 2017/11/08 13:57:19.088632 -    5.065025 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171108 13:57:19.109" starttime="20171108 13:57:14.058"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171108 13:57:24.141" level="FAIL">
#(UTC) 2017/11/08 13:57:24.137938 -    5.049306 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171108 13:57:24.142" starttime="20171108 13:57:19.124"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171108 13:57:29.161" level="FAIL">
#(UTC) 2017/11/08 13:57:29.157933 -    5.019995 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171108 13:57:29.162" starttime="20171108 13:57:24.145"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171108 13:57:34.178" level="FAIL">
#(UTC) 2017/11/08 13:57:34.175148 -    5.017215 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171108 13:57:34.179" starttime="20171108 13:57:29.164"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171108 13:57:39.211" level="FAIL">
#(UTC) 2017/11/08 13:57:39.207906 -    5.032758 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171108 13:57:39.212" starttime="20171108 13:57:34.182"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20171108 13:57:44.255" level="FAIL">
#(UTC) 2017/11/08 13:57:44.241229 -    5.033323 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20171108 13:57:44.261" starttime="20171108 13:57:39.215"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<status status="PASS" endtime="20171108 13:57:48.319" starttime="20171108 13:57:44.276"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>read uptime filler 2&gt;/dev/null &lt; /proc/uptime &amp;&amp; [ ! -z "\${uptime}" ] &amp;&amp; echo \${uptime}</arg>
<arg>quiet=1</arg>
</arguments>
<msg timestamp="20171108 13:57:48.396" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171108 13:57:48.396" level="INFO">Executing command 'read uptime filler 2&gt;/dev/null &lt; /proc/uptime &amp;&amp; [ ! -z "${uptime}" ] &amp;&amp; echo ${uptime}'.</msg>
<msg timestamp="20171108 13:57:48.397" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171108 13:57:48.398" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20171108 13:57:58.707" level="INFO">Read output: root@witherspoon:~#</msg>
<msg timestamp="20171108 13:57:58.707" level="INFO">Executing command 'read uptime filler 2&gt;/dev/null &lt; /proc/uptime &amp;&amp; [ ! -z "${uptime}" ] &amp;&amp; echo ${uptime}'.</msg>
<msg timestamp="20171108 13:57:58.838" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171108 13:57:58.848" starttime="20171108 13:57:48.387"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'rest': '^1$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/state/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171108 13:57:58.989" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171108 13:57:58.990" starttime="20171108 13:57:58.989"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171108 13:57:58.991" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171108 13:57:58.991" starttime="20171108 13:57:58.990"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171108 13:57:58.991" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171108 13:57:58.991" starttime="20171108 13:57:58.991"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171108 13:57:58.992" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171108 13:57:58.992" starttime="20171108 13:57:58.992"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171108 13:58:09.009" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)</msg>
<status status="FAIL" endtime="20171108 13:58:09.009" starttime="20171108 13:57:58.993"></status>
</kw>
<msg timestamp="20171108 13:58:09.009" level="INFO">${status} = FAIL</msg>
<msg timestamp="20171108 13:58:09.009" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)</msg>
<status status="PASS" endtime="20171108 13:58:09.009" starttime="20171108 13:57:58.993"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171108 13:58:09.010" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171108 13:58:09.010" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20171108 13:58:09.010" starttime="20171108 13:58:09.009"></status>
</kw>
<status status="FAIL" endtime="20171108 13:58:09.010" starttime="20171108 13:57:58.988"></status>
</kw>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171108 13:58:29.013" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171108 13:58:29.014" starttime="20171108 13:58:29.013"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171108 13:58:29.015" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171108 13:58:29.015" starttime="20171108 13:58:29.014"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171108 13:58:29.015" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171108 13:58:29.015" starttime="20171108 13:58:29.015"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171108 13:58:29.016" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171108 13:58:29.016" starttime="20171108 13:58:29.016"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171108 13:58:39.033" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)</msg>
<status status="FAIL" endtime="20171108 13:58:39.034" starttime="20171108 13:58:29.017"></status>
</kw>
<msg timestamp="20171108 13:58:39.034" level="INFO">${status} = FAIL</msg>
<msg timestamp="20171108 13:58:39.034" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)</msg>
<status status="PASS" endtime="20171108 13:58:39.034" starttime="20171108 13:58:29.016"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171108 13:58:39.035" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171108 13:58:39.035" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20171108 13:58:39.035" starttime="20171108 13:58:39.035"></status>
</kw>
<status status="FAIL" endtime="20171108 13:58:39.036" starttime="20171108 13:58:29.011"></status>
</kw>
<msg timestamp="20171108 13:58:39.036" level="FAIL">Keyword 'Post Login Request' failed after retrying for 40 seconds. The last error was: ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20171108 13:58:39.036" starttime="20171108 13:57:58.988"></status>
</kw>
<status status="FAIL" endtime="20171108 13:58:39.036" starttime="20171108 13:57:58.987"></status>
</kw>
<status status="FAIL" endtime="20171108 13:58:39.036" starttime="20171108 13:57:58.987"></status>
</kw>
<status status="FAIL" endtime="20171108 13:58:39.036" starttime="20171108 13:57:58.986"></status>
</kw>
<msg timestamp="20171108 13:58:39.037" level="FAIL">
#(UTC) 2017/11/08 13:58:39.036930 -   40.062836 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    0
</msg>
<status status="FAIL" endtime="20171108 13:58:39.037" starttime="20171108 13:57:58.984"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'rest': '^1$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/state/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171108 13:58:41.048" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171108 13:58:41.048" starttime="20171108 13:58:41.047"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171108 13:58:41.049" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171108 13:58:41.049" starttime="20171108 13:58:41.049"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171108 13:58:41.050" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171108 13:58:41.051" starttime="20171108 13:58:41.050"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171108 13:58:41.052" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171108 13:58:41.052" starttime="20171108 13:58:41.051"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171108 13:58:51.061" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)</msg>
<status status="FAIL" endtime="20171108 13:58:51.061" starttime="20171108 13:58:41.053"></status>
</kw>
<msg timestamp="20171108 13:58:51.062" level="INFO">${status} = FAIL</msg>
<msg timestamp="20171108 13:58:51.062" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)</msg>
<status status="PASS" endtime="20171108 13:58:51.062" starttime="20171108 13:58:41.052"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171108 13:58:51.063" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171108 13:58:51.063" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20171108 13:58:51.063" starttime="20171108 13:58:51.062"></status>
</kw>
<status status="FAIL" endtime="20171108 13:58:51.063" starttime="20171108 13:58:41.046"></status>
</kw>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171108 13:59:11.065" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171108 13:59:11.066" starttime="20171108 13:59:11.065"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171108 13:59:11.067" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171108 13:59:11.067" starttime="20171108 13:59:11.066"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171108 13:59:11.067" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171108 13:59:11.067" starttime="20171108 13:59:11.067"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171108 13:59:11.068" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171108 13:59:11.068" starttime="20171108 13:59:11.068"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171108 13:59:11.812" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171108 13:59:11.812" starttime="20171108 13:59:11.069"></status>
</kw>
<msg timestamp="20171108 13:59:11.812" level="INFO">${status} = PASS</msg>
<msg timestamp="20171108 13:59:11.812" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171108 13:59:11.812" starttime="20171108 13:59:11.068"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171108 13:59:11.813" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171108 13:59:11.813" starttime="20171108 13:59:11.813"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171108 13:59:11.814" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171108 13:59:11.814" starttime="20171108 13:59:11.813"></status>
</kw>
<status status="PASS" endtime="20171108 13:59:11.814" starttime="20171108 13:59:11.064"></status>
</kw>
<status status="PASS" endtime="20171108 13:59:11.814" starttime="20171108 13:58:41.045"></status>
</kw>
<status status="PASS" endtime="20171108 13:59:11.814" starttime="20171108 13:58:41.044"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171108 13:59:11.815" level="INFO">${base_uri} = /xyz/openbmc_project/state/enumerate</msg>
<status status="PASS" endtime="20171108 13:59:11.815" starttime="20171108 13:59:11.815"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171108 13:59:11.816" starttime="20171108 13:59:11.815"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171108 13:59:15.038" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/enumerate, headers=None json=None</msg>
<msg timestamp="20171108 13:59:15.038" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171108 13:59:15.038" starttime="20171108 13:59:11.816"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171108 13:59:15.039" starttime="20171108 13:59:15.039"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171108 13:59:15.039" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171108 13:59:15.040" starttime="20171108 13:59:15.039"></status>
</kw>
<msg timestamp="20171108 13:59:15.040" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171108 13:59:15.040" starttime="20171108 13:58:41.042"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171108 13:59:15.041" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171108 13:59:15.041" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20171108 13:59:15.041" starttime="20171108 13:59:15.040"></status>
</kw>
<status status="FAIL" endtime="20171108 13:59:15.041" starttime="20171108 13:58:41.041"></status>
</kw>
<msg timestamp="20171108 13:59:15.041" level="FAIL">
#(UTC) 2017/11/08 13:59:15.041062 -   36.004132 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    0
</msg>
<status status="FAIL" endtime="20171108 13:59:15.041" starttime="20171108 13:58:41.038"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'rest': '^1$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/state/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171108 13:59:17.048" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171108 13:59:17.048" starttime="20171108 13:59:17.047"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171108 13:59:17.049" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171108 13:59:17.049" starttime="20171108 13:59:17.049"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171108 13:59:17.050" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171108 13:59:17.050" starttime="20171108 13:59:17.050"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171108 13:59:17.052" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171108 13:59:17.052" starttime="20171108 13:59:17.050"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171108 13:59:17.809" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171108 13:59:17.809" starttime="20171108 13:59:17.053"></status>
</kw>
<msg timestamp="20171108 13:59:17.809" level="INFO">${status} = PASS</msg>
<msg timestamp="20171108 13:59:17.810" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171108 13:59:17.810" starttime="20171108 13:59:17.052"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171108 13:59:17.810" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171108 13:59:17.811" starttime="20171108 13:59:17.810"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171108 13:59:17.811" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171108 13:59:17.811" starttime="20171108 13:59:17.811"></status>
</kw>
<status status="PASS" endtime="20171108 13:59:17.812" starttime="20171108 13:59:17.047"></status>
</kw>
<status status="PASS" endtime="20171108 13:59:17.812" starttime="20171108 13:59:17.046"></status>
</kw>
<status status="PASS" endtime="20171108 13:59:17.812" starttime="20171108 13:59:17.045"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171108 13:59:17.812" level="INFO">${base_uri} = /xyz/openbmc_project/state/enumerate</msg>
<status status="PASS" endtime="20171108 13:59:17.812" starttime="20171108 13:59:17.812"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171108 13:59:17.813" starttime="20171108 13:59:17.813"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171108 13:59:19.609" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/enumerate, headers=None json=None</msg>
<msg timestamp="20171108 13:59:19.609" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171108 13:59:19.609" starttime="20171108 13:59:17.813"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171108 13:59:19.610" starttime="20171108 13:59:19.610"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171108 13:59:19.611" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171108 13:59:19.611" starttime="20171108 13:59:19.611"></status>
</kw>
<msg timestamp="20171108 13:59:19.612" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171108 13:59:19.612" starttime="20171108 13:59:17.045"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171108 13:59:19.613" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171108 13:59:19.613" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20171108 13:59:19.613" starttime="20171108 13:59:19.612"></status>
</kw>
<status status="FAIL" endtime="20171108 13:59:19.613" starttime="20171108 13:59:17.044"></status>
</kw>
<msg timestamp="20171108 13:59:19.614" level="FAIL">
#(UTC) 2017/11/08 13:59:19.613299 -    4.572237 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    0
</msg>
<status status="FAIL" endtime="20171108 13:59:19.614" starttime="20171108 13:59:17.042"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'rest': '^1$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/state/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171108 13:59:21.622" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171108 13:59:21.622" starttime="20171108 13:59:21.621"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171108 13:59:21.623" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171108 13:59:21.623" starttime="20171108 13:59:21.622"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171108 13:59:21.623" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171108 13:59:21.623" starttime="20171108 13:59:21.623"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171108 13:59:21.624" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171108 13:59:21.624" starttime="20171108 13:59:21.624"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171108 13:59:22.921" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171108 13:59:22.921" starttime="20171108 13:59:21.625"></status>
</kw>
<msg timestamp="20171108 13:59:22.921" level="INFO">${status} = PASS</msg>
<msg timestamp="20171108 13:59:22.921" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171108 13:59:22.921" starttime="20171108 13:59:21.625"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171108 13:59:22.922" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171108 13:59:22.922" starttime="20171108 13:59:22.922"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171108 13:59:22.923" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171108 13:59:22.923" starttime="20171108 13:59:22.923"></status>
</kw>
<status status="PASS" endtime="20171108 13:59:22.923" starttime="20171108 13:59:21.621"></status>
</kw>
<status status="PASS" endtime="20171108 13:59:22.923" starttime="20171108 13:59:21.620"></status>
</kw>
<status status="PASS" endtime="20171108 13:59:22.923" starttime="20171108 13:59:21.619"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171108 13:59:22.924" level="INFO">${base_uri} = /xyz/openbmc_project/state/enumerate</msg>
<status status="PASS" endtime="20171108 13:59:22.924" starttime="20171108 13:59:22.924"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171108 13:59:22.925" starttime="20171108 13:59:22.924"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171108 13:59:23.585" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/enumerate, headers=None json=None</msg>
<msg timestamp="20171108 13:59:23.585" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171108 13:59:23.586" starttime="20171108 13:59:22.925"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171108 13:59:23.586" starttime="20171108 13:59:23.586"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171108 13:59:23.587" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171108 13:59:23.587" starttime="20171108 13:59:23.587"></status>
</kw>
<msg timestamp="20171108 13:59:23.587" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171108 13:59:23.587" starttime="20171108 13:59:21.619"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171108 13:59:23.588" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171108 13:59:23.588" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20171108 13:59:23.588" starttime="20171108 13:59:23.587"></status>
</kw>
<status status="FAIL" endtime="20171108 13:59:23.588" starttime="20171108 13:59:21.618"></status>
</kw>
<msg timestamp="20171108 13:59:23.589" level="FAIL">
#(UTC) 2017/11/08 13:59:23.588307 -    3.975008 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    0
</msg>
<status status="FAIL" endtime="20171108 13:59:23.589" starttime="20171108 13:59:21.615"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'rest': '^1$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/state/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171108 13:59:25.595" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171108 13:59:25.596" starttime="20171108 13:59:25.595"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171108 13:59:25.596" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171108 13:59:25.597" starttime="20171108 13:59:25.596"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171108 13:59:25.597" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171108 13:59:25.597" starttime="20171108 13:59:25.597"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171108 13:59:25.598" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171108 13:59:25.598" starttime="20171108 13:59:25.598"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171108 13:59:26.097" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171108 13:59:26.098" starttime="20171108 13:59:25.599"></status>
</kw>
<msg timestamp="20171108 13:59:26.098" level="INFO">${status} = PASS</msg>
<msg timestamp="20171108 13:59:26.098" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171108 13:59:26.098" starttime="20171108 13:59:25.598"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171108 13:59:26.099" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171108 13:59:26.099" starttime="20171108 13:59:26.099"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171108 13:59:26.100" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171108 13:59:26.100" starttime="20171108 13:59:26.100"></status>
</kw>
<status status="PASS" endtime="20171108 13:59:26.101" starttime="20171108 13:59:25.594"></status>
</kw>
<status status="PASS" endtime="20171108 13:59:26.101" starttime="20171108 13:59:25.594"></status>
</kw>
<status status="PASS" endtime="20171108 13:59:26.101" starttime="20171108 13:59:25.593"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171108 13:59:26.102" level="INFO">${base_uri} = /xyz/openbmc_project/state/enumerate</msg>
<status status="PASS" endtime="20171108 13:59:26.102" starttime="20171108 13:59:26.102"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171108 13:59:26.103" starttime="20171108 13:59:26.102"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171108 13:59:27.798" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/enumerate, headers=None json=None</msg>
<msg timestamp="20171108 13:59:27.798" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171108 13:59:27.798" starttime="20171108 13:59:26.103"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171108 13:59:27.799" starttime="20171108 13:59:27.799"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171108 13:59:27.799" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171108 13:59:27.800" starttime="20171108 13:59:27.799"></status>
</kw>
<msg timestamp="20171108 13:59:27.800" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171108 13:59:27.800" starttime="20171108 13:59:25.592"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171108 13:59:27.801" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171108 13:59:27.801" starttime="20171108 13:59:27.800"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171108 13:59:27.801" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/state/bmc0": {
      "CurrentBMCState": "xyz.openbmc_project.State.BMC.BMCState.NotReady", 
      "RequestedBMCTransition": "xyz.openbmc_project.State.BMC.Transition.None"
    }, 
    "/xyz/openbmc_project/state/chassis0": {
      "CurrentPowerState": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
      "RequestedPowerTransition": "xyz.openbmc_project.State.Chassis.Transition.Off"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171108 13:59:27.801" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171108 13:59:27.801" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'/xyz/openbmc_project/state/chassis0': {u'CurrentPowerState': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'RequestedPowerTransition': u'x...</msg>
<status status="PASS" endtime="20171108 13:59:27.801" starttime="20171108 13:59:27.801"></status>
</kw>
<status status="PASS" endtime="20171108 13:59:27.802" starttime="20171108 13:59:25.591"></status>
</kw>
<status status="PASS" endtime="20171108 13:59:27.802" starttime="20171108 13:59:25.589"></status>
</kw>
<msg timestamp="20171108 13:59:27.820" level="INFO">Log level changed from NONE to INFO.</msg>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'host': u'^Off$', u'chassis': u'^Off$', u'operating_system': u'^Inactive$', u'rest': u'^1$', u'boot_progress': u'^Off|Unspecified$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/state/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171108 13:59:27.842" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171108 13:59:27.842" starttime="20171108 13:59:27.841"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171108 13:59:27.843" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171108 13:59:27.843" starttime="20171108 13:59:27.842"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171108 13:59:27.843" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171108 13:59:27.843" starttime="20171108 13:59:27.843"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171108 13:59:27.844" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171108 13:59:27.845" starttime="20171108 13:59:27.844"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171108 13:59:28.328" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171108 13:59:28.328" starttime="20171108 13:59:27.845"></status>
</kw>
<msg timestamp="20171108 13:59:28.328" level="INFO">${status} = PASS</msg>
<msg timestamp="20171108 13:59:28.328" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171108 13:59:28.328" starttime="20171108 13:59:27.845"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171108 13:59:28.329" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171108 13:59:28.329" starttime="20171108 13:59:28.329"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171108 13:59:28.330" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171108 13:59:28.330" starttime="20171108 13:59:28.329"></status>
</kw>
<status status="PASS" endtime="20171108 13:59:28.330" starttime="20171108 13:59:27.841"></status>
</kw>
<status status="PASS" endtime="20171108 13:59:28.330" starttime="20171108 13:59:27.840"></status>
</kw>
<status status="PASS" endtime="20171108 13:59:28.330" starttime="20171108 13:59:27.840"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171108 13:59:28.331" level="INFO">${base_uri} = /xyz/openbmc_project/state/enumerate</msg>
<status status="PASS" endtime="20171108 13:59:28.331" starttime="20171108 13:59:28.331"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171108 13:59:28.332" starttime="20171108 13:59:28.331"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171108 13:59:30.688" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/enumerate, headers=None json=None</msg>
<msg timestamp="20171108 13:59:30.689" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171108 13:59:30.689" starttime="20171108 13:59:28.332"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171108 13:59:30.690" starttime="20171108 13:59:30.689"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171108 13:59:30.690" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171108 13:59:30.690" starttime="20171108 13:59:30.690"></status>
</kw>
<msg timestamp="20171108 13:59:30.690" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171108 13:59:30.690" starttime="20171108 13:59:27.839"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171108 13:59:30.691" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171108 13:59:30.691" starttime="20171108 13:59:30.691"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171108 13:59:30.692" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/state/bmc0": {
      "CurrentBMCState": "xyz.openbmc_project.State.BMC.BMCState.NotReady", 
      "RequestedBMCTransition": "xyz.openbmc_project.State.BMC.Transition.None"
    }, 
    "/xyz/openbmc_project/state/chassis0": {
      "CurrentPowerState": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
      "RequestedPowerTransition": "xyz.openbmc_project.State.Chassis.Transition.Off"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171108 13:59:30.692" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171108 13:59:30.692" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'/xyz/openbmc_project/state/chassis0': {u'CurrentPowerState': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'RequestedPowerTransition': u'x...</msg>
<status status="PASS" endtime="20171108 13:59:30.692" starttime="20171108 13:59:30.691"></status>
</kw>
<status status="PASS" endtime="20171108 13:59:30.692" starttime="20171108 13:59:27.838"></status>
</kw>
<msg timestamp="20171108 13:59:30.693" level="FAIL">
#(UTC) 2017/11/08 13:59:30.692644 -    2.866177 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[chassis]:                                 Off
  state[host]:                                    
  state[operating_system]:                        
  state[boot_progress]:                           
</msg>
<status status="FAIL" endtime="20171108 13:59:30.693" starttime="20171108 13:59:27.837"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'host': u'^Off$', u'chassis': u'^Off$', u'operating_system': u'^Inactive$', u'rest': u'^1$', u'boot_progress': u'^Off|Unspecified$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=#</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/state/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171108 13:59:40.700" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171108 13:59:40.701" starttime="20171108 13:59:40.699"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171108 13:59:40.701" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171108 13:59:40.701" starttime="20171108 13:59:40.701"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171108 13:59:40.702" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171108 13:59:40.702" starttime="20171108 13:59:40.702"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171108 13:59:40.703" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171108 13:59:40.703" starttime="20171108 13:59:40.702"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171108 13:59:41.201" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171108 13:59:41.201" starttime="20171108 13:59:40.703"></status>
</kw>
<msg timestamp="20171108 13:59:41.201" level="INFO">${status} = PASS</msg>
<msg timestamp="20171108 13:59:41.201" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171108 13:59:41.201" starttime="20171108 13:59:40.703"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171108 13:59:41.202" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171108 13:59:41.202" starttime="20171108 13:59:41.201"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171108 13:59:41.202" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171108 13:59:41.203" starttime="20171108 13:59:41.202"></status>
</kw>
<status status="PASS" endtime="20171108 13:59:41.203" starttime="20171108 13:59:40.699"></status>
</kw>
<status status="PASS" endtime="20171108 13:59:41.203" starttime="20171108 13:59:40.698"></status>
</kw>
<status status="PASS" endtime="20171108 13:59:41.203" starttime="20171108 13:59:40.698"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171108 13:59:41.204" level="INFO">${base_uri} = /xyz/openbmc_project/state/enumerate</msg>
<status status="PASS" endtime="20171108 13:59:41.204" starttime="20171108 13:59:41.203"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171108 13:59:41.205" starttime="20171108 13:59:41.204"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171108 13:59:43.565" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/enumerate, headers=None json=None</msg>
<msg timestamp="20171108 13:59:43.565" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171108 13:59:43.565" starttime="20171108 13:59:41.205"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171108 13:59:43.566" starttime="20171108 13:59:43.566"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171108 13:59:43.567" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171108 13:59:43.567" starttime="20171108 13:59:43.567"></status>
</kw>
<msg timestamp="20171108 13:59:43.567" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171108 13:59:43.567" starttime="20171108 13:59:40.697"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171108 13:59:43.568" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171108 13:59:43.568" starttime="20171108 13:59:43.567"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171108 13:59:43.568" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/state/bmc0": {
      "CurrentBMCState": "xyz.openbmc_project.State.BMC.BMCState.NotReady", 
      "RequestedBMCTransition": "xyz.openbmc_project.State.BMC.Transition.None"
    }, 
    "/xyz/openbmc_project/state/chassis0": {
      "CurrentPowerState": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
      "RequestedPowerTransition": "xyz.openbmc_project.State.Chassis.Transition.Off"
    }, 
    "/xyz/openbmc_project/state/host0": {
      "AttemptsLeft": 3, 
      "BootProgress": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
      "CurrentHostState": "xyz.openbmc_project.State.Host.HostState.Off", 
      "OperatingSystemState": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
      "RequestedHostTransition": "xyz.openbmc_project.State.Host.Transition.Off"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171108 13:59:43.568" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171108 13:59:43.569" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'/xyz/openbmc_project/state/host0': {u'CurrentHostState': u'xyz.openbmc_project.State.Host.HostState.Off', u'RequestedHostTransition': u'xyz.openbm...</msg>
<status status="PASS" endtime="20171108 13:59:43.569" starttime="20171108 13:59:43.568"></status>
</kw>
<status status="PASS" endtime="20171108 13:59:43.569" starttime="20171108 13:59:40.696"></status>
</kw>
<status status="PASS" endtime="20171108 13:59:43.569" starttime="20171108 13:59:40.694"></status>
</kw>
<msg timestamp="20171108 13:59:43.584" level="INFO">Log level changed from NONE to INFO.</msg>
<status status="PASS" endtime="20171108 13:59:43.584" starttime="20171108 13:56:37.722"></status>
</kw>
<msg timestamp="20171108 13:59:43.600" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20171108 13:59:43.605" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20171108 13:59:43.611" level="INFO">Log level changed from NONE to INFO.</msg>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20171108 13:59:43.616" starttime="20171108 13:59:43.616"></status>
</kw>
<status status="PASS" endtime="20171108 13:59:43.621" starttime="20171108 13:56:36.095"></status>
</kw>
<kw type="teardown" name="Obmc Boot Test Teardown" library="obmc_boot_test">
<doc>Clean up after the Main keyword.</doc>
<msg timestamp="20171108 13:59:43.626" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20171108 13:59:43.635" level="INFO">${boot_stack} = </msg>
<msg timestamp="20171108 13:59:43.636" level="INFO">${stack_mode} = normal</msg>
<msg timestamp="20171108 13:59:43.636" level="INFO">${quiet} = 0</msg>
<status status="PASS" endtime="20171108 13:59:43.636" starttime="20171108 13:59:43.621"></status>
</kw>
<status status="PASS" endtime="20171108 13:59:43.636" starttime="20171108 13:56:36.093"></status>
</kw>
<status status="PASS" endtime="20171108 13:59:43.636" starttime="20171108 13:56:36.088"></status>
</kw>
<status status="PASS" endtime="20171108 13:59:43.636" starttime="20171108 13:56:36.074"></status>
</kw>
<kw name="Verify Running BMC Image" library="code_update_utils">
<doc>Verify that the version on the BMC is the same as the</doc>
<arguments>
<arg>${IMAGE_FILE_PATH}</arg>
</arguments>
<kw name="Get Version Tar" library="code_update_utils">
<doc>Read the image version from the MANIFEST inside the tarball.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<assign>
<var>${tar_version}</var>
</assign>
<msg timestamp="20171108 13:59:43.660" level="INFO">${tar_version} = v2.0-21-g7155d02</msg>
<status status="PASS" endtime="20171108 13:59:43.660" starttime="20171108 13:59:43.638"></status>
</kw>
<kw name="Get BMC Version" library="utils">
<doc>Returns BMC version from /etc/os-release.</doc>
<assign>
<var>${bmc_version}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20171108 13:59:43.662" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20171108 13:59:43.663" starttime="20171108 13:59:43.662"></status>
</kw>
<msg timestamp="20171108 13:59:43.663" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20171108 13:59:43.663" starttime="20171108 13:59:43.662"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20171108 13:59:43.664" starttime="20171108 13:59:43.664"></status>
</kw>
<status status="PASS" endtime="20171108 13:59:43.664" starttime="20171108 13:59:43.663"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20171108 13:59:43.665" starttime="20171108 13:59:43.664"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20171108 13:59:43.666" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20171108 13:59:43.666" starttime="20171108 13:59:43.666"></status>
</kw>
<msg timestamp="20171108 13:59:43.666" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20171108 13:59:43.666" starttime="20171108 13:59:43.665"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20171108 13:59:43.668" starttime="20171108 13:59:43.668"></status>
</kw>
<status status="PASS" endtime="20171108 13:59:43.668" starttime="20171108 13:59:43.667"></status>
</kw>
<status status="PASS" endtime="20171108 13:59:43.668" starttime="20171108 13:59:43.667"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20171108 13:59:43.669" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20171108 13:59:46.416" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20171108 13:59:46.416" starttime="20171108 13:59:43.668"></status>
</kw>
<status status="PASS" endtime="20171108 13:59:46.417" starttime="20171108 13:59:43.661"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>grep ^VERSION_ID= /etc/os-release | cut -f 2 -d '='</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20171108 13:59:46.417" level="INFO">${cmd} = grep ^VERSION_ID= /etc/os-release | cut -f 2 -d '='</msg>
<status status="PASS" endtime="20171108 13:59:46.417" starttime="20171108 13:59:46.417"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20171108 13:59:46.419" level="INFO">Executing command 'grep ^VERSION_ID= /etc/os-release | cut -f 2 -d '=''.</msg>
<msg timestamp="20171108 13:59:46.878" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20171108 13:59:46.878" level="INFO">${stdout} = "v2.0-21-g7155d02"</msg>
<msg timestamp="20171108 13:59:46.878" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171108 13:59:46.879" starttime="20171108 13:59:46.418"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20171108 13:59:46.879" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20171108 13:59:46.879" starttime="20171108 13:59:46.879"></status>
</kw>
<msg timestamp="20171108 13:59:46.879" level="INFO">${output} = "v2.0-21-g7155d02"</msg>
<status status="PASS" endtime="20171108 13:59:46.879" starttime="20171108 13:59:46.418"></status>
</kw>
<msg timestamp="20171108 13:59:46.880" level="INFO">${bmc_version} = "v2.0-21-g7155d02"</msg>
<status status="PASS" endtime="20171108 13:59:46.880" starttime="20171108 13:59:43.660"></status>
</kw>
<kw name="Remove String" library="String">
<doc>Removes all ``removables`` from the given ``string``.</doc>
<arguments>
<arg>${bmc_version}</arg>
<arg>"</arg>
</arguments>
<assign>
<var>${bmc_version}</var>
</assign>
<msg timestamp="20171108 13:59:46.880" level="INFO">${bmc_version} = v2.0-21-g7155d02</msg>
<status status="PASS" endtime="20171108 13:59:46.880" starttime="20171108 13:59:46.880"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${tar_version}</arg>
<arg>${bmc_version}</arg>
</arguments>
<msg timestamp="20171108 13:59:46.881" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171108 13:59:46.881" starttime="20171108 13:59:46.881"></status>
</kw>
<status status="PASS" endtime="20171108 13:59:46.881" starttime="20171108 13:59:43.637"></status>
</kw>
<kw type="teardown" name="REST BMC Code Update Teardown">
<doc>Do code update test teardown.</doc>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>FFDC</arg>
</arguments>
<status status="PASS" endtime="20171108 13:59:46.883" starttime="20171108 13:59:46.883"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20171108 13:59:46.884" level="INFO">${FFDC_DIR_PATH_STYLE} = 0</msg>
<status status="PASS" endtime="20171108 13:59:46.884" starttime="20171108 13:59:46.884"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20171108 13:59:46.885" level="INFO">${FFDC_DIR_PATH} = ./</msg>
<status status="PASS" endtime="20171108 13:59:46.885" starttime="20171108 13:59:46.884"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status status="PASS" endtime="20171108 13:59:46.885" starttime="20171108 13:59:46.885"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" endtime="20171108 13:59:46.886" starttime="20171108 13:59:46.886"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20171108 13:59:46.887" html="yes" level="INFO">Directory '&lt;a href="file:///home/fspcibld"&gt;/home/fspcibld&lt;/a&gt;' already exists.</msg>
<status status="PASS" endtime="20171108 13:59:46.887" starttime="20171108 13:59:46.886"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20171108 13:59:46.888" level="FAIL">File '/home/fspcibld/logs/test_history.txt' does not exist.</msg>
<status status="FAIL" endtime="20171108 13:59:46.888" starttime="20171108 13:59:46.888"></status>
</kw>
<msg timestamp="20171108 13:59:46.888" level="INFO">${exist} = False</msg>
<status status="PASS" endtime="20171108 13:59:46.888" starttime="20171108 13:59:46.887"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20171108 13:59:46.890" html="yes" level="INFO">Created file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171108 13:59:46.890" starttime="20171108 13:59:46.889"></status>
</kw>
<status status="PASS" endtime="20171108 13:59:46.890" starttime="20171108 13:59:46.889"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" endtime="20171108 13:59:46.890" starttime="20171108 13:59:46.890"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20171108 13:59:46.892" level="INFO">${cur_time} = 2017-11-08 13:59:46:891511</msg>
<status status="PASS" endtime="20171108 13:59:46.892" starttime="20171108 13:59:46.891"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20171108 13:59:46.892" level="INFO">${cur_time} = 20171108135946891511</msg>
<status status="PASS" endtime="20171108 13:59:46.893" starttime="20171108 13:59:46.892"></status>
</kw>
<msg timestamp="20171108 13:59:46.893" level="INFO">${cur_time} = 20171108135946891511</msg>
<status status="PASS" endtime="20171108 13:59:46.893" starttime="20171108 13:59:46.891"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20171108 13:59:46.894" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171108 13:59:46.894" starttime="20171108 13:59:46.893"></status>
</kw>
<status status="PASS" endtime="20171108 13:59:46.894" starttime="20171108 13:59:46.883"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>Run Keywords</arg>
<arg>Delete Error Logs</arg>
<arg>AND</arg>
<arg>Delete All Dumps</arg>
</arguments>
<status status="PASS" endtime="20171108 13:59:46.895" starttime="20171108 13:59:46.894"></status>
</kw>
<status status="PASS" endtime="20171108 13:59:46.895" starttime="20171108 13:59:46.882"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Fatal Error</arg>
<arg>msg=Code update failed.</arg>
</arguments>
<status status="PASS" endtime="20171108 13:59:46.896" starttime="20171108 13:59:46.896"></status>
</kw>
<status status="PASS" endtime="20171108 13:59:46.896" starttime="20171108 13:59:46.881"></status>
</kw>
<doc>Do a BMC code update by uploading image on BMC via REST.</doc>
<tags>
<tag>BMC_Code_Update</tag>
<tag>REST_BMC_Code_Update</tag>
</tags>
<status status="PASS" endtime="20171108 13:59:46.896" critical="yes" starttime="20171108 13:53:31.798"></status>
</test>
<doc>Update the BMC code on a target BMC.
Execution Method:
python -m robot -v OPENBMC_HOST:&lt;hostname&gt;
-v IMAGE_FILE_PATH:&lt;path/*.tar&gt; bmc_code_update.robot</doc>
<status status="PASS" endtime="20171108 13:59:46.897" starttime="20171108 13:53:27.604"></status>
</suite>
<statistics>
<total>
<stat fail="0" pass="1">Critical Tests</stat>
<stat fail="0" pass="1">All Tests</stat>
</total>
<tag>
<stat fail="0" pass="1">BMC_Code_Update</stat>
<stat fail="0" pass="1">REST_BMC_Code_Update</stat>
</tag>
<suite>
<stat fail="0" id="s1" name="Bmc Code Update" pass="1">Bmc Code Update</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
