<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.0.2 (Python 2.7.12 on linux2)" generated="20170501 18:27:31.780">
<suite id="s1" name="Tests" source="/tmp/root/27703/obmc-robot/tests">
<kw name="System Driver Data" type="setup">
<doc>System driver information.</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170501 18:27:32.160">Dictionary does not contain key 'host'.</msg>
<status starttime="20170501 18:27:32.160" endtime="20170501 18:27:32.161" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:27:32.161">${has_host} = False</msg>
<status starttime="20170501 18:27:32.160" endtime="20170501 18:27:32.161" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170501 18:27:32.161" endtime="20170501 18:27:32.162" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:32.161" endtime="20170501 18:27:32.162" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:32.163">${port_num} = 22</msg>
<status starttime="20170501 18:27:32.163" endtime="20170501 18:27:32.163" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:32.164">${SSH_PORT} = 22</msg>
<status starttime="20170501 18:27:32.163" endtime="20170501 18:27:32.164" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:32.164">${https_num} = 443</msg>
<status starttime="20170501 18:27:32.164" endtime="20170501 18:27:32.164" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:27:32.165">${AUTH_URI} = https://9.41.166.169:443</msg>
<status starttime="20170501 18:27:32.164" endtime="20170501 18:27:32.165" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:32.162" endtime="20170501 18:27:32.165" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:32.162" endtime="20170501 18:27:32.165" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170501 18:27:32.166">Dictionary does not contain key 'port'.</msg>
<status starttime="20170501 18:27:32.166" endtime="20170501 18:27:32.166" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:27:32.166">${has_port} = False</msg>
<status starttime="20170501 18:27:32.165" endtime="20170501 18:27:32.166" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170501 18:27:32.167" endtime="20170501 18:27:32.168" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170501 18:27:32.168" endtime="20170501 18:27:32.168" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:32.167" endtime="20170501 18:27:32.168" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:32.166" endtime="20170501 18:27:32.168" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:27:32.169">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170501 18:27:34.050">Read output: root@witherspoon:~#</msg>
<status starttime="20170501 18:27:32.169" endtime="20170501 18:27:34.051" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:32.159" endtime="20170501 18:27:34.051" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Driver Details</arg>
</arguments>
<kw name="Log BMC Driver Details">
<doc>Get BMC driver details and log.</doc>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DRIVER_CMD}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:34.052">Executing command 'cat /etc/os-release | grep ^VERSION_ID='.</msg>
<msg level="INFO" timestamp="20170501 18:27:34.119">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170501 18:27:34.120">${output} = VERSION_ID="v1.99.4-78-g4c673c6"</msg>
<msg level="INFO" timestamp="20170501 18:27:34.120">${stderr} = </msg>
<status starttime="20170501 18:27:34.052" endtime="20170501 18:27:34.120" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:27:34.121">Length is 0</msg>
<status starttime="20170501 18:27:34.120" endtime="20170501 18:27:34.121" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:27:34.121">VERSION_ID="v1.99.4-78-g4c673c6"</msg>
<status starttime="20170501 18:27:34.121" endtime="20170501 18:27:34.121" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:34.052" endtime="20170501 18:27:34.121" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:34.051" endtime="20170501 18:27:34.121" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log PNOR Driver Details</arg>
</arguments>
<kw name="Log PNOR Driver Details">
<doc>Get PNOR driver details and log.</doc>
<kw library="utils" name="Execute Command On BMC">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>${PNOR_CMD}</arg>
</arguments>
<assign>
<var>${pnor_details}</var>
</assign>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:34.123">Executing command '/usr/sbin/pflash -r /tmp/out.txt -P VERSION; cat /tmp/out.txt'.</msg>
<msg level="INFO" timestamp="20170501 18:27:34.290">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170501 18:27:34.290">${stdout} = Reading to "/tmp/out.txt" from 0x027e0000..0x027e1000 !
[                                                  ] 0%[==================================================] 100%
IBM-witherspoon-ibm-OP9_v1.15...</msg>
<msg level="INFO" timestamp="20170501 18:27:34.290">${stderr} = </msg>
<status starttime="20170501 18:27:34.122" endtime="20170501 18:27:34.290" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:27:34.291">Length is 0</msg>
<status starttime="20170501 18:27:34.291" endtime="20170501 18:27:34.291" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:27:34.291">${pnor_details} = Reading to "/tmp/out.txt" from 0x027e0000..0x027e1000 !
[                                                  ] 0%[==================================================] 100%
IBM-witherspoon-ibm-OP9_v1.15...</msg>
<status starttime="20170501 18:27:34.122" endtime="20170501 18:27:34.291" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>PNOR_INFO=${pnor_details}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:27:34.292">PNOR_INFO=Reading to "/tmp/out.txt" from 0x027e0000..0x027e1000 !
[                                                  ] 0%[==================================================] 100%
IBM-witherspoon-ibm-OP9_v1.15_1.22
	op-build-v1.15-115-ge46df0d-dirty
	buildroot-2017.02-4-gc28573e
	skiboot-5.5.0-rc3
	hostboot-3a3d65e
	linux-4.10.7-openpower1-pb32b856
	petitboot-v1.4.2-pa470686
	witherspoon-xml-07ef29d
	occ-e1889e5
	hostboot-binaries-46670e3
	capp-ucode-1bb7503
</msg>
<status starttime="20170501 18:27:34.291" endtime="20170501 18:27:34.293" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:34.122" endtime="20170501 18:27:34.293" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:34.122" endtime="20170501 18:27:34.293" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Model</arg>
</arguments>
<kw name="Log BMC Model">
<doc>Fetch BMC Model name from system and log.</doc>
<kw library="utils" name="Get BMC System Model">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${bmc_model}</var>
</assign>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170501 18:27:34.295">Dictionary does not contain key 'host'.</msg>
<status starttime="20170501 18:27:34.295" endtime="20170501 18:27:34.295" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:27:34.295">${has_host} = False</msg>
<status starttime="20170501 18:27:34.295" endtime="20170501 18:27:34.296" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170501 18:27:34.296" endtime="20170501 18:27:34.297" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:34.296" endtime="20170501 18:27:34.297" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:34.298">${port_num} = 22</msg>
<status starttime="20170501 18:27:34.298" endtime="20170501 18:27:34.298" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:34.298">${SSH_PORT} = 22</msg>
<status starttime="20170501 18:27:34.298" endtime="20170501 18:27:34.299" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:34.299">${https_num} = 443</msg>
<status starttime="20170501 18:27:34.299" endtime="20170501 18:27:34.299" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:27:34.300">${AUTH_URI} = https://9.41.166.169:443</msg>
<status starttime="20170501 18:27:34.299" endtime="20170501 18:27:34.300" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:34.297" endtime="20170501 18:27:34.300" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:34.297" endtime="20170501 18:27:34.300" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170501 18:27:34.301">Dictionary does not contain key 'port'.</msg>
<status starttime="20170501 18:27:34.301" endtime="20170501 18:27:34.301" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:27:34.301">${has_port} = False</msg>
<status starttime="20170501 18:27:34.300" endtime="20170501 18:27:34.301" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170501 18:27:34.302" endtime="20170501 18:27:34.303" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170501 18:27:34.303" endtime="20170501 18:27:34.303" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:34.302" endtime="20170501 18:27:34.303" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:34.301" endtime="20170501 18:27:34.304" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:27:34.304">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170501 18:27:35.952">Read output: root@witherspoon:~#</msg>
<status starttime="20170501 18:27:34.304" endtime="20170501 18:27:35.952" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:34.294" endtime="20170501 18:27:35.952" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:35.953">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg level="INFO" timestamp="20170501 18:27:36.021">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170501 18:27:36.021">${bmc_model} = Witherspoon</msg>
<msg level="INFO" timestamp="20170501 18:27:36.021">${stderr} = </msg>
<status starttime="20170501 18:27:35.953" endtime="20170501 18:27:36.021" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:27:36.022">Length is 0</msg>
<status starttime="20170501 18:27:36.021" endtime="20170501 18:27:36.022" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:27:36.022">Length is 11</msg>
<status starttime="20170501 18:27:36.022" endtime="20170501 18:27:36.022" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:27:36.022">${bmc_model} = Witherspoon</msg>
<status starttime="20170501 18:27:34.294" endtime="20170501 18:27:36.023" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>BMC Model=${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:27:36.023">BMC Model=Witherspoon</msg>
<status starttime="20170501 18:27:36.023" endtime="20170501 18:27:36.023" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:34.293" endtime="20170501 18:27:36.023" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:34.293" endtime="20170501 18:27:36.023" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Enable Core Dump On BMC</arg>
</arguments>
<kw library="utils" name="Enable Core Dump On BMC">
<doc>Enable core dump collection.</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170501 18:27:36.025">Dictionary does not contain key 'host'.</msg>
<status starttime="20170501 18:27:36.025" endtime="20170501 18:27:36.025" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:27:36.025">${has_host} = False</msg>
<status starttime="20170501 18:27:36.024" endtime="20170501 18:27:36.025" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170501 18:27:36.026" endtime="20170501 18:27:36.026" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:36.026" endtime="20170501 18:27:36.027" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:36.028">${port_num} = 22</msg>
<status starttime="20170501 18:27:36.028" endtime="20170501 18:27:36.028" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:36.028">${SSH_PORT} = 22</msg>
<status starttime="20170501 18:27:36.028" endtime="20170501 18:27:36.028" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:36.029">${https_num} = 443</msg>
<status starttime="20170501 18:27:36.029" endtime="20170501 18:27:36.029" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:27:36.030">${AUTH_URI} = https://9.41.166.169:443</msg>
<status starttime="20170501 18:27:36.029" endtime="20170501 18:27:36.030" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:36.027" endtime="20170501 18:27:36.030" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:36.027" endtime="20170501 18:27:36.030" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170501 18:27:36.031">Dictionary does not contain key 'port'.</msg>
<status starttime="20170501 18:27:36.031" endtime="20170501 18:27:36.031" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:27:36.031">${has_port} = False</msg>
<status starttime="20170501 18:27:36.030" endtime="20170501 18:27:36.031" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170501 18:27:36.032" endtime="20170501 18:27:36.033" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170501 18:27:36.033" endtime="20170501 18:27:36.033" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:36.032" endtime="20170501 18:27:36.033" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:36.031" endtime="20170501 18:27:36.033" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:27:36.034">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170501 18:27:37.740">Read output: root@witherspoon:~#</msg>
<status starttime="20170501 18:27:36.033" endtime="20170501 18:27:37.740" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:36.024" endtime="20170501 18:27:37.740" status="PASS"></status>
</kw>
<kw library="utils" name="Execute Command On BMC">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern</arg>
</arguments>
<assign>
<var>${core_pattern}</var>
</assign>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:37.742">Executing command 'echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern'.</msg>
<msg level="INFO" timestamp="20170501 18:27:37.848">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170501 18:27:37.848">${stdout} = /tmp/core_%e.%p</msg>
<msg level="INFO" timestamp="20170501 18:27:37.849">${stderr} = </msg>
<status starttime="20170501 18:27:37.741" endtime="20170501 18:27:37.849" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:27:37.849">Length is 0</msg>
<status starttime="20170501 18:27:37.849" endtime="20170501 18:27:37.849" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:27:37.849">${core_pattern} = /tmp/core_%e.%p</msg>
<status starttime="20170501 18:27:37.741" endtime="20170501 18:27:37.849" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${core_pattern}</arg>
<arg>/tmp/core_%e.%p</arg>
</arguments>
<status starttime="20170501 18:27:37.850" endtime="20170501 18:27:37.850" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:36.024" endtime="20170501 18:27:37.850" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:36.023" endtime="20170501 18:27:37.850" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:32.159" endtime="20170501 18:27:37.850" status="PASS"></status>
</kw>
<suite id="s1-s1" name="Security" source="/tmp/root/27703/obmc-robot/tests/security">
<suite id="s1-s1-s1" name="Test Ssl" source="/tmp/root/27703/obmc-robot/tests/security/test_ssl.robot">
<test id="s1-s1-s1-t1" name="Test SSL Connection">
<kw library="rest_client" name="Initialize OpenBMC">
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:27:37.931">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170501 18:27:37.931" endtime="20170501 18:27:37.932" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:37.932">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170501 18:27:37.932" endtime="20170501 18:27:37.932" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:37.933">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170501 18:27:37.933" endtime="20170501 18:27:37.933" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:37.934">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170501 18:27:37.933" endtime="20170501 18:27:37.934" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:27:38.174">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170501 18:27:37.934" endtime="20170501 18:27:38.174" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:27:38.174">${status} = PASS</msg>
<msg level="INFO" timestamp="20170501 18:27:38.174">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:27:37.934" endtime="20170501 18:27:38.174" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:27:38.175">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:27:38.174" endtime="20170501 18:27:38.175" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:27:38.175">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:27:38.175" endtime="20170501 18:27:38.175" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:37.930" endtime="20170501 18:27:38.176" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:37.930" endtime="20170501 18:27:38.176" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:37.929" endtime="20170501 18:27:38.176" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc" name="FFDC On Test Case Fail" type="teardown">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="state_manager" name="Is Host Quiesced">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:27:38.180">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170501 18:27:38.180" endtime="20170501 18:27:38.181" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:38.182">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170501 18:27:38.182" endtime="20170501 18:27:38.182" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:38.183">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170501 18:27:38.182" endtime="20170501 18:27:38.183" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:38.183">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170501 18:27:38.183" endtime="20170501 18:27:38.183" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:27:38.378">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170501 18:27:38.184" endtime="20170501 18:27:38.378" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:27:38.378">${status} = PASS</msg>
<msg level="INFO" timestamp="20170501 18:27:38.378">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:27:38.184" endtime="20170501 18:27:38.378" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:27:38.379">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:27:38.378" endtime="20170501 18:27:38.379" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:27:38.379">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:27:38.379" endtime="20170501 18:27:38.379" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:38.179" endtime="20170501 18:27:38.380" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:38.179" endtime="20170501 18:27:38.380" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:38.178" endtime="20170501 18:27:38.380" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:38.380">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170501 18:27:38.380" endtime="20170501 18:27:38.380" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:38.383">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170501 18:27:38.382" endtime="20170501 18:27:38.383" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:27:38.384">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170501 18:27:38.383" endtime="20170501 18:27:38.384" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:38.383" endtime="20170501 18:27:38.384" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:38.381" endtime="20170501 18:27:38.384" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:38.381" endtime="20170501 18:27:38.384" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:38.450">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170501 18:27:38.450">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:27:38.384" endtime="20170501 18:27:38.450" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:38.452">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:27:38.451" endtime="20170501 18:27:38.452" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:27:38.453">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:27:38.453" endtime="20170501 18:27:38.453" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:38.452" endtime="20170501 18:27:38.453" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:38.451" endtime="20170501 18:27:38.453" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:38.450" endtime="20170501 18:27:38.453" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:27:38.454">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:27:38.178" endtime="20170501 18:27:38.454" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:27:38.454">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:27:38.454" endtime="20170501 18:27:38.454" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:38.455">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170501 18:27:38.455">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170501 18:27:38.455">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170501 18:27:38.455" endtime="20170501 18:27:38.455" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:27:38.455">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170501 18:27:38.177" endtime="20170501 18:27:38.455" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:27:38.456">${host_state} = Running</msg>
<status starttime="20170501 18:27:38.177" endtime="20170501 18:27:38.456" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg level="FAIL" timestamp="20170501 18:27:38.457">Running != Quiesced</msg>
<status starttime="20170501 18:27:38.456" endtime="20170501 18:27:38.457" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:27:38.457">${status} = False</msg>
<status starttime="20170501 18:27:38.456" endtime="20170501 18:27:38.457" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:27:38.457">${status} = False</msg>
<status starttime="20170501 18:27:38.176" endtime="20170501 18:27:38.458" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<status starttime="20170501 18:27:38.458" endtime="20170501 18:27:38.458" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status starttime="20170501 18:27:38.458" endtime="20170501 18:27:38.459" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:38.467">${FFDC_DIR_PATH_STYLE} = </msg>
<status starttime="20170501 18:27:38.459" endtime="20170501 18:27:38.467" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:38.475">${FFDC_DIR_PATH} = </msg>
<status starttime="20170501 18:27:38.467" endtime="20170501 18:27:38.475" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<kw library="openbmc_ffdc" name="Set Ffdc Defaults">
<doc>Set a default value for ffdc_dir_path and ffdc_prefix if they don't</doc>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:38.483">${cur_time} = 2017-05-01 18:27:38:482754</msg>
<status starttime="20170501 18:27:38.483" endtime="20170501 18:27:38.483" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:38.484">${cur_time} = 20170501182738482754</msg>
<status starttime="20170501 18:27:38.483" endtime="20170501 18:27:38.484" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:38.482" endtime="20170501 18:27:38.484" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:27:38.488">${FFDC_TIME} = 20170501182738482754</msg>
<kw library="openbmc_ffdc_utils" name="Get Test Dir and Name">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:38.489">${suite_name} = TestsSecurityTestSsl</msg>
<status starttime="20170501 18:27:38.488" endtime="20170501 18:27:38.489" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:38.489">${suite_name} = 20170501182738482754_TestsSecurityTestSsl</msg>
<status starttime="20170501 18:27:38.489" endtime="20170501 18:27:38.489" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:38.490">${test_name} = TestSSLConnection</msg>
<status starttime="20170501 18:27:38.490" endtime="20170501 18:27:38.490" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:38.491">${test_name} = 20170501182738482754_TestSSLConnection</msg>
<status starttime="20170501 18:27:38.490" endtime="20170501 18:27:38.491" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:38.488" endtime="20170501 18:27:38.491" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:27:38.491">${FFDC_DIR_PATH} = /tmp/root/27703/obmc-robot/logs/20170501182738482754_TestsSecurityTestSsl/20170501182738482754_TestSSLConnection/</msg>
<msg level="INFO" timestamp="20170501 18:27:38.495">${FFDC_PREFIX} = 20170501182738482754_</msg>
<status starttime="20170501 18:27:38.475" endtime="20170501 18:27:38.495" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:38.475" endtime="20170501 18:27:38.495" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status starttime="20170501 18:27:38.496" endtime="20170501 18:27:38.496" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170501 18:27:38.497">Created directory '&lt;a href="file:///tmp/root/27703/obmc-robot/logs"&gt;/tmp/root/27703/obmc-robot/logs&lt;/a&gt;'.</msg>
<status starttime="20170501 18:27:38.496" endtime="20170501 18:27:38.497" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="FAIL" timestamp="20170501 18:27:38.498">File '/tmp/root/27703/obmc-robot/logs/test_history.txt' does not exist.</msg>
<status starttime="20170501 18:27:38.498" endtime="20170501 18:27:38.498" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:27:38.498">${exist} = False</msg>
<status starttime="20170501 18:27:38.497" endtime="20170501 18:27:38.498" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170501 18:27:38.499">Created file '&lt;a href="file:///tmp/root/27703/obmc-robot/logs/test_history.txt"&gt;/tmp/root/27703/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20170501 18:27:38.499" endtime="20170501 18:27:38.499" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:38.499" endtime="20170501 18:27:38.500" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rpvars">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status starttime="20170501 18:27:38.500" endtime="20170501 18:27:38.500" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:38.501">${cur_time} = 2017-05-01 18:27:38:500880</msg>
<status starttime="20170501 18:27:38.501" endtime="20170501 18:27:38.501" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:38.502">${cur_time} = 20170501182738500880</msg>
<status starttime="20170501 18:27:38.501" endtime="20170501 18:27:38.502" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:27:38.502">${cur_time} = 20170501182738500880</msg>
<status starttime="20170501 18:27:38.500" endtime="20170501 18:27:38.502" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170501 18:27:38.503">Appended to file '&lt;a href="file:///tmp/root/27703/obmc-robot/logs/test_history.txt"&gt;/tmp/root/27703/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20170501 18:27:38.502" endtime="20170501 18:27:38.503" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:38.459" endtime="20170501 18:27:38.503" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:38.176" endtime="20170501 18:27:38.503" status="PASS"></status>
</kw>
<doc>This testcase is for testing the SSL connection to the
OpenBMC machine.</doc>
<tags>
<tag>Test_SSL_Connection</tag>
</tags>
<status starttime="20170501 18:27:37.929" endtime="20170501 18:27:38.503" critical="yes" status="PASS"></status>
</test>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions" type="teardown">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170501 18:27:38.504">Delete All Sessions</msg>
<status starttime="20170501 18:27:38.504" endtime="20170501 18:27:38.504" status="PASS"></status>
</kw>
<doc>This testsuite is for testing SSL connection to OpenBMC</doc>
<status starttime="20170501 18:27:37.852" endtime="20170501 18:27:38.504" status="PASS"></status>
</suite>
<status starttime="20170501 18:27:37.850" endtime="20170501 18:27:38.506" status="PASS"></status>
</suite>
<suite id="s1-s2" name="Test Basic Poweron" source="/tmp/root/27703/obmc-robot/tests/test_basic_poweron.robot">
<test id="s1-s2-t1" name="Power On Test">
<kw library="utils" name="Start SOL Console Logging" type="setup">
<doc>Start system console log to file.</doc>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:38.539">${default_file_path} = /tmp/9.41.166.169_os_console</msg>
<status starttime="20170501 18:27:38.539" endtime="20170501 18:27:38.539" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:38.540">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status starttime="20170501 18:27:38.539" endtime="20170501 18:27:38.540" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:27:38.540">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status starttime="20170501 18:27:38.538" endtime="20170501 18:27:38.540" status="PASS"></status>
</kw>
<kw library="utils" name="Stop SOL Console Logging">
<doc>Stop system console logging and return log output.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_output}</var>
</assign>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:38.541">${default_file_path} = /tmp/9.41.166.169_os_console</msg>
<status starttime="20170501 18:27:38.541" endtime="20170501 18:27:38.541" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:38.542">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status starttime="20170501 18:27:38.542" endtime="20170501 18:27:38.542" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:27:38.542">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status starttime="20170501 18:27:38.541" endtime="20170501 18:27:38.542" status="PASS"></status>
</kw>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:38.543">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status starttime="20170501 18:27:38.543" endtime="20170501 18:27:38.543" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170501 18:27:38.544" endtime="20170501 18:27:38.553" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:38.558">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170501 18:27:38.562">${rc} = 0</msg>
<msg level="INFO" timestamp="20170501 18:27:38.562">${output} = /tmp/root/27703/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status starttime="20170501 18:27:38.554" endtime="20170501 18:27:38.562" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170501 18:27:38.564" endtime="20170501 18:27:38.573" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status starttime="20170501 18:27:38.573" endtime="20170501 18:27:38.574" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:38.574">${cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.41.166.169</msg>
<status starttime="20170501 18:27:38.574" endtime="20170501 18:27:38.574" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:27:38.574">${search_string} = ssh_pw 0penBmc -p 2200 root@9.41.166.169</msg>
<status starttime="20170501 18:27:38.543" endtime="20170501 18:27:38.575" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:38.575">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 root@9.41.166.169' | egrep -v grep | cut -c10-14)</msg>
<status starttime="20170501 18:27:38.575" endtime="20170501 18:27:38.575" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170501 18:27:38.575" endtime="20170501 18:27:38.582" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:38.586">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 root@9.41.166.169' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170501 18:27:38.594">${rc} = 0</msg>
<msg level="INFO" timestamp="20170501 18:27:38.594">${os_con_pid} = </msg>
<status starttime="20170501 18:27:38.583" endtime="20170501 18:27:38.595" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status starttime="20170501 18:27:38.597" endtime="20170501 18:27:38.606" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:38.607">${cmd_buf} = kill -9 </msg>
<status starttime="20170501 18:27:38.607" endtime="20170501 18:27:38.607" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170501 18:27:38.607" endtime="20170501 18:27:38.608" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:38.609">${rc} = None</msg>
<msg level="INFO" timestamp="20170501 18:27:38.609">${output} = None</msg>
<status starttime="20170501 18:27:38.608" endtime="20170501 18:27:38.609" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170501 18:27:38.609" endtime="20170501 18:27:38.609" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>cat ${log_file_path} 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:38.610">${cmd_buf} = cat /tmp/9.41.166.169_os_console 2&gt;&amp;1</msg>
<status starttime="20170501 18:27:38.610" endtime="20170501 18:27:38.610" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170501 18:27:38.610" endtime="20170501 18:27:38.617" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:38.621">Running command 'cat /tmp/9.41.166.169_os_console 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170501 18:27:38.624">${rc} = 1</msg>
<msg level="INFO" timestamp="20170501 18:27:38.624">${output} = cat: /tmp/9.41.166.169_os_console: No such file or directory</msg>
<status starttime="20170501 18:27:38.617" endtime="20170501 18:27:38.624" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
</arguments>
<status starttime="20170501 18:27:38.626" endtime="20170501 18:27:38.639" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<status starttime="20170501 18:27:38.639" endtime="20170501 18:27:38.640" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:27:38.640">${log_output} = cat: /tmp/9.41.166.169_os_console: No such file or directory</msg>
<status starttime="20170501 18:27:38.540" endtime="20170501 18:27:38.641" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170501 18:27:38.642">Created file '&lt;a href="file:///tmp/9.41.166.169_os_console"&gt;/tmp/9.41.166.169_os_console&lt;/a&gt;'.</msg>
<status starttime="20170501 18:27:38.641" endtime="20170501 18:27:38.642" status="PASS"></status>
</kw>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${sub_cmd_buf}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:38.643">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status starttime="20170501 18:27:38.643" endtime="20170501 18:27:38.643" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170501 18:27:38.643" endtime="20170501 18:27:38.650" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:38.653">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170501 18:27:38.658">${rc} = 0</msg>
<msg level="INFO" timestamp="20170501 18:27:38.658">${output} = /tmp/root/27703/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status starttime="20170501 18:27:38.650" endtime="20170501 18:27:38.658" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170501 18:27:38.660" endtime="20170501 18:27:38.668" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status starttime="20170501 18:27:38.668" endtime="20170501 18:27:38.669" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:38.669">${cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.41.166.169</msg>
<status starttime="20170501 18:27:38.669" endtime="20170501 18:27:38.669" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:27:38.670">${sub_cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.41.166.169</msg>
<status starttime="20170501 18:27:38.642" endtime="20170501 18:27:38.670" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${sub_cmd_buf} &gt; ${log_file_path} 2&gt;&amp;1 &amp;</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:38.670">${cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.41.166.169 &gt; /tmp/9.41.166.169_os_console 2&gt;&amp;1 &amp;</msg>
<status starttime="20170501 18:27:38.670" endtime="20170501 18:27:38.670" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170501 18:27:38.671" endtime="20170501 18:27:38.678" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:38.682">Running command 'ssh_pw 0penBmc -p 2200 root@9.41.166.169 &gt; /tmp/9.41.166.169_os_console 2&gt;&amp;1 &amp;'.</msg>
<msg level="INFO" timestamp="20170501 18:27:38.686">${rc} = 0</msg>
<msg level="INFO" timestamp="20170501 18:27:38.686">${output} = </msg>
<status starttime="20170501 18:27:38.679" endtime="20170501 18:27:38.686" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
</arguments>
<status starttime="20170501 18:27:38.688" endtime="20170501 18:27:38.688" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:38.537" endtime="20170501 18:27:38.689" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Repeat Keyword">
<doc>Executes the specified keyword multiple times.</doc>
<arguments>
<arg>${LOOP_COUNT} times</arg>
<arg>Host Off And On</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:27:38.689">Repeating keyword, round 1/2.</msg>
<kw name="Host Off And On">
<doc>Verify power off and on.</doc>
<kw library="state_manager" name="Initiate Host PowerOff">
<doc>Initiate host power off.</doc>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:38.691">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status starttime="20170501 18:27:38.691" endtime="20170501 18:27:38.691" status="PASS"></status>
</kw>
<kw library="rest_client" name="Write Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:38.693">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status starttime="20170501 18:27:38.692" endtime="20170501 18:27:38.693" status="PASS"></status>
</kw>
<kw library="rest_client" name="OpenBMC Put Request">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:27:38.696">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170501 18:27:38.695" endtime="20170501 18:27:38.697" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:38.697">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170501 18:27:38.697" endtime="20170501 18:27:38.697" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:38.698">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170501 18:27:38.698" endtime="20170501 18:27:38.698" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:38.699">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170501 18:27:38.698" endtime="20170501 18:27:38.699" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:27:39.149">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170501 18:27:38.700" endtime="20170501 18:27:39.149" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:27:39.150">${status} = PASS</msg>
<msg level="INFO" timestamp="20170501 18:27:39.150">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:27:38.699" endtime="20170501 18:27:39.150" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:27:39.150">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:27:39.150" endtime="20170501 18:27:39.151" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:27:39.151">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:27:39.151" endtime="20170501 18:27:39.151" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:38.695" endtime="20170501 18:27:39.151" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:38.694" endtime="20170501 18:27:39.151" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:38.694" endtime="20170501 18:27:39.152" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:39.152">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status starttime="20170501 18:27:39.152" endtime="20170501 18:27:39.152" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:39.153">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170501 18:27:39.152" endtime="20170501 18:27:39.153" status="PASS"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20170501 18:27:39.153" endtime="20170501 18:27:39.153" status="PASS"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:39.155">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Conten...</msg>
<status starttime="20170501 18:27:39.154" endtime="20170501 18:27:39.155" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:27:39.156">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20170501 18:27:39.156" endtime="20170501 18:27:39.156" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:39.155" endtime="20170501 18:27:39.156" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:39.153" endtime="20170501 18:27:39.156" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Put Request">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:39.782">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20170501 18:27:39.782">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:27:39.156" endtime="20170501 18:27:39.782" status="PASS"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:39.783">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:27:39.783" endtime="20170501 18:27:39.783" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:27:39.784">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:27:39.784" endtime="20170501 18:27:39.784" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:39.783" endtime="20170501 18:27:39.784" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:39.782" endtime="20170501 18:27:39.784" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:27:39.785">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:27:38.693" endtime="20170501 18:27:39.785" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:27:39.785">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:27:39.785" endtime="20170501 18:27:39.785" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:39.786">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170501 18:27:39.786">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170501 18:27:39.786">${json} = {u'data': None, u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170501 18:27:39.786" endtime="20170501 18:27:39.786" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:38.692" endtime="20170501 18:27:39.786" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status starttime="20170501 18:27:39.787" endtime="20170501 18:27:39.787" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>3 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:27:39.794">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170501 18:27:39.794" endtime="20170501 18:27:39.794" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:39.795">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170501 18:27:39.795" endtime="20170501 18:27:39.795" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:39.796">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170501 18:27:39.795" endtime="20170501 18:27:39.796" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:39.796">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170501 18:27:39.796" endtime="20170501 18:27:39.796" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:27:42.083">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170501 18:27:39.797" endtime="20170501 18:27:42.083" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:27:42.083">${status} = PASS</msg>
<msg level="INFO" timestamp="20170501 18:27:42.083">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:27:39.796" endtime="20170501 18:27:42.083" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:27:42.084">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:27:42.084" endtime="20170501 18:27:42.084" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:27:42.085">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:27:42.084" endtime="20170501 18:27:42.085" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:39.793" endtime="20170501 18:27:42.085" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:39.793" endtime="20170501 18:27:42.085" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:39.789" endtime="20170501 18:27:42.085" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:42.086">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170501 18:27:42.085" endtime="20170501 18:27:42.086" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:42.088">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170501 18:27:42.087" endtime="20170501 18:27:42.088" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:27:42.089">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170501 18:27:42.089" endtime="20170501 18:27:42.089" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:42.088" endtime="20170501 18:27:42.089" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:42.087" endtime="20170501 18:27:42.089" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:42.086" endtime="20170501 18:27:42.089" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:42.383">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170501 18:27:42.383">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:27:42.089" endtime="20170501 18:27:42.383" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:42.386">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:27:42.385" endtime="20170501 18:27:42.386" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:27:42.386">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:27:42.386" endtime="20170501 18:27:42.387" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:42.386" endtime="20170501 18:27:42.387" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:42.384" endtime="20170501 18:27:42.387" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:42.384" endtime="20170501 18:27:42.387" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:27:42.387">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:27:39.789" endtime="20170501 18:27:42.387" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:27:42.388">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:27:42.387" endtime="20170501 18:27:42.388" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:42.388">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170501 18:27:42.388">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170501 18:27:42.388">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170501 18:27:42.388" endtime="20170501 18:27:42.388" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:27:42.389">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170501 18:27:39.788" endtime="20170501 18:27:42.389" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:27:42.389">${host_state} = Off</msg>
<status starttime="20170501 18:27:39.788" endtime="20170501 18:27:42.389" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170501 18:27:42.389" endtime="20170501 18:27:42.390" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:39.788" endtime="20170501 18:27:42.390" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:39.787" endtime="20170501 18:27:42.390" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:38.690" endtime="20170501 18:27:42.390" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Is OS Off</arg>
</arguments>
<kw library="utils" name="Is OS Off">
<doc>Check if boot progress is "Off".</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:27:42.394">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170501 18:27:42.394" endtime="20170501 18:27:42.395" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:42.395">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170501 18:27:42.395" endtime="20170501 18:27:42.395" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:42.396">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170501 18:27:42.396" endtime="20170501 18:27:42.396" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:42.397">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170501 18:27:42.396" endtime="20170501 18:27:42.397" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:27:42.623">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170501 18:27:42.397" endtime="20170501 18:27:42.623" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:27:42.623">${status} = PASS</msg>
<msg level="INFO" timestamp="20170501 18:27:42.623">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:27:42.397" endtime="20170501 18:27:42.623" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:27:42.624">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:27:42.624" endtime="20170501 18:27:42.624" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:27:42.625">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:27:42.624" endtime="20170501 18:27:42.625" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:42.394" endtime="20170501 18:27:42.625" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:42.393" endtime="20170501 18:27:42.625" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:42.393" endtime="20170501 18:27:42.626" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:42.626">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170501 18:27:42.626" endtime="20170501 18:27:42.626" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:42.628">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:27:42.627" endtime="20170501 18:27:42.628" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:27:42.629">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:27:42.629" endtime="20170501 18:27:42.629" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:42.628" endtime="20170501 18:27:42.629" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:42.627" endtime="20170501 18:27:42.629" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:42.626" endtime="20170501 18:27:42.629" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:42.697">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170501 18:27:42.697">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:27:42.630" endtime="20170501 18:27:42.697" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:42.699">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:27:42.698" endtime="20170501 18:27:42.699" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:27:42.700">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:27:42.699" endtime="20170501 18:27:42.700" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:42.699" endtime="20170501 18:27:42.700" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:42.698" endtime="20170501 18:27:42.700" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:42.697" endtime="20170501 18:27:42.700" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:27:42.700">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:27:42.392" endtime="20170501 18:27:42.700" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:27:42.701">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:27:42.701" endtime="20170501 18:27:42.701" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:42.701">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170501 18:27:42.702">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170501 18:27:42.702">${content} = {u'data': u'Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170501 18:27:42.701" endtime="20170501 18:27:42.702" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:27:42.702">${state} = Off</msg>
<status starttime="20170501 18:27:42.391" endtime="20170501 18:27:42.702" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:27:42.702">${boot_progress} = Off</msg>
<status starttime="20170501 18:27:42.391" endtime="20170501 18:27:42.702" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>Off</arg>
</arguments>
<status starttime="20170501 18:27:42.703" endtime="20170501 18:27:42.703" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:42.391" endtime="20170501 18:27:42.703" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:42.390" endtime="20170501 18:27:42.703" status="PASS"></status>
</kw>
<kw library="state_manager" name="Initiate Host Boot">
<doc>Initiate host power on.</doc>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWERON_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:42.704">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}</msg>
<status starttime="20170501 18:27:42.704" endtime="20170501 18:27:42.704" status="PASS"></status>
</kw>
<kw library="rest_client" name="Write Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:42.705">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status starttime="20170501 18:27:42.705" endtime="20170501 18:27:42.705" status="PASS"></status>
</kw>
<kw library="rest_client" name="OpenBMC Put Request">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:27:42.709">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170501 18:27:42.708" endtime="20170501 18:27:42.709" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:42.710">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170501 18:27:42.710" endtime="20170501 18:27:42.710" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:42.711">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170501 18:27:42.710" endtime="20170501 18:27:42.711" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:42.712">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170501 18:27:42.711" endtime="20170501 18:27:42.712" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:27:42.905">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170501 18:27:42.713" endtime="20170501 18:27:42.905" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:27:42.905">${status} = PASS</msg>
<msg level="INFO" timestamp="20170501 18:27:42.905">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:27:42.712" endtime="20170501 18:27:42.905" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:27:42.906">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:27:42.905" endtime="20170501 18:27:42.906" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:27:42.906">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:27:42.906" endtime="20170501 18:27:42.907" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:42.707" endtime="20170501 18:27:42.907" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:42.707" endtime="20170501 18:27:42.907" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:42.706" endtime="20170501 18:27:42.907" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:42.907">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status starttime="20170501 18:27:42.907" endtime="20170501 18:27:42.907" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:42.908">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170501 18:27:42.908" endtime="20170501 18:27:42.908" status="PASS"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20170501 18:27:42.908" endtime="20170501 18:27:42.909" status="PASS"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:42.910">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content...</msg>
<status starttime="20170501 18:27:42.909" endtime="20170501 18:27:42.910" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:27:42.911">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20170501 18:27:42.911" endtime="20170501 18:27:42.911" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:42.910" endtime="20170501 18:27:42.911" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:42.909" endtime="20170501 18:27:42.912" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Put Request">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:43.130">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.On"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20170501 18:27:43.130">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:27:42.912" endtime="20170501 18:27:43.131" status="PASS"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:43.132">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:27:43.131" endtime="20170501 18:27:43.132" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:27:43.133">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:27:43.132" endtime="20170501 18:27:43.133" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:43.132" endtime="20170501 18:27:43.133" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:43.131" endtime="20170501 18:27:43.133" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:27:43.133">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:27:42.705" endtime="20170501 18:27:43.133" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:27:43.134">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:27:43.133" endtime="20170501 18:27:43.134" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:43.134">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170501 18:27:43.134">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170501 18:27:43.135">${json} = {u'data': None, u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170501 18:27:43.134" endtime="20170501 18:27:43.135" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:42.704" endtime="20170501 18:27:43.135" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status starttime="20170501 18:27:43.135" endtime="20170501 18:27:43.135" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is Host Running</arg>
</arguments>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:27:43.140">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170501 18:27:43.140" endtime="20170501 18:27:43.140" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:43.141">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170501 18:27:43.141" endtime="20170501 18:27:43.141" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:43.142">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170501 18:27:43.141" endtime="20170501 18:27:43.142" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:43.142">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170501 18:27:43.142" endtime="20170501 18:27:43.142" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:27:43.820">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170501 18:27:43.143" endtime="20170501 18:27:43.820" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:27:43.820">${status} = PASS</msg>
<msg level="INFO" timestamp="20170501 18:27:43.820">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:27:43.142" endtime="20170501 18:27:43.820" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:27:43.821">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:27:43.821" endtime="20170501 18:27:43.821" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:27:43.822">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:27:43.821" endtime="20170501 18:27:43.822" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:43.139" endtime="20170501 18:27:43.822" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:43.139" endtime="20170501 18:27:43.822" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:43.138" endtime="20170501 18:27:43.822" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:43.823">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170501 18:27:43.822" endtime="20170501 18:27:43.823" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:43.825">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170501 18:27:43.824" endtime="20170501 18:27:43.825" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:27:43.826">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170501 18:27:43.826" endtime="20170501 18:27:43.826" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:43.825" endtime="20170501 18:27:43.826" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:43.823" endtime="20170501 18:27:43.826" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:43.823" endtime="20170501 18:27:43.826" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:44.278">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170501 18:27:44.278">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:27:43.827" endtime="20170501 18:27:44.278" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:44.280">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:27:44.279" endtime="20170501 18:27:44.280" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:27:44.281">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:27:44.280" endtime="20170501 18:27:44.281" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:44.280" endtime="20170501 18:27:44.281" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:44.279" endtime="20170501 18:27:44.281" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:44.278" endtime="20170501 18:27:44.281" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:27:44.281">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:27:43.137" endtime="20170501 18:27:44.281" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:27:44.282">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:27:44.282" endtime="20170501 18:27:44.282" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:44.283">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170501 18:27:44.283">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170501 18:27:44.283">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170501 18:27:44.282" endtime="20170501 18:27:44.283" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:27:44.283">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170501 18:27:43.137" endtime="20170501 18:27:44.283" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:27:44.283">${host_state} = Off</msg>
<status starttime="20170501 18:27:43.137" endtime="20170501 18:27:44.283" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170501 18:27:44.284">Running != Off</msg>
<status starttime="20170501 18:27:44.284" endtime="20170501 18:27:44.284" status="FAIL"></status>
</kw>
<status starttime="20170501 18:27:43.136" endtime="20170501 18:27:44.284" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:27:54.289">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170501 18:27:54.289" endtime="20170501 18:27:54.290" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:54.291">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170501 18:27:54.290" endtime="20170501 18:27:54.291" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:54.291">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170501 18:27:54.291" endtime="20170501 18:27:54.292" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:54.292">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170501 18:27:54.292" endtime="20170501 18:27:54.292" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:27:54.837">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170501 18:27:54.293" endtime="20170501 18:27:54.837" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:27:54.837">${status} = PASS</msg>
<msg level="INFO" timestamp="20170501 18:27:54.838">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:27:54.293" endtime="20170501 18:27:54.838" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:27:54.838">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:27:54.838" endtime="20170501 18:27:54.838" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:27:54.839">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:27:54.839" endtime="20170501 18:27:54.839" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:54.288" endtime="20170501 18:27:54.839" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:54.288" endtime="20170501 18:27:54.839" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:54.287" endtime="20170501 18:27:54.840" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:54.840">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170501 18:27:54.840" endtime="20170501 18:27:54.840" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:54.842">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170501 18:27:54.842" endtime="20170501 18:27:54.842" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:27:54.843">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170501 18:27:54.843" endtime="20170501 18:27:54.843" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:54.843" endtime="20170501 18:27:54.843" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:54.841" endtime="20170501 18:27:54.844" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:54.840" endtime="20170501 18:27:54.844" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:54.907">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170501 18:27:54.908">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:27:54.844" endtime="20170501 18:27:54.908" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:54.910">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:27:54.910" endtime="20170501 18:27:54.910" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:27:54.911">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:27:54.911" endtime="20170501 18:27:54.911" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:54.911" endtime="20170501 18:27:54.912" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:54.908" endtime="20170501 18:27:54.912" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:54.908" endtime="20170501 18:27:54.912" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:27:54.912">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:27:54.287" endtime="20170501 18:27:54.912" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:27:54.912">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:27:54.912" endtime="20170501 18:27:54.913" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:54.913">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170501 18:27:54.913">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170501 18:27:54.913">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170501 18:27:54.913" endtime="20170501 18:27:54.913" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:27:54.914">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170501 18:27:54.286" endtime="20170501 18:27:54.914" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:27:54.914">${host_state} = Running</msg>
<status starttime="20170501 18:27:54.286" endtime="20170501 18:27:54.914" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170501 18:27:54.914" endtime="20170501 18:27:54.914" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:54.285" endtime="20170501 18:27:54.915" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:43.136" endtime="20170501 18:27:54.915" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:42.703" endtime="20170501 18:27:54.915" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is OS Starting</arg>
</arguments>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:27:54.920">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170501 18:27:54.919" endtime="20170501 18:27:54.920" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:54.921">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170501 18:27:54.921" endtime="20170501 18:27:54.921" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:54.922">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170501 18:27:54.921" endtime="20170501 18:27:54.922" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:54.922">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170501 18:27:54.922" endtime="20170501 18:27:54.922" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:27:55.114">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170501 18:27:54.923" endtime="20170501 18:27:55.115" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:27:55.115">${status} = PASS</msg>
<msg level="INFO" timestamp="20170501 18:27:55.115">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:27:54.923" endtime="20170501 18:27:55.115" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:27:55.115">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:27:55.115" endtime="20170501 18:27:55.116" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:27:55.116">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:27:55.116" endtime="20170501 18:27:55.116" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:54.919" endtime="20170501 18:27:55.116" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:54.918" endtime="20170501 18:27:55.116" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:54.918" endtime="20170501 18:27:55.117" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:55.117">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170501 18:27:55.117" endtime="20170501 18:27:55.117" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:55.119">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:27:55.118" endtime="20170501 18:27:55.119" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:27:55.120">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:27:55.120" endtime="20170501 18:27:55.120" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:55.119" endtime="20170501 18:27:55.120" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:55.118" endtime="20170501 18:27:55.120" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:55.117" endtime="20170501 18:27:55.120" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:55.187">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170501 18:27:55.187">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:27:55.121" endtime="20170501 18:27:55.187" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:55.189">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:27:55.188" endtime="20170501 18:27:55.189" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:27:55.190">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:27:55.190" endtime="20170501 18:27:55.190" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:55.189" endtime="20170501 18:27:55.190" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:55.188" endtime="20170501 18:27:55.190" status="PASS"></status>
</kw>
<status starttime="20170501 18:27:55.188" endtime="20170501 18:27:55.190" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:27:55.191">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:27:54.917" endtime="20170501 18:27:55.191" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:27:55.191">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:27:55.191" endtime="20170501 18:27:55.192" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:27:55.192">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170501 18:27:55.192">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170501 18:27:55.192">${content} = {u'data': u'Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170501 18:27:55.192" endtime="20170501 18:27:55.192" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:27:55.192">${state} = Off</msg>
<status starttime="20170501 18:27:54.916" endtime="20170501 18:27:55.193" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:27:55.193">${boot_progress} = Off</msg>
<status starttime="20170501 18:27:54.916" endtime="20170501 18:27:55.193" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170501 18:27:55.194">Off != FW Progress, Starting OS</msg>
<status starttime="20170501 18:27:55.193" endtime="20170501 18:27:55.194" status="FAIL"></status>
</kw>
<status starttime="20170501 18:27:54.915" endtime="20170501 18:27:55.194" status="FAIL"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:28:05.199">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170501 18:28:05.199" endtime="20170501 18:28:05.199" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:28:05.200">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170501 18:28:05.200" endtime="20170501 18:28:05.200" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:28:05.201">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170501 18:28:05.201" endtime="20170501 18:28:05.201" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:28:05.202">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170501 18:28:05.201" endtime="20170501 18:28:05.202" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:28:05.392">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170501 18:28:05.203" endtime="20170501 18:28:05.392" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:28:05.393">${status} = PASS</msg>
<msg level="INFO" timestamp="20170501 18:28:05.393">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:28:05.202" endtime="20170501 18:28:05.393" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:28:05.393">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:28:05.393" endtime="20170501 18:28:05.394" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:28:05.394">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:28:05.394" endtime="20170501 18:28:05.395" status="PASS"></status>
</kw>
<status starttime="20170501 18:28:05.198" endtime="20170501 18:28:05.395" status="PASS"></status>
</kw>
<status starttime="20170501 18:28:05.198" endtime="20170501 18:28:05.395" status="PASS"></status>
</kw>
<status starttime="20170501 18:28:05.197" endtime="20170501 18:28:05.395" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:28:05.396">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170501 18:28:05.395" endtime="20170501 18:28:05.396" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:28:05.398">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:28:05.397" endtime="20170501 18:28:05.398" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:28:05.399">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:28:05.399" endtime="20170501 18:28:05.399" status="PASS"></status>
</kw>
<status starttime="20170501 18:28:05.398" endtime="20170501 18:28:05.399" status="PASS"></status>
</kw>
<status starttime="20170501 18:28:05.397" endtime="20170501 18:28:05.399" status="PASS"></status>
</kw>
<status starttime="20170501 18:28:05.396" endtime="20170501 18:28:05.399" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:28:05.465">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170501 18:28:05.465">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:28:05.400" endtime="20170501 18:28:05.465" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:28:05.467">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:28:05.466" endtime="20170501 18:28:05.467" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:28:05.468">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:28:05.467" endtime="20170501 18:28:05.468" status="PASS"></status>
</kw>
<status starttime="20170501 18:28:05.467" endtime="20170501 18:28:05.468" status="PASS"></status>
</kw>
<status starttime="20170501 18:28:05.466" endtime="20170501 18:28:05.468" status="PASS"></status>
</kw>
<status starttime="20170501 18:28:05.465" endtime="20170501 18:28:05.468" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:28:05.468">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:28:05.196" endtime="20170501 18:28:05.468" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:28:05.469">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:28:05.468" endtime="20170501 18:28:05.469" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:28:05.469">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170501 18:28:05.469">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170501 18:28:05.470">${content} = {u'data': u'Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170501 18:28:05.469" endtime="20170501 18:28:05.470" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:28:05.470">${state} = Off</msg>
<status starttime="20170501 18:28:05.196" endtime="20170501 18:28:05.470" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:28:05.470">${boot_progress} = Off</msg>
<status starttime="20170501 18:28:05.195" endtime="20170501 18:28:05.470" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170501 18:28:05.471">Off != FW Progress, Starting OS</msg>
<status starttime="20170501 18:28:05.470" endtime="20170501 18:28:05.471" status="FAIL"></status>
</kw>
<status starttime="20170501 18:28:05.195" endtime="20170501 18:28:05.471" status="FAIL"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:28:15.476">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170501 18:28:15.476" endtime="20170501 18:28:15.476" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:28:15.477">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170501 18:28:15.477" endtime="20170501 18:28:15.477" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:28:15.478">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170501 18:28:15.477" endtime="20170501 18:28:15.478" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:28:15.478">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170501 18:28:15.478" endtime="20170501 18:28:15.478" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:28:15.669">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170501 18:28:15.479" endtime="20170501 18:28:15.669" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:28:15.669">${status} = PASS</msg>
<msg level="INFO" timestamp="20170501 18:28:15.669">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:28:15.479" endtime="20170501 18:28:15.670" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:28:15.670">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:28:15.670" endtime="20170501 18:28:15.670" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:28:15.671">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:28:15.670" endtime="20170501 18:28:15.671" status="PASS"></status>
</kw>
<status starttime="20170501 18:28:15.475" endtime="20170501 18:28:15.671" status="PASS"></status>
</kw>
<status starttime="20170501 18:28:15.474" endtime="20170501 18:28:15.671" status="PASS"></status>
</kw>
<status starttime="20170501 18:28:15.474" endtime="20170501 18:28:15.671" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:28:15.672">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170501 18:28:15.672" endtime="20170501 18:28:15.672" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:28:15.674">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:28:15.673" endtime="20170501 18:28:15.674" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:28:15.675">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:28:15.675" endtime="20170501 18:28:15.675" status="PASS"></status>
</kw>
<status starttime="20170501 18:28:15.674" endtime="20170501 18:28:15.675" status="PASS"></status>
</kw>
<status starttime="20170501 18:28:15.673" endtime="20170501 18:28:15.675" status="PASS"></status>
</kw>
<status starttime="20170501 18:28:15.672" endtime="20170501 18:28:15.675" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:28:15.740">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170501 18:28:15.741">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:28:15.675" endtime="20170501 18:28:15.741" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:28:15.742">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:28:15.742" endtime="20170501 18:28:15.742" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:28:15.744">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:28:15.743" endtime="20170501 18:28:15.744" status="PASS"></status>
</kw>
<status starttime="20170501 18:28:15.743" endtime="20170501 18:28:15.744" status="PASS"></status>
</kw>
<status starttime="20170501 18:28:15.741" endtime="20170501 18:28:15.744" status="PASS"></status>
</kw>
<status starttime="20170501 18:28:15.741" endtime="20170501 18:28:15.744" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:28:15.744">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:28:15.473" endtime="20170501 18:28:15.744" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:28:15.745">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:28:15.745" endtime="20170501 18:28:15.745" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:28:15.746">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170501 18:28:15.746">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170501 18:28:15.746">${content} = {u'data': u'Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170501 18:28:15.745" endtime="20170501 18:28:15.746" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:28:15.746">${state} = Off</msg>
<status starttime="20170501 18:28:15.472" endtime="20170501 18:28:15.746" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:28:15.746">${boot_progress} = Off</msg>
<status starttime="20170501 18:28:15.472" endtime="20170501 18:28:15.746" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170501 18:28:15.747">Off != FW Progress, Starting OS</msg>
<status starttime="20170501 18:28:15.747" endtime="20170501 18:28:15.747" status="FAIL"></status>
</kw>
<status starttime="20170501 18:28:15.471" endtime="20170501 18:28:15.747" status="FAIL"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:28:25.753">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170501 18:28:25.752" endtime="20170501 18:28:25.753" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:28:25.754">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170501 18:28:25.753" endtime="20170501 18:28:25.754" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:28:25.755">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170501 18:28:25.754" endtime="20170501 18:28:25.755" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:28:25.756">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170501 18:28:25.756" endtime="20170501 18:28:25.756" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:28:26.066">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170501 18:28:25.757" endtime="20170501 18:28:26.067" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:28:26.067">${status} = PASS</msg>
<msg level="INFO" timestamp="20170501 18:28:26.067">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:28:25.756" endtime="20170501 18:28:26.067" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:28:26.068">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:28:26.067" endtime="20170501 18:28:26.068" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:28:26.071">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:28:26.068" endtime="20170501 18:28:26.071" status="PASS"></status>
</kw>
<status starttime="20170501 18:28:25.752" endtime="20170501 18:28:26.072" status="PASS"></status>
</kw>
<status starttime="20170501 18:28:25.751" endtime="20170501 18:28:26.072" status="PASS"></status>
</kw>
<status starttime="20170501 18:28:25.750" endtime="20170501 18:28:26.072" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:28:26.073">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170501 18:28:26.072" endtime="20170501 18:28:26.073" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:28:26.076">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:28:26.075" endtime="20170501 18:28:26.076" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:28:26.077">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:28:26.076" endtime="20170501 18:28:26.077" status="PASS"></status>
</kw>
<status starttime="20170501 18:28:26.076" endtime="20170501 18:28:26.077" status="PASS"></status>
</kw>
<status starttime="20170501 18:28:26.074" endtime="20170501 18:28:26.078" status="PASS"></status>
</kw>
<status starttime="20170501 18:28:26.074" endtime="20170501 18:28:26.078" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:28:26.193">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170501 18:28:26.194">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:28:26.078" endtime="20170501 18:28:26.194" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:28:26.196">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:28:26.195" endtime="20170501 18:28:26.196" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:28:26.198">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:28:26.197" endtime="20170501 18:28:26.198" status="PASS"></status>
</kw>
<status starttime="20170501 18:28:26.197" endtime="20170501 18:28:26.198" status="PASS"></status>
</kw>
<status starttime="20170501 18:28:26.195" endtime="20170501 18:28:26.198" status="PASS"></status>
</kw>
<status starttime="20170501 18:28:26.194" endtime="20170501 18:28:26.198" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:28:26.198">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:28:25.750" endtime="20170501 18:28:26.198" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:28:26.199">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:28:26.199" endtime="20170501 18:28:26.199" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:28:26.200">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170501 18:28:26.200">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170501 18:28:26.200">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170501 18:28:26.199" endtime="20170501 18:28:26.200" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:28:26.200">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:28:25.749" endtime="20170501 18:28:26.200" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:28:26.200">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:28:25.749" endtime="20170501 18:28:26.200" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170501 18:28:26.201">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170501 18:28:26.201" endtime="20170501 18:28:26.201" status="FAIL"></status>
</kw>
<status starttime="20170501 18:28:25.748" endtime="20170501 18:28:26.201" status="FAIL"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:28:36.206">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170501 18:28:36.206" endtime="20170501 18:28:36.207" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:28:36.207">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170501 18:28:36.207" endtime="20170501 18:28:36.207" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:28:36.208">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170501 18:28:36.208" endtime="20170501 18:28:36.208" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:28:36.209">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170501 18:28:36.208" endtime="20170501 18:28:36.209" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:28:36.401">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170501 18:28:36.209" endtime="20170501 18:28:36.401" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:28:36.401">${status} = PASS</msg>
<msg level="INFO" timestamp="20170501 18:28:36.401">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:28:36.209" endtime="20170501 18:28:36.401" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:28:36.402">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:28:36.402" endtime="20170501 18:28:36.402" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:28:36.403">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:28:36.402" endtime="20170501 18:28:36.403" status="PASS"></status>
</kw>
<status starttime="20170501 18:28:36.205" endtime="20170501 18:28:36.403" status="PASS"></status>
</kw>
<status starttime="20170501 18:28:36.205" endtime="20170501 18:28:36.403" status="PASS"></status>
</kw>
<status starttime="20170501 18:28:36.204" endtime="20170501 18:28:36.403" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:28:36.404">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170501 18:28:36.404" endtime="20170501 18:28:36.404" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:28:36.406">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:28:36.405" endtime="20170501 18:28:36.406" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:28:36.407">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:28:36.407" endtime="20170501 18:28:36.407" status="PASS"></status>
</kw>
<status starttime="20170501 18:28:36.406" endtime="20170501 18:28:36.407" status="PASS"></status>
</kw>
<status starttime="20170501 18:28:36.405" endtime="20170501 18:28:36.407" status="PASS"></status>
</kw>
<status starttime="20170501 18:28:36.404" endtime="20170501 18:28:36.407" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:28:36.509">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170501 18:28:36.509">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:28:36.408" endtime="20170501 18:28:36.509" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:28:36.511">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:28:36.511" endtime="20170501 18:28:36.511" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:28:36.512">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:28:36.512" endtime="20170501 18:28:36.512" status="PASS"></status>
</kw>
<status starttime="20170501 18:28:36.511" endtime="20170501 18:28:36.512" status="PASS"></status>
</kw>
<status starttime="20170501 18:28:36.510" endtime="20170501 18:28:36.513" status="PASS"></status>
</kw>
<status starttime="20170501 18:28:36.510" endtime="20170501 18:28:36.513" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:28:36.513">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:28:36.203" endtime="20170501 18:28:36.513" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:28:36.513">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:28:36.513" endtime="20170501 18:28:36.514" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:28:36.514">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170501 18:28:36.514">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170501 18:28:36.514">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170501 18:28:36.514" endtime="20170501 18:28:36.514" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:28:36.515">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:28:36.203" endtime="20170501 18:28:36.515" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:28:36.515">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:28:36.202" endtime="20170501 18:28:36.515" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170501 18:28:36.515">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170501 18:28:36.515" endtime="20170501 18:28:36.515" status="FAIL"></status>
</kw>
<status starttime="20170501 18:28:36.202" endtime="20170501 18:28:36.516" status="FAIL"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:28:46.521">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170501 18:28:46.521" endtime="20170501 18:28:46.521" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:28:46.522">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170501 18:28:46.522" endtime="20170501 18:28:46.522" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:28:46.523">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170501 18:28:46.522" endtime="20170501 18:28:46.523" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:28:46.523">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170501 18:28:46.523" endtime="20170501 18:28:46.523" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:28:46.737">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170501 18:28:46.524" endtime="20170501 18:28:46.737" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:28:46.737">${status} = PASS</msg>
<msg level="INFO" timestamp="20170501 18:28:46.737">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:28:46.524" endtime="20170501 18:28:46.737" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:28:46.738">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:28:46.738" endtime="20170501 18:28:46.738" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:28:46.739">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:28:46.738" endtime="20170501 18:28:46.739" status="PASS"></status>
</kw>
<status starttime="20170501 18:28:46.520" endtime="20170501 18:28:46.739" status="PASS"></status>
</kw>
<status starttime="20170501 18:28:46.520" endtime="20170501 18:28:46.739" status="PASS"></status>
</kw>
<status starttime="20170501 18:28:46.519" endtime="20170501 18:28:46.739" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:28:46.740">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170501 18:28:46.739" endtime="20170501 18:28:46.740" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:28:46.742">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:28:46.742" endtime="20170501 18:28:46.742" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:28:46.743">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:28:46.743" endtime="20170501 18:28:46.744" status="PASS"></status>
</kw>
<status starttime="20170501 18:28:46.743" endtime="20170501 18:28:46.744" status="PASS"></status>
</kw>
<status starttime="20170501 18:28:46.741" endtime="20170501 18:28:46.744" status="PASS"></status>
</kw>
<status starttime="20170501 18:28:46.740" endtime="20170501 18:28:46.744" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:28:46.816">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170501 18:28:46.816">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:28:46.744" endtime="20170501 18:28:46.816" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:28:46.818">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:28:46.817" endtime="20170501 18:28:46.818" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:28:46.819">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:28:46.818" endtime="20170501 18:28:46.819" status="PASS"></status>
</kw>
<status starttime="20170501 18:28:46.818" endtime="20170501 18:28:46.819" status="PASS"></status>
</kw>
<status starttime="20170501 18:28:46.817" endtime="20170501 18:28:46.819" status="PASS"></status>
</kw>
<status starttime="20170501 18:28:46.816" endtime="20170501 18:28:46.819" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:28:46.819">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:28:46.518" endtime="20170501 18:28:46.819" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:28:46.820">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:28:46.820" endtime="20170501 18:28:46.820" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:28:46.820">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170501 18:28:46.820">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170501 18:28:46.821">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170501 18:28:46.820" endtime="20170501 18:28:46.821" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:28:46.821">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:28:46.518" endtime="20170501 18:28:46.821" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:28:46.821">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:28:46.517" endtime="20170501 18:28:46.821" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170501 18:28:46.822">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170501 18:28:46.821" endtime="20170501 18:28:46.822" status="FAIL"></status>
</kw>
<status starttime="20170501 18:28:46.516" endtime="20170501 18:28:46.822" status="FAIL"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:28:56.827">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170501 18:28:56.826" endtime="20170501 18:28:56.827" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:28:56.828">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170501 18:28:56.828" endtime="20170501 18:28:56.828" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:28:56.829">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170501 18:28:56.828" endtime="20170501 18:28:56.829" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:28:56.829">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170501 18:28:56.829" endtime="20170501 18:28:56.829" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:28:57.013">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170501 18:28:56.830" endtime="20170501 18:28:57.013" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:28:57.013">${status} = PASS</msg>
<msg level="INFO" timestamp="20170501 18:28:57.013">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:28:56.829" endtime="20170501 18:28:57.013" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:28:57.014">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:28:57.014" endtime="20170501 18:28:57.014" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:28:57.015">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:28:57.014" endtime="20170501 18:28:57.015" status="PASS"></status>
</kw>
<status starttime="20170501 18:28:56.826" endtime="20170501 18:28:57.015" status="PASS"></status>
</kw>
<status starttime="20170501 18:28:56.825" endtime="20170501 18:28:57.015" status="PASS"></status>
</kw>
<status starttime="20170501 18:28:56.825" endtime="20170501 18:28:57.015" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:28:57.016">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170501 18:28:57.016" endtime="20170501 18:28:57.016" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:28:57.019">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:28:57.018" endtime="20170501 18:28:57.019" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:28:57.020">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:28:57.020" endtime="20170501 18:28:57.021" status="PASS"></status>
</kw>
<status starttime="20170501 18:28:57.019" endtime="20170501 18:28:57.021" status="PASS"></status>
</kw>
<status starttime="20170501 18:28:57.017" endtime="20170501 18:28:57.021" status="PASS"></status>
</kw>
<status starttime="20170501 18:28:57.017" endtime="20170501 18:28:57.021" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:28:57.087">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170501 18:28:57.087">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:28:57.021" endtime="20170501 18:28:57.088" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:28:57.089">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:28:57.089" endtime="20170501 18:28:57.089" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:28:57.090">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:28:57.090" endtime="20170501 18:28:57.090" status="PASS"></status>
</kw>
<status starttime="20170501 18:28:57.089" endtime="20170501 18:28:57.090" status="PASS"></status>
</kw>
<status starttime="20170501 18:28:57.088" endtime="20170501 18:28:57.090" status="PASS"></status>
</kw>
<status starttime="20170501 18:28:57.088" endtime="20170501 18:28:57.091" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:28:57.091">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:28:56.824" endtime="20170501 18:28:57.091" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:28:57.091">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:28:57.091" endtime="20170501 18:28:57.091" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:28:57.092">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170501 18:28:57.092">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170501 18:28:57.092">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170501 18:28:57.092" endtime="20170501 18:28:57.092" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:28:57.092">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:28:56.823" endtime="20170501 18:28:57.092" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:28:57.093">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:28:56.823" endtime="20170501 18:28:57.093" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170501 18:28:57.093">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170501 18:28:57.093" endtime="20170501 18:28:57.093" status="FAIL"></status>
</kw>
<status starttime="20170501 18:28:56.822" endtime="20170501 18:28:57.094" status="FAIL"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:29:07.099">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170501 18:29:07.098" endtime="20170501 18:29:07.099" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:29:07.100">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170501 18:29:07.099" endtime="20170501 18:29:07.100" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:29:07.100">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170501 18:29:07.100" endtime="20170501 18:29:07.100" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:29:07.101">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170501 18:29:07.100" endtime="20170501 18:29:07.101" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:29:07.290">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170501 18:29:07.101" endtime="20170501 18:29:07.290" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:29:07.290">${status} = PASS</msg>
<msg level="INFO" timestamp="20170501 18:29:07.291">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:29:07.101" endtime="20170501 18:29:07.291" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:29:07.291">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:29:07.291" endtime="20170501 18:29:07.291" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:29:07.292">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:29:07.291" endtime="20170501 18:29:07.292" status="PASS"></status>
</kw>
<status starttime="20170501 18:29:07.098" endtime="20170501 18:29:07.292" status="PASS"></status>
</kw>
<status starttime="20170501 18:29:07.097" endtime="20170501 18:29:07.292" status="PASS"></status>
</kw>
<status starttime="20170501 18:29:07.097" endtime="20170501 18:29:07.292" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:29:07.293">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170501 18:29:07.293" endtime="20170501 18:29:07.293" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:29:07.295">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:29:07.294" endtime="20170501 18:29:07.295" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:29:07.296">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:29:07.296" endtime="20170501 18:29:07.296" status="PASS"></status>
</kw>
<status starttime="20170501 18:29:07.295" endtime="20170501 18:29:07.296" status="PASS"></status>
</kw>
<status starttime="20170501 18:29:07.294" endtime="20170501 18:29:07.296" status="PASS"></status>
</kw>
<status starttime="20170501 18:29:07.293" endtime="20170501 18:29:07.296" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:29:07.362">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170501 18:29:07.363">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:29:07.296" endtime="20170501 18:29:07.363" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:29:07.364">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:29:07.364" endtime="20170501 18:29:07.364" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:29:07.365">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:29:07.365" endtime="20170501 18:29:07.365" status="PASS"></status>
</kw>
<status starttime="20170501 18:29:07.364" endtime="20170501 18:29:07.365" status="PASS"></status>
</kw>
<status starttime="20170501 18:29:07.363" endtime="20170501 18:29:07.366" status="PASS"></status>
</kw>
<status starttime="20170501 18:29:07.363" endtime="20170501 18:29:07.366" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:29:07.366">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:29:07.096" endtime="20170501 18:29:07.366" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:29:07.366">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:29:07.366" endtime="20170501 18:29:07.366" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:29:07.367">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170501 18:29:07.367">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170501 18:29:07.367">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170501 18:29:07.367" endtime="20170501 18:29:07.367" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:29:07.367">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:29:07.095" endtime="20170501 18:29:07.367" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:29:07.368">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:29:07.095" endtime="20170501 18:29:07.368" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170501 18:29:07.368">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170501 18:29:07.368" endtime="20170501 18:29:07.368" status="FAIL"></status>
</kw>
<status starttime="20170501 18:29:07.094" endtime="20170501 18:29:07.369" status="FAIL"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:29:17.373">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170501 18:29:17.373" endtime="20170501 18:29:17.374" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:29:17.374">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170501 18:29:17.374" endtime="20170501 18:29:17.374" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:29:17.375">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170501 18:29:17.375" endtime="20170501 18:29:17.375" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:29:17.376">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170501 18:29:17.375" endtime="20170501 18:29:17.376" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:29:17.566">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170501 18:29:17.376" endtime="20170501 18:29:17.566" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:29:17.567">${status} = PASS</msg>
<msg level="INFO" timestamp="20170501 18:29:17.567">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:29:17.376" endtime="20170501 18:29:17.567" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:29:17.567">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:29:17.567" endtime="20170501 18:29:17.567" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:29:17.568">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:29:17.568" endtime="20170501 18:29:17.568" status="PASS"></status>
</kw>
<status starttime="20170501 18:29:17.372" endtime="20170501 18:29:17.568" status="PASS"></status>
</kw>
<status starttime="20170501 18:29:17.372" endtime="20170501 18:29:17.568" status="PASS"></status>
</kw>
<status starttime="20170501 18:29:17.371" endtime="20170501 18:29:17.568" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:29:17.569">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170501 18:29:17.569" endtime="20170501 18:29:17.569" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:29:17.572">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:29:17.571" endtime="20170501 18:29:17.572" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:29:17.573">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:29:17.573" endtime="20170501 18:29:17.574" status="PASS"></status>
</kw>
<status starttime="20170501 18:29:17.572" endtime="20170501 18:29:17.574" status="PASS"></status>
</kw>
<status starttime="20170501 18:29:17.570" endtime="20170501 18:29:17.574" status="PASS"></status>
</kw>
<status starttime="20170501 18:29:17.570" endtime="20170501 18:29:17.574" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:29:17.640">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170501 18:29:17.641">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:29:17.574" endtime="20170501 18:29:17.641" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:29:17.642">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:29:17.642" endtime="20170501 18:29:17.642" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:29:17.643">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:29:17.643" endtime="20170501 18:29:17.643" status="PASS"></status>
</kw>
<status starttime="20170501 18:29:17.643" endtime="20170501 18:29:17.643" status="PASS"></status>
</kw>
<status starttime="20170501 18:29:17.641" endtime="20170501 18:29:17.644" status="PASS"></status>
</kw>
<status starttime="20170501 18:29:17.641" endtime="20170501 18:29:17.644" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:29:17.644">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:29:17.371" endtime="20170501 18:29:17.644" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:29:17.644">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:29:17.644" endtime="20170501 18:29:17.645" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:29:17.645">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170501 18:29:17.645">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170501 18:29:17.645">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170501 18:29:17.645" endtime="20170501 18:29:17.645" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:29:17.646">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:29:17.370" endtime="20170501 18:29:17.646" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:29:17.646">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:29:17.370" endtime="20170501 18:29:17.646" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170501 18:29:17.646">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170501 18:29:17.646" endtime="20170501 18:29:17.646" status="FAIL"></status>
</kw>
<status starttime="20170501 18:29:17.369" endtime="20170501 18:29:17.647" status="FAIL"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:29:27.651">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170501 18:29:27.651" endtime="20170501 18:29:27.652" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:29:27.652">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170501 18:29:27.652" endtime="20170501 18:29:27.652" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:29:27.653">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170501 18:29:27.653" endtime="20170501 18:29:27.653" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:29:27.654">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170501 18:29:27.653" endtime="20170501 18:29:27.654" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:29:27.837">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170501 18:29:27.654" endtime="20170501 18:29:27.837" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:29:27.837">${status} = PASS</msg>
<msg level="INFO" timestamp="20170501 18:29:27.837">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:29:27.654" endtime="20170501 18:29:27.837" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:29:27.838">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:29:27.838" endtime="20170501 18:29:27.838" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:29:27.839">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:29:27.838" endtime="20170501 18:29:27.839" status="PASS"></status>
</kw>
<status starttime="20170501 18:29:27.650" endtime="20170501 18:29:27.839" status="PASS"></status>
</kw>
<status starttime="20170501 18:29:27.650" endtime="20170501 18:29:27.839" status="PASS"></status>
</kw>
<status starttime="20170501 18:29:27.649" endtime="20170501 18:29:27.839" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:29:27.840">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170501 18:29:27.839" endtime="20170501 18:29:27.840" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:29:27.842">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:29:27.841" endtime="20170501 18:29:27.842" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:29:27.843">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:29:27.842" endtime="20170501 18:29:27.843" status="PASS"></status>
</kw>
<status starttime="20170501 18:29:27.842" endtime="20170501 18:29:27.843" status="PASS"></status>
</kw>
<status starttime="20170501 18:29:27.840" endtime="20170501 18:29:27.843" status="PASS"></status>
</kw>
<status starttime="20170501 18:29:27.840" endtime="20170501 18:29:27.843" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:29:28.001">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170501 18:29:28.001">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:29:27.843" endtime="20170501 18:29:28.001" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:29:28.003">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:29:28.003" endtime="20170501 18:29:28.003" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:29:28.004">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:29:28.004" endtime="20170501 18:29:28.004" status="PASS"></status>
</kw>
<status starttime="20170501 18:29:28.003" endtime="20170501 18:29:28.004" status="PASS"></status>
</kw>
<status starttime="20170501 18:29:28.002" endtime="20170501 18:29:28.005" status="PASS"></status>
</kw>
<status starttime="20170501 18:29:28.002" endtime="20170501 18:29:28.005" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:29:28.005">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:29:27.649" endtime="20170501 18:29:28.005" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:29:28.005">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:29:28.005" endtime="20170501 18:29:28.005" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:29:28.006">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170501 18:29:28.006">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170501 18:29:28.006">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170501 18:29:28.006" endtime="20170501 18:29:28.006" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:29:28.006">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:29:27.648" endtime="20170501 18:29:28.007" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:29:28.007">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:29:27.648" endtime="20170501 18:29:28.007" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170501 18:29:28.007">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170501 18:29:28.007" endtime="20170501 18:29:28.007" status="FAIL"></status>
</kw>
<status starttime="20170501 18:29:27.647" endtime="20170501 18:29:28.008" status="FAIL"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:29:38.012">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170501 18:29:38.012" endtime="20170501 18:29:38.013" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:29:38.013">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170501 18:29:38.013" endtime="20170501 18:29:38.013" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:29:38.014">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170501 18:29:38.014" endtime="20170501 18:29:38.014" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:29:38.015">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170501 18:29:38.014" endtime="20170501 18:29:38.015" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:29:38.207">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170501 18:29:38.015" endtime="20170501 18:29:38.207" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:29:38.207">${status} = PASS</msg>
<msg level="INFO" timestamp="20170501 18:29:38.207">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:29:38.015" endtime="20170501 18:29:38.207" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:29:38.208">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:29:38.207" endtime="20170501 18:29:38.208" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:29:38.209">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:29:38.208" endtime="20170501 18:29:38.209" status="PASS"></status>
</kw>
<status starttime="20170501 18:29:38.011" endtime="20170501 18:29:38.209" status="PASS"></status>
</kw>
<status starttime="20170501 18:29:38.011" endtime="20170501 18:29:38.209" status="PASS"></status>
</kw>
<status starttime="20170501 18:29:38.010" endtime="20170501 18:29:38.209" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:29:38.210">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170501 18:29:38.209" endtime="20170501 18:29:38.210" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:29:38.212">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:29:38.211" endtime="20170501 18:29:38.212" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:29:38.213">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:29:38.212" endtime="20170501 18:29:38.213" status="PASS"></status>
</kw>
<status starttime="20170501 18:29:38.212" endtime="20170501 18:29:38.213" status="PASS"></status>
</kw>
<status starttime="20170501 18:29:38.210" endtime="20170501 18:29:38.213" status="PASS"></status>
</kw>
<status starttime="20170501 18:29:38.210" endtime="20170501 18:29:38.213" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:29:38.279">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170501 18:29:38.279">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:29:38.213" endtime="20170501 18:29:38.279" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:29:38.281">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:29:38.281" endtime="20170501 18:29:38.281" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:29:38.282">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:29:38.282" endtime="20170501 18:29:38.282" status="PASS"></status>
</kw>
<status starttime="20170501 18:29:38.281" endtime="20170501 18:29:38.282" status="PASS"></status>
</kw>
<status starttime="20170501 18:29:38.280" endtime="20170501 18:29:38.282" status="PASS"></status>
</kw>
<status starttime="20170501 18:29:38.280" endtime="20170501 18:29:38.282" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:29:38.283">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:29:38.009" endtime="20170501 18:29:38.283" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:29:38.283">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:29:38.283" endtime="20170501 18:29:38.283" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:29:38.284">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170501 18:29:38.284">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170501 18:29:38.284">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170501 18:29:38.284" endtime="20170501 18:29:38.284" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:29:38.284">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:29:38.009" endtime="20170501 18:29:38.284" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:29:38.285">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:29:38.009" endtime="20170501 18:29:38.285" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170501 18:29:38.285">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170501 18:29:38.285" endtime="20170501 18:29:38.285" status="FAIL"></status>
</kw>
<status starttime="20170501 18:29:38.008" endtime="20170501 18:29:38.285" status="FAIL"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:29:48.291">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170501 18:29:48.291" endtime="20170501 18:29:48.292" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:29:48.292">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170501 18:29:48.292" endtime="20170501 18:29:48.293" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:29:48.294">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170501 18:29:48.293" endtime="20170501 18:29:48.294" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:29:48.295">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170501 18:29:48.294" endtime="20170501 18:29:48.295" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:29:48.479">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170501 18:29:48.296" endtime="20170501 18:29:48.479" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:29:48.479">${status} = PASS</msg>
<msg level="INFO" timestamp="20170501 18:29:48.479">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:29:48.295" endtime="20170501 18:29:48.479" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:29:48.480">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:29:48.480" endtime="20170501 18:29:48.480" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:29:48.481">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:29:48.480" endtime="20170501 18:29:48.481" status="PASS"></status>
</kw>
<status starttime="20170501 18:29:48.290" endtime="20170501 18:29:48.481" status="PASS"></status>
</kw>
<status starttime="20170501 18:29:48.289" endtime="20170501 18:29:48.481" status="PASS"></status>
</kw>
<status starttime="20170501 18:29:48.288" endtime="20170501 18:29:48.481" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:29:48.482">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170501 18:29:48.481" endtime="20170501 18:29:48.482" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:29:48.484">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:29:48.483" endtime="20170501 18:29:48.484" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:29:48.485">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:29:48.484" endtime="20170501 18:29:48.485" status="PASS"></status>
</kw>
<status starttime="20170501 18:29:48.484" endtime="20170501 18:29:48.485" status="PASS"></status>
</kw>
<status starttime="20170501 18:29:48.482" endtime="20170501 18:29:48.485" status="PASS"></status>
</kw>
<status starttime="20170501 18:29:48.482" endtime="20170501 18:29:48.485" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:29:48.552">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170501 18:29:48.552">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:29:48.485" endtime="20170501 18:29:48.552" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:29:48.553">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:29:48.553" endtime="20170501 18:29:48.553" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:29:48.556">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:29:48.554" endtime="20170501 18:29:48.556" status="PASS"></status>
</kw>
<status starttime="20170501 18:29:48.554" endtime="20170501 18:29:48.556" status="PASS"></status>
</kw>
<status starttime="20170501 18:29:48.552" endtime="20170501 18:29:48.556" status="PASS"></status>
</kw>
<status starttime="20170501 18:29:48.552" endtime="20170501 18:29:48.556" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:29:48.557">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:29:48.287" endtime="20170501 18:29:48.557" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:29:48.557">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:29:48.557" endtime="20170501 18:29:48.557" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:29:48.558">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170501 18:29:48.558">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170501 18:29:48.558">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170501 18:29:48.558" endtime="20170501 18:29:48.558" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:29:48.558">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:29:48.287" endtime="20170501 18:29:48.558" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:29:48.559">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:29:48.286" endtime="20170501 18:29:48.559" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170501 18:29:48.559">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170501 18:29:48.559" endtime="20170501 18:29:48.559" status="FAIL"></status>
</kw>
<status starttime="20170501 18:29:48.286" endtime="20170501 18:29:48.559" status="FAIL"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:29:58.564">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170501 18:29:58.564" endtime="20170501 18:29:58.564" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:29:58.565">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170501 18:29:58.565" endtime="20170501 18:29:58.565" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:29:58.566">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170501 18:29:58.565" endtime="20170501 18:29:58.566" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:29:58.566">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170501 18:29:58.566" endtime="20170501 18:29:58.566" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:29:58.753">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170501 18:29:58.567" endtime="20170501 18:29:58.753" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:29:58.753">${status} = PASS</msg>
<msg level="INFO" timestamp="20170501 18:29:58.753">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:29:58.567" endtime="20170501 18:29:58.753" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:29:58.754">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:29:58.754" endtime="20170501 18:29:58.754" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:29:58.755">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:29:58.754" endtime="20170501 18:29:58.755" status="PASS"></status>
</kw>
<status starttime="20170501 18:29:58.563" endtime="20170501 18:29:58.755" status="PASS"></status>
</kw>
<status starttime="20170501 18:29:58.563" endtime="20170501 18:29:58.755" status="PASS"></status>
</kw>
<status starttime="20170501 18:29:58.562" endtime="20170501 18:29:58.755" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:29:58.756">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170501 18:29:58.756" endtime="20170501 18:29:58.756" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:29:58.758">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:29:58.757" endtime="20170501 18:29:58.758" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:29:58.759">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:29:58.759" endtime="20170501 18:29:58.759" status="PASS"></status>
</kw>
<status starttime="20170501 18:29:58.758" endtime="20170501 18:29:58.759" status="PASS"></status>
</kw>
<status starttime="20170501 18:29:58.757" endtime="20170501 18:29:58.759" status="PASS"></status>
</kw>
<status starttime="20170501 18:29:58.756" endtime="20170501 18:29:58.759" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:29:58.828">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170501 18:29:58.828">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:29:58.760" endtime="20170501 18:29:58.828" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:29:58.830">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:29:58.829" endtime="20170501 18:29:58.830" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:29:58.831">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:29:58.831" endtime="20170501 18:29:58.831" status="PASS"></status>
</kw>
<status starttime="20170501 18:29:58.830" endtime="20170501 18:29:58.831" status="PASS"></status>
</kw>
<status starttime="20170501 18:29:58.829" endtime="20170501 18:29:58.831" status="PASS"></status>
</kw>
<status starttime="20170501 18:29:58.828" endtime="20170501 18:29:58.831" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:29:58.831">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:29:58.561" endtime="20170501 18:29:58.831" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:29:58.832">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:29:58.832" endtime="20170501 18:29:58.832" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:29:58.833">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170501 18:29:58.833">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170501 18:29:58.833">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170501 18:29:58.832" endtime="20170501 18:29:58.833" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:29:58.833">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:29:58.561" endtime="20170501 18:29:58.833" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:29:58.833">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:29:58.560" endtime="20170501 18:29:58.833" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170501 18:29:58.834">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170501 18:29:58.834" endtime="20170501 18:29:58.834" status="FAIL"></status>
</kw>
<status starttime="20170501 18:29:58.560" endtime="20170501 18:29:58.834" status="FAIL"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:30:08.840">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170501 18:30:08.839" endtime="20170501 18:30:08.840" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:30:08.841">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170501 18:30:08.840" endtime="20170501 18:30:08.841" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:30:08.842">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170501 18:30:08.841" endtime="20170501 18:30:08.842" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:30:08.843">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170501 18:30:08.842" endtime="20170501 18:30:08.843" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:30:09.027">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170501 18:30:08.844" endtime="20170501 18:30:09.027" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:30:09.027">${status} = PASS</msg>
<msg level="INFO" timestamp="20170501 18:30:09.027">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:30:08.843" endtime="20170501 18:30:09.027" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:30:09.028">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:30:09.027" endtime="20170501 18:30:09.028" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:30:09.028">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:30:09.028" endtime="20170501 18:30:09.028" status="PASS"></status>
</kw>
<status starttime="20170501 18:30:08.838" endtime="20170501 18:30:09.029" status="PASS"></status>
</kw>
<status starttime="20170501 18:30:08.837" endtime="20170501 18:30:09.029" status="PASS"></status>
</kw>
<status starttime="20170501 18:30:08.837" endtime="20170501 18:30:09.029" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:30:09.029">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170501 18:30:09.029" endtime="20170501 18:30:09.029" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:30:09.031">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:30:09.031" endtime="20170501 18:30:09.031" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:30:09.032">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:30:09.032" endtime="20170501 18:30:09.032" status="PASS"></status>
</kw>
<status starttime="20170501 18:30:09.031" endtime="20170501 18:30:09.032" status="PASS"></status>
</kw>
<status starttime="20170501 18:30:09.030" endtime="20170501 18:30:09.033" status="PASS"></status>
</kw>
<status starttime="20170501 18:30:09.030" endtime="20170501 18:30:09.033" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:30:09.099">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170501 18:30:09.099">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:30:09.033" endtime="20170501 18:30:09.099" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:30:09.100">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:30:09.100" endtime="20170501 18:30:09.101" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:30:09.101">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:30:09.101" endtime="20170501 18:30:09.101" status="PASS"></status>
</kw>
<status starttime="20170501 18:30:09.101" endtime="20170501 18:30:09.102" status="PASS"></status>
</kw>
<status starttime="20170501 18:30:09.100" endtime="20170501 18:30:09.102" status="PASS"></status>
</kw>
<status starttime="20170501 18:30:09.099" endtime="20170501 18:30:09.102" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:30:09.102">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:30:08.836" endtime="20170501 18:30:09.102" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:30:09.103">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:30:09.102" endtime="20170501 18:30:09.103" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:30:09.103">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170501 18:30:09.103">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170501 18:30:09.103">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170501 18:30:09.103" endtime="20170501 18:30:09.103" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:30:09.104">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:30:08.835" endtime="20170501 18:30:09.104" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:30:09.104">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:30:08.835" endtime="20170501 18:30:09.104" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170501 18:30:09.105">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170501 18:30:09.104" endtime="20170501 18:30:09.105" status="FAIL"></status>
</kw>
<status starttime="20170501 18:30:08.835" endtime="20170501 18:30:09.105" status="FAIL"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:30:19.110">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170501 18:30:19.109" endtime="20170501 18:30:19.110" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:30:19.111">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170501 18:30:19.110" endtime="20170501 18:30:19.111" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:30:19.111">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170501 18:30:19.111" endtime="20170501 18:30:19.111" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:30:19.112">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170501 18:30:19.111" endtime="20170501 18:30:19.112" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:30:19.300">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170501 18:30:19.112" endtime="20170501 18:30:19.300" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:30:19.300">${status} = PASS</msg>
<msg level="INFO" timestamp="20170501 18:30:19.300">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:30:19.112" endtime="20170501 18:30:19.300" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:30:19.301">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:30:19.301" endtime="20170501 18:30:19.301" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:30:19.301">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:30:19.301" endtime="20170501 18:30:19.302" status="PASS"></status>
</kw>
<status starttime="20170501 18:30:19.109" endtime="20170501 18:30:19.302" status="PASS"></status>
</kw>
<status starttime="20170501 18:30:19.108" endtime="20170501 18:30:19.302" status="PASS"></status>
</kw>
<status starttime="20170501 18:30:19.108" endtime="20170501 18:30:19.302" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:30:19.303">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170501 18:30:19.302" endtime="20170501 18:30:19.303" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:30:19.305">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:30:19.304" endtime="20170501 18:30:19.305" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:30:19.306">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:30:19.306" endtime="20170501 18:30:19.306" status="PASS"></status>
</kw>
<status starttime="20170501 18:30:19.305" endtime="20170501 18:30:19.306" status="PASS"></status>
</kw>
<status starttime="20170501 18:30:19.303" endtime="20170501 18:30:19.306" status="PASS"></status>
</kw>
<status starttime="20170501 18:30:19.303" endtime="20170501 18:30:19.306" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:30:19.371">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170501 18:30:19.372">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:30:19.307" endtime="20170501 18:30:19.372" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:30:19.373">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:30:19.373" endtime="20170501 18:30:19.373" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:30:19.374">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:30:19.374" endtime="20170501 18:30:19.374" status="PASS"></status>
</kw>
<status starttime="20170501 18:30:19.374" endtime="20170501 18:30:19.375" status="PASS"></status>
</kw>
<status starttime="20170501 18:30:19.372" endtime="20170501 18:30:19.375" status="PASS"></status>
</kw>
<status starttime="20170501 18:30:19.372" endtime="20170501 18:30:19.375" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:30:19.375">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:30:19.107" endtime="20170501 18:30:19.375" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:30:19.376">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:30:19.375" endtime="20170501 18:30:19.376" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:30:19.376">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170501 18:30:19.376">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170501 18:30:19.376">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170501 18:30:19.376" endtime="20170501 18:30:19.376" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:30:19.377">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:30:19.106" endtime="20170501 18:30:19.377" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:30:19.377">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:30:19.106" endtime="20170501 18:30:19.377" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170501 18:30:19.377">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170501 18:30:19.377" endtime="20170501 18:30:19.378" status="FAIL"></status>
</kw>
<status starttime="20170501 18:30:19.105" endtime="20170501 18:30:19.378" status="FAIL"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:30:29.383">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170501 18:30:29.382" endtime="20170501 18:30:29.384" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:30:29.384">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170501 18:30:29.384" endtime="20170501 18:30:29.384" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:30:29.385">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170501 18:30:29.385" endtime="20170501 18:30:29.385" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:30:29.386">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170501 18:30:29.386" endtime="20170501 18:30:29.386" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:30:29.618">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170501 18:30:29.387" endtime="20170501 18:30:29.618" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:30:29.619">${status} = PASS</msg>
<msg level="INFO" timestamp="20170501 18:30:29.619">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:30:29.387" endtime="20170501 18:30:29.619" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:30:29.619">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:30:29.619" endtime="20170501 18:30:29.619" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:30:29.620">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:30:29.620" endtime="20170501 18:30:29.620" status="PASS"></status>
</kw>
<status starttime="20170501 18:30:29.381" endtime="20170501 18:30:29.620" status="PASS"></status>
</kw>
<status starttime="20170501 18:30:29.381" endtime="20170501 18:30:29.620" status="PASS"></status>
</kw>
<status starttime="20170501 18:30:29.380" endtime="20170501 18:30:29.620" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:30:29.621">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170501 18:30:29.621" endtime="20170501 18:30:29.621" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:30:29.623">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:30:29.622" endtime="20170501 18:30:29.623" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:30:29.624">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:30:29.624" endtime="20170501 18:30:29.624" status="PASS"></status>
</kw>
<status starttime="20170501 18:30:29.623" endtime="20170501 18:30:29.624" status="PASS"></status>
</kw>
<status starttime="20170501 18:30:29.622" endtime="20170501 18:30:29.624" status="PASS"></status>
</kw>
<status starttime="20170501 18:30:29.621" endtime="20170501 18:30:29.624" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:30:29.691">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170501 18:30:29.691">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:30:29.625" endtime="20170501 18:30:29.691" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:30:29.693">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:30:29.692" endtime="20170501 18:30:29.693" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:30:29.694">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:30:29.693" endtime="20170501 18:30:29.694" status="PASS"></status>
</kw>
<status starttime="20170501 18:30:29.693" endtime="20170501 18:30:29.694" status="PASS"></status>
</kw>
<status starttime="20170501 18:30:29.692" endtime="20170501 18:30:29.694" status="PASS"></status>
</kw>
<status starttime="20170501 18:30:29.691" endtime="20170501 18:30:29.694" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:30:29.694">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:30:29.380" endtime="20170501 18:30:29.695" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:30:29.695">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:30:29.695" endtime="20170501 18:30:29.695" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:30:29.696">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170501 18:30:29.696">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170501 18:30:29.696">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170501 18:30:29.695" endtime="20170501 18:30:29.696" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:30:29.696">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:30:29.379" endtime="20170501 18:30:29.696" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:30:29.696">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:30:29.379" endtime="20170501 18:30:29.696" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170501 18:30:29.697">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170501 18:30:29.697" endtime="20170501 18:30:29.697" status="FAIL"></status>
</kw>
<status starttime="20170501 18:30:29.378" endtime="20170501 18:30:29.697" status="FAIL"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:30:39.703">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170501 18:30:39.703" endtime="20170501 18:30:39.704" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:30:39.705">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170501 18:30:39.704" endtime="20170501 18:30:39.705" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:30:39.705">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170501 18:30:39.705" endtime="20170501 18:30:39.706" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:30:39.706">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170501 18:30:39.706" endtime="20170501 18:30:39.706" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:30:39.929">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170501 18:30:39.707" endtime="20170501 18:30:39.929" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:30:39.929">${status} = PASS</msg>
<msg level="INFO" timestamp="20170501 18:30:39.929">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:30:39.707" endtime="20170501 18:30:39.929" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:30:39.930">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:30:39.930" endtime="20170501 18:30:39.930" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:30:39.931">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:30:39.930" endtime="20170501 18:30:39.931" status="PASS"></status>
</kw>
<status starttime="20170501 18:30:39.702" endtime="20170501 18:30:39.931" status="PASS"></status>
</kw>
<status starttime="20170501 18:30:39.701" endtime="20170501 18:30:39.931" status="PASS"></status>
</kw>
<status starttime="20170501 18:30:39.701" endtime="20170501 18:30:39.931" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:30:39.932">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170501 18:30:39.931" endtime="20170501 18:30:39.932" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:30:39.934">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:30:39.933" endtime="20170501 18:30:39.934" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:30:39.935">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:30:39.934" endtime="20170501 18:30:39.935" status="PASS"></status>
</kw>
<status starttime="20170501 18:30:39.934" endtime="20170501 18:30:39.935" status="PASS"></status>
</kw>
<status starttime="20170501 18:30:39.932" endtime="20170501 18:30:39.935" status="PASS"></status>
</kw>
<status starttime="20170501 18:30:39.932" endtime="20170501 18:30:39.935" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:30:40.002">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170501 18:30:40.002">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:30:39.935" endtime="20170501 18:30:40.002" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:30:40.004">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:30:40.003" endtime="20170501 18:30:40.004" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:30:40.005">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:30:40.005" endtime="20170501 18:30:40.005" status="PASS"></status>
</kw>
<status starttime="20170501 18:30:40.004" endtime="20170501 18:30:40.005" status="PASS"></status>
</kw>
<status starttime="20170501 18:30:40.003" endtime="20170501 18:30:40.005" status="PASS"></status>
</kw>
<status starttime="20170501 18:30:40.003" endtime="20170501 18:30:40.005" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:30:40.006">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:30:39.699" endtime="20170501 18:30:40.006" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:30:40.006">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:30:40.006" endtime="20170501 18:30:40.006" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:30:40.007">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170501 18:30:40.007">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170501 18:30:40.007">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170501 18:30:40.006" endtime="20170501 18:30:40.007" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:30:40.007">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:30:39.699" endtime="20170501 18:30:40.007" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:30:40.007">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:30:39.699" endtime="20170501 18:30:40.008" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170501 18:30:40.008">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170501 18:30:40.008" endtime="20170501 18:30:40.008" status="FAIL"></status>
</kw>
<status starttime="20170501 18:30:39.698" endtime="20170501 18:30:40.008" status="FAIL"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:30:50.013">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170501 18:30:50.013" endtime="20170501 18:30:50.013" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:30:50.014">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170501 18:30:50.014" endtime="20170501 18:30:50.014" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:30:50.015">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170501 18:30:50.014" endtime="20170501 18:30:50.015" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:30:50.015">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170501 18:30:50.015" endtime="20170501 18:30:50.015" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:30:50.204">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170501 18:30:50.016" endtime="20170501 18:30:50.204" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:30:50.204">${status} = PASS</msg>
<msg level="INFO" timestamp="20170501 18:30:50.204">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:30:50.015" endtime="20170501 18:30:50.204" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:30:50.205">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:30:50.204" endtime="20170501 18:30:50.205" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:30:50.205">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:30:50.205" endtime="20170501 18:30:50.205" status="PASS"></status>
</kw>
<status starttime="20170501 18:30:50.012" endtime="20170501 18:30:50.206" status="PASS"></status>
</kw>
<status starttime="20170501 18:30:50.012" endtime="20170501 18:30:50.206" status="PASS"></status>
</kw>
<status starttime="20170501 18:30:50.011" endtime="20170501 18:30:50.206" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:30:50.206">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170501 18:30:50.206" endtime="20170501 18:30:50.206" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:30:50.208">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:30:50.208" endtime="20170501 18:30:50.208" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:30:50.209">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:30:50.209" endtime="20170501 18:30:50.209" status="PASS"></status>
</kw>
<status starttime="20170501 18:30:50.209" endtime="20170501 18:30:50.209" status="PASS"></status>
</kw>
<status starttime="20170501 18:30:50.207" endtime="20170501 18:30:50.210" status="PASS"></status>
</kw>
<status starttime="20170501 18:30:50.207" endtime="20170501 18:30:50.210" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:30:50.274">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170501 18:30:50.275">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:30:50.210" endtime="20170501 18:30:50.275" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:30:50.277">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:30:50.276" endtime="20170501 18:30:50.277" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:30:50.278">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:30:50.278" endtime="20170501 18:30:50.278" status="PASS"></status>
</kw>
<status starttime="20170501 18:30:50.277" endtime="20170501 18:30:50.278" status="PASS"></status>
</kw>
<status starttime="20170501 18:30:50.275" endtime="20170501 18:30:50.278" status="PASS"></status>
</kw>
<status starttime="20170501 18:30:50.275" endtime="20170501 18:30:50.279" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:30:50.279">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:30:50.010" endtime="20170501 18:30:50.279" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:30:50.279">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:30:50.279" endtime="20170501 18:30:50.279" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:30:50.280">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170501 18:30:50.280">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170501 18:30:50.280">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170501 18:30:50.280" endtime="20170501 18:30:50.280" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:30:50.280">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:30:50.010" endtime="20170501 18:30:50.280" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:30:50.281">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:30:50.009" endtime="20170501 18:30:50.281" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170501 18:30:50.281">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170501 18:30:50.281" endtime="20170501 18:30:50.281" status="FAIL"></status>
</kw>
<status starttime="20170501 18:30:50.009" endtime="20170501 18:30:50.282" status="FAIL"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:31:00.287">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170501 18:31:00.286" endtime="20170501 18:31:00.287" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:31:00.287">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170501 18:31:00.287" endtime="20170501 18:31:00.288" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:31:00.288">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170501 18:31:00.288" endtime="20170501 18:31:00.288" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:31:00.289">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170501 18:31:00.288" endtime="20170501 18:31:00.289" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:31:00.492">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170501 18:31:00.289" endtime="20170501 18:31:00.492" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:31:00.492">${status} = PASS</msg>
<msg level="INFO" timestamp="20170501 18:31:00.492">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:31:00.289" endtime="20170501 18:31:00.492" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:31:00.493">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:31:00.493" endtime="20170501 18:31:00.493" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:31:00.494">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:31:00.493" endtime="20170501 18:31:00.494" status="PASS"></status>
</kw>
<status starttime="20170501 18:31:00.285" endtime="20170501 18:31:00.494" status="PASS"></status>
</kw>
<status starttime="20170501 18:31:00.285" endtime="20170501 18:31:00.494" status="PASS"></status>
</kw>
<status starttime="20170501 18:31:00.284" endtime="20170501 18:31:00.494" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:31:00.495">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170501 18:31:00.494" endtime="20170501 18:31:00.495" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:31:00.497">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:31:00.496" endtime="20170501 18:31:00.497" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:31:00.497">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:31:00.497" endtime="20170501 18:31:00.498" status="PASS"></status>
</kw>
<status starttime="20170501 18:31:00.497" endtime="20170501 18:31:00.498" status="PASS"></status>
</kw>
<status starttime="20170501 18:31:00.495" endtime="20170501 18:31:00.498" status="PASS"></status>
</kw>
<status starttime="20170501 18:31:00.495" endtime="20170501 18:31:00.498" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:31:00.597">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170501 18:31:00.597">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:31:00.498" endtime="20170501 18:31:00.597" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:31:00.599">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:31:00.598" endtime="20170501 18:31:00.599" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:31:00.600">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:31:00.599" endtime="20170501 18:31:00.600" status="PASS"></status>
</kw>
<status starttime="20170501 18:31:00.599" endtime="20170501 18:31:00.600" status="PASS"></status>
</kw>
<status starttime="20170501 18:31:00.598" endtime="20170501 18:31:00.600" status="PASS"></status>
</kw>
<status starttime="20170501 18:31:00.597" endtime="20170501 18:31:00.600" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:31:00.600">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:31:00.284" endtime="20170501 18:31:00.600" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:31:00.601">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:31:00.601" endtime="20170501 18:31:00.601" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:31:00.601">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170501 18:31:00.602">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170501 18:31:00.602">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170501 18:31:00.601" endtime="20170501 18:31:00.602" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:31:00.602">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:31:00.283" endtime="20170501 18:31:00.602" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:31:00.602">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:31:00.282" endtime="20170501 18:31:00.602" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170501 18:31:00.603">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170501 18:31:00.602" endtime="20170501 18:31:00.603" status="FAIL"></status>
</kw>
<status starttime="20170501 18:31:00.282" endtime="20170501 18:31:00.603" status="FAIL"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:31:10.609">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170501 18:31:10.608" endtime="20170501 18:31:10.609" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:31:10.610">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170501 18:31:10.610" endtime="20170501 18:31:10.610" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:31:10.611">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170501 18:31:10.610" endtime="20170501 18:31:10.611" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:31:10.612">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170501 18:31:10.611" endtime="20170501 18:31:10.612" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:31:10.795">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170501 18:31:10.613" endtime="20170501 18:31:10.795" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:31:10.795">${status} = PASS</msg>
<msg level="INFO" timestamp="20170501 18:31:10.795">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:31:10.612" endtime="20170501 18:31:10.795" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:31:10.796">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:31:10.795" endtime="20170501 18:31:10.796" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:31:10.797">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:31:10.796" endtime="20170501 18:31:10.797" status="PASS"></status>
</kw>
<status starttime="20170501 18:31:10.608" endtime="20170501 18:31:10.797" status="PASS"></status>
</kw>
<status starttime="20170501 18:31:10.607" endtime="20170501 18:31:10.797" status="PASS"></status>
</kw>
<status starttime="20170501 18:31:10.606" endtime="20170501 18:31:10.797" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:31:10.798">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170501 18:31:10.797" endtime="20170501 18:31:10.798" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:31:10.800">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:31:10.799" endtime="20170501 18:31:10.800" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:31:10.801">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:31:10.800" endtime="20170501 18:31:10.801" status="PASS"></status>
</kw>
<status starttime="20170501 18:31:10.800" endtime="20170501 18:31:10.801" status="PASS"></status>
</kw>
<status starttime="20170501 18:31:10.798" endtime="20170501 18:31:10.801" status="PASS"></status>
</kw>
<status starttime="20170501 18:31:10.798" endtime="20170501 18:31:10.801" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:31:10.866">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170501 18:31:10.867">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:31:10.801" endtime="20170501 18:31:10.867" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:31:10.868">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:31:10.868" endtime="20170501 18:31:10.868" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:31:10.869">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:31:10.869" endtime="20170501 18:31:10.869" status="PASS"></status>
</kw>
<status starttime="20170501 18:31:10.868" endtime="20170501 18:31:10.869" status="PASS"></status>
</kw>
<status starttime="20170501 18:31:10.867" endtime="20170501 18:31:10.869" status="PASS"></status>
</kw>
<status starttime="20170501 18:31:10.867" endtime="20170501 18:31:10.870" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:31:10.870">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:31:10.605" endtime="20170501 18:31:10.870" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:31:10.870">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:31:10.870" endtime="20170501 18:31:10.870" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:31:10.871">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170501 18:31:10.871">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170501 18:31:10.871">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170501 18:31:10.871" endtime="20170501 18:31:10.871" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:31:10.871">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:31:10.605" endtime="20170501 18:31:10.872" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:31:10.872">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:31:10.604" endtime="20170501 18:31:10.872" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170501 18:31:10.872">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170501 18:31:10.872" endtime="20170501 18:31:10.873" status="FAIL"></status>
</kw>
<status starttime="20170501 18:31:10.603" endtime="20170501 18:31:10.873" status="FAIL"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:31:20.879">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170501 18:31:20.879" endtime="20170501 18:31:20.879" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:31:20.880">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170501 18:31:20.880" endtime="20170501 18:31:20.880" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:31:20.880">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170501 18:31:20.880" endtime="20170501 18:31:20.880" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:31:20.881">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170501 18:31:20.881" endtime="20170501 18:31:20.881" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:31:21.061">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170501 18:31:20.882" endtime="20170501 18:31:21.062" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:31:21.062">${status} = PASS</msg>
<msg level="INFO" timestamp="20170501 18:31:21.062">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:31:20.881" endtime="20170501 18:31:21.062" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:31:21.062">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:31:21.062" endtime="20170501 18:31:21.062" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:31:21.063">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:31:21.063" endtime="20170501 18:31:21.063" status="PASS"></status>
</kw>
<status starttime="20170501 18:31:20.876" endtime="20170501 18:31:21.063" status="PASS"></status>
</kw>
<status starttime="20170501 18:31:20.876" endtime="20170501 18:31:21.063" status="PASS"></status>
</kw>
<status starttime="20170501 18:31:20.875" endtime="20170501 18:31:21.064" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:31:21.064">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170501 18:31:21.064" endtime="20170501 18:31:21.064" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:31:21.067">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:31:21.066" endtime="20170501 18:31:21.067" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:31:21.068">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:31:21.068" endtime="20170501 18:31:21.069" status="PASS"></status>
</kw>
<status starttime="20170501 18:31:21.067" endtime="20170501 18:31:21.069" status="PASS"></status>
</kw>
<status starttime="20170501 18:31:21.065" endtime="20170501 18:31:21.069" status="PASS"></status>
</kw>
<status starttime="20170501 18:31:21.065" endtime="20170501 18:31:21.069" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:31:21.136">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170501 18:31:21.136">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:31:21.069" endtime="20170501 18:31:21.136" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:31:21.138">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:31:21.138" endtime="20170501 18:31:21.138" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:31:21.170">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:31:21.139" endtime="20170501 18:31:21.170" status="PASS"></status>
</kw>
<status starttime="20170501 18:31:21.138" endtime="20170501 18:31:21.170" status="PASS"></status>
</kw>
<status starttime="20170501 18:31:21.137" endtime="20170501 18:31:21.170" status="PASS"></status>
</kw>
<status starttime="20170501 18:31:21.137" endtime="20170501 18:31:21.170" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:31:21.170">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:31:20.875" endtime="20170501 18:31:21.170" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:31:21.171">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:31:21.171" endtime="20170501 18:31:21.171" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:31:21.172">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170501 18:31:21.172">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170501 18:31:21.172">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170501 18:31:21.171" endtime="20170501 18:31:21.172" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:31:21.172">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:31:20.874" endtime="20170501 18:31:21.172" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:31:21.172">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:31:20.874" endtime="20170501 18:31:21.172" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170501 18:31:21.173">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170501 18:31:21.173" endtime="20170501 18:31:21.173" status="FAIL"></status>
</kw>
<status starttime="20170501 18:31:20.873" endtime="20170501 18:31:21.173" status="FAIL"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:31:31.178">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170501 18:31:31.177" endtime="20170501 18:31:31.178" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:31:31.178">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170501 18:31:31.178" endtime="20170501 18:31:31.179" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:31:31.179">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170501 18:31:31.179" endtime="20170501 18:31:31.179" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:31:31.180">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170501 18:31:31.179" endtime="20170501 18:31:31.180" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:31:31.367">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170501 18:31:31.180" endtime="20170501 18:31:31.368" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:31:31.368">${status} = PASS</msg>
<msg level="INFO" timestamp="20170501 18:31:31.368">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:31:31.180" endtime="20170501 18:31:31.368" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:31:31.368">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:31:31.368" endtime="20170501 18:31:31.369" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:31:31.369">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:31:31.369" endtime="20170501 18:31:31.369" status="PASS"></status>
</kw>
<status starttime="20170501 18:31:31.177" endtime="20170501 18:31:31.369" status="PASS"></status>
</kw>
<status starttime="20170501 18:31:31.176" endtime="20170501 18:31:31.369" status="PASS"></status>
</kw>
<status starttime="20170501 18:31:31.176" endtime="20170501 18:31:31.370" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:31:31.370">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170501 18:31:31.370" endtime="20170501 18:31:31.370" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:31:31.372">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:31:31.371" endtime="20170501 18:31:31.372" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:31:31.373">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:31:31.373" endtime="20170501 18:31:31.373" status="PASS"></status>
</kw>
<status starttime="20170501 18:31:31.372" endtime="20170501 18:31:31.373" status="PASS"></status>
</kw>
<status starttime="20170501 18:31:31.371" endtime="20170501 18:31:31.373" status="PASS"></status>
</kw>
<status starttime="20170501 18:31:31.370" endtime="20170501 18:31:31.373" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:31:31.439">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170501 18:31:31.439">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:31:31.374" endtime="20170501 18:31:31.439" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:31:31.441">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:31:31.440" endtime="20170501 18:31:31.441" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:31:31.442">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:31:31.442" endtime="20170501 18:31:31.442" status="PASS"></status>
</kw>
<status starttime="20170501 18:31:31.441" endtime="20170501 18:31:31.442" status="PASS"></status>
</kw>
<status starttime="20170501 18:31:31.440" endtime="20170501 18:31:31.442" status="PASS"></status>
</kw>
<status starttime="20170501 18:31:31.440" endtime="20170501 18:31:31.442" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:31:31.443">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:31:31.175" endtime="20170501 18:31:31.443" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:31:31.443">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:31:31.443" endtime="20170501 18:31:31.443" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:31:31.444">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170501 18:31:31.444">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170501 18:31:31.444">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170501 18:31:31.444" endtime="20170501 18:31:31.444" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:31:31.444">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:31:31.174" endtime="20170501 18:31:31.444" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:31:31.445">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:31:31.174" endtime="20170501 18:31:31.445" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170501 18:31:31.445">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170501 18:31:31.445" endtime="20170501 18:31:31.445" status="FAIL"></status>
</kw>
<status starttime="20170501 18:31:31.174" endtime="20170501 18:31:31.446" status="FAIL"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:31:41.451">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170501 18:31:41.450" endtime="20170501 18:31:41.451" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:31:41.452">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170501 18:31:41.451" endtime="20170501 18:31:41.452" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:31:41.452">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170501 18:31:41.452" endtime="20170501 18:31:41.452" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:31:41.453">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170501 18:31:41.452" endtime="20170501 18:31:41.453" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:31:41.637">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170501 18:31:41.453" endtime="20170501 18:31:41.637" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:31:41.637">${status} = PASS</msg>
<msg level="INFO" timestamp="20170501 18:31:41.637">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:31:41.453" endtime="20170501 18:31:41.637" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:31:41.638">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:31:41.637" endtime="20170501 18:31:41.638" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:31:41.638">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:31:41.638" endtime="20170501 18:31:41.638" status="PASS"></status>
</kw>
<status starttime="20170501 18:31:41.450" endtime="20170501 18:31:41.639" status="PASS"></status>
</kw>
<status starttime="20170501 18:31:41.449" endtime="20170501 18:31:41.639" status="PASS"></status>
</kw>
<status starttime="20170501 18:31:41.448" endtime="20170501 18:31:41.639" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:31:41.639">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170501 18:31:41.639" endtime="20170501 18:31:41.639" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:31:41.641">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:31:41.641" endtime="20170501 18:31:41.641" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:31:41.642">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:31:41.642" endtime="20170501 18:31:41.642" status="PASS"></status>
</kw>
<status starttime="20170501 18:31:41.642" endtime="20170501 18:31:41.642" status="PASS"></status>
</kw>
<status starttime="20170501 18:31:41.640" endtime="20170501 18:31:41.643" status="PASS"></status>
</kw>
<status starttime="20170501 18:31:41.640" endtime="20170501 18:31:41.643" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:31:41.709">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170501 18:31:41.709">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:31:41.643" endtime="20170501 18:31:41.709" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:31:41.711">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:31:41.711" endtime="20170501 18:31:41.711" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:31:41.712">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:31:41.712" endtime="20170501 18:31:41.712" status="PASS"></status>
</kw>
<status starttime="20170501 18:31:41.712" endtime="20170501 18:31:41.712" status="PASS"></status>
</kw>
<status starttime="20170501 18:31:41.710" endtime="20170501 18:31:41.713" status="PASS"></status>
</kw>
<status starttime="20170501 18:31:41.710" endtime="20170501 18:31:41.713" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:31:41.713">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:31:41.448" endtime="20170501 18:31:41.713" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:31:41.713">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:31:41.713" endtime="20170501 18:31:41.714" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:31:41.714">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170501 18:31:41.714">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170501 18:31:41.714">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170501 18:31:41.714" endtime="20170501 18:31:41.714" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:31:41.715">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:31:41.447" endtime="20170501 18:31:41.715" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:31:41.715">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:31:41.447" endtime="20170501 18:31:41.715" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170501 18:31:41.715">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170501 18:31:41.715" endtime="20170501 18:31:41.716" status="FAIL"></status>
</kw>
<status starttime="20170501 18:31:41.446" endtime="20170501 18:31:41.716" status="FAIL"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:31:51.720">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170501 18:31:51.720" endtime="20170501 18:31:51.721" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:31:51.721">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170501 18:31:51.721" endtime="20170501 18:31:51.721" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:31:51.722">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170501 18:31:51.721" endtime="20170501 18:31:51.722" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:31:51.722">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170501 18:31:51.722" endtime="20170501 18:31:51.723" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:31:51.905">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170501 18:31:51.723" endtime="20170501 18:31:51.905" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:31:51.905">${status} = PASS</msg>
<msg level="INFO" timestamp="20170501 18:31:51.905">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:31:51.723" endtime="20170501 18:31:51.905" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:31:51.906">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:31:51.906" endtime="20170501 18:31:51.906" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:31:51.907">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:31:51.906" endtime="20170501 18:31:51.907" status="PASS"></status>
</kw>
<status starttime="20170501 18:31:51.719" endtime="20170501 18:31:51.907" status="PASS"></status>
</kw>
<status starttime="20170501 18:31:51.719" endtime="20170501 18:31:51.907" status="PASS"></status>
</kw>
<status starttime="20170501 18:31:51.718" endtime="20170501 18:31:51.907" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:31:51.908">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170501 18:31:51.907" endtime="20170501 18:31:51.908" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:31:51.910">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:31:51.909" endtime="20170501 18:31:51.910" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:31:51.912">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:31:51.911" endtime="20170501 18:31:51.912" status="PASS"></status>
</kw>
<status starttime="20170501 18:31:51.911" endtime="20170501 18:31:51.912" status="PASS"></status>
</kw>
<status starttime="20170501 18:31:51.908" endtime="20170501 18:31:51.912" status="PASS"></status>
</kw>
<status starttime="20170501 18:31:51.908" endtime="20170501 18:31:51.912" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:31:51.978">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170501 18:31:51.978">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:31:51.912" endtime="20170501 18:31:51.978" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:31:51.980">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:31:51.980" endtime="20170501 18:31:51.980" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:31:51.981">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:31:51.981" endtime="20170501 18:31:51.981" status="PASS"></status>
</kw>
<status starttime="20170501 18:31:51.980" endtime="20170501 18:31:51.981" status="PASS"></status>
</kw>
<status starttime="20170501 18:31:51.979" endtime="20170501 18:31:51.981" status="PASS"></status>
</kw>
<status starttime="20170501 18:31:51.979" endtime="20170501 18:31:51.981" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:31:51.982">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:31:51.718" endtime="20170501 18:31:51.982" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:31:51.982">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:31:51.982" endtime="20170501 18:31:51.982" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:31:51.983">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170501 18:31:51.983">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170501 18:31:51.983">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170501 18:31:51.983" endtime="20170501 18:31:51.983" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:31:51.983">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:31:51.717" endtime="20170501 18:31:51.983" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:31:51.984">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:31:51.717" endtime="20170501 18:31:51.984" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170501 18:31:51.984">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170501 18:31:51.984" endtime="20170501 18:31:51.984" status="FAIL"></status>
</kw>
<status starttime="20170501 18:31:51.716" endtime="20170501 18:31:51.985" status="FAIL"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:32:01.990">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170501 18:32:01.989" endtime="20170501 18:32:01.990" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:32:01.991">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170501 18:32:01.991" endtime="20170501 18:32:01.991" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:32:01.991">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170501 18:32:01.991" endtime="20170501 18:32:01.992" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:32:01.992">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170501 18:32:01.992" endtime="20170501 18:32:01.992" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:32:02.194">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170501 18:32:01.993" endtime="20170501 18:32:02.194" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:32:02.195">${status} = PASS</msg>
<msg level="INFO" timestamp="20170501 18:32:02.195">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:32:01.992" endtime="20170501 18:32:02.195" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:32:02.195">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:32:02.195" endtime="20170501 18:32:02.195" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:32:02.196">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:32:02.196" endtime="20170501 18:32:02.196" status="PASS"></status>
</kw>
<status starttime="20170501 18:32:01.988" endtime="20170501 18:32:02.196" status="PASS"></status>
</kw>
<status starttime="20170501 18:32:01.988" endtime="20170501 18:32:02.196" status="PASS"></status>
</kw>
<status starttime="20170501 18:32:01.987" endtime="20170501 18:32:02.196" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:32:02.197">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170501 18:32:02.197" endtime="20170501 18:32:02.197" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:32:02.199">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:32:02.198" endtime="20170501 18:32:02.199" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:32:02.200">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:32:02.200" endtime="20170501 18:32:02.200" status="PASS"></status>
</kw>
<status starttime="20170501 18:32:02.199" endtime="20170501 18:32:02.200" status="PASS"></status>
</kw>
<status starttime="20170501 18:32:02.198" endtime="20170501 18:32:02.200" status="PASS"></status>
</kw>
<status starttime="20170501 18:32:02.197" endtime="20170501 18:32:02.201" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:32:02.267">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170501 18:32:02.267">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:32:02.201" endtime="20170501 18:32:02.267" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:32:02.269">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:32:02.268" endtime="20170501 18:32:02.269" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:32:02.270">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:32:02.270" endtime="20170501 18:32:02.270" status="PASS"></status>
</kw>
<status starttime="20170501 18:32:02.269" endtime="20170501 18:32:02.270" status="PASS"></status>
</kw>
<status starttime="20170501 18:32:02.268" endtime="20170501 18:32:02.270" status="PASS"></status>
</kw>
<status starttime="20170501 18:32:02.267" endtime="20170501 18:32:02.270" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:32:02.270">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:32:01.987" endtime="20170501 18:32:02.270" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:32:02.271">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:32:02.271" endtime="20170501 18:32:02.271" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:32:02.272">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170501 18:32:02.272">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170501 18:32:02.272">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170501 18:32:02.271" endtime="20170501 18:32:02.272" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:32:02.272">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:32:01.986" endtime="20170501 18:32:02.272" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:32:02.272">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:32:01.986" endtime="20170501 18:32:02.272" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170501 18:32:02.273">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170501 18:32:02.273" endtime="20170501 18:32:02.273" status="FAIL"></status>
</kw>
<status starttime="20170501 18:32:01.985" endtime="20170501 18:32:02.273" status="FAIL"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:32:12.278">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170501 18:32:12.277" endtime="20170501 18:32:12.278" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:32:12.279">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170501 18:32:12.278" endtime="20170501 18:32:12.279" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:32:12.279">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170501 18:32:12.279" endtime="20170501 18:32:12.279" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:32:12.280">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170501 18:32:12.280" endtime="20170501 18:32:12.280" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:32:12.484">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170501 18:32:12.281" endtime="20170501 18:32:12.484" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:32:12.484">${status} = PASS</msg>
<msg level="INFO" timestamp="20170501 18:32:12.484">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:32:12.280" endtime="20170501 18:32:12.484" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:32:12.485">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:32:12.484" endtime="20170501 18:32:12.485" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:32:12.486">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:32:12.485" endtime="20170501 18:32:12.486" status="PASS"></status>
</kw>
<status starttime="20170501 18:32:12.277" endtime="20170501 18:32:12.486" status="PASS"></status>
</kw>
<status starttime="20170501 18:32:12.277" endtime="20170501 18:32:12.486" status="PASS"></status>
</kw>
<status starttime="20170501 18:32:12.276" endtime="20170501 18:32:12.486" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:32:12.487">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170501 18:32:12.486" endtime="20170501 18:32:12.487" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:32:12.489">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:32:12.488" endtime="20170501 18:32:12.489" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:32:12.490">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:32:12.489" endtime="20170501 18:32:12.490" status="PASS"></status>
</kw>
<status starttime="20170501 18:32:12.489" endtime="20170501 18:32:12.490" status="PASS"></status>
</kw>
<status starttime="20170501 18:32:12.487" endtime="20170501 18:32:12.490" status="PASS"></status>
</kw>
<status starttime="20170501 18:32:12.487" endtime="20170501 18:32:12.490" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:32:12.568">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170501 18:32:12.568">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:32:12.490" endtime="20170501 18:32:12.568" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:32:12.570">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:32:12.569" endtime="20170501 18:32:12.570" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:32:12.571">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:32:12.571" endtime="20170501 18:32:12.571" status="PASS"></status>
</kw>
<status starttime="20170501 18:32:12.570" endtime="20170501 18:32:12.571" status="PASS"></status>
</kw>
<status starttime="20170501 18:32:12.569" endtime="20170501 18:32:12.571" status="PASS"></status>
</kw>
<status starttime="20170501 18:32:12.569" endtime="20170501 18:32:12.571" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:32:12.571">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:32:12.275" endtime="20170501 18:32:12.571" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:32:12.572">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:32:12.572" endtime="20170501 18:32:12.572" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:32:12.573">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170501 18:32:12.573">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170501 18:32:12.573">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170501 18:32:12.572" endtime="20170501 18:32:12.573" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:32:12.573">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:32:12.275" endtime="20170501 18:32:12.573" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:32:12.573">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:32:12.274" endtime="20170501 18:32:12.573" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170501 18:32:12.574">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170501 18:32:12.574" endtime="20170501 18:32:12.574" status="FAIL"></status>
</kw>
<status starttime="20170501 18:32:12.274" endtime="20170501 18:32:12.574" status="FAIL"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:32:22.579">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170501 18:32:22.579" endtime="20170501 18:32:22.579" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:32:22.580">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170501 18:32:22.580" endtime="20170501 18:32:22.580" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:32:22.580">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170501 18:32:22.580" endtime="20170501 18:32:22.581" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:32:22.581">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170501 18:32:22.581" endtime="20170501 18:32:22.581" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:32:22.761">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170501 18:32:22.582" endtime="20170501 18:32:22.762" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:32:22.762">${status} = PASS</msg>
<msg level="INFO" timestamp="20170501 18:32:22.762">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:32:22.581" endtime="20170501 18:32:22.762" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:32:22.762">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:32:22.762" endtime="20170501 18:32:22.762" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:32:22.763">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:32:22.763" endtime="20170501 18:32:22.763" status="PASS"></status>
</kw>
<status starttime="20170501 18:32:22.578" endtime="20170501 18:32:22.763" status="PASS"></status>
</kw>
<status starttime="20170501 18:32:22.577" endtime="20170501 18:32:22.763" status="PASS"></status>
</kw>
<status starttime="20170501 18:32:22.577" endtime="20170501 18:32:22.764" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:32:22.764">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170501 18:32:22.764" endtime="20170501 18:32:22.764" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:32:22.766">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:32:22.766" endtime="20170501 18:32:22.766" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:32:22.767">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:32:22.767" endtime="20170501 18:32:22.767" status="PASS"></status>
</kw>
<status starttime="20170501 18:32:22.767" endtime="20170501 18:32:22.768" status="PASS"></status>
</kw>
<status starttime="20170501 18:32:22.765" endtime="20170501 18:32:22.768" status="PASS"></status>
</kw>
<status starttime="20170501 18:32:22.764" endtime="20170501 18:32:22.768" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:32:22.842">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170501 18:32:22.842">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:32:22.768" endtime="20170501 18:32:22.842" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:32:22.844">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:32:22.843" endtime="20170501 18:32:22.844" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:32:22.845">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:32:22.844" endtime="20170501 18:32:22.845" status="PASS"></status>
</kw>
<status starttime="20170501 18:32:22.844" endtime="20170501 18:32:22.845" status="PASS"></status>
</kw>
<status starttime="20170501 18:32:22.842" endtime="20170501 18:32:22.845" status="PASS"></status>
</kw>
<status starttime="20170501 18:32:22.842" endtime="20170501 18:32:22.845" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:32:22.845">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:32:22.576" endtime="20170501 18:32:22.845" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:32:22.846">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:32:22.845" endtime="20170501 18:32:22.846" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:32:22.846">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170501 18:32:22.846">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170501 18:32:22.847">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170501 18:32:22.846" endtime="20170501 18:32:22.847" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:32:22.847">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:32:22.576" endtime="20170501 18:32:22.847" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:32:22.847">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:32:22.575" endtime="20170501 18:32:22.847" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170501 18:32:22.848">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170501 18:32:22.847" endtime="20170501 18:32:22.848" status="FAIL"></status>
</kw>
<status starttime="20170501 18:32:22.575" endtime="20170501 18:32:22.848" status="FAIL"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:32:32.853">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170501 18:32:32.852" endtime="20170501 18:32:32.853" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:32:32.854">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170501 18:32:32.853" endtime="20170501 18:32:32.854" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:32:32.854">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170501 18:32:32.854" endtime="20170501 18:32:32.854" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:32:32.855">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170501 18:32:32.854" endtime="20170501 18:32:32.855" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:32:33.034">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170501 18:32:32.856" endtime="20170501 18:32:33.034" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:32:33.034">${status} = PASS</msg>
<msg level="INFO" timestamp="20170501 18:32:33.034">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:32:32.855" endtime="20170501 18:32:33.035" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:32:33.035">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:32:33.035" endtime="20170501 18:32:33.035" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:32:33.036">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:32:33.035" endtime="20170501 18:32:33.036" status="PASS"></status>
</kw>
<status starttime="20170501 18:32:32.852" endtime="20170501 18:32:33.036" status="PASS"></status>
</kw>
<status starttime="20170501 18:32:32.851" endtime="20170501 18:32:33.037" status="PASS"></status>
</kw>
<status starttime="20170501 18:32:32.851" endtime="20170501 18:32:33.037" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:32:33.037">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170501 18:32:33.037" endtime="20170501 18:32:33.037" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:32:33.039">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:32:33.039" endtime="20170501 18:32:33.039" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:32:33.040">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:32:33.040" endtime="20170501 18:32:33.040" status="PASS"></status>
</kw>
<status starttime="20170501 18:32:33.039" endtime="20170501 18:32:33.040" status="PASS"></status>
</kw>
<status starttime="20170501 18:32:33.038" endtime="20170501 18:32:33.040" status="PASS"></status>
</kw>
<status starttime="20170501 18:32:33.038" endtime="20170501 18:32:33.041" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:32:33.109">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170501 18:32:33.109">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:32:33.041" endtime="20170501 18:32:33.109" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:32:33.111">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:32:33.110" endtime="20170501 18:32:33.111" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:32:33.112">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:32:33.112" endtime="20170501 18:32:33.112" status="PASS"></status>
</kw>
<status starttime="20170501 18:32:33.111" endtime="20170501 18:32:33.112" status="PASS"></status>
</kw>
<status starttime="20170501 18:32:33.110" endtime="20170501 18:32:33.112" status="PASS"></status>
</kw>
<status starttime="20170501 18:32:33.110" endtime="20170501 18:32:33.112" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:32:33.112">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:32:32.850" endtime="20170501 18:32:33.113" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:32:33.113">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:32:33.113" endtime="20170501 18:32:33.113" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:32:33.114">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170501 18:32:33.114">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170501 18:32:33.114">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170501 18:32:33.113" endtime="20170501 18:32:33.114" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:32:33.114">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:32:32.849" endtime="20170501 18:32:33.114" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:32:33.114">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:32:32.849" endtime="20170501 18:32:33.114" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170501 18:32:33.115">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170501 18:32:33.115" endtime="20170501 18:32:33.115" status="FAIL"></status>
</kw>
<status starttime="20170501 18:32:32.848" endtime="20170501 18:32:33.115" status="FAIL"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:32:43.121">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170501 18:32:43.120" endtime="20170501 18:32:43.121" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:32:43.122">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170501 18:32:43.121" endtime="20170501 18:32:43.122" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:32:43.122">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170501 18:32:43.122" endtime="20170501 18:32:43.122" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:32:43.123">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170501 18:32:43.123" endtime="20170501 18:32:43.123" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:32:43.306">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170501 18:32:43.124" endtime="20170501 18:32:43.306" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:32:43.306">${status} = PASS</msg>
<msg level="INFO" timestamp="20170501 18:32:43.306">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:32:43.123" endtime="20170501 18:32:43.306" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:32:43.307">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:32:43.306" endtime="20170501 18:32:43.307" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:32:43.307">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:32:43.307" endtime="20170501 18:32:43.307" status="PASS"></status>
</kw>
<status starttime="20170501 18:32:43.119" endtime="20170501 18:32:43.308" status="PASS"></status>
</kw>
<status starttime="20170501 18:32:43.119" endtime="20170501 18:32:43.308" status="PASS"></status>
</kw>
<status starttime="20170501 18:32:43.118" endtime="20170501 18:32:43.308" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:32:43.308">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170501 18:32:43.308" endtime="20170501 18:32:43.308" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:32:43.310">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:32:43.310" endtime="20170501 18:32:43.310" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:32:43.311">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:32:43.311" endtime="20170501 18:32:43.312" status="PASS"></status>
</kw>
<status starttime="20170501 18:32:43.311" endtime="20170501 18:32:43.312" status="PASS"></status>
</kw>
<status starttime="20170501 18:32:43.309" endtime="20170501 18:32:43.312" status="PASS"></status>
</kw>
<status starttime="20170501 18:32:43.309" endtime="20170501 18:32:43.312" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:32:43.378">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170501 18:32:43.378">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:32:43.312" endtime="20170501 18:32:43.378" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:32:43.382">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:32:43.379" endtime="20170501 18:32:43.382" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:32:43.383">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:32:43.383" endtime="20170501 18:32:43.383" status="PASS"></status>
</kw>
<status starttime="20170501 18:32:43.382" endtime="20170501 18:32:43.383" status="PASS"></status>
</kw>
<status starttime="20170501 18:32:43.379" endtime="20170501 18:32:43.384" status="PASS"></status>
</kw>
<status starttime="20170501 18:32:43.378" endtime="20170501 18:32:43.384" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:32:43.384">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:32:43.118" endtime="20170501 18:32:43.384" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:32:43.384">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:32:43.384" endtime="20170501 18:32:43.384" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:32:43.385">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170501 18:32:43.385">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170501 18:32:43.385">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170501 18:32:43.385" endtime="20170501 18:32:43.385" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:32:43.385">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:32:43.117" endtime="20170501 18:32:43.385" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:32:43.386">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:32:43.117" endtime="20170501 18:32:43.386" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170501 18:32:43.386">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170501 18:32:43.386" endtime="20170501 18:32:43.387" status="FAIL"></status>
</kw>
<status starttime="20170501 18:32:43.116" endtime="20170501 18:32:43.387" status="FAIL"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:32:53.391">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170501 18:32:53.391" endtime="20170501 18:32:53.392" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:32:53.392">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170501 18:32:53.392" endtime="20170501 18:32:53.392" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:32:53.393">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170501 18:32:53.393" endtime="20170501 18:32:53.393" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:32:53.394">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170501 18:32:53.393" endtime="20170501 18:32:53.394" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:32:53.574">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170501 18:32:53.394" endtime="20170501 18:32:53.574" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:32:53.575">${status} = PASS</msg>
<msg level="INFO" timestamp="20170501 18:32:53.575">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:32:53.394" endtime="20170501 18:32:53.575" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:32:53.575">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:32:53.575" endtime="20170501 18:32:53.575" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:32:53.576">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:32:53.576" endtime="20170501 18:32:53.577" status="PASS"></status>
</kw>
<status starttime="20170501 18:32:53.390" endtime="20170501 18:32:53.577" status="PASS"></status>
</kw>
<status starttime="20170501 18:32:53.390" endtime="20170501 18:32:53.577" status="PASS"></status>
</kw>
<status starttime="20170501 18:32:53.389" endtime="20170501 18:32:53.577" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:32:53.577">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170501 18:32:53.577" endtime="20170501 18:32:53.577" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:32:53.579">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:32:53.579" endtime="20170501 18:32:53.579" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:32:53.580">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:32:53.580" endtime="20170501 18:32:53.580" status="PASS"></status>
</kw>
<status starttime="20170501 18:32:53.580" endtime="20170501 18:32:53.581" status="PASS"></status>
</kw>
<status starttime="20170501 18:32:53.578" endtime="20170501 18:32:53.581" status="PASS"></status>
</kw>
<status starttime="20170501 18:32:53.578" endtime="20170501 18:32:53.581" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:32:53.647">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170501 18:32:53.648">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:32:53.581" endtime="20170501 18:32:53.648" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:32:53.649">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:32:53.649" endtime="20170501 18:32:53.649" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:32:53.650">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:32:53.650" endtime="20170501 18:32:53.651" status="PASS"></status>
</kw>
<status starttime="20170501 18:32:53.649" endtime="20170501 18:32:53.651" status="PASS"></status>
</kw>
<status starttime="20170501 18:32:53.648" endtime="20170501 18:32:53.651" status="PASS"></status>
</kw>
<status starttime="20170501 18:32:53.648" endtime="20170501 18:32:53.651" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:32:53.651">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:32:53.389" endtime="20170501 18:32:53.651" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:32:53.652">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:32:53.651" endtime="20170501 18:32:53.652" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:32:53.652">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170501 18:32:53.652">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170501 18:32:53.652">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170501 18:32:53.652" endtime="20170501 18:32:53.653" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:32:53.653">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:32:53.388" endtime="20170501 18:32:53.653" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:32:53.653">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:32:53.388" endtime="20170501 18:32:53.653" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170501 18:32:53.654">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170501 18:32:53.653" endtime="20170501 18:32:53.654" status="FAIL"></status>
</kw>
<status starttime="20170501 18:32:53.387" endtime="20170501 18:32:53.654" status="FAIL"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:33:03.659">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170501 18:33:03.659" endtime="20170501 18:33:03.659" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:33:03.660">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170501 18:33:03.660" endtime="20170501 18:33:03.660" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:33:03.661">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170501 18:33:03.660" endtime="20170501 18:33:03.661" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:33:03.661">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170501 18:33:03.661" endtime="20170501 18:33:03.661" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:33:03.839">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170501 18:33:03.662" endtime="20170501 18:33:03.840" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:33:03.840">${status} = PASS</msg>
<msg level="INFO" timestamp="20170501 18:33:03.840">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:33:03.661" endtime="20170501 18:33:03.840" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:33:03.840">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:33:03.840" endtime="20170501 18:33:03.841" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:33:03.841">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:33:03.841" endtime="20170501 18:33:03.841" status="PASS"></status>
</kw>
<status starttime="20170501 18:33:03.658" endtime="20170501 18:33:03.841" status="PASS"></status>
</kw>
<status starttime="20170501 18:33:03.657" endtime="20170501 18:33:03.841" status="PASS"></status>
</kw>
<status starttime="20170501 18:33:03.657" endtime="20170501 18:33:03.842" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:33:03.842">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170501 18:33:03.842" endtime="20170501 18:33:03.842" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:33:03.844">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:33:03.843" endtime="20170501 18:33:03.844" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:33:03.845">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:33:03.845" endtime="20170501 18:33:03.845" status="PASS"></status>
</kw>
<status starttime="20170501 18:33:03.844" endtime="20170501 18:33:03.845" status="PASS"></status>
</kw>
<status starttime="20170501 18:33:03.843" endtime="20170501 18:33:03.845" status="PASS"></status>
</kw>
<status starttime="20170501 18:33:03.842" endtime="20170501 18:33:03.846" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:33:03.911">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170501 18:33:03.911">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:33:03.846" endtime="20170501 18:33:03.912" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:33:03.913">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:33:03.913" endtime="20170501 18:33:03.913" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:33:03.914">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:33:03.914" endtime="20170501 18:33:03.914" status="PASS"></status>
</kw>
<status starttime="20170501 18:33:03.913" endtime="20170501 18:33:03.914" status="PASS"></status>
</kw>
<status starttime="20170501 18:33:03.912" endtime="20170501 18:33:03.915" status="PASS"></status>
</kw>
<status starttime="20170501 18:33:03.912" endtime="20170501 18:33:03.915" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:33:03.915">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:33:03.656" endtime="20170501 18:33:03.915" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:33:03.915">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:33:03.915" endtime="20170501 18:33:03.915" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:33:03.916">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170501 18:33:03.916">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170501 18:33:03.916">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170501 18:33:03.916" endtime="20170501 18:33:03.916" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:33:03.916">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:33:03.655" endtime="20170501 18:33:03.917" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:33:03.917">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:33:03.655" endtime="20170501 18:33:03.917" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170501 18:33:03.917">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170501 18:33:03.917" endtime="20170501 18:33:03.917" status="FAIL"></status>
</kw>
<status starttime="20170501 18:33:03.654" endtime="20170501 18:33:03.918" status="FAIL"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:33:13.923">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170501 18:33:13.922" endtime="20170501 18:33:13.923" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:33:13.924">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170501 18:33:13.924" endtime="20170501 18:33:13.924" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:33:13.925">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170501 18:33:13.925" endtime="20170501 18:33:13.925" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:33:13.926">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170501 18:33:13.925" endtime="20170501 18:33:13.926" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:33:14.107">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170501 18:33:13.927" endtime="20170501 18:33:14.107" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:33:14.107">${status} = PASS</msg>
<msg level="INFO" timestamp="20170501 18:33:14.107">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:33:13.926" endtime="20170501 18:33:14.108" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:33:14.108">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:33:14.108" endtime="20170501 18:33:14.108" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:33:14.109">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:33:14.108" endtime="20170501 18:33:14.109" status="PASS"></status>
</kw>
<status starttime="20170501 18:33:13.922" endtime="20170501 18:33:14.109" status="PASS"></status>
</kw>
<status starttime="20170501 18:33:13.921" endtime="20170501 18:33:14.109" status="PASS"></status>
</kw>
<status starttime="20170501 18:33:13.921" endtime="20170501 18:33:14.109" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:33:14.110">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170501 18:33:14.109" endtime="20170501 18:33:14.110" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:33:14.112">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:33:14.112" endtime="20170501 18:33:14.112" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:33:14.113">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:33:14.113" endtime="20170501 18:33:14.113" status="PASS"></status>
</kw>
<status starttime="20170501 18:33:14.112" endtime="20170501 18:33:14.113" status="PASS"></status>
</kw>
<status starttime="20170501 18:33:14.111" endtime="20170501 18:33:14.113" status="PASS"></status>
</kw>
<status starttime="20170501 18:33:14.110" endtime="20170501 18:33:14.113" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:33:14.180">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170501 18:33:14.180">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:33:14.114" endtime="20170501 18:33:14.180" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:33:14.182">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:33:14.182" endtime="20170501 18:33:14.182" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:33:14.183">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:33:14.183" endtime="20170501 18:33:14.183" status="PASS"></status>
</kw>
<status starttime="20170501 18:33:14.182" endtime="20170501 18:33:14.183" status="PASS"></status>
</kw>
<status starttime="20170501 18:33:14.181" endtime="20170501 18:33:14.183" status="PASS"></status>
</kw>
<status starttime="20170501 18:33:14.181" endtime="20170501 18:33:14.183" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:33:14.184">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:33:13.920" endtime="20170501 18:33:14.184" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:33:14.184">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:33:14.184" endtime="20170501 18:33:14.184" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:33:14.185">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170501 18:33:14.185">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170501 18:33:14.185">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170501 18:33:14.184" endtime="20170501 18:33:14.185" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:33:14.185">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:33:13.919" endtime="20170501 18:33:14.185" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:33:14.186">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:33:13.919" endtime="20170501 18:33:14.186" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170501 18:33:14.186">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170501 18:33:14.186" endtime="20170501 18:33:14.186" status="FAIL"></status>
</kw>
<status starttime="20170501 18:33:13.918" endtime="20170501 18:33:14.186" status="FAIL"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:33:24.192">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170501 18:33:24.191" endtime="20170501 18:33:24.193" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:33:24.194">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170501 18:33:24.193" endtime="20170501 18:33:24.194" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:33:24.194">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170501 18:33:24.194" endtime="20170501 18:33:24.194" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:33:24.195">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170501 18:33:24.195" endtime="20170501 18:33:24.195" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:33:24.383">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170501 18:33:24.196" endtime="20170501 18:33:24.383" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:33:24.383">${status} = PASS</msg>
<msg level="INFO" timestamp="20170501 18:33:24.383">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:33:24.196" endtime="20170501 18:33:24.383" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:33:24.383">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:33:24.383" endtime="20170501 18:33:24.384" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:33:24.384">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:33:24.384" endtime="20170501 18:33:24.384" status="PASS"></status>
</kw>
<status starttime="20170501 18:33:24.191" endtime="20170501 18:33:24.384" status="PASS"></status>
</kw>
<status starttime="20170501 18:33:24.190" endtime="20170501 18:33:24.384" status="PASS"></status>
</kw>
<status starttime="20170501 18:33:24.189" endtime="20170501 18:33:24.385" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:33:24.385">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170501 18:33:24.385" endtime="20170501 18:33:24.385" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:33:24.387">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:33:24.386" endtime="20170501 18:33:24.387" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:33:24.388">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:33:24.388" endtime="20170501 18:33:24.388" status="PASS"></status>
</kw>
<status starttime="20170501 18:33:24.387" endtime="20170501 18:33:24.388" status="PASS"></status>
</kw>
<status starttime="20170501 18:33:24.386" endtime="20170501 18:33:24.389" status="PASS"></status>
</kw>
<status starttime="20170501 18:33:24.385" endtime="20170501 18:33:24.389" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:33:24.455">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170501 18:33:24.455">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:33:24.389" endtime="20170501 18:33:24.455" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:33:24.457">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:33:24.456" endtime="20170501 18:33:24.457" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:33:24.458">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:33:24.457" endtime="20170501 18:33:24.458" status="PASS"></status>
</kw>
<status starttime="20170501 18:33:24.457" endtime="20170501 18:33:24.458" status="PASS"></status>
</kw>
<status starttime="20170501 18:33:24.456" endtime="20170501 18:33:24.458" status="PASS"></status>
</kw>
<status starttime="20170501 18:33:24.455" endtime="20170501 18:33:24.458" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:33:24.458">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:33:24.189" endtime="20170501 18:33:24.458" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:33:24.459">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:33:24.459" endtime="20170501 18:33:24.459" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:33:24.459">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170501 18:33:24.460">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170501 18:33:24.460">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170501 18:33:24.459" endtime="20170501 18:33:24.460" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:33:24.460">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:33:24.188" endtime="20170501 18:33:24.460" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:33:24.460">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:33:24.188" endtime="20170501 18:33:24.460" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170501 18:33:24.461">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170501 18:33:24.460" endtime="20170501 18:33:24.461" status="FAIL"></status>
</kw>
<status starttime="20170501 18:33:24.187" endtime="20170501 18:33:24.461" status="FAIL"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:33:34.466">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170501 18:33:34.466" endtime="20170501 18:33:34.467" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:33:34.467">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170501 18:33:34.467" endtime="20170501 18:33:34.467" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:33:34.468">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170501 18:33:34.468" endtime="20170501 18:33:34.468" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:33:34.469">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170501 18:33:34.468" endtime="20170501 18:33:34.469" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:33:34.672">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170501 18:33:34.469" endtime="20170501 18:33:34.673" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:33:34.673">${status} = PASS</msg>
<msg level="INFO" timestamp="20170501 18:33:34.673">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:33:34.469" endtime="20170501 18:33:34.673" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:33:34.673">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:33:34.673" endtime="20170501 18:33:34.674" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:33:34.674">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:33:34.674" endtime="20170501 18:33:34.674" status="PASS"></status>
</kw>
<status starttime="20170501 18:33:34.465" endtime="20170501 18:33:34.674" status="PASS"></status>
</kw>
<status starttime="20170501 18:33:34.465" endtime="20170501 18:33:34.674" status="PASS"></status>
</kw>
<status starttime="20170501 18:33:34.464" endtime="20170501 18:33:34.675" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:33:34.675">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170501 18:33:34.675" endtime="20170501 18:33:34.675" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:33:34.677">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:33:34.677" endtime="20170501 18:33:34.677" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:33:34.679">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:33:34.678" endtime="20170501 18:33:34.679" status="PASS"></status>
</kw>
<status starttime="20170501 18:33:34.678" endtime="20170501 18:33:34.679" status="PASS"></status>
</kw>
<status starttime="20170501 18:33:34.676" endtime="20170501 18:33:34.679" status="PASS"></status>
</kw>
<status starttime="20170501 18:33:34.675" endtime="20170501 18:33:34.679" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:33:34.745">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170501 18:33:34.745">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:33:34.679" endtime="20170501 18:33:34.745" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:33:34.747">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:33:34.746" endtime="20170501 18:33:34.747" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:33:34.748">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:33:34.747" endtime="20170501 18:33:34.748" status="PASS"></status>
</kw>
<status starttime="20170501 18:33:34.747" endtime="20170501 18:33:34.748" status="PASS"></status>
</kw>
<status starttime="20170501 18:33:34.746" endtime="20170501 18:33:34.748" status="PASS"></status>
</kw>
<status starttime="20170501 18:33:34.745" endtime="20170501 18:33:34.748" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:33:34.748">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:33:34.464" endtime="20170501 18:33:34.748" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:33:34.749">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:33:34.748" endtime="20170501 18:33:34.749" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:33:34.749">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170501 18:33:34.749">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170501 18:33:34.750">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170501 18:33:34.749" endtime="20170501 18:33:34.750" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:33:34.750">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:33:34.463" endtime="20170501 18:33:34.750" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:33:34.750">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:33:34.462" endtime="20170501 18:33:34.750" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170501 18:33:34.751">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170501 18:33:34.750" endtime="20170501 18:33:34.751" status="FAIL"></status>
</kw>
<status starttime="20170501 18:33:34.462" endtime="20170501 18:33:34.751" status="FAIL"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:33:44.756">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170501 18:33:44.756" endtime="20170501 18:33:44.756" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:33:44.757">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170501 18:33:44.757" endtime="20170501 18:33:44.757" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:33:44.758">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170501 18:33:44.757" endtime="20170501 18:33:44.758" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:33:44.758">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170501 18:33:44.758" endtime="20170501 18:33:44.758" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:33:44.958">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170501 18:33:44.759" endtime="20170501 18:33:44.958" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:33:44.958">${status} = PASS</msg>
<msg level="INFO" timestamp="20170501 18:33:44.958">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:33:44.759" endtime="20170501 18:33:44.958" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:33:44.959">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:33:44.959" endtime="20170501 18:33:44.959" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:33:44.960">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:33:44.959" endtime="20170501 18:33:44.960" status="PASS"></status>
</kw>
<status starttime="20170501 18:33:44.755" endtime="20170501 18:33:44.960" status="PASS"></status>
</kw>
<status starttime="20170501 18:33:44.755" endtime="20170501 18:33:44.960" status="PASS"></status>
</kw>
<status starttime="20170501 18:33:44.754" endtime="20170501 18:33:44.960" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:33:44.961">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170501 18:33:44.960" endtime="20170501 18:33:44.961" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:33:44.963">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:33:44.962" endtime="20170501 18:33:44.963" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:33:44.964">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:33:44.964" endtime="20170501 18:33:44.964" status="PASS"></status>
</kw>
<status starttime="20170501 18:33:44.963" endtime="20170501 18:33:44.964" status="PASS"></status>
</kw>
<status starttime="20170501 18:33:44.961" endtime="20170501 18:33:44.964" status="PASS"></status>
</kw>
<status starttime="20170501 18:33:44.961" endtime="20170501 18:33:44.964" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:33:45.030">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170501 18:33:45.030">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:33:44.964" endtime="20170501 18:33:45.030" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:33:45.032">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:33:45.031" endtime="20170501 18:33:45.032" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:33:45.033">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:33:45.033" endtime="20170501 18:33:45.033" status="PASS"></status>
</kw>
<status starttime="20170501 18:33:45.032" endtime="20170501 18:33:45.033" status="PASS"></status>
</kw>
<status starttime="20170501 18:33:45.031" endtime="20170501 18:33:45.033" status="PASS"></status>
</kw>
<status starttime="20170501 18:33:45.030" endtime="20170501 18:33:45.033" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:33:45.033">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:33:44.753" endtime="20170501 18:33:45.033" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:33:45.034">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:33:45.034" endtime="20170501 18:33:45.034" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:33:45.035">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170501 18:33:45.035">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170501 18:33:45.035">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170501 18:33:45.034" endtime="20170501 18:33:45.035" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:33:45.035">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:33:44.753" endtime="20170501 18:33:45.035" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:33:45.035">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:33:44.752" endtime="20170501 18:33:45.035" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170501 18:33:45.036">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170501 18:33:45.036" endtime="20170501 18:33:45.036" status="FAIL"></status>
</kw>
<status starttime="20170501 18:33:44.752" endtime="20170501 18:33:45.036" status="FAIL"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:33:55.042">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170501 18:33:55.042" endtime="20170501 18:33:55.043" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:33:55.043">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170501 18:33:55.043" endtime="20170501 18:33:55.043" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:33:55.044">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170501 18:33:55.044" endtime="20170501 18:33:55.044" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:33:55.045">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170501 18:33:55.045" endtime="20170501 18:33:55.045" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:33:55.226">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170501 18:33:55.046" endtime="20170501 18:33:55.226" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:33:55.226">${status} = PASS</msg>
<msg level="INFO" timestamp="20170501 18:33:55.226">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:33:55.045" endtime="20170501 18:33:55.226" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:33:55.226">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:33:55.226" endtime="20170501 18:33:55.227" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:33:55.227">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:33:55.227" endtime="20170501 18:33:55.227" status="PASS"></status>
</kw>
<status starttime="20170501 18:33:55.041" endtime="20170501 18:33:55.227" status="PASS"></status>
</kw>
<status starttime="20170501 18:33:55.040" endtime="20170501 18:33:55.228" status="PASS"></status>
</kw>
<status starttime="20170501 18:33:55.039" endtime="20170501 18:33:55.228" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:33:55.228">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170501 18:33:55.228" endtime="20170501 18:33:55.228" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:33:55.230">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:33:55.230" endtime="20170501 18:33:55.230" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:33:55.231">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:33:55.231" endtime="20170501 18:33:55.231" status="PASS"></status>
</kw>
<status starttime="20170501 18:33:55.230" endtime="20170501 18:33:55.231" status="PASS"></status>
</kw>
<status starttime="20170501 18:33:55.229" endtime="20170501 18:33:55.231" status="PASS"></status>
</kw>
<status starttime="20170501 18:33:55.229" endtime="20170501 18:33:55.232" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:33:55.335">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170501 18:33:55.335">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:33:55.232" endtime="20170501 18:33:55.335" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:33:55.337">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:33:55.336" endtime="20170501 18:33:55.337" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:33:55.338">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:33:55.338" endtime="20170501 18:33:55.338" status="PASS"></status>
</kw>
<status starttime="20170501 18:33:55.337" endtime="20170501 18:33:55.338" status="PASS"></status>
</kw>
<status starttime="20170501 18:33:55.336" endtime="20170501 18:33:55.338" status="PASS"></status>
</kw>
<status starttime="20170501 18:33:55.335" endtime="20170501 18:33:55.338" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:33:55.338">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:33:55.038" endtime="20170501 18:33:55.338" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:33:55.339">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:33:55.339" endtime="20170501 18:33:55.339" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:33:55.340">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170501 18:33:55.340">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170501 18:33:55.340">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170501 18:33:55.339" endtime="20170501 18:33:55.340" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:33:55.340">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:33:55.038" endtime="20170501 18:33:55.340" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:33:55.340">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:33:55.037" endtime="20170501 18:33:55.340" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170501 18:33:55.341">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170501 18:33:55.341" endtime="20170501 18:33:55.341" status="FAIL"></status>
</kw>
<status starttime="20170501 18:33:55.037" endtime="20170501 18:33:55.341" status="FAIL"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:34:05.346">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170501 18:34:05.345" endtime="20170501 18:34:05.346" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:34:05.347">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170501 18:34:05.346" endtime="20170501 18:34:05.347" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:34:05.347">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170501 18:34:05.347" endtime="20170501 18:34:05.347" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:34:05.348">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170501 18:34:05.348" endtime="20170501 18:34:05.348" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:34:05.526">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170501 18:34:05.349" endtime="20170501 18:34:05.526" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:34:05.526">${status} = PASS</msg>
<msg level="INFO" timestamp="20170501 18:34:05.526">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:34:05.348" endtime="20170501 18:34:05.526" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:34:05.527">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:34:05.527" endtime="20170501 18:34:05.527" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:34:05.528">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:34:05.527" endtime="20170501 18:34:05.528" status="PASS"></status>
</kw>
<status starttime="20170501 18:34:05.345" endtime="20170501 18:34:05.529" status="PASS"></status>
</kw>
<status starttime="20170501 18:34:05.345" endtime="20170501 18:34:05.529" status="PASS"></status>
</kw>
<status starttime="20170501 18:34:05.344" endtime="20170501 18:34:05.529" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:34:05.529">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170501 18:34:05.529" endtime="20170501 18:34:05.529" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:34:05.531">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:34:05.531" endtime="20170501 18:34:05.531" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:34:05.532">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:34:05.532" endtime="20170501 18:34:05.532" status="PASS"></status>
</kw>
<status starttime="20170501 18:34:05.532" endtime="20170501 18:34:05.532" status="PASS"></status>
</kw>
<status starttime="20170501 18:34:05.530" endtime="20170501 18:34:05.533" status="PASS"></status>
</kw>
<status starttime="20170501 18:34:05.530" endtime="20170501 18:34:05.533" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:34:05.633">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170501 18:34:05.633">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:34:05.533" endtime="20170501 18:34:05.633" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:34:05.635">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:34:05.635" endtime="20170501 18:34:05.635" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:34:05.636">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:34:05.636" endtime="20170501 18:34:05.636" status="PASS"></status>
</kw>
<status starttime="20170501 18:34:05.635" endtime="20170501 18:34:05.636" status="PASS"></status>
</kw>
<status starttime="20170501 18:34:05.634" endtime="20170501 18:34:05.637" status="PASS"></status>
</kw>
<status starttime="20170501 18:34:05.634" endtime="20170501 18:34:05.637" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:34:05.637">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:34:05.343" endtime="20170501 18:34:05.637" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:34:05.637">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:34:05.637" endtime="20170501 18:34:05.637" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:34:05.638">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170501 18:34:05.638">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170501 18:34:05.638">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170501 18:34:05.638" endtime="20170501 18:34:05.638" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:34:05.639">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:34:05.343" endtime="20170501 18:34:05.639" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:34:05.639">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:34:05.342" endtime="20170501 18:34:05.639" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170501 18:34:05.640">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170501 18:34:05.639" endtime="20170501 18:34:05.640" status="FAIL"></status>
</kw>
<status starttime="20170501 18:34:05.342" endtime="20170501 18:34:05.640" status="FAIL"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:34:15.646">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170501 18:34:15.646" endtime="20170501 18:34:15.647" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:34:15.647">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170501 18:34:15.647" endtime="20170501 18:34:15.647" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:34:15.648">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170501 18:34:15.648" endtime="20170501 18:34:15.648" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:34:15.649">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170501 18:34:15.648" endtime="20170501 18:34:15.649" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:34:15.827">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170501 18:34:15.649" endtime="20170501 18:34:15.828" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:34:15.828">${status} = PASS</msg>
<msg level="INFO" timestamp="20170501 18:34:15.828">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:34:15.649" endtime="20170501 18:34:15.828" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:34:15.828">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:34:15.828" endtime="20170501 18:34:15.828" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:34:15.829">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:34:15.829" endtime="20170501 18:34:15.829" status="PASS"></status>
</kw>
<status starttime="20170501 18:34:15.644" endtime="20170501 18:34:15.829" status="PASS"></status>
</kw>
<status starttime="20170501 18:34:15.643" endtime="20170501 18:34:15.829" status="PASS"></status>
</kw>
<status starttime="20170501 18:34:15.643" endtime="20170501 18:34:15.830" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:34:15.830">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170501 18:34:15.830" endtime="20170501 18:34:15.830" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:34:15.832">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:34:15.831" endtime="20170501 18:34:15.832" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:34:15.833">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:34:15.833" endtime="20170501 18:34:15.833" status="PASS"></status>
</kw>
<status starttime="20170501 18:34:15.832" endtime="20170501 18:34:15.833" status="PASS"></status>
</kw>
<status starttime="20170501 18:34:15.831" endtime="20170501 18:34:15.833" status="PASS"></status>
</kw>
<status starttime="20170501 18:34:15.830" endtime="20170501 18:34:15.833" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:34:15.901">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170501 18:34:15.901">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:34:15.834" endtime="20170501 18:34:15.902" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:34:15.903">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:34:15.903" endtime="20170501 18:34:15.903" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:34:15.904">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:34:15.904" endtime="20170501 18:34:15.904" status="PASS"></status>
</kw>
<status starttime="20170501 18:34:15.903" endtime="20170501 18:34:15.905" status="PASS"></status>
</kw>
<status starttime="20170501 18:34:15.902" endtime="20170501 18:34:15.905" status="PASS"></status>
</kw>
<status starttime="20170501 18:34:15.902" endtime="20170501 18:34:15.905" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:34:15.905">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:34:15.642" endtime="20170501 18:34:15.905" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:34:15.906">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:34:15.905" endtime="20170501 18:34:15.906" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:34:15.907">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170501 18:34:15.907">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170501 18:34:15.907">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170501 18:34:15.906" endtime="20170501 18:34:15.907" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:34:15.907">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:34:15.641" endtime="20170501 18:34:15.907" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:34:15.908">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:34:15.641" endtime="20170501 18:34:15.908" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170501 18:34:15.909">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170501 18:34:15.908" endtime="20170501 18:34:15.909" status="FAIL"></status>
</kw>
<status starttime="20170501 18:34:15.640" endtime="20170501 18:34:15.909" status="FAIL"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:34:25.914">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170501 18:34:25.913" endtime="20170501 18:34:25.914" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:34:25.915">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170501 18:34:25.914" endtime="20170501 18:34:25.915" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:34:25.915">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170501 18:34:25.915" endtime="20170501 18:34:25.915" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:34:25.916">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170501 18:34:25.915" endtime="20170501 18:34:25.916" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:34:26.100">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170501 18:34:25.916" endtime="20170501 18:34:26.100" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:34:26.100">${status} = PASS</msg>
<msg level="INFO" timestamp="20170501 18:34:26.100">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:34:25.916" endtime="20170501 18:34:26.100" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:34:26.101">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:34:26.101" endtime="20170501 18:34:26.101" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:34:26.102">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:34:26.101" endtime="20170501 18:34:26.102" status="PASS"></status>
</kw>
<status starttime="20170501 18:34:25.913" endtime="20170501 18:34:26.102" status="PASS"></status>
</kw>
<status starttime="20170501 18:34:25.912" endtime="20170501 18:34:26.102" status="PASS"></status>
</kw>
<status starttime="20170501 18:34:25.912" endtime="20170501 18:34:26.102" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:34:26.103">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170501 18:34:26.103" endtime="20170501 18:34:26.103" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:34:26.105">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:34:26.105" endtime="20170501 18:34:26.105" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:34:26.106">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:34:26.106" endtime="20170501 18:34:26.106" status="PASS"></status>
</kw>
<status starttime="20170501 18:34:26.105" endtime="20170501 18:34:26.106" status="PASS"></status>
</kw>
<status starttime="20170501 18:34:26.104" endtime="20170501 18:34:26.106" status="PASS"></status>
</kw>
<status starttime="20170501 18:34:26.103" endtime="20170501 18:34:26.107" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:34:26.173">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170501 18:34:26.174">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:34:26.107" endtime="20170501 18:34:26.174" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:34:26.175">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:34:26.175" endtime="20170501 18:34:26.175" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:34:26.176">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:34:26.176" endtime="20170501 18:34:26.176" status="PASS"></status>
</kw>
<status starttime="20170501 18:34:26.175" endtime="20170501 18:34:26.176" status="PASS"></status>
</kw>
<status starttime="20170501 18:34:26.174" endtime="20170501 18:34:26.176" status="PASS"></status>
</kw>
<status starttime="20170501 18:34:26.174" endtime="20170501 18:34:26.177" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:34:26.177">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:34:25.911" endtime="20170501 18:34:26.177" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:34:26.177">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:34:26.177" endtime="20170501 18:34:26.177" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:34:26.178">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170501 18:34:26.178">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170501 18:34:26.178">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170501 18:34:26.178" endtime="20170501 18:34:26.178" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:34:26.178">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:34:25.910" endtime="20170501 18:34:26.179" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:34:26.179">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:34:25.910" endtime="20170501 18:34:26.179" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170501 18:34:26.179">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170501 18:34:26.179" endtime="20170501 18:34:26.179" status="FAIL"></status>
</kw>
<status starttime="20170501 18:34:25.909" endtime="20170501 18:34:26.180" status="FAIL"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:34:36.185">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170501 18:34:36.184" endtime="20170501 18:34:36.185" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:34:36.186">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170501 18:34:36.185" endtime="20170501 18:34:36.186" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:34:36.186">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170501 18:34:36.186" endtime="20170501 18:34:36.186" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:34:36.187">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170501 18:34:36.187" endtime="20170501 18:34:36.187" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:34:36.364">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170501 18:34:36.188" endtime="20170501 18:34:36.364" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:34:36.364">${status} = PASS</msg>
<msg level="INFO" timestamp="20170501 18:34:36.364">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:34:36.187" endtime="20170501 18:34:36.364" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:34:36.365">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:34:36.364" endtime="20170501 18:34:36.365" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:34:36.365">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:34:36.365" endtime="20170501 18:34:36.365" status="PASS"></status>
</kw>
<status starttime="20170501 18:34:36.183" endtime="20170501 18:34:36.366" status="PASS"></status>
</kw>
<status starttime="20170501 18:34:36.183" endtime="20170501 18:34:36.366" status="PASS"></status>
</kw>
<status starttime="20170501 18:34:36.182" endtime="20170501 18:34:36.366" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:34:36.366">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170501 18:34:36.366" endtime="20170501 18:34:36.366" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:34:36.368">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:34:36.368" endtime="20170501 18:34:36.368" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:34:36.369">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:34:36.369" endtime="20170501 18:34:36.369" status="PASS"></status>
</kw>
<status starttime="20170501 18:34:36.369" endtime="20170501 18:34:36.370" status="PASS"></status>
</kw>
<status starttime="20170501 18:34:36.367" endtime="20170501 18:34:36.370" status="PASS"></status>
</kw>
<status starttime="20170501 18:34:36.367" endtime="20170501 18:34:36.370" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:34:36.435">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170501 18:34:36.436">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:34:36.370" endtime="20170501 18:34:36.436" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:34:36.438">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:34:36.437" endtime="20170501 18:34:36.438" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:34:36.439">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:34:36.438" endtime="20170501 18:34:36.439" status="PASS"></status>
</kw>
<status starttime="20170501 18:34:36.438" endtime="20170501 18:34:36.439" status="PASS"></status>
</kw>
<status starttime="20170501 18:34:36.436" endtime="20170501 18:34:36.439" status="PASS"></status>
</kw>
<status starttime="20170501 18:34:36.436" endtime="20170501 18:34:36.439" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:34:36.440">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:34:36.182" endtime="20170501 18:34:36.440" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:34:36.440">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:34:36.440" endtime="20170501 18:34:36.440" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:34:36.441">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170501 18:34:36.441">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170501 18:34:36.441">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170501 18:34:36.441" endtime="20170501 18:34:36.441" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:34:36.441">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:34:36.181" endtime="20170501 18:34:36.441" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:34:36.442">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:34:36.181" endtime="20170501 18:34:36.442" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170501 18:34:36.442">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170501 18:34:36.442" endtime="20170501 18:34:36.442" status="FAIL"></status>
</kw>
<status starttime="20170501 18:34:36.180" endtime="20170501 18:34:36.442" status="FAIL"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:34:46.447">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170501 18:34:46.447" endtime="20170501 18:34:46.448" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:34:46.449">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170501 18:34:46.448" endtime="20170501 18:34:46.449" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:34:46.449">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170501 18:34:46.449" endtime="20170501 18:34:46.450" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:34:46.450">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170501 18:34:46.450" endtime="20170501 18:34:46.450" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:34:46.628">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170501 18:34:46.451" endtime="20170501 18:34:46.628" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:34:46.628">${status} = PASS</msg>
<msg level="INFO" timestamp="20170501 18:34:46.628">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:34:46.451" endtime="20170501 18:34:46.628" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:34:46.629">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:34:46.629" endtime="20170501 18:34:46.629" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:34:46.630">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:34:46.629" endtime="20170501 18:34:46.630" status="PASS"></status>
</kw>
<status starttime="20170501 18:34:46.446" endtime="20170501 18:34:46.630" status="PASS"></status>
</kw>
<status starttime="20170501 18:34:46.446" endtime="20170501 18:34:46.630" status="PASS"></status>
</kw>
<status starttime="20170501 18:34:46.445" endtime="20170501 18:34:46.630" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:34:46.631">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170501 18:34:46.630" endtime="20170501 18:34:46.631" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:34:46.633">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:34:46.632" endtime="20170501 18:34:46.633" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:34:46.634">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:34:46.633" endtime="20170501 18:34:46.634" status="PASS"></status>
</kw>
<status starttime="20170501 18:34:46.633" endtime="20170501 18:34:46.634" status="PASS"></status>
</kw>
<status starttime="20170501 18:34:46.631" endtime="20170501 18:34:46.634" status="PASS"></status>
</kw>
<status starttime="20170501 18:34:46.631" endtime="20170501 18:34:46.634" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:34:46.701">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170501 18:34:46.702">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:34:46.634" endtime="20170501 18:34:46.702" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:34:46.703">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:34:46.703" endtime="20170501 18:34:46.703" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:34:46.704">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:34:46.704" endtime="20170501 18:34:46.704" status="PASS"></status>
</kw>
<status starttime="20170501 18:34:46.703" endtime="20170501 18:34:46.704" status="PASS"></status>
</kw>
<status starttime="20170501 18:34:46.702" endtime="20170501 18:34:46.704" status="PASS"></status>
</kw>
<status starttime="20170501 18:34:46.702" endtime="20170501 18:34:46.705" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:34:46.705">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:34:46.445" endtime="20170501 18:34:46.705" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:34:46.705">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:34:46.705" endtime="20170501 18:34:46.705" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:34:46.706">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170501 18:34:46.706">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170501 18:34:46.706">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170501 18:34:46.706" endtime="20170501 18:34:46.706" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:34:46.706">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:34:46.444" endtime="20170501 18:34:46.706" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:34:46.707">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:34:46.444" endtime="20170501 18:34:46.707" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170501 18:34:46.707">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170501 18:34:46.707" endtime="20170501 18:34:46.707" status="FAIL"></status>
</kw>
<status starttime="20170501 18:34:46.443" endtime="20170501 18:34:46.707" status="FAIL"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:34:56.712">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170501 18:34:56.712" endtime="20170501 18:34:56.713" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:34:56.714">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170501 18:34:56.713" endtime="20170501 18:34:56.714" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:34:56.714">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170501 18:34:56.714" endtime="20170501 18:34:56.714" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:34:56.715">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170501 18:34:56.715" endtime="20170501 18:34:56.715" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:34:56.895">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170501 18:34:56.716" endtime="20170501 18:34:56.895" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:34:56.895">${status} = PASS</msg>
<msg level="INFO" timestamp="20170501 18:34:56.895">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:34:56.715" endtime="20170501 18:34:56.895" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:34:56.896">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:34:56.895" endtime="20170501 18:34:56.896" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:34:56.896">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:34:56.896" endtime="20170501 18:34:56.896" status="PASS"></status>
</kw>
<status starttime="20170501 18:34:56.711" endtime="20170501 18:34:56.897" status="PASS"></status>
</kw>
<status starttime="20170501 18:34:56.711" endtime="20170501 18:34:56.897" status="PASS"></status>
</kw>
<status starttime="20170501 18:34:56.710" endtime="20170501 18:34:56.897" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:34:56.897">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170501 18:34:56.897" endtime="20170501 18:34:56.897" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:34:56.900">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:34:56.899" endtime="20170501 18:34:56.900" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:34:56.900">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:34:56.900" endtime="20170501 18:34:56.901" status="PASS"></status>
</kw>
<status starttime="20170501 18:34:56.900" endtime="20170501 18:34:56.901" status="PASS"></status>
</kw>
<status starttime="20170501 18:34:56.898" endtime="20170501 18:34:56.901" status="PASS"></status>
</kw>
<status starttime="20170501 18:34:56.898" endtime="20170501 18:34:56.901" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:34:56.968">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170501 18:34:56.968">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:34:56.901" endtime="20170501 18:34:56.968" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:34:56.970">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:34:56.969" endtime="20170501 18:34:56.970" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:34:56.971">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:34:56.971" endtime="20170501 18:34:56.971" status="PASS"></status>
</kw>
<status starttime="20170501 18:34:56.970" endtime="20170501 18:34:56.971" status="PASS"></status>
</kw>
<status starttime="20170501 18:34:56.969" endtime="20170501 18:34:56.972" status="PASS"></status>
</kw>
<status starttime="20170501 18:34:56.969" endtime="20170501 18:34:56.972" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:34:56.972">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:34:56.710" endtime="20170501 18:34:56.972" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:34:56.973">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:34:56.972" endtime="20170501 18:34:56.973" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:34:56.973">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170501 18:34:56.974">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170501 18:34:56.974">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170501 18:34:56.973" endtime="20170501 18:34:56.974" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:34:56.974">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:34:56.709" endtime="20170501 18:34:56.974" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:34:56.974">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:34:56.709" endtime="20170501 18:34:56.974" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170501 18:34:56.975">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170501 18:34:56.975" endtime="20170501 18:34:56.975" status="FAIL"></status>
</kw>
<status starttime="20170501 18:34:56.708" endtime="20170501 18:34:56.976" status="FAIL"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:35:06.980">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170501 18:35:06.980" endtime="20170501 18:35:06.981" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:35:06.981">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170501 18:35:06.981" endtime="20170501 18:35:06.981" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:35:06.982">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170501 18:35:06.981" endtime="20170501 18:35:06.982" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:35:06.982">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170501 18:35:06.982" endtime="20170501 18:35:06.982" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:35:07.158">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170501 18:35:06.983" endtime="20170501 18:35:07.159" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:35:07.159">${status} = PASS</msg>
<msg level="INFO" timestamp="20170501 18:35:07.159">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:35:06.983" endtime="20170501 18:35:07.159" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:35:07.159">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:35:07.159" endtime="20170501 18:35:07.160" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:35:07.160">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:35:07.160" endtime="20170501 18:35:07.160" status="PASS"></status>
</kw>
<status starttime="20170501 18:35:06.979" endtime="20170501 18:35:07.160" status="PASS"></status>
</kw>
<status starttime="20170501 18:35:06.979" endtime="20170501 18:35:07.160" status="PASS"></status>
</kw>
<status starttime="20170501 18:35:06.978" endtime="20170501 18:35:07.161" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:35:07.161">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170501 18:35:07.161" endtime="20170501 18:35:07.161" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:35:07.163">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:35:07.163" endtime="20170501 18:35:07.163" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:35:07.164">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:35:07.164" endtime="20170501 18:35:07.164" status="PASS"></status>
</kw>
<status starttime="20170501 18:35:07.163" endtime="20170501 18:35:07.164" status="PASS"></status>
</kw>
<status starttime="20170501 18:35:07.162" endtime="20170501 18:35:07.165" status="PASS"></status>
</kw>
<status starttime="20170501 18:35:07.162" endtime="20170501 18:35:07.165" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:35:07.230">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170501 18:35:07.231">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:35:07.165" endtime="20170501 18:35:07.231" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:35:07.232">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:35:07.232" endtime="20170501 18:35:07.232" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:35:07.233">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:35:07.233" endtime="20170501 18:35:07.233" status="PASS"></status>
</kw>
<status starttime="20170501 18:35:07.232" endtime="20170501 18:35:07.233" status="PASS"></status>
</kw>
<status starttime="20170501 18:35:07.231" endtime="20170501 18:35:07.234" status="PASS"></status>
</kw>
<status starttime="20170501 18:35:07.231" endtime="20170501 18:35:07.234" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:35:07.234">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:35:06.978" endtime="20170501 18:35:07.234" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:35:07.234">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:35:07.234" endtime="20170501 18:35:07.234" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:35:07.235">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170501 18:35:07.235">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170501 18:35:07.235">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170501 18:35:07.235" endtime="20170501 18:35:07.235" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:35:07.235">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:35:06.977" endtime="20170501 18:35:07.235" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:35:07.236">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:35:06.977" endtime="20170501 18:35:07.236" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170501 18:35:07.236">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170501 18:35:07.236" endtime="20170501 18:35:07.236" status="FAIL"></status>
</kw>
<status starttime="20170501 18:35:06.976" endtime="20170501 18:35:07.237" status="FAIL"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:35:17.241">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170501 18:35:17.241" endtime="20170501 18:35:17.242" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:35:17.242">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170501 18:35:17.242" endtime="20170501 18:35:17.242" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:35:17.243">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170501 18:35:17.243" endtime="20170501 18:35:17.243" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:35:17.244">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170501 18:35:17.243" endtime="20170501 18:35:17.244" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:35:17.419">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170501 18:35:17.244" endtime="20170501 18:35:17.419" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:35:17.419">${status} = PASS</msg>
<msg level="INFO" timestamp="20170501 18:35:17.419">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:35:17.244" endtime="20170501 18:35:17.419" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:35:17.420">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:35:17.420" endtime="20170501 18:35:17.420" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:35:17.421">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:35:17.420" endtime="20170501 18:35:17.421" status="PASS"></status>
</kw>
<status starttime="20170501 18:35:17.240" endtime="20170501 18:35:17.421" status="PASS"></status>
</kw>
<status starttime="20170501 18:35:17.240" endtime="20170501 18:35:17.421" status="PASS"></status>
</kw>
<status starttime="20170501 18:35:17.239" endtime="20170501 18:35:17.421" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:35:17.422">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170501 18:35:17.421" endtime="20170501 18:35:17.422" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:35:17.424">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:35:17.423" endtime="20170501 18:35:17.424" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:35:17.425">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:35:17.424" endtime="20170501 18:35:17.425" status="PASS"></status>
</kw>
<status starttime="20170501 18:35:17.424" endtime="20170501 18:35:17.425" status="PASS"></status>
</kw>
<status starttime="20170501 18:35:17.422" endtime="20170501 18:35:17.425" status="PASS"></status>
</kw>
<status starttime="20170501 18:35:17.422" endtime="20170501 18:35:17.425" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:35:17.498">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170501 18:35:17.498">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:35:17.425" endtime="20170501 18:35:17.498" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:35:17.500">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:35:17.499" endtime="20170501 18:35:17.500" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:35:17.501">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:35:17.501" endtime="20170501 18:35:17.501" status="PASS"></status>
</kw>
<status starttime="20170501 18:35:17.500" endtime="20170501 18:35:17.501" status="PASS"></status>
</kw>
<status starttime="20170501 18:35:17.499" endtime="20170501 18:35:17.501" status="PASS"></status>
</kw>
<status starttime="20170501 18:35:17.498" endtime="20170501 18:35:17.501" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:35:17.502">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:35:17.238" endtime="20170501 18:35:17.502" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:35:17.503">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:35:17.502" endtime="20170501 18:35:17.503" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:35:17.503">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170501 18:35:17.503">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170501 18:35:17.504">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170501 18:35:17.503" endtime="20170501 18:35:17.504" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:35:17.504">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:35:17.238" endtime="20170501 18:35:17.504" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:35:17.504">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:35:17.238" endtime="20170501 18:35:17.504" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170501 18:35:17.505">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170501 18:35:17.505" endtime="20170501 18:35:17.505" status="FAIL"></status>
</kw>
<status starttime="20170501 18:35:17.237" endtime="20170501 18:35:17.506" status="FAIL"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:35:27.510">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170501 18:35:27.510" endtime="20170501 18:35:27.511" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:35:27.511">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170501 18:35:27.511" endtime="20170501 18:35:27.511" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:35:27.512">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170501 18:35:27.512" endtime="20170501 18:35:27.512" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:35:27.513">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170501 18:35:27.512" endtime="20170501 18:35:27.513" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:35:27.712">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170501 18:35:27.513" endtime="20170501 18:35:27.712" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:35:27.713">${status} = PASS</msg>
<msg level="INFO" timestamp="20170501 18:35:27.713">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:35:27.513" endtime="20170501 18:35:27.713" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:35:27.713">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:35:27.713" endtime="20170501 18:35:27.713" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:35:27.714">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:35:27.714" endtime="20170501 18:35:27.714" status="PASS"></status>
</kw>
<status starttime="20170501 18:35:27.509" endtime="20170501 18:35:27.714" status="PASS"></status>
</kw>
<status starttime="20170501 18:35:27.509" endtime="20170501 18:35:27.714" status="PASS"></status>
</kw>
<status starttime="20170501 18:35:27.508" endtime="20170501 18:35:27.714" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:35:27.715">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170501 18:35:27.715" endtime="20170501 18:35:27.715" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:35:27.717">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:35:27.716" endtime="20170501 18:35:27.717" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:35:27.718">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:35:27.718" endtime="20170501 18:35:27.718" status="PASS"></status>
</kw>
<status starttime="20170501 18:35:27.717" endtime="20170501 18:35:27.718" status="PASS"></status>
</kw>
<status starttime="20170501 18:35:27.716" endtime="20170501 18:35:27.718" status="PASS"></status>
</kw>
<status starttime="20170501 18:35:27.715" endtime="20170501 18:35:27.719" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:35:27.784">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170501 18:35:27.784">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:35:27.719" endtime="20170501 18:35:27.784" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:35:27.786">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:35:27.786" endtime="20170501 18:35:27.786" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:35:27.787">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:35:27.787" endtime="20170501 18:35:27.787" status="PASS"></status>
</kw>
<status starttime="20170501 18:35:27.786" endtime="20170501 18:35:27.787" status="PASS"></status>
</kw>
<status starttime="20170501 18:35:27.785" endtime="20170501 18:35:27.787" status="PASS"></status>
</kw>
<status starttime="20170501 18:35:27.785" endtime="20170501 18:35:27.787" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:35:27.788">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:35:27.508" endtime="20170501 18:35:27.788" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:35:27.788">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:35:27.788" endtime="20170501 18:35:27.788" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:35:27.789">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170501 18:35:27.789">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170501 18:35:27.789">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170501 18:35:27.788" endtime="20170501 18:35:27.789" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:35:27.789">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:35:27.507" endtime="20170501 18:35:27.789" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:35:27.790">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:35:27.507" endtime="20170501 18:35:27.790" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170501 18:35:27.790">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170501 18:35:27.790" endtime="20170501 18:35:27.790" status="FAIL"></status>
</kw>
<status starttime="20170501 18:35:27.506" endtime="20170501 18:35:27.790" status="FAIL"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:35:37.797">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170501 18:35:37.797" endtime="20170501 18:35:37.798" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:35:37.799">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170501 18:35:37.798" endtime="20170501 18:35:37.799" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:35:37.799">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170501 18:35:37.799" endtime="20170501 18:35:37.799" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:35:37.800">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170501 18:35:37.800" endtime="20170501 18:35:37.800" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:35:38.084">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170501 18:35:37.801" endtime="20170501 18:35:38.084" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:35:38.084">${status} = PASS</msg>
<msg level="INFO" timestamp="20170501 18:35:38.084">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:35:37.800" endtime="20170501 18:35:38.084" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:35:38.085">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:35:38.085" endtime="20170501 18:35:38.085" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:35:38.086">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:35:38.086" endtime="20170501 18:35:38.086" status="PASS"></status>
</kw>
<status starttime="20170501 18:35:37.794" endtime="20170501 18:35:38.086" status="PASS"></status>
</kw>
<status starttime="20170501 18:35:37.794" endtime="20170501 18:35:38.087" status="PASS"></status>
</kw>
<status starttime="20170501 18:35:37.793" endtime="20170501 18:35:38.087" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:35:38.087">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170501 18:35:38.087" endtime="20170501 18:35:38.088" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:35:38.090">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:35:38.089" endtime="20170501 18:35:38.090" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:35:38.092">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:35:38.091" endtime="20170501 18:35:38.092" status="PASS"></status>
</kw>
<status starttime="20170501 18:35:38.091" endtime="20170501 18:35:38.092" status="PASS"></status>
</kw>
<status starttime="20170501 18:35:38.088" endtime="20170501 18:35:38.092" status="PASS"></status>
</kw>
<status starttime="20170501 18:35:38.088" endtime="20170501 18:35:38.092" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:35:38.159">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170501 18:35:38.159">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:35:38.092" endtime="20170501 18:35:38.159" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:35:38.160">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:35:38.160" endtime="20170501 18:35:38.160" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:35:38.162">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:35:38.162" endtime="20170501 18:35:38.162" status="PASS"></status>
</kw>
<status starttime="20170501 18:35:38.161" endtime="20170501 18:35:38.162" status="PASS"></status>
</kw>
<status starttime="20170501 18:35:38.159" endtime="20170501 18:35:38.162" status="PASS"></status>
</kw>
<status starttime="20170501 18:35:38.159" endtime="20170501 18:35:38.162" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:35:38.162">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:35:37.793" endtime="20170501 18:35:38.162" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:35:38.163">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:35:38.163" endtime="20170501 18:35:38.163" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:35:38.164">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170501 18:35:38.164">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170501 18:35:38.164">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170501 18:35:38.163" endtime="20170501 18:35:38.164" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:35:38.164">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:35:37.792" endtime="20170501 18:35:38.164" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:35:38.164">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:35:37.792" endtime="20170501 18:35:38.164" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170501 18:35:38.165">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170501 18:35:38.165" endtime="20170501 18:35:38.165" status="FAIL"></status>
</kw>
<status starttime="20170501 18:35:37.791" endtime="20170501 18:35:38.165" status="FAIL"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:35:48.170">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170501 18:35:48.169" endtime="20170501 18:35:48.170" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:35:48.171">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170501 18:35:48.170" endtime="20170501 18:35:48.171" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:35:48.171">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170501 18:35:48.171" endtime="20170501 18:35:48.171" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:35:48.172">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170501 18:35:48.172" endtime="20170501 18:35:48.172" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:35:48.351">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170501 18:35:48.173" endtime="20170501 18:35:48.351" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:35:48.351">${status} = PASS</msg>
<msg level="INFO" timestamp="20170501 18:35:48.352">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:35:48.172" endtime="20170501 18:35:48.352" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:35:48.352">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:35:48.352" endtime="20170501 18:35:48.352" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:35:48.353">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:35:48.352" endtime="20170501 18:35:48.353" status="PASS"></status>
</kw>
<status starttime="20170501 18:35:48.169" endtime="20170501 18:35:48.354" status="PASS"></status>
</kw>
<status starttime="20170501 18:35:48.168" endtime="20170501 18:35:48.354" status="PASS"></status>
</kw>
<status starttime="20170501 18:35:48.168" endtime="20170501 18:35:48.354" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:35:48.354">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170501 18:35:48.354" endtime="20170501 18:35:48.354" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:35:48.356">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:35:48.356" endtime="20170501 18:35:48.356" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:35:48.357">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:35:48.357" endtime="20170501 18:35:48.357" status="PASS"></status>
</kw>
<status starttime="20170501 18:35:48.357" endtime="20170501 18:35:48.358" status="PASS"></status>
</kw>
<status starttime="20170501 18:35:48.355" endtime="20170501 18:35:48.358" status="PASS"></status>
</kw>
<status starttime="20170501 18:35:48.355" endtime="20170501 18:35:48.358" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:35:48.424">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170501 18:35:48.424">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:35:48.358" endtime="20170501 18:35:48.424" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:35:48.426">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:35:48.426" endtime="20170501 18:35:48.426" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:35:48.427">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:35:48.427" endtime="20170501 18:35:48.427" status="PASS"></status>
</kw>
<status starttime="20170501 18:35:48.426" endtime="20170501 18:35:48.427" status="PASS"></status>
</kw>
<status starttime="20170501 18:35:48.425" endtime="20170501 18:35:48.427" status="PASS"></status>
</kw>
<status starttime="20170501 18:35:48.425" endtime="20170501 18:35:48.427" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:35:48.428">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:35:48.167" endtime="20170501 18:35:48.428" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:35:48.428">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:35:48.428" endtime="20170501 18:35:48.428" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:35:48.429">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170501 18:35:48.429">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170501 18:35:48.429">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170501 18:35:48.429" endtime="20170501 18:35:48.429" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:35:48.429">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:35:48.167" endtime="20170501 18:35:48.429" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:35:48.430">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:35:48.166" endtime="20170501 18:35:48.430" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170501 18:35:48.430">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170501 18:35:48.430" endtime="20170501 18:35:48.430" status="FAIL"></status>
</kw>
<status starttime="20170501 18:35:48.166" endtime="20170501 18:35:48.431" status="FAIL"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:35:58.436">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170501 18:35:58.435" endtime="20170501 18:35:58.436" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:35:58.437">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170501 18:35:58.436" endtime="20170501 18:35:58.437" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:35:58.437">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170501 18:35:58.437" endtime="20170501 18:35:58.437" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:35:58.438">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170501 18:35:58.438" endtime="20170501 18:35:58.438" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:35:58.615">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170501 18:35:58.439" endtime="20170501 18:35:58.616" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:35:58.616">${status} = PASS</msg>
<msg level="INFO" timestamp="20170501 18:35:58.616">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:35:58.438" endtime="20170501 18:35:58.616" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:35:58.616">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:35:58.616" endtime="20170501 18:35:58.616" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:35:58.617">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:35:58.617" endtime="20170501 18:35:58.617" status="PASS"></status>
</kw>
<status starttime="20170501 18:35:58.434" endtime="20170501 18:35:58.617" status="PASS"></status>
</kw>
<status starttime="20170501 18:35:58.434" endtime="20170501 18:35:58.617" status="PASS"></status>
</kw>
<status starttime="20170501 18:35:58.433" endtime="20170501 18:35:58.617" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:35:58.618">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170501 18:35:58.618" endtime="20170501 18:35:58.618" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:35:58.621">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:35:58.620" endtime="20170501 18:35:58.621" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:35:58.622">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:35:58.622" endtime="20170501 18:35:58.622" status="PASS"></status>
</kw>
<status starttime="20170501 18:35:58.621" endtime="20170501 18:35:58.622" status="PASS"></status>
</kw>
<status starttime="20170501 18:35:58.619" endtime="20170501 18:35:58.622" status="PASS"></status>
</kw>
<status starttime="20170501 18:35:58.618" endtime="20170501 18:35:58.623" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:35:58.690">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170501 18:35:58.690">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:35:58.623" endtime="20170501 18:35:58.690" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:35:58.692">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:35:58.691" endtime="20170501 18:35:58.692" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:35:58.693">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:35:58.693" endtime="20170501 18:35:58.693" status="PASS"></status>
</kw>
<status starttime="20170501 18:35:58.692" endtime="20170501 18:35:58.693" status="PASS"></status>
</kw>
<status starttime="20170501 18:35:58.691" endtime="20170501 18:35:58.693" status="PASS"></status>
</kw>
<status starttime="20170501 18:35:58.690" endtime="20170501 18:35:58.693" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:35:58.693">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:35:58.433" endtime="20170501 18:35:58.693" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:35:58.694">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:35:58.694" endtime="20170501 18:35:58.694" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:35:58.695">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170501 18:35:58.695">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170501 18:35:58.695">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170501 18:35:58.694" endtime="20170501 18:35:58.695" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:35:58.695">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:35:58.432" endtime="20170501 18:35:58.695" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:35:58.696">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:35:58.432" endtime="20170501 18:35:58.696" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170501 18:35:58.696">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170501 18:35:58.696" endtime="20170501 18:35:58.696" status="FAIL"></status>
</kw>
<status starttime="20170501 18:35:58.431" endtime="20170501 18:35:58.697" status="FAIL"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:36:08.702">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170501 18:36:08.701" endtime="20170501 18:36:08.702" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:36:08.703">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170501 18:36:08.703" endtime="20170501 18:36:08.703" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:36:08.703">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170501 18:36:08.703" endtime="20170501 18:36:08.703" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:36:08.704">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170501 18:36:08.704" endtime="20170501 18:36:08.704" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:36:08.881">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170501 18:36:08.705" endtime="20170501 18:36:08.881" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:36:08.881">${status} = PASS</msg>
<msg level="INFO" timestamp="20170501 18:36:08.881">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:36:08.704" endtime="20170501 18:36:08.881" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:36:08.882">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:36:08.881" endtime="20170501 18:36:08.882" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:36:08.882">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:36:08.882" endtime="20170501 18:36:08.882" status="PASS"></status>
</kw>
<status starttime="20170501 18:36:08.701" endtime="20170501 18:36:08.883" status="PASS"></status>
</kw>
<status starttime="20170501 18:36:08.700" endtime="20170501 18:36:08.883" status="PASS"></status>
</kw>
<status starttime="20170501 18:36:08.700" endtime="20170501 18:36:08.883" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:36:08.883">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170501 18:36:08.883" endtime="20170501 18:36:08.883" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:36:08.886">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:36:08.885" endtime="20170501 18:36:08.886" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:36:08.887">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:36:08.886" endtime="20170501 18:36:08.887" status="PASS"></status>
</kw>
<status starttime="20170501 18:36:08.886" endtime="20170501 18:36:08.887" status="PASS"></status>
</kw>
<status starttime="20170501 18:36:08.884" endtime="20170501 18:36:08.887" status="PASS"></status>
</kw>
<status starttime="20170501 18:36:08.884" endtime="20170501 18:36:08.887" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:36:08.953">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170501 18:36:08.954">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:36:08.887" endtime="20170501 18:36:08.954" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:36:08.955">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:36:08.955" endtime="20170501 18:36:08.955" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:36:08.956">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:36:08.956" endtime="20170501 18:36:08.956" status="PASS"></status>
</kw>
<status starttime="20170501 18:36:08.955" endtime="20170501 18:36:08.956" status="PASS"></status>
</kw>
<status starttime="20170501 18:36:08.954" endtime="20170501 18:36:08.957" status="PASS"></status>
</kw>
<status starttime="20170501 18:36:08.954" endtime="20170501 18:36:08.957" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:36:08.957">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:36:08.699" endtime="20170501 18:36:08.957" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:36:08.957">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:36:08.957" endtime="20170501 18:36:08.957" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:36:08.958">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170501 18:36:08.958">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170501 18:36:08.958">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170501 18:36:08.958" endtime="20170501 18:36:08.958" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:36:08.958">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:36:08.699" endtime="20170501 18:36:08.958" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:36:08.959">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:36:08.698" endtime="20170501 18:36:08.959" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170501 18:36:08.959">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170501 18:36:08.959" endtime="20170501 18:36:08.959" status="FAIL"></status>
</kw>
<status starttime="20170501 18:36:08.697" endtime="20170501 18:36:08.960" status="FAIL"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:36:18.966">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170501 18:36:18.965" endtime="20170501 18:36:18.967" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:36:18.968">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170501 18:36:18.967" endtime="20170501 18:36:18.968" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:36:18.968">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170501 18:36:18.968" endtime="20170501 18:36:18.968" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:36:18.969">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170501 18:36:18.968" endtime="20170501 18:36:18.969" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:36:19.154">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170501 18:36:18.970" endtime="20170501 18:36:19.154" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:36:19.154">${status} = PASS</msg>
<msg level="INFO" timestamp="20170501 18:36:19.154">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:36:18.969" endtime="20170501 18:36:19.154" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:36:19.155">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:36:19.155" endtime="20170501 18:36:19.155" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:36:19.156">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:36:19.156" endtime="20170501 18:36:19.156" status="PASS"></status>
</kw>
<status starttime="20170501 18:36:18.965" endtime="20170501 18:36:19.156" status="PASS"></status>
</kw>
<status starttime="20170501 18:36:18.964" endtime="20170501 18:36:19.156" status="PASS"></status>
</kw>
<status starttime="20170501 18:36:18.964" endtime="20170501 18:36:19.156" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:36:19.157">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170501 18:36:19.157" endtime="20170501 18:36:19.157" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:36:19.160">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:36:19.159" endtime="20170501 18:36:19.160" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:36:19.161">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:36:19.160" endtime="20170501 18:36:19.161" status="PASS"></status>
</kw>
<status starttime="20170501 18:36:19.160" endtime="20170501 18:36:19.161" status="PASS"></status>
</kw>
<status starttime="20170501 18:36:19.158" endtime="20170501 18:36:19.161" status="PASS"></status>
</kw>
<status starttime="20170501 18:36:19.157" endtime="20170501 18:36:19.161" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:36:19.229">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170501 18:36:19.229">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:36:19.162" endtime="20170501 18:36:19.229" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:36:19.232">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:36:19.231" endtime="20170501 18:36:19.232" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:36:19.233">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:36:19.233" endtime="20170501 18:36:19.233" status="PASS"></status>
</kw>
<status starttime="20170501 18:36:19.232" endtime="20170501 18:36:19.233" status="PASS"></status>
</kw>
<status starttime="20170501 18:36:19.230" endtime="20170501 18:36:19.234" status="PASS"></status>
</kw>
<status starttime="20170501 18:36:19.230" endtime="20170501 18:36:19.234" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:36:19.234">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:36:18.963" endtime="20170501 18:36:19.234" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:36:19.234">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:36:19.234" endtime="20170501 18:36:19.234" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:36:19.235">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170501 18:36:19.235">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170501 18:36:19.235">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170501 18:36:19.235" endtime="20170501 18:36:19.235" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:36:19.236">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:36:18.962" endtime="20170501 18:36:19.236" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:36:19.236">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:36:18.961" endtime="20170501 18:36:19.236" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170501 18:36:19.237">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170501 18:36:19.236" endtime="20170501 18:36:19.237" status="FAIL"></status>
</kw>
<status starttime="20170501 18:36:18.961" endtime="20170501 18:36:19.238" status="FAIL"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:36:29.244">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170501 18:36:29.244" endtime="20170501 18:36:29.245" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:36:29.245">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170501 18:36:29.245" endtime="20170501 18:36:29.245" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:36:29.246">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170501 18:36:29.245" endtime="20170501 18:36:29.246" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:36:29.247">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170501 18:36:29.246" endtime="20170501 18:36:29.247" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:36:29.423">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170501 18:36:29.247" endtime="20170501 18:36:29.423" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:36:29.423">${status} = PASS</msg>
<msg level="INFO" timestamp="20170501 18:36:29.423">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:36:29.247" endtime="20170501 18:36:29.423" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:36:29.424">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:36:29.424" endtime="20170501 18:36:29.424" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:36:29.425">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:36:29.425" endtime="20170501 18:36:29.425" status="PASS"></status>
</kw>
<status starttime="20170501 18:36:29.243" endtime="20170501 18:36:29.425" status="PASS"></status>
</kw>
<status starttime="20170501 18:36:29.243" endtime="20170501 18:36:29.425" status="PASS"></status>
</kw>
<status starttime="20170501 18:36:29.242" endtime="20170501 18:36:29.426" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:36:29.426">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170501 18:36:29.426" endtime="20170501 18:36:29.426" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:36:29.429">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:36:29.428" endtime="20170501 18:36:29.429" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:36:29.430">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:36:29.429" endtime="20170501 18:36:29.430" status="PASS"></status>
</kw>
<status starttime="20170501 18:36:29.429" endtime="20170501 18:36:29.431" status="PASS"></status>
</kw>
<status starttime="20170501 18:36:29.427" endtime="20170501 18:36:29.431" status="PASS"></status>
</kw>
<status starttime="20170501 18:36:29.427" endtime="20170501 18:36:29.431" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:36:29.498">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170501 18:36:29.498">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:36:29.431" endtime="20170501 18:36:29.499" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:36:29.501">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:36:29.500" endtime="20170501 18:36:29.501" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:36:29.502">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:36:29.502" endtime="20170501 18:36:29.502" status="PASS"></status>
</kw>
<status starttime="20170501 18:36:29.501" endtime="20170501 18:36:29.502" status="PASS"></status>
</kw>
<status starttime="20170501 18:36:29.500" endtime="20170501 18:36:29.502" status="PASS"></status>
</kw>
<status starttime="20170501 18:36:29.499" endtime="20170501 18:36:29.502" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:36:29.503">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:36:29.241" endtime="20170501 18:36:29.503" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:36:29.503">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:36:29.503" endtime="20170501 18:36:29.503" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:36:29.504">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170501 18:36:29.504">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170501 18:36:29.504">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170501 18:36:29.504" endtime="20170501 18:36:29.504" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:36:29.505">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:36:29.240" endtime="20170501 18:36:29.505" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:36:29.505">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:36:29.239" endtime="20170501 18:36:29.505" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170501 18:36:29.506">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170501 18:36:29.505" endtime="20170501 18:36:29.506" status="FAIL"></status>
</kw>
<status starttime="20170501 18:36:29.238" endtime="20170501 18:36:29.506" status="FAIL"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:36:39.513">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170501 18:36:39.513" endtime="20170501 18:36:39.514" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:36:39.515">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170501 18:36:39.514" endtime="20170501 18:36:39.515" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:36:39.515">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170501 18:36:39.515" endtime="20170501 18:36:39.515" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:36:39.516">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170501 18:36:39.516" endtime="20170501 18:36:39.516" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:36:39.693">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170501 18:36:39.517" endtime="20170501 18:36:39.693" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:36:39.693">${status} = PASS</msg>
<msg level="INFO" timestamp="20170501 18:36:39.693">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:36:39.516" endtime="20170501 18:36:39.693" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:36:39.694">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:36:39.694" endtime="20170501 18:36:39.694" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:36:39.695">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:36:39.695" endtime="20170501 18:36:39.696" status="PASS"></status>
</kw>
<status starttime="20170501 18:36:39.512" endtime="20170501 18:36:39.696" status="PASS"></status>
</kw>
<status starttime="20170501 18:36:39.511" endtime="20170501 18:36:39.696" status="PASS"></status>
</kw>
<status starttime="20170501 18:36:39.510" endtime="20170501 18:36:39.696" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:36:39.697">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170501 18:36:39.696" endtime="20170501 18:36:39.697" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:36:39.699">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:36:39.698" endtime="20170501 18:36:39.699" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:36:39.700">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:36:39.700" endtime="20170501 18:36:39.700" status="PASS"></status>
</kw>
<status starttime="20170501 18:36:39.699" endtime="20170501 18:36:39.700" status="PASS"></status>
</kw>
<status starttime="20170501 18:36:39.697" endtime="20170501 18:36:39.700" status="PASS"></status>
</kw>
<status starttime="20170501 18:36:39.697" endtime="20170501 18:36:39.701" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:36:39.767">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170501 18:36:39.768">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:36:39.701" endtime="20170501 18:36:39.768" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:36:39.770">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:36:39.769" endtime="20170501 18:36:39.770" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:36:39.771">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:36:39.770" endtime="20170501 18:36:39.771" status="PASS"></status>
</kw>
<status starttime="20170501 18:36:39.770" endtime="20170501 18:36:39.771" status="PASS"></status>
</kw>
<status starttime="20170501 18:36:39.769" endtime="20170501 18:36:39.771" status="PASS"></status>
</kw>
<status starttime="20170501 18:36:39.768" endtime="20170501 18:36:39.771" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:36:39.771">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:36:39.509" endtime="20170501 18:36:39.771" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:36:39.773">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:36:39.772" endtime="20170501 18:36:39.773" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:36:39.774">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170501 18:36:39.774">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170501 18:36:39.774">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170501 18:36:39.773" endtime="20170501 18:36:39.774" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:36:39.774">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:36:39.508" endtime="20170501 18:36:39.774" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:36:39.774">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:36:39.508" endtime="20170501 18:36:39.775" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170501 18:36:39.775">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170501 18:36:39.775" endtime="20170501 18:36:39.775" status="FAIL"></status>
</kw>
<status starttime="20170501 18:36:39.507" endtime="20170501 18:36:39.775" status="FAIL"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:36:49.782">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170501 18:36:49.781" endtime="20170501 18:36:49.783" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:36:49.783">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170501 18:36:49.783" endtime="20170501 18:36:49.783" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:36:49.784">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170501 18:36:49.784" endtime="20170501 18:36:49.784" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:36:49.785">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170501 18:36:49.785" endtime="20170501 18:36:49.785" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:36:49.963">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170501 18:36:49.786" endtime="20170501 18:36:49.963" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:36:49.963">${status} = PASS</msg>
<msg level="INFO" timestamp="20170501 18:36:49.963">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:36:49.786" endtime="20170501 18:36:49.963" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:36:49.964">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:36:49.964" endtime="20170501 18:36:49.964" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:36:49.965">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:36:49.964" endtime="20170501 18:36:49.965" status="PASS"></status>
</kw>
<status starttime="20170501 18:36:49.781" endtime="20170501 18:36:49.965" status="PASS"></status>
</kw>
<status starttime="20170501 18:36:49.780" endtime="20170501 18:36:49.965" status="PASS"></status>
</kw>
<status starttime="20170501 18:36:49.779" endtime="20170501 18:36:49.965" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:36:49.966">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170501 18:36:49.965" endtime="20170501 18:36:49.966" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:36:49.968">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:36:49.967" endtime="20170501 18:36:49.968" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:36:49.969">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:36:49.968" endtime="20170501 18:36:49.969" status="PASS"></status>
</kw>
<status starttime="20170501 18:36:49.968" endtime="20170501 18:36:49.969" status="PASS"></status>
</kw>
<status starttime="20170501 18:36:49.967" endtime="20170501 18:36:49.969" status="PASS"></status>
</kw>
<status starttime="20170501 18:36:49.966" endtime="20170501 18:36:49.969" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:36:50.036">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170501 18:36:50.036">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:36:49.969" endtime="20170501 18:36:50.037" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:36:50.039">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:36:50.038" endtime="20170501 18:36:50.039" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:36:50.039">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:36:50.039" endtime="20170501 18:36:50.040" status="PASS"></status>
</kw>
<status starttime="20170501 18:36:50.039" endtime="20170501 18:36:50.040" status="PASS"></status>
</kw>
<status starttime="20170501 18:36:50.037" endtime="20170501 18:36:50.040" status="PASS"></status>
</kw>
<status starttime="20170501 18:36:50.037" endtime="20170501 18:36:50.040" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:36:50.040">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:36:49.778" endtime="20170501 18:36:50.040" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:36:50.041">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:36:50.040" endtime="20170501 18:36:50.041" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:36:50.041">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170501 18:36:50.041">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170501 18:36:50.041">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170501 18:36:50.041" endtime="20170501 18:36:50.041" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:36:50.042">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:36:49.777" endtime="20170501 18:36:50.042" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:36:50.042">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:36:49.777" endtime="20170501 18:36:50.042" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170501 18:36:50.043">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170501 18:36:50.042" endtime="20170501 18:36:50.043" status="FAIL"></status>
</kw>
<status starttime="20170501 18:36:49.776" endtime="20170501 18:36:50.043" status="FAIL"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:37:00.048">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170501 18:37:00.048" endtime="20170501 18:37:00.049" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:37:00.049">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170501 18:37:00.049" endtime="20170501 18:37:00.049" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:37:00.050">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170501 18:37:00.050" endtime="20170501 18:37:00.050" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:37:00.051">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170501 18:37:00.051" endtime="20170501 18:37:00.051" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:37:00.229">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170501 18:37:00.052" endtime="20170501 18:37:00.229" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:37:00.229">${status} = PASS</msg>
<msg level="INFO" timestamp="20170501 18:37:00.229">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:37:00.052" endtime="20170501 18:37:00.229" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:37:00.230">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:37:00.229" endtime="20170501 18:37:00.230" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:37:00.232">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:37:00.230" endtime="20170501 18:37:00.232" status="PASS"></status>
</kw>
<status starttime="20170501 18:37:00.047" endtime="20170501 18:37:00.233" status="PASS"></status>
</kw>
<status starttime="20170501 18:37:00.046" endtime="20170501 18:37:00.233" status="PASS"></status>
</kw>
<status starttime="20170501 18:37:00.046" endtime="20170501 18:37:00.233" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:37:00.233">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170501 18:37:00.233" endtime="20170501 18:37:00.233" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:37:00.235">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:37:00.235" endtime="20170501 18:37:00.235" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:37:00.236">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:37:00.236" endtime="20170501 18:37:00.236" status="PASS"></status>
</kw>
<status starttime="20170501 18:37:00.236" endtime="20170501 18:37:00.236" status="PASS"></status>
</kw>
<status starttime="20170501 18:37:00.234" endtime="20170501 18:37:00.237" status="PASS"></status>
</kw>
<status starttime="20170501 18:37:00.234" endtime="20170501 18:37:00.237" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:37:00.303">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170501 18:37:00.303">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:37:00.237" endtime="20170501 18:37:00.304" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:37:00.305">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:37:00.305" endtime="20170501 18:37:00.305" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:37:00.306">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:37:00.306" endtime="20170501 18:37:00.306" status="PASS"></status>
</kw>
<status starttime="20170501 18:37:00.305" endtime="20170501 18:37:00.306" status="PASS"></status>
</kw>
<status starttime="20170501 18:37:00.304" endtime="20170501 18:37:00.307" status="PASS"></status>
</kw>
<status starttime="20170501 18:37:00.304" endtime="20170501 18:37:00.307" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:37:00.307">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:37:00.045" endtime="20170501 18:37:00.307" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:37:00.308">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:37:00.307" endtime="20170501 18:37:00.308" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:37:00.309">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170501 18:37:00.309">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170501 18:37:00.309">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170501 18:37:00.308" endtime="20170501 18:37:00.309" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:37:00.309">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:37:00.044" endtime="20170501 18:37:00.309" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:37:00.310">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:37:00.044" endtime="20170501 18:37:00.310" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170501 18:37:00.310">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170501 18:37:00.310" endtime="20170501 18:37:00.311" status="FAIL"></status>
</kw>
<status starttime="20170501 18:37:00.043" endtime="20170501 18:37:00.311" status="FAIL"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:37:10.317">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170501 18:37:10.316" endtime="20170501 18:37:10.317" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:37:10.318">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170501 18:37:10.318" endtime="20170501 18:37:10.318" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:37:10.319">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170501 18:37:10.318" endtime="20170501 18:37:10.319" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:37:10.320">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170501 18:37:10.319" endtime="20170501 18:37:10.320" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:37:10.496">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170501 18:37:10.321" endtime="20170501 18:37:10.497" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:37:10.497">${status} = PASS</msg>
<msg level="INFO" timestamp="20170501 18:37:10.497">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:37:10.320" endtime="20170501 18:37:10.497" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:37:10.497">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:37:10.497" endtime="20170501 18:37:10.498" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:37:10.498">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:37:10.498" endtime="20170501 18:37:10.498" status="PASS"></status>
</kw>
<status starttime="20170501 18:37:10.315" endtime="20170501 18:37:10.498" status="PASS"></status>
</kw>
<status starttime="20170501 18:37:10.315" endtime="20170501 18:37:10.498" status="PASS"></status>
</kw>
<status starttime="20170501 18:37:10.314" endtime="20170501 18:37:10.499" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:37:10.499">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170501 18:37:10.499" endtime="20170501 18:37:10.499" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:37:10.501">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:37:10.500" endtime="20170501 18:37:10.501" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:37:10.502">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:37:10.502" endtime="20170501 18:37:10.502" status="PASS"></status>
</kw>
<status starttime="20170501 18:37:10.501" endtime="20170501 18:37:10.502" status="PASS"></status>
</kw>
<status starttime="20170501 18:37:10.500" endtime="20170501 18:37:10.502" status="PASS"></status>
</kw>
<status starttime="20170501 18:37:10.499" endtime="20170501 18:37:10.502" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:37:10.576">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170501 18:37:10.576">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:37:10.503" endtime="20170501 18:37:10.576" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:37:10.578">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:37:10.577" endtime="20170501 18:37:10.578" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:37:10.579">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:37:10.579" endtime="20170501 18:37:10.579" status="PASS"></status>
</kw>
<status starttime="20170501 18:37:10.578" endtime="20170501 18:37:10.579" status="PASS"></status>
</kw>
<status starttime="20170501 18:37:10.577" endtime="20170501 18:37:10.579" status="PASS"></status>
</kw>
<status starttime="20170501 18:37:10.576" endtime="20170501 18:37:10.580" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:37:10.580">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:37:10.313" endtime="20170501 18:37:10.580" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:37:10.580">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:37:10.580" endtime="20170501 18:37:10.581" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:37:10.581">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170501 18:37:10.581">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170501 18:37:10.581">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170501 18:37:10.581" endtime="20170501 18:37:10.581" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:37:10.582">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:37:10.312" endtime="20170501 18:37:10.582" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:37:10.582">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:37:10.312" endtime="20170501 18:37:10.582" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170501 18:37:10.583">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170501 18:37:10.582" endtime="20170501 18:37:10.583" status="FAIL"></status>
</kw>
<status starttime="20170501 18:37:10.311" endtime="20170501 18:37:10.583" status="FAIL"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:37:20.588">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170501 18:37:20.587" endtime="20170501 18:37:20.588" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:37:20.589">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170501 18:37:20.588" endtime="20170501 18:37:20.589" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:37:20.589">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170501 18:37:20.589" endtime="20170501 18:37:20.589" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:37:20.590">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170501 18:37:20.590" endtime="20170501 18:37:20.590" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:37:20.768">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170501 18:37:20.591" endtime="20170501 18:37:20.769" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:37:20.769">${status} = PASS</msg>
<msg level="INFO" timestamp="20170501 18:37:20.769">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:37:20.590" endtime="20170501 18:37:20.769" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:37:20.769">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:37:20.769" endtime="20170501 18:37:20.769" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:37:20.770">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:37:20.770" endtime="20170501 18:37:20.770" status="PASS"></status>
</kw>
<status starttime="20170501 18:37:20.587" endtime="20170501 18:37:20.770" status="PASS"></status>
</kw>
<status starttime="20170501 18:37:20.587" endtime="20170501 18:37:20.770" status="PASS"></status>
</kw>
<status starttime="20170501 18:37:20.586" endtime="20170501 18:37:20.770" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:37:20.771">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170501 18:37:20.771" endtime="20170501 18:37:20.771" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:37:20.773">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:37:20.773" endtime="20170501 18:37:20.773" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:37:20.774">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:37:20.774" endtime="20170501 18:37:20.774" status="PASS"></status>
</kw>
<status starttime="20170501 18:37:20.774" endtime="20170501 18:37:20.775" status="PASS"></status>
</kw>
<status starttime="20170501 18:37:20.772" endtime="20170501 18:37:20.775" status="PASS"></status>
</kw>
<status starttime="20170501 18:37:20.771" endtime="20170501 18:37:20.775" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:37:20.842">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170501 18:37:20.842">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:37:20.775" endtime="20170501 18:37:20.842" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:37:20.844">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:37:20.843" endtime="20170501 18:37:20.844" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:37:20.845">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:37:20.845" endtime="20170501 18:37:20.845" status="PASS"></status>
</kw>
<status starttime="20170501 18:37:20.844" endtime="20170501 18:37:20.845" status="PASS"></status>
</kw>
<status starttime="20170501 18:37:20.843" endtime="20170501 18:37:20.845" status="PASS"></status>
</kw>
<status starttime="20170501 18:37:20.842" endtime="20170501 18:37:20.845" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:37:20.845">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:37:20.585" endtime="20170501 18:37:20.845" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:37:20.846">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:37:20.846" endtime="20170501 18:37:20.846" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:37:20.847">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170501 18:37:20.847">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170501 18:37:20.847">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170501 18:37:20.846" endtime="20170501 18:37:20.847" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:37:20.847">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:37:20.585" endtime="20170501 18:37:20.847" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:37:20.847">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:37:20.584" endtime="20170501 18:37:20.847" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170501 18:37:20.848">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170501 18:37:20.848" endtime="20170501 18:37:20.848" status="FAIL"></status>
</kw>
<status starttime="20170501 18:37:20.584" endtime="20170501 18:37:20.848" status="FAIL"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:37:30.853">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170501 18:37:30.852" endtime="20170501 18:37:30.854" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:37:30.855">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170501 18:37:30.854" endtime="20170501 18:37:30.855" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:37:30.856">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170501 18:37:30.855" endtime="20170501 18:37:30.856" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:37:30.857">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170501 18:37:30.856" endtime="20170501 18:37:30.857" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:37:31.089">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170501 18:37:30.858" endtime="20170501 18:37:31.089" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:37:31.089">${status} = PASS</msg>
<msg level="INFO" timestamp="20170501 18:37:31.089">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:37:30.857" endtime="20170501 18:37:31.089" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:37:31.090">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:37:31.089" endtime="20170501 18:37:31.090" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:37:31.090">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:37:31.090" endtime="20170501 18:37:31.091" status="PASS"></status>
</kw>
<status starttime="20170501 18:37:30.852" endtime="20170501 18:37:31.091" status="PASS"></status>
</kw>
<status starttime="20170501 18:37:30.852" endtime="20170501 18:37:31.091" status="PASS"></status>
</kw>
<status starttime="20170501 18:37:30.851" endtime="20170501 18:37:31.091" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:37:31.091">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170501 18:37:31.091" endtime="20170501 18:37:31.091" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:37:31.094">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:37:31.093" endtime="20170501 18:37:31.094" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:37:31.095">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:37:31.095" endtime="20170501 18:37:31.095" status="PASS"></status>
</kw>
<status starttime="20170501 18:37:31.094" endtime="20170501 18:37:31.096" status="PASS"></status>
</kw>
<status starttime="20170501 18:37:31.092" endtime="20170501 18:37:31.096" status="PASS"></status>
</kw>
<status starttime="20170501 18:37:31.092" endtime="20170501 18:37:31.096" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:37:31.164">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170501 18:37:31.164">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:37:31.096" endtime="20170501 18:37:31.164" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:37:31.166">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:37:31.165" endtime="20170501 18:37:31.166" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:37:31.167">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:37:31.167" endtime="20170501 18:37:31.167" status="PASS"></status>
</kw>
<status starttime="20170501 18:37:31.166" endtime="20170501 18:37:31.167" status="PASS"></status>
</kw>
<status starttime="20170501 18:37:31.165" endtime="20170501 18:37:31.167" status="PASS"></status>
</kw>
<status starttime="20170501 18:37:31.165" endtime="20170501 18:37:31.167" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:37:31.168">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:37:30.850" endtime="20170501 18:37:31.168" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:37:31.168">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:37:31.168" endtime="20170501 18:37:31.168" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:37:31.169">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170501 18:37:31.169">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170501 18:37:31.169">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170501 18:37:31.168" endtime="20170501 18:37:31.169" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:37:31.169">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:37:30.850" endtime="20170501 18:37:31.169" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:37:31.169">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:37:30.849" endtime="20170501 18:37:31.169" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170501 18:37:31.170">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170501 18:37:31.170" endtime="20170501 18:37:31.170" status="FAIL"></status>
</kw>
<status starttime="20170501 18:37:30.849" endtime="20170501 18:37:31.170" status="FAIL"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:37:41.177">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170501 18:37:41.177" endtime="20170501 18:37:41.178" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:37:41.179">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170501 18:37:41.178" endtime="20170501 18:37:41.179" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:37:41.180">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170501 18:37:41.179" endtime="20170501 18:37:41.180" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:37:41.181">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170501 18:37:41.180" endtime="20170501 18:37:41.181" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:37:41.356">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170501 18:37:41.182" endtime="20170501 18:37:41.356" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:37:41.357">${status} = PASS</msg>
<msg level="INFO" timestamp="20170501 18:37:41.357">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:37:41.181" endtime="20170501 18:37:41.357" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:37:41.357">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:37:41.357" endtime="20170501 18:37:41.357" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:37:41.358">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:37:41.358" endtime="20170501 18:37:41.358" status="PASS"></status>
</kw>
<status starttime="20170501 18:37:41.176" endtime="20170501 18:37:41.358" status="PASS"></status>
</kw>
<status starttime="20170501 18:37:41.176" endtime="20170501 18:37:41.358" status="PASS"></status>
</kw>
<status starttime="20170501 18:37:41.175" endtime="20170501 18:37:41.359" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:37:41.359">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170501 18:37:41.359" endtime="20170501 18:37:41.359" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:37:41.361">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:37:41.361" endtime="20170501 18:37:41.361" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:37:41.363">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:37:41.362" endtime="20170501 18:37:41.363" status="PASS"></status>
</kw>
<status starttime="20170501 18:37:41.361" endtime="20170501 18:37:41.363" status="PASS"></status>
</kw>
<status starttime="20170501 18:37:41.360" endtime="20170501 18:37:41.363" status="PASS"></status>
</kw>
<status starttime="20170501 18:37:41.359" endtime="20170501 18:37:41.363" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:37:41.429">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170501 18:37:41.429">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:37:41.363" endtime="20170501 18:37:41.429" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:37:41.431">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:37:41.431" endtime="20170501 18:37:41.431" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:37:41.432">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:37:41.432" endtime="20170501 18:37:41.432" status="PASS"></status>
</kw>
<status starttime="20170501 18:37:41.431" endtime="20170501 18:37:41.432" status="PASS"></status>
</kw>
<status starttime="20170501 18:37:41.430" endtime="20170501 18:37:41.433" status="PASS"></status>
</kw>
<status starttime="20170501 18:37:41.430" endtime="20170501 18:37:41.433" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:37:41.433">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:37:41.174" endtime="20170501 18:37:41.433" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:37:41.433">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:37:41.433" endtime="20170501 18:37:41.434" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:37:41.434">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170501 18:37:41.434">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170501 18:37:41.434">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170501 18:37:41.434" endtime="20170501 18:37:41.434" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:37:41.434">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:37:41.173" endtime="20170501 18:37:41.435" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:37:41.435">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:37:41.172" endtime="20170501 18:37:41.435" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170501 18:37:41.435">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170501 18:37:41.435" endtime="20170501 18:37:41.435" status="FAIL"></status>
</kw>
<status starttime="20170501 18:37:41.171" endtime="20170501 18:37:41.436" status="FAIL"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:37:51.440">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170501 18:37:51.440" endtime="20170501 18:37:51.441" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:37:51.441">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170501 18:37:51.441" endtime="20170501 18:37:51.441" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:37:51.442">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170501 18:37:51.441" endtime="20170501 18:37:51.442" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:37:51.443">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170501 18:37:51.442" endtime="20170501 18:37:51.443" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:37:51.620">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170501 18:37:51.443" endtime="20170501 18:37:51.620" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:37:51.620">${status} = PASS</msg>
<msg level="INFO" timestamp="20170501 18:37:51.620">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:37:51.443" endtime="20170501 18:37:51.620" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:37:51.621">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:37:51.621" endtime="20170501 18:37:51.621" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:37:51.622">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:37:51.621" endtime="20170501 18:37:51.622" status="PASS"></status>
</kw>
<status starttime="20170501 18:37:51.439" endtime="20170501 18:37:51.622" status="PASS"></status>
</kw>
<status starttime="20170501 18:37:51.439" endtime="20170501 18:37:51.622" status="PASS"></status>
</kw>
<status starttime="20170501 18:37:51.438" endtime="20170501 18:37:51.622" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:37:51.623">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170501 18:37:51.622" endtime="20170501 18:37:51.623" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:37:51.626">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:37:51.625" endtime="20170501 18:37:51.626" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:37:51.627">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:37:51.627" endtime="20170501 18:37:51.627" status="PASS"></status>
</kw>
<status starttime="20170501 18:37:51.626" endtime="20170501 18:37:51.627" status="PASS"></status>
</kw>
<status starttime="20170501 18:37:51.624" endtime="20170501 18:37:51.627" status="PASS"></status>
</kw>
<status starttime="20170501 18:37:51.623" endtime="20170501 18:37:51.627" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:37:51.694">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170501 18:37:51.694">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:37:51.628" endtime="20170501 18:37:51.694" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:37:51.695">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:37:51.695" endtime="20170501 18:37:51.695" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:37:51.697">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:37:51.696" endtime="20170501 18:37:51.697" status="PASS"></status>
</kw>
<status starttime="20170501 18:37:51.696" endtime="20170501 18:37:51.697" status="PASS"></status>
</kw>
<status starttime="20170501 18:37:51.694" endtime="20170501 18:37:51.697" status="PASS"></status>
</kw>
<status starttime="20170501 18:37:51.694" endtime="20170501 18:37:51.697" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:37:51.697">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:37:51.438" endtime="20170501 18:37:51.697" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:37:51.698">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:37:51.697" endtime="20170501 18:37:51.698" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:37:51.698">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170501 18:37:51.698">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170501 18:37:51.699">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170501 18:37:51.698" endtime="20170501 18:37:51.699" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:37:51.699">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:37:51.437" endtime="20170501 18:37:51.699" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:37:51.699">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:37:51.437" endtime="20170501 18:37:51.699" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170501 18:37:51.700">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170501 18:37:51.699" endtime="20170501 18:37:51.700" status="FAIL"></status>
</kw>
<status starttime="20170501 18:37:51.436" endtime="20170501 18:37:51.700" status="FAIL"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:01.705">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170501 18:38:01.705" endtime="20170501 18:38:01.705" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:01.706">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170501 18:38:01.706" endtime="20170501 18:38:01.706" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:01.707">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170501 18:38:01.706" endtime="20170501 18:38:01.707" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:01.707">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170501 18:38:01.707" endtime="20170501 18:38:01.707" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:01.903">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170501 18:38:01.708" endtime="20170501 18:38:01.903" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:38:01.903">${status} = PASS</msg>
<msg level="INFO" timestamp="20170501 18:38:01.903">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:38:01.708" endtime="20170501 18:38:01.903" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:01.904">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:38:01.903" endtime="20170501 18:38:01.904" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:01.904">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:38:01.904" endtime="20170501 18:38:01.905" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:01.704" endtime="20170501 18:38:01.905" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:01.704" endtime="20170501 18:38:01.905" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:01.703" endtime="20170501 18:38:01.905" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:01.905">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170501 18:38:01.905" endtime="20170501 18:38:01.905" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:01.908">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:38:01.907" endtime="20170501 18:38:01.908" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:01.908">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170501 18:38:01.908" endtime="20170501 18:38:01.909" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:01.908" endtime="20170501 18:38:01.909" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:01.906" endtime="20170501 18:38:01.909" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:01.906" endtime="20170501 18:38:01.909" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:01.975">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170501 18:38:01.975">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:38:01.909" endtime="20170501 18:38:01.975" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:01.977">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:38:01.977" endtime="20170501 18:38:01.977" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:01.978">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:38:01.978" endtime="20170501 18:38:01.978" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:01.977" endtime="20170501 18:38:01.978" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:01.976" endtime="20170501 18:38:01.979" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:01.976" endtime="20170501 18:38:01.979" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:38:01.979">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:38:01.702" endtime="20170501 18:38:01.979" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:01.979">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:38:01.979" endtime="20170501 18:38:01.980" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:01.980">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170501 18:38:01.980">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170501 18:38:01.980">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170501 18:38:01.980" endtime="20170501 18:38:01.980" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:38:01.980">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:38:01.701" endtime="20170501 18:38:01.981" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:38:01.981">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170501 18:38:01.701" endtime="20170501 18:38:01.981" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170501 18:38:01.981">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170501 18:38:01.981" endtime="20170501 18:38:01.981" status="FAIL"></status>
</kw>
<status starttime="20170501 18:38:01.701" endtime="20170501 18:38:01.982" status="FAIL"></status>
</kw>
<msg level="FAIL" timestamp="20170501 18:38:01.982">Keyword 'Is OS Starting' failed after retrying for 10 minutes. The last error was: FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170501 18:27:54.915" endtime="20170501 18:38:01.982" status="FAIL"></status>
</kw>
<status starttime="20170501 18:27:38.690" endtime="20170501 18:38:01.982" status="FAIL"></status>
</kw>
<status starttime="20170501 18:27:38.689" endtime="20170501 18:38:01.982" status="FAIL"></status>
</kw>
<kw name="Test Exit Logs" type="teardown">
<doc>Collect FFDC and SOL log.</doc>
<kw library="openbmc_ffdc" name="FFDC On Test Case Fail">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="state_manager" name="Is Host Quiesced">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:01.987">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170501 18:38:01.987" endtime="20170501 18:38:01.987" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:01.988">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170501 18:38:01.988" endtime="20170501 18:38:01.988" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:01.989">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170501 18:38:01.988" endtime="20170501 18:38:01.989" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:01.989">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170501 18:38:01.989" endtime="20170501 18:38:01.989" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:02.176">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170501 18:38:01.990" endtime="20170501 18:38:02.176" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:38:02.176">${status} = PASS</msg>
<msg level="INFO" timestamp="20170501 18:38:02.176">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:38:01.990" endtime="20170501 18:38:02.176" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:02.177">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:38:02.177" endtime="20170501 18:38:02.177" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:02.178">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:38:02.177" endtime="20170501 18:38:02.178" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:01.986" endtime="20170501 18:38:02.178" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:01.986" endtime="20170501 18:38:02.178" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:01.985" endtime="20170501 18:38:02.178" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:02.179">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170501 18:38:02.178" endtime="20170501 18:38:02.179" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:02.181">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170501 18:38:02.180" endtime="20170501 18:38:02.181" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:02.182">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170501 18:38:02.181" endtime="20170501 18:38:02.182" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:02.181" endtime="20170501 18:38:02.182" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:02.179" endtime="20170501 18:38:02.182" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:02.179" endtime="20170501 18:38:02.182" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:02.246">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170501 18:38:02.246">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:38:02.182" endtime="20170501 18:38:02.246" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:02.247">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:38:02.247" endtime="20170501 18:38:02.248" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:02.248">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:38:02.248" endtime="20170501 18:38:02.249" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:02.248" endtime="20170501 18:38:02.249" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:02.247" endtime="20170501 18:38:02.249" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:02.246" endtime="20170501 18:38:02.249" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:38:02.249">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:38:01.985" endtime="20170501 18:38:02.249" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:02.250">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:38:02.249" endtime="20170501 18:38:02.250" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:02.250">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170501 18:38:02.250">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170501 18:38:02.250">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170501 18:38:02.250" endtime="20170501 18:38:02.251" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:38:02.251">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170501 18:38:01.984" endtime="20170501 18:38:02.251" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:38:02.251">${host_state} = Quiesced</msg>
<status starttime="20170501 18:38:01.984" endtime="20170501 18:38:02.251" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<status starttime="20170501 18:38:02.252" endtime="20170501 18:38:02.252" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:38:02.252">${status} = True</msg>
<status starttime="20170501 18:38:02.251" endtime="20170501 18:38:02.252" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:38:02.252">${status} = True</msg>
<status starttime="20170501 18:38:01.983" endtime="20170501 18:38:02.253" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw library="openbmc_ffdc" name="Ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw library="utils" name="Ping Host">
<arguments>
<arg>9.41.166.169</arg>
</arguments>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:02.419">Length is 12</msg>
<status starttime="20170501 18:38:02.419" endtime="20170501 18:38:02.419" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:02.424">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170501 18:38:05.429">${RC} = 0</msg>
<msg level="INFO" timestamp="20170501 18:38:05.429">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=1.15 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=0.638 ms
64 bytes from 9.41.166.169...</msg>
<status starttime="20170501 18:38:02.419" endtime="20170501 18:38:05.430" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:05.435">RC: 0
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=1.15 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=0.638 ms
64 bytes from 9.41.166.169: icmp_seq=3 ttl=63 time=0.612 ms
64 bytes from 9.41.166.169: icmp_seq=4 ttl=63 time=1.10 ms

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2999ms
rtt min/avg/max/mdev = 0.612/0.877/1.153/0.253 ms</msg>
<status starttime="20170501 18:38:05.432" endtime="20170501 18:38:05.435" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status starttime="20170501 18:38:05.435" endtime="20170501 18:38:05.435" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:02.418" endtime="20170501 18:38:05.436" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:05.460">${cur_time} = 2017-05-01 18:38:05:460056</msg>
<status starttime="20170501 18:38:05.460" endtime="20170501 18:38:05.460" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:05.461">${cur_time} = 20170501183805460056</msg>
<status starttime="20170501 18:38:05.461" endtime="20170501 18:38:05.461" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:05.459" endtime="20170501 18:38:05.461" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:38:05.461">${FFDC_TIME} = 20170501183805460056</msg>
<kw library="openbmc_ffdc_utils" name="Get Test Dir and Name">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:05.470">${suite_name} = TestsTestBasicPoweron</msg>
<status starttime="20170501 18:38:05.470" endtime="20170501 18:38:05.470" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:05.470">${suite_name} = 20170501183805460056_TestsTestBasicPoweron</msg>
<status starttime="20170501 18:38:05.470" endtime="20170501 18:38:05.471" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:05.471">${test_name} = PowerOnTest</msg>
<status starttime="20170501 18:38:05.471" endtime="20170501 18:38:05.471" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:05.472">${test_name} = 20170501183805460056_PowerOnTest</msg>
<status starttime="20170501 18:38:05.471" endtime="20170501 18:38:05.472" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:05.469" endtime="20170501 18:38:05.472" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:38:05.472">${FFDC_DIR_PATH} = /tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/</msg>
<msg level="INFO" timestamp="20170501 18:38:05.472">${FFDC_PREFIX} = 20170501183805460056_</msg>
<msg level="INFO" timestamp="20170501 18:38:05.493">${LOG_PREFIX} = /tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_</msg>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170501 18:38:05.494">Created directory '&lt;a href="file:///tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest"&gt;/tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest&lt;/a&gt;'.</msg>
<status starttime="20170501 18:38:05.494" endtime="20170501 18:38:05.494" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:38:05.498">${FFDC_FILE_PATH} = /tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_general.txt</msg>
<kw library="openbmc_ffdc_utils" name="Header Message">
<doc>Write header message to the report document manifest.</doc>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170501 18:38:05.517">Appended to file '&lt;a href="file:///tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_general.txt"&gt;/tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170501 18:38:05.517" endtime="20170501 18:38:05.517" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:05.516" endtime="20170501 18:38:05.518" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170501 18:38:05.519">Appended to file '&lt;a href="file:///tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_general.txt"&gt;/tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170501 18:38:05.518" endtime="20170501 18:38:05.519" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:05.518" endtime="20170501 18:38:05.519" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170501 18:38:05.520">Appended to file '&lt;a href="file:///tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_general.txt"&gt;/tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170501 18:38:05.520" endtime="20170501 18:38:05.520" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:05.519" endtime="20170501 18:38:05.521" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170501 18:38:05.522">Appended to file '&lt;a href="file:///tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_general.txt"&gt;/tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170501 18:38:05.521" endtime="20170501 18:38:05.522" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:05.521" endtime="20170501 18:38:05.522" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170501 18:38:05.523">Appended to file '&lt;a href="file:///tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_general.txt"&gt;/tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170501 18:38:05.523" endtime="20170501 18:38:05.523" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:05.522" endtime="20170501 18:38:05.524" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170501 18:38:05.525">Appended to file '&lt;a href="file:///tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_general.txt"&gt;/tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170501 18:38:05.524" endtime="20170501 18:38:05.525" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:05.524" endtime="20170501 18:38:05.525" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170501 18:38:05.526">Appended to file '&lt;a href="file:///tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_general.txt"&gt;/tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170501 18:38:05.526" endtime="20170501 18:38:05.526" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:05.525" endtime="20170501 18:38:05.526" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170501 18:38:05.527">Appended to file '&lt;a href="file:///tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_general.txt"&gt;/tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170501 18:38:05.527" endtime="20170501 18:38:05.528" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:05.526" endtime="20170501 18:38:05.528" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170501 18:38:05.529">Appended to file '&lt;a href="file:///tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_general.txt"&gt;/tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170501 18:38:05.528" endtime="20170501 18:38:05.529" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:05.528" endtime="20170501 18:38:05.529" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Test Setup Info">
<doc>BMC IP, Model and other information</doc>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170501 18:38:05.530">Appended to file '&lt;a href="file:///tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_general.txt"&gt;/tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170501 18:38:05.530" endtime="20170501 18:38:05.530" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:05.529" endtime="20170501 18:38:05.531" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170501 18:38:05.531">Appended to file '&lt;a href="file:///tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_general.txt"&gt;/tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170501 18:38:05.531" endtime="20170501 18:38:05.532" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:05.531" endtime="20170501 18:38:05.532" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170501 18:38:05.533">Appended to file '&lt;a href="file:///tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_general.txt"&gt;/tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170501 18:38:05.532" endtime="20170501 18:38:05.533" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:05.532" endtime="20170501 18:38:05.533" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170501 18:38:05.535">Appended to file '&lt;a href="file:///tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_general.txt"&gt;/tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170501 18:38:05.534" endtime="20170501 18:38:05.535" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:05.533" endtime="20170501 18:38:05.535" status="PASS"></status>
</kw>
<kw library="utils" name="Get BMC System Model">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170501 18:38:05.537">Dictionary does not contain key 'host'.</msg>
<status starttime="20170501 18:38:05.537" endtime="20170501 18:38:05.537" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:38:05.537">${has_host} = False</msg>
<status starttime="20170501 18:38:05.536" endtime="20170501 18:38:05.537" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170501 18:38:05.538" endtime="20170501 18:38:05.539" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:05.538" endtime="20170501 18:38:05.539" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:05.540">${port_num} = 22</msg>
<status starttime="20170501 18:38:05.540" endtime="20170501 18:38:05.540" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:05.541">${SSH_PORT} = 22</msg>
<status starttime="20170501 18:38:05.540" endtime="20170501 18:38:05.541" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:05.541">${https_num} = 443</msg>
<status starttime="20170501 18:38:05.541" endtime="20170501 18:38:05.541" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:05.542">${AUTH_URI} = https://9.41.166.169:443</msg>
<status starttime="20170501 18:38:05.542" endtime="20170501 18:38:05.542" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:05.539" endtime="20170501 18:38:05.542" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:05.539" endtime="20170501 18:38:05.542" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170501 18:38:05.543">Dictionary does not contain key 'port'.</msg>
<status starttime="20170501 18:38:05.543" endtime="20170501 18:38:05.543" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:38:05.544">${has_port} = False</msg>
<status starttime="20170501 18:38:05.543" endtime="20170501 18:38:05.544" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170501 18:38:05.545" endtime="20170501 18:38:05.545" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170501 18:38:05.546" endtime="20170501 18:38:05.547" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:05.545" endtime="20170501 18:38:05.547" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:05.544" endtime="20170501 18:38:05.547" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:05.547">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170501 18:38:07.194">Read output: root@witherspoon:~#</msg>
<status starttime="20170501 18:38:05.547" endtime="20170501 18:38:07.195" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:05.535" endtime="20170501 18:38:07.195" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:07.196">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg level="INFO" timestamp="20170501 18:38:07.263">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170501 18:38:07.263">${bmc_model} = Witherspoon</msg>
<msg level="INFO" timestamp="20170501 18:38:07.263">${stderr} = </msg>
<status starttime="20170501 18:38:07.195" endtime="20170501 18:38:07.263" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:07.264">Length is 0</msg>
<status starttime="20170501 18:38:07.264" endtime="20170501 18:38:07.264" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:07.264">Length is 11</msg>
<status starttime="20170501 18:38:07.264" endtime="20170501 18:38:07.264" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:38:07.265">${model_name} = Witherspoon</msg>
<status starttime="20170501 18:38:05.535" endtime="20170501 18:38:07.265" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170501 18:38:07.266">Appended to file '&lt;a href="file:///tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_general.txt"&gt;/tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170501 18:38:07.266" endtime="20170501 18:38:07.266" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:07.265" endtime="20170501 18:38:07.266" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:05.529" endtime="20170501 18:38:07.266" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170501 18:38:07.268">Appended to file '&lt;a href="file:///tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_general.txt"&gt;/tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170501 18:38:07.267" endtime="20170501 18:38:07.268" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:07.267" endtime="20170501 18:38:07.268" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Ffdc Cmd Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:07.268">@{entries} = [ BMC DATA | DRIVER INFO | APPLICATION DATA ]</msg>
<status starttime="20170501 18:38:07.268" endtime="20170501 18:38:07.268" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC DATA" type="foritem">
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170501 18:38:07.270">Appended to file '&lt;a href="file:///tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_general.txt"&gt;/tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170501 18:38:07.269" endtime="20170501 18:38:07.270" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:07.269" endtime="20170501 18:38:07.270" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170501 18:38:07.271">Appended to file '&lt;a href="file:///tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_general.txt"&gt;/tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170501 18:38:07.271" endtime="20170501 18:38:07.271" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:07.270" endtime="20170501 18:38:07.271" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:07.269" endtime="20170501 18:38:07.271" status="PASS"></status>
</kw>
<kw name="${index} = DRIVER INFO" type="foritem">
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170501 18:38:07.273">Appended to file '&lt;a href="file:///tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_general.txt"&gt;/tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170501 18:38:07.272" endtime="20170501 18:38:07.273" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:07.271" endtime="20170501 18:38:07.273" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170501 18:38:07.274">Appended to file '&lt;a href="file:///tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_general.txt"&gt;/tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170501 18:38:07.273" endtime="20170501 18:38:07.274" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:07.273" endtime="20170501 18:38:07.274" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:07.271" endtime="20170501 18:38:07.274" status="PASS"></status>
</kw>
<kw name="${index} = APPLICATION DATA" type="foritem">
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170501 18:38:07.275">Appended to file '&lt;a href="file:///tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_general.txt"&gt;/tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170501 18:38:07.275" endtime="20170501 18:38:07.275" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:07.274" endtime="20170501 18:38:07.275" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170501 18:38:07.276">Appended to file '&lt;a href="file:///tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_general.txt"&gt;/tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170501 18:38:07.276" endtime="20170501 18:38:07.277" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:07.276" endtime="20170501 18:38:07.277" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:07.274" endtime="20170501 18:38:07.277" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:07.268" endtime="20170501 18:38:07.277" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170501 18:38:07.278">Appended to file '&lt;a href="file:///tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_general.txt"&gt;/tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170501 18:38:07.277" endtime="20170501 18:38:07.278" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:07.277" endtime="20170501 18:38:07.278" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:05.516" endtime="20170501 18:38:07.278" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Call FFDC Methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:07.284">@{entries} = [ BMC LOGS ]</msg>
<status starttime="20170501 18:38:07.284" endtime="20170501 18:38:07.285" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC LOGS" type="foritem">
<kw library="openbmc_ffdc_methods" name="Method Call Keyword List">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Call">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:07.286">@{method_list} = [ ('Core Files', 'SCP Coredump Files') | ('FFDC Generic Report', 'BMC FFDC Manifest') | ('OS FFDC', 'OS FFDC Files') | ('SEL Log', 'Collect eSEL Log') | ('BMC Specific Files', 'BMC FFDC Files') | ('Ge...</msg>
<status starttime="20170501 18:38:07.286" endtime="20170501 18:38:07.286" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Desc">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status starttime="20170501 18:38:07.287" endtime="20170501 18:38:07.287" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:38:07.287">@{ffdc_function_list} = [ Core Files | FFDC Generic Report | OS FFDC | SEL Log | BMC Specific Files | Get Request FFDC ]</msg>
<status starttime="20170501 18:38:07.286" endtime="20170501 18:38:07.287" status="PASS"></status>
</kw>
<kw name="${method} IN [ @{method_list} ]" type="for">
<kw name="${method} = ('Core Files', 'SCP Coredump Files')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170501 18:38:07.289" endtime="20170501 18:38:07.289" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:38:07.289">${status} = PASS</msg>
<msg level="INFO" timestamp="20170501 18:38:07.289">${ret_values} = None</msg>
<status starttime="20170501 18:38:07.289" endtime="20170501 18:38:07.290" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170501 18:38:07.290" endtime="20170501 18:38:07.290" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="SCP Coredump Files">
<doc>Copy core dump file from BMC to local system.</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170501 18:38:07.316">Dictionary does not contain key 'host'.</msg>
<status starttime="20170501 18:38:07.316" endtime="20170501 18:38:07.316" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:38:07.316">${has_host} = False</msg>
<status starttime="20170501 18:38:07.315" endtime="20170501 18:38:07.316" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170501 18:38:07.317" endtime="20170501 18:38:07.317" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:07.317" endtime="20170501 18:38:07.318" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:07.319">${port_num} = 22</msg>
<status starttime="20170501 18:38:07.319" endtime="20170501 18:38:07.319" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:07.320">${SSH_PORT} = 22</msg>
<status starttime="20170501 18:38:07.319" endtime="20170501 18:38:07.320" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:07.320">${https_num} = 443</msg>
<status starttime="20170501 18:38:07.320" endtime="20170501 18:38:07.320" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:07.321">${AUTH_URI} = https://9.41.166.169:443</msg>
<status starttime="20170501 18:38:07.320" endtime="20170501 18:38:07.321" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:07.318" endtime="20170501 18:38:07.321" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:07.318" endtime="20170501 18:38:07.321" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170501 18:38:07.323">Dictionary does not contain key 'port'.</msg>
<status starttime="20170501 18:38:07.322" endtime="20170501 18:38:07.323" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:38:07.323">${has_port} = False</msg>
<status starttime="20170501 18:38:07.321" endtime="20170501 18:38:07.323" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170501 18:38:07.324" endtime="20170501 18:38:07.324" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170501 18:38:07.325" endtime="20170501 18:38:07.325" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:07.324" endtime="20170501 18:38:07.325" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:07.323" endtime="20170501 18:38:07.325" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:07.326">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170501 18:38:08.972">Read output: root@witherspoon:~#</msg>
<status starttime="20170501 18:38:07.325" endtime="20170501 18:38:08.972" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:07.315" endtime="20170501 18:38:08.972" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:08.973">Executing command 'ls /tmp/core_*'.</msg>
<msg level="INFO" timestamp="20170501 18:38:09.019">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170501 18:38:09.020">${core_files} = /tmp/core_phosphor-hwmon-.1589</msg>
<status starttime="20170501 18:38:08.973" endtime="20170501 18:38:09.020" status="PASS"></status>
</kw>
<kw library="String" name="Split String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:09.020">@{core_list} = [ /tmp/core_phosphor-hwmon-.1589 ]</msg>
<status starttime="20170501 18:38:09.020" endtime="20170501 18:38:09.020" status="PASS"></status>
</kw>
<kw library="connection_client" name="Open Connection for SCP">
<kw library="BuiltIn" name="Import Library">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status starttime="20170501 18:38:09.021" endtime="20170501 18:38:09.038" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw library="scp" name="Open Connection">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status starttime="20170501 18:38:09.040" endtime="20170501 18:38:09.775" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:09.039" endtime="20170501 18:38:09.775" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:09.038" endtime="20170501 18:38:09.775" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:09.020" endtime="20170501 18:38:09.776" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{core_list} ]" type="for">
<kw name="${index} = /tmp/core_phosphor-hwmon-.1589" type="foritem">
<kw library="scp" name="Get File">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status starttime="20170501 18:38:09.776" endtime="20170501 18:38:10.032" status="PASS"></status>
</kw>
<kw library="utils" name="Execute Command On BMC">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:10.034">Executing command 'rm /tmp/core_phosphor-hwmon-.1589'.</msg>
<msg level="INFO" timestamp="20170501 18:38:10.080">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170501 18:38:10.080">${stdout} = </msg>
<msg level="INFO" timestamp="20170501 18:38:10.080">${stderr} = </msg>
<status starttime="20170501 18:38:10.033" endtime="20170501 18:38:10.080" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:10.081">Length is 0</msg>
<status starttime="20170501 18:38:10.080" endtime="20170501 18:38:10.081" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:10.033" endtime="20170501 18:38:10.081" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:09.776" endtime="20170501 18:38:10.081" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:09.776" endtime="20170501 18:38:10.081" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:07.314" endtime="20170501 18:38:10.081" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:07.291" endtime="20170501 18:38:10.081" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:07.288" endtime="20170501 18:38:10.081" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:07.288" endtime="20170501 18:38:10.081" status="PASS"></status>
</kw>
<kw name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170501 18:38:10.083" endtime="20170501 18:38:10.083" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:38:10.083">${status} = PASS</msg>
<msg level="INFO" timestamp="20170501 18:38:10.083">${ret_values} = None</msg>
<status starttime="20170501 18:38:10.083" endtime="20170501 18:38:10.084" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170501 18:38:10.084" endtime="20170501 18:38:10.084" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Manifest">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170501 18:38:10.110">Dictionary does not contain key 'host'.</msg>
<status starttime="20170501 18:38:10.110" endtime="20170501 18:38:10.110" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:38:10.110">${has_host} = False</msg>
<status starttime="20170501 18:38:10.109" endtime="20170501 18:38:10.110" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170501 18:38:10.111" endtime="20170501 18:38:10.112" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:10.110" endtime="20170501 18:38:10.112" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:10.113">${port_num} = 22</msg>
<status starttime="20170501 18:38:10.113" endtime="20170501 18:38:10.113" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:10.114">${SSH_PORT} = 22</msg>
<status starttime="20170501 18:38:10.113" endtime="20170501 18:38:10.114" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:10.114">${https_num} = 443</msg>
<status starttime="20170501 18:38:10.114" endtime="20170501 18:38:10.114" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:10.115">${AUTH_URI} = https://9.41.166.169:443</msg>
<status starttime="20170501 18:38:10.115" endtime="20170501 18:38:10.115" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:10.112" endtime="20170501 18:38:10.115" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:10.112" endtime="20170501 18:38:10.115" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170501 18:38:10.116">Dictionary does not contain key 'port'.</msg>
<status starttime="20170501 18:38:10.116" endtime="20170501 18:38:10.116" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:38:10.117">${has_port} = False</msg>
<status starttime="20170501 18:38:10.116" endtime="20170501 18:38:10.117" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170501 18:38:10.118" endtime="20170501 18:38:10.118" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170501 18:38:10.119" endtime="20170501 18:38:10.119" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:10.118" endtime="20170501 18:38:10.119" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:10.117" endtime="20170501 18:38:10.119" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:10.120">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170501 18:38:11.765">Read output: root@witherspoon:~#</msg>
<status starttime="20170501 18:38:10.119" endtime="20170501 18:38:11.765" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:10.109" endtime="20170501 18:38:11.765" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Ffdc Cmd Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:11.766">@{entries} = [ BMC DATA | DRIVER INFO | APPLICATION DATA ]</msg>
<status starttime="20170501 18:38:11.765" endtime="20170501 18:38:11.766" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC DATA" type="foritem">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:11.767">@{cmd_list} = [ ('BMC OS', 'uname -a') | ('BMC File System Disk Space Usage', 'df -hT') | ('BMC Uptime', 'uptime') ]</msg>
<status starttime="20170501 18:38:11.767" endtime="20170501 18:38:11.767" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:11.772">${ENTRY_INDEX} = BMC DATA</msg>
<status starttime="20170501 18:38:11.767" endtime="20170501 18:38:11.773" status="PASS"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC OS', 'uname -a')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170501 18:38:11.776">Appended to file '&lt;a href="file:///tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_general.txt"&gt;/tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170501 18:38:11.775" endtime="20170501 18:38:11.776" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:11.775" endtime="20170501 18:38:11.776" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170501 18:38:11.777">Appended to file '&lt;a href="file:///tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_general.txt"&gt;/tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170501 18:38:11.777" endtime="20170501 18:38:11.777" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:11.776" endtime="20170501 18:38:11.778" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170501 18:38:11.779">Appended to file '&lt;a href="file:///tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_general.txt"&gt;/tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170501 18:38:11.778" endtime="20170501 18:38:11.779" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:11.778" endtime="20170501 18:38:11.779" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170501 18:38:11.780">Appended to file '&lt;a href="file:///tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_general.txt"&gt;/tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170501 18:38:11.779" endtime="20170501 18:38:11.780" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:11.779" endtime="20170501 18:38:11.780" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:11.774" endtime="20170501 18:38:11.780" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:11.774" endtime="20170501 18:38:11.780" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:11.781">Executing command 'uname -a'.</msg>
<msg level="INFO" timestamp="20170501 18:38:11.837">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170501 18:38:11.838">${stdout} = Linux witherspoon 4.7.10-b6e95d08c1fd39409fe0d127007a4166024fc8e7 #1 Mon May 1 17:22:14 UTC 2017 armv6l GNU/Linux</msg>
<msg level="INFO" timestamp="20170501 18:38:11.838">${stderr} = </msg>
<status starttime="20170501 18:38:11.780" endtime="20170501 18:38:11.838" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170501 18:38:11.844">Appended to file '&lt;a href="file:///tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_general.txt"&gt;/tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170501 18:38:11.844" endtime="20170501 18:38:11.844" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:11.843" endtime="20170501 18:38:11.845" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:11.838" endtime="20170501 18:38:11.845" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:11.773" endtime="20170501 18:38:11.845" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:11.773" endtime="20170501 18:38:11.845" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170501 18:38:11.848">Appended to file '&lt;a href="file:///tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_general.txt"&gt;/tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170501 18:38:11.848" endtime="20170501 18:38:11.848" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:11.847" endtime="20170501 18:38:11.848" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170501 18:38:11.850">Appended to file '&lt;a href="file:///tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_general.txt"&gt;/tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170501 18:38:11.849" endtime="20170501 18:38:11.850" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:11.849" endtime="20170501 18:38:11.850" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170501 18:38:11.851">Appended to file '&lt;a href="file:///tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_general.txt"&gt;/tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170501 18:38:11.850" endtime="20170501 18:38:11.851" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:11.850" endtime="20170501 18:38:11.851" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170501 18:38:11.852">Appended to file '&lt;a href="file:///tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_general.txt"&gt;/tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170501 18:38:11.852" endtime="20170501 18:38:11.852" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:11.851" endtime="20170501 18:38:11.852" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:11.846" endtime="20170501 18:38:11.852" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:11.846" endtime="20170501 18:38:11.853" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:11.853">Executing command 'df -hT'.</msg>
<msg level="INFO" timestamp="20170501 18:38:11.938">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170501 18:38:11.938">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.1M         0    210.1M   0% /dev
tmpfs                tmpfs         211.4M     13.9...</msg>
<msg level="INFO" timestamp="20170501 18:38:11.938">${stderr} = </msg>
<status starttime="20170501 18:38:11.853" endtime="20170501 18:38:11.938" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170501 18:38:11.944">Appended to file '&lt;a href="file:///tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_general.txt"&gt;/tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170501 18:38:11.943" endtime="20170501 18:38:11.944" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:11.943" endtime="20170501 18:38:11.944" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:11.938" endtime="20170501 18:38:11.944" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:11.845" endtime="20170501 18:38:11.944" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:11.845" endtime="20170501 18:38:11.945" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC Uptime', 'uptime')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170501 18:38:11.948">Appended to file '&lt;a href="file:///tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_general.txt"&gt;/tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170501 18:38:11.947" endtime="20170501 18:38:11.948" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:11.947" endtime="20170501 18:38:11.948" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170501 18:38:11.949">Appended to file '&lt;a href="file:///tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_general.txt"&gt;/tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170501 18:38:11.949" endtime="20170501 18:38:11.949" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:11.948" endtime="20170501 18:38:11.950" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170501 18:38:11.951">Appended to file '&lt;a href="file:///tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_general.txt"&gt;/tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170501 18:38:11.950" endtime="20170501 18:38:11.951" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:11.950" endtime="20170501 18:38:11.951" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170501 18:38:11.952">Appended to file '&lt;a href="file:///tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_general.txt"&gt;/tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170501 18:38:11.951" endtime="20170501 18:38:11.952" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:11.951" endtime="20170501 18:38:11.952" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:11.946" endtime="20170501 18:38:11.952" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:11.946" endtime="20170501 18:38:11.952" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:11.953">Executing command 'uptime'.</msg>
<msg level="INFO" timestamp="20170501 18:38:12.027">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170501 18:38:12.028">${stdout} =  17:54:15 up 25 min,  load average: 1.19, 1.26, 1.28</msg>
<msg level="INFO" timestamp="20170501 18:38:12.028">${stderr} = </msg>
<status starttime="20170501 18:38:11.952" endtime="20170501 18:38:12.028" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170501 18:38:12.034">Appended to file '&lt;a href="file:///tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_general.txt"&gt;/tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170501 18:38:12.033" endtime="20170501 18:38:12.034" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:12.032" endtime="20170501 18:38:12.034" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:12.028" endtime="20170501 18:38:12.034" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:11.945" endtime="20170501 18:38:12.034" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:11.945" endtime="20170501 18:38:12.034" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:11.773" endtime="20170501 18:38:12.034" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:11.766" endtime="20170501 18:38:12.035" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:11.766" endtime="20170501 18:38:12.035" status="PASS"></status>
</kw>
<kw name="${index} = DRIVER INFO" type="foritem">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:12.036">@{cmd_list} = [ ('FW Level', 'cat /etc/os-release') | ('Build Info', 'cat /etc/version') ]</msg>
<status starttime="20170501 18:38:12.035" endtime="20170501 18:38:12.036" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:12.037">${ENTRY_INDEX} = DRIVER INFO</msg>
<status starttime="20170501 18:38:12.036" endtime="20170501 18:38:12.037" status="PASS"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('FW Level', 'cat /etc/os-release')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170501 18:38:12.040">Appended to file '&lt;a href="file:///tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_general.txt"&gt;/tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170501 18:38:12.039" endtime="20170501 18:38:12.040" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:12.039" endtime="20170501 18:38:12.040" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170501 18:38:12.041">Appended to file '&lt;a href="file:///tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_general.txt"&gt;/tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170501 18:38:12.041" endtime="20170501 18:38:12.041" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:12.040" endtime="20170501 18:38:12.041" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170501 18:38:12.042">Appended to file '&lt;a href="file:///tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_general.txt"&gt;/tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170501 18:38:12.042" endtime="20170501 18:38:12.042" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:12.041" endtime="20170501 18:38:12.042" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170501 18:38:12.044">Appended to file '&lt;a href="file:///tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_general.txt"&gt;/tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170501 18:38:12.043" endtime="20170501 18:38:12.044" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:12.043" endtime="20170501 18:38:12.044" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:12.038" endtime="20170501 18:38:12.044" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:12.038" endtime="20170501 18:38:12.044" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:12.045">Executing command 'cat /etc/os-release'.</msg>
<msg level="INFO" timestamp="20170501 18:38:12.103">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170501 18:38:12.103">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.4-78"
VERSION_ID="v1.99.4-78-g4c673c6"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Project ...</msg>
<msg level="INFO" timestamp="20170501 18:38:12.103">${stderr} = </msg>
<status starttime="20170501 18:38:12.044" endtime="20170501 18:38:12.103" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170501 18:38:12.109">Appended to file '&lt;a href="file:///tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_general.txt"&gt;/tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170501 18:38:12.109" endtime="20170501 18:38:12.109" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:12.108" endtime="20170501 18:38:12.109" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:12.104" endtime="20170501 18:38:12.109" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:12.037" endtime="20170501 18:38:12.110" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:12.037" endtime="20170501 18:38:12.110" status="PASS"></status>
</kw>
<kw name="${cmd} = ('Build Info', 'cat /etc/version')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170501 18:38:12.113">Appended to file '&lt;a href="file:///tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_general.txt"&gt;/tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170501 18:38:12.112" endtime="20170501 18:38:12.113" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:12.111" endtime="20170501 18:38:12.113" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170501 18:38:12.114">Appended to file '&lt;a href="file:///tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_general.txt"&gt;/tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170501 18:38:12.114" endtime="20170501 18:38:12.114" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:12.113" endtime="20170501 18:38:12.114" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170501 18:38:12.115">Appended to file '&lt;a href="file:///tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_general.txt"&gt;/tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170501 18:38:12.115" endtime="20170501 18:38:12.116" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:12.115" endtime="20170501 18:38:12.116" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170501 18:38:12.117">Appended to file '&lt;a href="file:///tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_general.txt"&gt;/tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170501 18:38:12.116" endtime="20170501 18:38:12.117" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:12.116" endtime="20170501 18:38:12.117" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:12.111" endtime="20170501 18:38:12.117" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:12.111" endtime="20170501 18:38:12.117" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:12.118">Executing command 'cat /etc/version'.</msg>
<msg level="INFO" timestamp="20170501 18:38:12.192">Command exited with return code 1.</msg>
<msg level="INFO" timestamp="20170501 18:38:12.192">${stdout} = </msg>
<msg level="INFO" timestamp="20170501 18:38:12.193">${stderr} = cat: can't open '/etc/version': No such file or directory</msg>
<status starttime="20170501 18:38:12.117" endtime="20170501 18:38:12.193" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170501 18:38:12.198">Appended to file '&lt;a href="file:///tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_general.txt"&gt;/tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170501 18:38:12.198" endtime="20170501 18:38:12.199" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:12.197" endtime="20170501 18:38:12.199" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:12.193" endtime="20170501 18:38:12.199" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:12.110" endtime="20170501 18:38:12.199" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:12.110" endtime="20170501 18:38:12.199" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:12.037" endtime="20170501 18:38:12.199" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:12.035" endtime="20170501 18:38:12.199" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:12.035" endtime="20170501 18:38:12.199" status="PASS"></status>
</kw>
<kw name="${index} = APPLICATION DATA" type="foritem">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:12.200">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil  state') ]</msg>
<status starttime="20170501 18:38:12.200" endtime="20170501 18:38:12.200" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:12.201">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status starttime="20170501 18:38:12.200" endtime="20170501 18:38:12.201" status="PASS"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC state', '/usr/sbin/obmcutil  state')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170501 18:38:12.204">Appended to file '&lt;a href="file:///tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_general.txt"&gt;/tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170501 18:38:12.204" endtime="20170501 18:38:12.204" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:12.203" endtime="20170501 18:38:12.204" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170501 18:38:12.205">Appended to file '&lt;a href="file:///tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_general.txt"&gt;/tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170501 18:38:12.205" endtime="20170501 18:38:12.205" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:12.204" endtime="20170501 18:38:12.206" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170501 18:38:12.207">Appended to file '&lt;a href="file:///tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_general.txt"&gt;/tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170501 18:38:12.206" endtime="20170501 18:38:12.208" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:12.206" endtime="20170501 18:38:12.208" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170501 18:38:12.209">Appended to file '&lt;a href="file:///tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_general.txt"&gt;/tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170501 18:38:12.209" endtime="20170501 18:38:12.209" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:12.208" endtime="20170501 18:38:12.210" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:12.203" endtime="20170501 18:38:12.210" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:12.202" endtime="20170501 18:38:12.210" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:12.210">Executing command '/usr/sbin/obmcutil  state'.</msg>
<msg level="INFO" timestamp="20170501 18:38:13.494">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170501 18:38:13.494">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.On
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Quiesc...</msg>
<msg level="INFO" timestamp="20170501 18:38:13.494">${stderr} = </msg>
<status starttime="20170501 18:38:12.210" endtime="20170501 18:38:13.494" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170501 18:38:13.500">Appended to file '&lt;a href="file:///tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_general.txt"&gt;/tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170501 18:38:13.500" endtime="20170501 18:38:13.500" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:13.499" endtime="20170501 18:38:13.500" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:13.494" endtime="20170501 18:38:13.500" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:12.201" endtime="20170501 18:38:13.501" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:12.201" endtime="20170501 18:38:13.501" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:12.201" endtime="20170501 18:38:13.501" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:12.199" endtime="20170501 18:38:13.501" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:12.199" endtime="20170501 18:38:13.501" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:11.766" endtime="20170501 18:38:13.501" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:10.108" endtime="20170501 18:38:13.501" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:10.084" endtime="20170501 18:38:13.501" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:10.082" endtime="20170501 18:38:13.501" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:10.081" endtime="20170501 18:38:13.501" status="PASS"></status>
</kw>
<kw name="${method} = ('OS FFDC', 'OS FFDC Files')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170501 18:38:13.503" endtime="20170501 18:38:13.503" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:38:13.503">${status} = PASS</msg>
<msg level="INFO" timestamp="20170501 18:38:13.503">${ret_values} = None</msg>
<status starttime="20170501 18:38:13.502" endtime="20170501 18:38:13.503" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170501 18:38:13.504" endtime="20170501 18:38:13.504" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="OS FFDC Files">
<doc>Get the command list and iterate</doc>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:13.528">Returning from the enclosing user keyword.</msg>
<status starttime="20170501 18:38:13.528" endtime="20170501 18:38:13.529" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:13.528" endtime="20170501 18:38:13.529" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:13.504" endtime="20170501 18:38:13.529" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:13.502" endtime="20170501 18:38:13.529" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:13.501" endtime="20170501 18:38:13.529" status="PASS"></status>
</kw>
<kw name="${method} = ('SEL Log', 'Collect eSEL Log')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170501 18:38:13.530" endtime="20170501 18:38:13.531" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:38:13.531">${status} = PASS</msg>
<msg level="INFO" timestamp="20170501 18:38:13.531">${ret_values} = None</msg>
<status starttime="20170501 18:38:13.530" endtime="20170501 18:38:13.531" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170501 18:38:13.531" endtime="20170501 18:38:13.531" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="Collect eSEL Log">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:13.559">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170501 18:38:13.559" endtime="20170501 18:38:13.560" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:13.560">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170501 18:38:13.560" endtime="20170501 18:38:13.561" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:13.561">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170501 18:38:13.561" endtime="20170501 18:38:13.561" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:13.562">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170501 18:38:13.561" endtime="20170501 18:38:13.562" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:13.740">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170501 18:38:13.563" endtime="20170501 18:38:13.740" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:38:13.740">${status} = PASS</msg>
<msg level="INFO" timestamp="20170501 18:38:13.740">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:38:13.562" endtime="20170501 18:38:13.741" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:13.741">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:38:13.741" endtime="20170501 18:38:13.741" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:13.742">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:38:13.741" endtime="20170501 18:38:13.742" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:13.558" endtime="20170501 18:38:13.742" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:13.557" endtime="20170501 18:38:13.742" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:13.557" endtime="20170501 18:38:13.742" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:13.743">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status starttime="20170501 18:38:13.743" endtime="20170501 18:38:13.743" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170501 18:38:13.743" endtime="20170501 18:38:13.744" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:13.931">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170501 18:38:13.931">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:38:13.744" endtime="20170501 18:38:13.931" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170501 18:38:13.932" endtime="20170501 18:38:13.932" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:38:13.932">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:38:13.556" endtime="20170501 18:38:13.932" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:13.933">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:38:13.933" endtime="20170501 18:38:13.933" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:38:13.933">${status} = True</msg>
<status starttime="20170501 18:38:13.933" endtime="20170501 18:38:13.933" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<status starttime="20170501 18:38:13.934" endtime="20170501 18:38:13.934" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:13.935">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/1": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 04 53 14 ba 4f 00 00 00 04 53 15 83 f8 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 11 90 00 00 11 55 48 00 18 01 00 17 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 0e 00 48 00 00 00 e0 00 00 0a 00 00 00 00 00 00 20 00 00 00 05 00 01 00 2d 00 04 00 00 00 00 00 00 00 00 42 43 38 41 31 37 30 45 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 03 b6 dc 00 00 00 00 55 44 00 4c 01 02 01 00 ee ee ee ee 54 61 72 67 65 74 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 05 00 01 00 00 00 03 00 00 00 05 00 00 00 14 0f 7a bb 7c 23 01 00 02 00 05 01 0b 5a fc d7 13 01 00 02 00 05 01 00 00 55 44 00 30 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 04 cd e4 00 00 00 00 40 04 ab 68 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00"
      ], 
      "Id": 1, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1492710282318, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/2": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 04 53 14 ba 4f 00 00 00 04 53 15 83 f8 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 11 90 00 00 11 55 48 00 18 01 00 17 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 0e 00 48 00 00 00 e0 00 00 0a 00 00 00 00 00 00 20 00 00 00 05 00 01 00 2d 00 04 00 00 00 00 00 00 00 00 42 43 38 41 31 37 30 45 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 03 b6 dc 00 00 00 00 55 44 00 4c 01 02 01 00 ee ee ee ee 54 61 72 67 65 74 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 05 00 01 00 00 00 03 00 00 00 05 00 00 00 14 0f 7a bb 7c 23 01 00 02 00 05 01 0b 5a fc d7 13 01 00 02 00 05 01 00 00 55 44 00 30 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 04 cd e4 00 00 00 00 40 04 ab 68 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00"
      ], 
      "Id": 2, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1492710285367, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/3": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 04 c2 db f7 0d 00 00 00 04 c2 de 01 89 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 12 90 00 00 12 55 48 00 18 01 00 07 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 05 00 48 00 00 00 e0 00 00 05 00 00 00 00 00 00 20 00 00 00 01 00 00 00 05 00 01 02 00 ff ff 01 90 00 4d 42 43 31 30 30 37 30 35 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 04 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 03 b6 dc 00 00 00 00 55 44 00 50 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 27 a3 b4 00 00 00 00 40 27 ac 88 00 00 00 00 40 27 ad e4 00 00 00 00 40 27 cd 28 00 00 00 00 40 27 cf 10 00 00 00 00 40 0d 40 bc 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 00 fc 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 f4 00 00 00 00 00 00 00 f4 00 00 00 05 00 00 00 00 00 00 00 27 36 c1 09 a9 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 27 36 c4 1b b8 00 00 00 d1 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 27 36 c4 2c 87 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 27 36 c4 5f 0a 00 00 00 d1 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 27 38 00 c5 8d 00 00 00 d1 00 08 43 4f 65 c9 23 ee 00 00 07 6b 00 01 00 00 00 00 00 00 00 00 00 24"
      ], 
      "Id": 3, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1492710291298, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/4": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 09 00 00 00 00 05 76 91 df aa 00 00 00 05 78 20 99 ad 42 00 00 0d 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 13 90 00 00 13 55 48 00 18 01 00 09 00 75 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 09 0f 00 48 00 00 00 e0 00 00 01 00 00 00 00 00 02 20 00 00 00 00 00 00 00 33 e2 1a 00 00 00 00 00 00 00 00 42 43 37 35 30 39 30 46 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 2c 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 02 00 00 00 00 00 00 00 06 26 01 00 02 00 05 01 25 01 0b 00 24 01 00 00 00 55 44 00 0c 01 01 09 00 00 33 e2 1a 55 44 00 14 01 02 09 00 09 64 a0 0c 00 00 00 00 00 00 00 00 55 44 00 14 01 02 09 00 77 14 09 28 00 00 00 00 00 00 00 a0 55 44 00 50 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 1e c5 d4 00 00 00 00 40 1e c6 e0 00 00 00 00 40 1e c7 b4 00 00 00 00 40 42 15 40 00 00 00 00 40 10 f9 84 00 00 00 00 40 0e d3 18 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 00 cc 01 15 31 00 01 28 00 42 46 41 50 49 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 c4 00 00 00 00 00 00 00 c4 00 00 00 03 00 00 00 00 00 00 00 2d 31 50 46 f6 00 00 00 ec 00 1c 43 4f b2 95 8f fa 00 00 00 69 70 75 2e 6d 63 62 69 73 74 3a 6b 30 3a 6e 30 3a 73 30 3a 70 30 31 3a 63 31 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 2d 31 5a 3f 22 00 00 00 ec 00 1c 43 4f 70 49 5a 04 00 00 01 aa 70 75 2e 6d 63 62 69 73 74 3a 6b 30 3a 6e 30 3a 73 30 3a 70 30 31 3a 63 31 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 2d 31 5e f1 86 00 00 00 ec 00 08 43 4f 25 60 10 27 00 00 00 90 00 00 00 00 00 00 00 01 00 00 00 24 55 44 01 84 01 15 31 00 01 28 00 42 46 41 50 49 5f 49 00 00 00 00 00 00 00 00 00 00 00 00 01 7c 00 00 00 00 00 00 01 7c 00 00 00 07 00 00 00 00 00 00 00 2a 28 d2 a3 a1 00 00 00 d1 00 20 43 4f 79 5d 7d 7b 00 00 03 2c 00 00 00 00 00 00 00 31 00 00 00 00 00 00 00 e4 00 00 00 00 00 00 00 1c 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 2a 28 d5 10 bf 00 00 00 d1 00 20 43 4f 79 5d 7d 7b 00 00 03 2c 00 00 00 00 00 00 00 32 00 00 00 00 00 00 00 e4 00 00 00 00 00 00 00 1c 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 2a 28 d7 6d 59 00 00 00 d1 00 20 43 4f 79 5d 7d 7b 00 00 03 2c 00 00 00 00 00 00 00 34 00 00 00 00 00 00 00 e4 00 00 00 00 00 00 00 1c 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 2a 28 d9 c9 94 00 00 00 d1 00 20 43 4f 79 5d 7d 7b 00 00 03 2c 00 00 00 00 00 00 00 35 00 00 00 00 00 00 00 e4 00 00 00 00 00 00 00 1c 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 2d 31 5e ff 42 00 00 00 ec 00 00 43 4f 0b b1 67 60 00 00 0b b3 00 00 00 1c 00 00 00 2d 31 5f 0b 4c 00 00 00 ec 00 08 43 4f f6 cf 06 d1 00 00 00 78 00 00 00 00 00 33 e2 1a 00 00 00 24 00 00 00 2d 31 5f 57 26 00 00 00 ec 00 08 43 4f e3 80 24 18 00 00 03 48 00 00 00 00 00 33 e2 1a 00 00 00 24 55 44 00 30 01 15 31 00 01 28 00 42 53 43 41 4e 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 00 55 44 00 30 01 15 31 00 01 28 00 42 46 41 50 49 5f 44 42 47 00 00 00 00 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 00"
      ], 
      "Id": 4, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1492710295162, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/5": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 05 78 20 02 40 00 00 00 05 93 10 b7 62 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 14 90 00 00 15 55 48 00 18 01 00 05 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 03 00 48 00 00 00 e0 00 00 01 00 00 00 00 00 00 20 00 00 90 00 00 14 00 00 09 0f 00 00 00 01 00 00 0d 09 42 43 38 41 31 37 30 33 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 63 2e 73 6f 00 00 00 00 55 44 00 10 01 03 09 00 90 00 00 14 00 00 09 0f 55 44 00 3c 01 01 01 00 6d 73 73 5f 64 64 72 5f 70 68 79 5f 72 65 73 65 74 00 6c 69 62 69 73 74 65 70 64 69 73 70 2e 73 6f 00 6c 69 62 65 78 74 69 6e 69 74 73 76 63 2e 73 6f 00 00 55 44 00 30 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 16 17 b0 00 00 00 00 40 0e d2 90 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00"
      ], 
      "Id": 5, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1492710296143, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170501 18:38:13.935">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170501 18:38:13.935">${content} = {u'data': {u'/xyz/openbmc_project/logging/entry/4': {u'Id': 4, u'Message': u'org.open_power.Error.Host.Event.Event', u'AdditionalData': [u'ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00...</msg>
<status starttime="20170501 18:38:13.934" endtime="20170501 18:38:13.935" status="PASS"></status>
</kw>
<kw library="Collections" name="Get Dictionary Keys">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${content['data']}</arg>
</arguments>
<assign>
<var>${esel_list}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:13.936">${esel_list} = [u'/xyz/openbmc_project/logging/entry/1', u'/xyz/openbmc_project/logging/entry/2', u'/xyz/openbmc_project/logging/entry/3', u'/xyz/openbmc_project/logging/entry/4', u'/xyz/openbmc_project/logging/entr...</msg>
<status starttime="20170501 18:38:13.936" endtime="20170501 18:38:13.936" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>esel</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:13.937">${logpath} = /tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_esel</msg>
<status starttime="20170501 18:38:13.936" endtime="20170501 18:38:13.937" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${logpath}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170501 18:38:13.937">Created file '&lt;a href="file:///tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_esel"&gt;/tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_esel&lt;/a&gt;'.</msg>
<status starttime="20170501 18:38:13.937" endtime="20170501 18:38:13.937" status="PASS"></status>
</kw>
<kw name="${entry_path} IN [ @{esel_list} ]" type="for">
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/1" type="foritem">
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:13.943">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170501 18:38:13.942" endtime="20170501 18:38:13.943" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:13.944">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170501 18:38:13.943" endtime="20170501 18:38:13.944" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:13.945">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170501 18:38:13.944" endtime="20170501 18:38:13.945" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:13.946">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170501 18:38:13.945" endtime="20170501 18:38:13.946" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:14.125">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170501 18:38:13.947" endtime="20170501 18:38:14.125" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:38:14.125">${status} = PASS</msg>
<msg level="INFO" timestamp="20170501 18:38:14.125">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:38:13.946" endtime="20170501 18:38:14.125" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:14.126">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:38:14.125" endtime="20170501 18:38:14.126" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:14.126">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:38:14.126" endtime="20170501 18:38:14.127" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:13.941" endtime="20170501 18:38:14.127" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:13.940" endtime="20170501 18:38:14.127" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:13.940" endtime="20170501 18:38:14.127" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:14.127">${base_uri} = /xyz/openbmc_project/logging/entry/1/attr/AdditionalData</msg>
<status starttime="20170501 18:38:14.127" endtime="20170501 18:38:14.127" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170501 18:38:14.128" endtime="20170501 18:38:14.128" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:14.213">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/1/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170501 18:38:14.214">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:38:14.128" endtime="20170501 18:38:14.214" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170501 18:38:14.214" endtime="20170501 18:38:14.214" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:38:14.214">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:38:13.939" endtime="20170501 18:38:14.214" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:14.215">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:38:14.215" endtime="20170501 18:38:14.215" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:14.216">To JSON using : content={
  "data": [
    "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 04 53 14 ba 4f 00 00 00 04 53 15 83 f8 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 11 90 00 00 11 55 48 00 18 01 00 17 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 0e 00 48 00 00 00 e0 00 00 0a 00 00 00 00 00 00 20 00 00 00 05 00 01 00 2d 00 04 00 00 00 00 00 00 00 00 42 43 38 41 31 37 30 45 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 03 b6 dc 00 00 00 00 55 44 00 4c 01 02 01 00 ee ee ee ee 54 61 72 67 65 74 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 05 00 01 00 00 00 03 00 00 00 05 00 00 00 14 0f 7a bb 7c 23 01 00 02 00 05 01 0b 5a fc d7 13 01 00 02 00 05 01 00 00 55 44 00 30 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 04 cd e4 00 00 00 00 40 04 ab 68 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170501 18:38:14.216">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170501 18:38:14.216">${content} = {u'data': [u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 04 53 14 ba 4f 00 00 00 04 53 15 83 f8 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 11 90...</msg>
<status starttime="20170501 18:38:14.215" endtime="20170501 18:38:14.216" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:38:14.216">${esel_data} = [u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 04 53 14 ba 4f 00 00 00 04 53 15 83 f8 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 11 90 00 00 11 ...</msg>
<status starttime="20170501 18:38:13.938" endtime="20170501 18:38:14.216" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:14.217">Length is 1</msg>
<msg level="INFO" timestamp="20170501 18:38:14.217">${length} = 1</msg>
<status starttime="20170501 18:38:14.216" endtime="20170501 18:38:14.217" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status starttime="20170501 18:38:14.217" endtime="20170501 18:38:14.217" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[0]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170501 18:38:14.219">Appended to file '&lt;a href="file:///tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_esel"&gt;/tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_esel&lt;/a&gt;'.</msg>
<status starttime="20170501 18:38:14.218" endtime="20170501 18:38:14.219" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:14.218" endtime="20170501 18:38:14.219" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170501 18:38:14.220">Appended to file '&lt;a href="file:///tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_esel"&gt;/tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_esel&lt;/a&gt;'.</msg>
<status starttime="20170501 18:38:14.220" endtime="20170501 18:38:14.220" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:14.219" endtime="20170501 18:38:14.220" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:13.938" endtime="20170501 18:38:14.220" status="PASS"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/2" type="foritem">
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:14.224">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170501 18:38:14.224" endtime="20170501 18:38:14.224" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:14.225">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170501 18:38:14.225" endtime="20170501 18:38:14.225" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:14.226">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170501 18:38:14.225" endtime="20170501 18:38:14.226" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:14.226">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170501 18:38:14.226" endtime="20170501 18:38:14.226" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:14.404">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170501 18:38:14.227" endtime="20170501 18:38:14.404" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:38:14.404">${status} = PASS</msg>
<msg level="INFO" timestamp="20170501 18:38:14.404">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:38:14.227" endtime="20170501 18:38:14.404" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:14.405">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:38:14.404" endtime="20170501 18:38:14.405" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:14.405">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:38:14.405" endtime="20170501 18:38:14.406" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:14.223" endtime="20170501 18:38:14.406" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:14.223" endtime="20170501 18:38:14.406" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:14.222" endtime="20170501 18:38:14.406" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:14.406">${base_uri} = /xyz/openbmc_project/logging/entry/2/attr/AdditionalData</msg>
<status starttime="20170501 18:38:14.406" endtime="20170501 18:38:14.406" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170501 18:38:14.407" endtime="20170501 18:38:14.407" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:14.519">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/2/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170501 18:38:14.519">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:38:14.407" endtime="20170501 18:38:14.519" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170501 18:38:14.519" endtime="20170501 18:38:14.520" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:38:14.520">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:38:14.221" endtime="20170501 18:38:14.520" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:14.521">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:38:14.520" endtime="20170501 18:38:14.521" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:14.521">To JSON using : content={
  "data": [
    "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 04 53 14 ba 4f 00 00 00 04 53 15 83 f8 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 11 90 00 00 11 55 48 00 18 01 00 17 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 0e 00 48 00 00 00 e0 00 00 0a 00 00 00 00 00 00 20 00 00 00 05 00 01 00 2d 00 04 00 00 00 00 00 00 00 00 42 43 38 41 31 37 30 45 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 03 b6 dc 00 00 00 00 55 44 00 4c 01 02 01 00 ee ee ee ee 54 61 72 67 65 74 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 05 00 01 00 00 00 03 00 00 00 05 00 00 00 14 0f 7a bb 7c 23 01 00 02 00 05 01 0b 5a fc d7 13 01 00 02 00 05 01 00 00 55 44 00 30 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 04 cd e4 00 00 00 00 40 04 ab 68 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170501 18:38:14.521">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170501 18:38:14.522">${content} = {u'data': [u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 04 53 14 ba 4f 00 00 00 04 53 15 83 f8 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 11 90...</msg>
<status starttime="20170501 18:38:14.521" endtime="20170501 18:38:14.522" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:38:14.522">${esel_data} = [u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 04 53 14 ba 4f 00 00 00 04 53 15 83 f8 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 11 90 00 00 11 ...</msg>
<status starttime="20170501 18:38:14.220" endtime="20170501 18:38:14.522" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:14.523">Length is 1</msg>
<msg level="INFO" timestamp="20170501 18:38:14.523">${length} = 1</msg>
<status starttime="20170501 18:38:14.522" endtime="20170501 18:38:14.523" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status starttime="20170501 18:38:14.523" endtime="20170501 18:38:14.523" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[0]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170501 18:38:14.525">Appended to file '&lt;a href="file:///tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_esel"&gt;/tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_esel&lt;/a&gt;'.</msg>
<status starttime="20170501 18:38:14.524" endtime="20170501 18:38:14.525" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:14.523" endtime="20170501 18:38:14.525" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170501 18:38:14.526">Appended to file '&lt;a href="file:///tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_esel"&gt;/tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_esel&lt;/a&gt;'.</msg>
<status starttime="20170501 18:38:14.526" endtime="20170501 18:38:14.526" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:14.525" endtime="20170501 18:38:14.526" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:14.220" endtime="20170501 18:38:14.527" status="PASS"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/3" type="foritem">
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:14.530">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170501 18:38:14.529" endtime="20170501 18:38:14.530" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:14.531">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170501 18:38:14.530" endtime="20170501 18:38:14.531" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:14.531">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170501 18:38:14.531" endtime="20170501 18:38:14.531" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:14.532">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170501 18:38:14.532" endtime="20170501 18:38:14.532" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:14.710">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170501 18:38:14.533" endtime="20170501 18:38:14.710" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:38:14.710">${status} = PASS</msg>
<msg level="INFO" timestamp="20170501 18:38:14.711">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:38:14.532" endtime="20170501 18:38:14.711" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:14.711">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:38:14.711" endtime="20170501 18:38:14.711" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:14.712">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:38:14.712" endtime="20170501 18:38:14.712" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:14.529" endtime="20170501 18:38:14.712" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:14.529" endtime="20170501 18:38:14.712" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:14.528" endtime="20170501 18:38:14.713" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:14.713">${base_uri} = /xyz/openbmc_project/logging/entry/3/attr/AdditionalData</msg>
<status starttime="20170501 18:38:14.713" endtime="20170501 18:38:14.713" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170501 18:38:14.713" endtime="20170501 18:38:14.714" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:14.797">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/3/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170501 18:38:14.797">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:38:14.714" endtime="20170501 18:38:14.797" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170501 18:38:14.797" endtime="20170501 18:38:14.798" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:38:14.798">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:38:14.527" endtime="20170501 18:38:14.798" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:14.798">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:38:14.798" endtime="20170501 18:38:14.799" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:14.799">To JSON using : content={
  "data": [
    "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 04 c2 db f7 0d 00 00 00 04 c2 de 01 89 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 12 90 00 00 12 55 48 00 18 01 00 07 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 05 00 48 00 00 00 e0 00 00 05 00 00 00 00 00 00 20 00 00 00 01 00 00 00 05 00 01 02 00 ff ff 01 90 00 4d 42 43 31 30 30 37 30 35 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 04 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 03 b6 dc 00 00 00 00 55 44 00 50 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 27 a3 b4 00 00 00 00 40 27 ac 88 00 00 00 00 40 27 ad e4 00 00 00 00 40 27 cd 28 00 00 00 00 40 27 cf 10 00 00 00 00 40 0d 40 bc 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 00 fc 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 f4 00 00 00 00 00 00 00 f4 00 00 00 05 00 00 00 00 00 00 00 27 36 c1 09 a9 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 27 36 c4 1b b8 00 00 00 d1 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 27 36 c4 2c 87 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 27 36 c4 5f 0a 00 00 00 d1 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 27 38 00 c5 8d 00 00 00 d1 00 08 43 4f 65 c9 23 ee 00 00 07 6b 00 01 00 00 00 00 00 00 00 00 00 24"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170501 18:38:14.800">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170501 18:38:14.800">${content} = {u'data': [u'ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 04 c2 db f7 0d 00 00 00 04 c2 de 01 89 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 12 90...</msg>
<status starttime="20170501 18:38:14.799" endtime="20170501 18:38:14.800" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:38:14.800">${esel_data} = [u'ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 04 c2 db f7 0d 00 00 00 04 c2 de 01 89 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 12 90 00 00 12 ...</msg>
<status starttime="20170501 18:38:14.527" endtime="20170501 18:38:14.800" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:14.801">Length is 1</msg>
<msg level="INFO" timestamp="20170501 18:38:14.801">${length} = 1</msg>
<status starttime="20170501 18:38:14.800" endtime="20170501 18:38:14.801" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status starttime="20170501 18:38:14.801" endtime="20170501 18:38:14.801" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[0]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170501 18:38:14.803">Appended to file '&lt;a href="file:///tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_esel"&gt;/tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_esel&lt;/a&gt;'.</msg>
<status starttime="20170501 18:38:14.802" endtime="20170501 18:38:14.803" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:14.801" endtime="20170501 18:38:14.803" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170501 18:38:14.804">Appended to file '&lt;a href="file:///tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_esel"&gt;/tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_esel&lt;/a&gt;'.</msg>
<status starttime="20170501 18:38:14.803" endtime="20170501 18:38:14.804" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:14.803" endtime="20170501 18:38:14.804" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:14.527" endtime="20170501 18:38:14.804" status="PASS"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/4" type="foritem">
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:14.807">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170501 18:38:14.807" endtime="20170501 18:38:14.808" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:14.808">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170501 18:38:14.808" endtime="20170501 18:38:14.808" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:14.809">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170501 18:38:14.809" endtime="20170501 18:38:14.809" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:14.810">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170501 18:38:14.809" endtime="20170501 18:38:14.810" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:14.993">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170501 18:38:14.810" endtime="20170501 18:38:14.994" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:38:14.994">${status} = PASS</msg>
<msg level="INFO" timestamp="20170501 18:38:14.994">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:38:14.810" endtime="20170501 18:38:14.994" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:14.994">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:38:14.994" endtime="20170501 18:38:14.995" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:14.995">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:38:14.995" endtime="20170501 18:38:14.995" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:14.807" endtime="20170501 18:38:14.995" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:14.806" endtime="20170501 18:38:14.995" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:14.806" endtime="20170501 18:38:14.996" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:14.996">${base_uri} = /xyz/openbmc_project/logging/entry/4/attr/AdditionalData</msg>
<status starttime="20170501 18:38:14.996" endtime="20170501 18:38:14.996" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170501 18:38:14.996" endtime="20170501 18:38:14.997" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:15.080">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/4/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170501 18:38:15.080">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:38:14.997" endtime="20170501 18:38:15.080" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170501 18:38:15.081" endtime="20170501 18:38:15.081" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:38:15.081">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:38:14.805" endtime="20170501 18:38:15.081" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:15.082">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:38:15.081" endtime="20170501 18:38:15.082" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:15.083">To JSON using : content={
  "data": [
    "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 09 00 00 00 00 05 76 91 df aa 00 00 00 05 78 20 99 ad 42 00 00 0d 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 13 90 00 00 13 55 48 00 18 01 00 09 00 75 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 09 0f 00 48 00 00 00 e0 00 00 01 00 00 00 00 00 02 20 00 00 00 00 00 00 00 33 e2 1a 00 00 00 00 00 00 00 00 42 43 37 35 30 39 30 46 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 2c 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 02 00 00 00 00 00 00 00 06 26 01 00 02 00 05 01 25 01 0b 00 24 01 00 00 00 55 44 00 0c 01 01 09 00 00 33 e2 1a 55 44 00 14 01 02 09 00 09 64 a0 0c 00 00 00 00 00 00 00 00 55 44 00 14 01 02 09 00 77 14 09 28 00 00 00 00 00 00 00 a0 55 44 00 50 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 1e c5 d4 00 00 00 00 40 1e c6 e0 00 00 00 00 40 1e c7 b4 00 00 00 00 40 42 15 40 00 00 00 00 40 10 f9 84 00 00 00 00 40 0e d3 18 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 00 cc 01 15 31 00 01 28 00 42 46 41 50 49 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 c4 00 00 00 00 00 00 00 c4 00 00 00 03 00 00 00 00 00 00 00 2d 31 50 46 f6 00 00 00 ec 00 1c 43 4f b2 95 8f fa 00 00 00 69 70 75 2e 6d 63 62 69 73 74 3a 6b 30 3a 6e 30 3a 73 30 3a 70 30 31 3a 63 31 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 2d 31 5a 3f 22 00 00 00 ec 00 1c 43 4f 70 49 5a 04 00 00 01 aa 70 75 2e 6d 63 62 69 73 74 3a 6b 30 3a 6e 30 3a 73 30 3a 70 30 31 3a 63 31 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 2d 31 5e f1 86 00 00 00 ec 00 08 43 4f 25 60 10 27 00 00 00 90 00 00 00 00 00 00 00 01 00 00 00 24 55 44 01 84 01 15 31 00 01 28 00 42 46 41 50 49 5f 49 00 00 00 00 00 00 00 00 00 00 00 00 01 7c 00 00 00 00 00 00 01 7c 00 00 00 07 00 00 00 00 00 00 00 2a 28 d2 a3 a1 00 00 00 d1 00 20 43 4f 79 5d 7d 7b 00 00 03 2c 00 00 00 00 00 00 00 31 00 00 00 00 00 00 00 e4 00 00 00 00 00 00 00 1c 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 2a 28 d5 10 bf 00 00 00 d1 00 20 43 4f 79 5d 7d 7b 00 00 03 2c 00 00 00 00 00 00 00 32 00 00 00 00 00 00 00 e4 00 00 00 00 00 00 00 1c 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 2a 28 d7 6d 59 00 00 00 d1 00 20 43 4f 79 5d 7d 7b 00 00 03 2c 00 00 00 00 00 00 00 34 00 00 00 00 00 00 00 e4 00 00 00 00 00 00 00 1c 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 2a 28 d9 c9 94 00 00 00 d1 00 20 43 4f 79 5d 7d 7b 00 00 03 2c 00 00 00 00 00 00 00 35 00 00 00 00 00 00 00 e4 00 00 00 00 00 00 00 1c 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 2d 31 5e ff 42 00 00 00 ec 00 00 43 4f 0b b1 67 60 00 00 0b b3 00 00 00 1c 00 00 00 2d 31 5f 0b 4c 00 00 00 ec 00 08 43 4f f6 cf 06 d1 00 00 00 78 00 00 00 00 00 33 e2 1a 00 00 00 24 00 00 00 2d 31 5f 57 26 00 00 00 ec 00 08 43 4f e3 80 24 18 00 00 03 48 00 00 00 00 00 33 e2 1a 00 00 00 24 55 44 00 30 01 15 31 00 01 28 00 42 53 43 41 4e 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 00 55 44 00 30 01 15 31 00 01 28 00 42 46 41 50 49 5f 44 42 47 00 00 00 00 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 00"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170501 18:38:15.083">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170501 18:38:15.083">${content} = {u'data': [u'ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 09 00 00 00 00 05 76 91 df aa 00 00 00 05 78 20 99 ad 42 00 00 0d 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 13 90...</msg>
<status starttime="20170501 18:38:15.082" endtime="20170501 18:38:15.083" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:38:15.084">${esel_data} = [u'ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 09 00 00 00 00 05 76 91 df aa 00 00 00 05 78 20 99 ad 42 00 00 0d 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 13 90 00 00 13 ...</msg>
<status starttime="20170501 18:38:14.804" endtime="20170501 18:38:15.084" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:15.084">Length is 1</msg>
<msg level="INFO" timestamp="20170501 18:38:15.084">${length} = 1</msg>
<status starttime="20170501 18:38:15.084" endtime="20170501 18:38:15.084" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status starttime="20170501 18:38:15.084" endtime="20170501 18:38:15.085" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[0]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170501 18:38:15.086">Appended to file '&lt;a href="file:///tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_esel"&gt;/tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_esel&lt;/a&gt;'.</msg>
<status starttime="20170501 18:38:15.086" endtime="20170501 18:38:15.086" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:15.085" endtime="20170501 18:38:15.086" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170501 18:38:15.087">Appended to file '&lt;a href="file:///tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_esel"&gt;/tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_esel&lt;/a&gt;'.</msg>
<status starttime="20170501 18:38:15.087" endtime="20170501 18:38:15.088" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:15.087" endtime="20170501 18:38:15.088" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:14.804" endtime="20170501 18:38:15.088" status="PASS"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/5" type="foritem">
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:15.092">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170501 18:38:15.092" endtime="20170501 18:38:15.093" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:15.093">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170501 18:38:15.093" endtime="20170501 18:38:15.093" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:15.094">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170501 18:38:15.093" endtime="20170501 18:38:15.094" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:15.095">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170501 18:38:15.094" endtime="20170501 18:38:15.095" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:15.271">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170501 18:38:15.095" endtime="20170501 18:38:15.272" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:38:15.272">${status} = PASS</msg>
<msg level="INFO" timestamp="20170501 18:38:15.272">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:38:15.095" endtime="20170501 18:38:15.272" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:15.272">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:38:15.272" endtime="20170501 18:38:15.272" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:15.273">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:38:15.273" endtime="20170501 18:38:15.273" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:15.091" endtime="20170501 18:38:15.273" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:15.090" endtime="20170501 18:38:15.273" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:15.089" endtime="20170501 18:38:15.274" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:15.274">${base_uri} = /xyz/openbmc_project/logging/entry/5/attr/AdditionalData</msg>
<status starttime="20170501 18:38:15.274" endtime="20170501 18:38:15.274" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170501 18:38:15.275" endtime="20170501 18:38:15.275" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:15.357">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/5/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170501 18:38:15.357">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:38:15.276" endtime="20170501 18:38:15.357" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170501 18:38:15.358" endtime="20170501 18:38:15.358" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:38:15.358">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:38:15.089" endtime="20170501 18:38:15.358" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:15.359">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:38:15.358" endtime="20170501 18:38:15.359" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:15.359">To JSON using : content={
  "data": [
    "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 05 78 20 02 40 00 00 00 05 93 10 b7 62 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 14 90 00 00 15 55 48 00 18 01 00 05 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 03 00 48 00 00 00 e0 00 00 01 00 00 00 00 00 00 20 00 00 90 00 00 14 00 00 09 0f 00 00 00 01 00 00 0d 09 42 43 38 41 31 37 30 33 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 63 2e 73 6f 00 00 00 00 55 44 00 10 01 03 09 00 90 00 00 14 00 00 09 0f 55 44 00 3c 01 01 01 00 6d 73 73 5f 64 64 72 5f 70 68 79 5f 72 65 73 65 74 00 6c 69 62 69 73 74 65 70 64 69 73 70 2e 73 6f 00 6c 69 62 65 78 74 69 6e 69 74 73 76 63 2e 73 6f 00 00 55 44 00 30 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 16 17 b0 00 00 00 00 40 0e d2 90 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170501 18:38:15.359">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170501 18:38:15.360">${content} = {u'data': [u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 05 78 20 02 40 00 00 00 05 93 10 b7 62 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 14 90...</msg>
<status starttime="20170501 18:38:15.359" endtime="20170501 18:38:15.360" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:38:15.360">${esel_data} = [u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 05 78 20 02 40 00 00 00 05 93 10 b7 62 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 14 90 00 00 15 ...</msg>
<status starttime="20170501 18:38:15.088" endtime="20170501 18:38:15.360" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:15.360">Length is 1</msg>
<msg level="INFO" timestamp="20170501 18:38:15.361">${length} = 1</msg>
<status starttime="20170501 18:38:15.360" endtime="20170501 18:38:15.361" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status starttime="20170501 18:38:15.361" endtime="20170501 18:38:15.362" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[0]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170501 18:38:15.363">Appended to file '&lt;a href="file:///tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_esel"&gt;/tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_esel&lt;/a&gt;'.</msg>
<status starttime="20170501 18:38:15.363" endtime="20170501 18:38:15.363" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:15.362" endtime="20170501 18:38:15.363" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170501 18:38:15.365">Appended to file '&lt;a href="file:///tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_esel"&gt;/tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_esel&lt;/a&gt;'.</msg>
<status starttime="20170501 18:38:15.364" endtime="20170501 18:38:15.365" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:15.364" endtime="20170501 18:38:15.365" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:15.088" endtime="20170501 18:38:15.365" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:13.938" endtime="20170501 18:38:15.365" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>which eSEL.pl</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:15.369">Running command 'which eSEL.pl 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170501 18:38:15.377">${out} = </msg>
<status starttime="20170501 18:38:15.365" endtime="20170501 18:38:15.378" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<msg level="FAIL" timestamp="20170501 18:38:15.398">'' does not contain 'eSEL.pl'</msg>
<status starttime="20170501 18:38:15.396" endtime="20170501 18:38:15.398" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:38:15.399">${status} = False</msg>
<status starttime="20170501 18:38:15.391" endtime="20170501 18:38:15.399" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:15.400">Returning from the enclosing user keyword.</msg>
<status starttime="20170501 18:38:15.399" endtime="20170501 18:38:15.400" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:13.556" endtime="20170501 18:38:15.401" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:13.532" endtime="20170501 18:38:15.403" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:13.529" endtime="20170501 18:38:15.404" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:13.529" endtime="20170501 18:38:15.404" status="PASS"></status>
</kw>
<kw name="${method} = ('BMC Specific Files', 'BMC FFDC Files')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170501 18:38:15.410" endtime="20170501 18:38:15.410" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:38:15.410">${status} = PASS</msg>
<msg level="INFO" timestamp="20170501 18:38:15.410">${ret_values} = None</msg>
<status starttime="20170501 18:38:15.409" endtime="20170501 18:38:15.410" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170501 18:38:15.411" endtime="20170501 18:38:15.411" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Files">
<doc>Get the command list and iterate</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170501 18:38:15.447">Dictionary does not contain key 'host'.</msg>
<status starttime="20170501 18:38:15.447" endtime="20170501 18:38:15.447" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:38:15.448">${has_host} = False</msg>
<status starttime="20170501 18:38:15.446" endtime="20170501 18:38:15.448" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170501 18:38:15.448" endtime="20170501 18:38:15.449" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:15.448" endtime="20170501 18:38:15.449" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:15.451">${port_num} = 22</msg>
<status starttime="20170501 18:38:15.451" endtime="20170501 18:38:15.451" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:15.452">${SSH_PORT} = 22</msg>
<status starttime="20170501 18:38:15.452" endtime="20170501 18:38:15.452" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:15.453">${https_num} = 443</msg>
<status starttime="20170501 18:38:15.452" endtime="20170501 18:38:15.453" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:15.454">${AUTH_URI} = https://9.41.166.169:443</msg>
<status starttime="20170501 18:38:15.453" endtime="20170501 18:38:15.454" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:15.450" endtime="20170501 18:38:15.454" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:15.449" endtime="20170501 18:38:15.454" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170501 18:38:15.455">Dictionary does not contain key 'port'.</msg>
<status starttime="20170501 18:38:15.454" endtime="20170501 18:38:15.455" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:38:15.455">${has_port} = False</msg>
<status starttime="20170501 18:38:15.454" endtime="20170501 18:38:15.455" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170501 18:38:15.456" endtime="20170501 18:38:15.457" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170501 18:38:15.457" endtime="20170501 18:38:15.458" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:15.456" endtime="20170501 18:38:15.458" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:15.455" endtime="20170501 18:38:15.458" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:15.458">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170501 18:38:17.115">Read output: root@witherspoon:~#</msg>
<status starttime="20170501 18:38:15.458" endtime="20170501 18:38:17.116" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:15.446" endtime="20170501 18:38:17.116" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Ffdc File Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:17.117">@{entries} = [ BMC FILES ]</msg>
<status starttime="20170501 18:38:17.116" endtime="20170501 18:38:17.117" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC FILES" type="foritem">
<kw library="openbmc_ffdc_methods" name="Create File and Write Data">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="OperatingSystem" name="Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>echo ${OPENBMC_HOST} | sed 's/\(\.\)/\\\1/g'</arg>
</arguments>
<assign>
<var>${OPENBMC_HOST_REGEX}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:17.122">Running command 'echo 9.41.166.169 | sed 's/(.)/\1/g' 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170501 18:38:17.126">${OPENBMC_HOST_REGEX} = sed: -e expression #1, char 10: invalid reference \1 on `s' command's RHS</msg>
<status starttime="20170501 18:38:17.118" endtime="20170501 18:38:17.126" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc File">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:17.129">@{cmd_list} = [ ('BMC_journalctl', 'journalctl --no-pager') | ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_dmesg', 'dmesg') | ('BMC_proc_list', 'top -n 1 -b') ]</msg>
<status starttime="20170501 18:38:17.128" endtime="20170501 18:38:17.130" status="PASS"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:17.131">${logpath} = /tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_journalctl.txt</msg>
<status starttime="20170501 18:38:17.130" endtime="20170501 18:38:17.131" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170501 18:38:17.133" endtime="20170501 18:38:17.133" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:17.134">Executing command 'journalctl --no-pager'.</msg>
<msg level="INFO" timestamp="20170501 18:38:21.861">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170501 18:38:21.864">${stdout} = -- Logs begin at Thu 2017-04-20 17:29:22 UTC, end at Thu 2017-04-20 17:54:19 UTC. --
Apr 20 17:29:22 witherspoon kernel: Booting Linux on physical CPU 0x0
Apr 20 17:29:22 witherspoon kernel: Linux ver...</msg>
<msg level="INFO" timestamp="20170501 18:38:21.865">${stderr} = </msg>
<status starttime="20170501 18:38:17.133" endtime="20170501 18:38:21.865" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170501 18:38:21.878">Appended to file '&lt;a href="file:///tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_journalctl.txt"&gt;/tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status starttime="20170501 18:38:21.876" endtime="20170501 18:38:21.878" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:21.872" endtime="20170501 18:38:21.879" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:21.865" endtime="20170501 18:38:21.879" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:17.131" endtime="20170501 18:38:21.879" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sed -i 's/'${OPENBMC_HOST_REGEX}'/DUMMYIP/g' ${logpath}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:21.886">Running command 'sed -i 's/'sed: -e expression #1, char 10: invalid reference \1 on `s' command's RHS'/DUMMYIP/g' /tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_journalctl.txt 2&gt;&amp;1'.</msg>
<status starttime="20170501 18:38:21.879" endtime="20170501 18:38:21.888" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:17.130" endtime="20170501 18:38:21.889" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:21.895">${logpath} = /tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_meminfo.txt</msg>
<status starttime="20170501 18:38:21.892" endtime="20170501 18:38:21.895" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170501 18:38:21.897" endtime="20170501 18:38:21.898" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:21.898">Executing command 'cat /proc/meminfo'.</msg>
<msg level="INFO" timestamp="20170501 18:38:21.947">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170501 18:38:21.948">${stdout} = MemTotal:         432932 kB
MemFree:          269312 kB
MemAvailable:     310632 kB
Buffers:           10432 kB
Cached:            49552 kB
SwapCached:            0 kB
Active:           116436 kB
Inac...</msg>
<msg level="INFO" timestamp="20170501 18:38:21.948">${stderr} = </msg>
<status starttime="20170501 18:38:21.898" endtime="20170501 18:38:21.948" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170501 18:38:21.954">Appended to file '&lt;a href="file:///tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_meminfo.txt"&gt;/tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status starttime="20170501 18:38:21.953" endtime="20170501 18:38:21.954" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:21.953" endtime="20170501 18:38:21.954" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:21.948" endtime="20170501 18:38:21.954" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:21.895" endtime="20170501 18:38:21.954" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sed -i 's/'${OPENBMC_HOST_REGEX}'/DUMMYIP/g' ${logpath}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:21.958">Running command 'sed -i 's/'sed: -e expression #1, char 10: invalid reference \1 on `s' command's RHS'/DUMMYIP/g' /tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_meminfo.txt 2&gt;&amp;1'.</msg>
<status starttime="20170501 18:38:21.955" endtime="20170501 18:38:21.961" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:21.889" endtime="20170501 18:38:21.961" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:21.965">${logpath} = /tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_procinfo.txt</msg>
<status starttime="20170501 18:38:21.964" endtime="20170501 18:38:21.965" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170501 18:38:21.967" endtime="20170501 18:38:21.969" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:21.970">Executing command 'cat /proc/cpuinfo'.</msg>
<msg level="INFO" timestamp="20170501 18:38:22.046">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170501 18:38:22.046">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<msg level="INFO" timestamp="20170501 18:38:22.046">${stderr} = </msg>
<status starttime="20170501 18:38:21.969" endtime="20170501 18:38:22.046" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170501 18:38:22.053">Appended to file '&lt;a href="file:///tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_procinfo.txt"&gt;/tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status starttime="20170501 18:38:22.052" endtime="20170501 18:38:22.053" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:22.051" endtime="20170501 18:38:22.053" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:22.047" endtime="20170501 18:38:22.053" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:21.966" endtime="20170501 18:38:22.053" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sed -i 's/'${OPENBMC_HOST_REGEX}'/DUMMYIP/g' ${logpath}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:22.057">Running command 'sed -i 's/'sed: -e expression #1, char 10: invalid reference \1 on `s' command's RHS'/DUMMYIP/g' /tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_procinfo.txt 2&gt;&amp;1'.</msg>
<status starttime="20170501 18:38:22.053" endtime="20170501 18:38:22.059" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:21.962" endtime="20170501 18:38:22.060" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_dmesg', 'dmesg')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:22.064">${logpath} = /tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_dmesg.txt</msg>
<status starttime="20170501 18:38:22.063" endtime="20170501 18:38:22.064" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170501 18:38:22.066" endtime="20170501 18:38:22.066" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:22.067">Executing command 'dmesg'.</msg>
<msg level="INFO" timestamp="20170501 18:38:22.137">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170501 18:38:22.137">${stdout} = brd: module loaded
loop: module loaded
aspeed-lpc-ctrl 1e789080.lpc-ctrl: Loaded at 0x98000000 (0x04000000)
aspeed-smc 1e620000.flash-controller: Using IRQ 17
aspeed-smc 1e620000.flash-controller: DMA...</msg>
<msg level="INFO" timestamp="20170501 18:38:22.138">${stderr} = </msg>
<status starttime="20170501 18:38:22.067" endtime="20170501 18:38:22.138" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170501 18:38:22.144">Appended to file '&lt;a href="file:///tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_dmesg.txt"&gt;/tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status starttime="20170501 18:38:22.144" endtime="20170501 18:38:22.144" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:22.143" endtime="20170501 18:38:22.145" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:22.138" endtime="20170501 18:38:22.145" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:22.064" endtime="20170501 18:38:22.145" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sed -i 's/'${OPENBMC_HOST_REGEX}'/DUMMYIP/g' ${logpath}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:22.149">Running command 'sed -i 's/'sed: -e expression #1, char 10: invalid reference \1 on `s' command's RHS'/DUMMYIP/g' /tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_dmesg.txt 2&gt;&amp;1'.</msg>
<status starttime="20170501 18:38:22.145" endtime="20170501 18:38:22.151" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:22.061" endtime="20170501 18:38:22.152" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:22.156">${logpath} = /tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_proc_list.txt</msg>
<status starttime="20170501 18:38:22.155" endtime="20170501 18:38:22.156" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170501 18:38:22.158" endtime="20170501 18:38:22.158" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:22.159">Executing command 'top -n 1 -b'.</msg>
<msg level="INFO" timestamp="20170501 18:38:22.447">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170501 18:38:22.447">${stdout} = Mem: 163620K used, 269312K free, 14656K shrd, 10432K buff, 49560K cached
CPU:   0% usr  16% sys   0% nic  83% idle   0% io   0% irq   0% sirq
Load average: 1.23 1.28 1.28 1/130 2062
  PID  PPID USER  ...</msg>
<msg level="INFO" timestamp="20170501 18:38:22.447">${stderr} = </msg>
<status starttime="20170501 18:38:22.159" endtime="20170501 18:38:22.447" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170501 18:38:22.454">Appended to file '&lt;a href="file:///tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_proc_list.txt"&gt;/tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status starttime="20170501 18:38:22.453" endtime="20170501 18:38:22.454" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:22.452" endtime="20170501 18:38:22.454" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:22.447" endtime="20170501 18:38:22.454" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:22.156" endtime="20170501 18:38:22.454" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sed -i 's/'${OPENBMC_HOST_REGEX}'/DUMMYIP/g' ${logpath}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:22.458">Running command 'sed -i 's/'sed: -e expression #1, char 10: invalid reference \1 on `s' command's RHS'/DUMMYIP/g' /tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_proc_list.txt 2&gt;&amp;1'.</msg>
<status starttime="20170501 18:38:22.454" endtime="20170501 18:38:22.461" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:22.153" endtime="20170501 18:38:22.461" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:17.130" endtime="20170501 18:38:22.461" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:17.117" endtime="20170501 18:38:22.462" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:17.117" endtime="20170501 18:38:22.462" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:17.117" endtime="20170501 18:38:22.463" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:15.445" endtime="20170501 18:38:22.463" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:15.412" endtime="20170501 18:38:22.463" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:15.405" endtime="20170501 18:38:22.464" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:15.405" endtime="20170501 18:38:22.464" status="PASS"></status>
</kw>
<kw name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170501 18:38:22.468" endtime="20170501 18:38:22.468" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:38:22.468">${status} = PASS</msg>
<msg level="INFO" timestamp="20170501 18:38:22.468">${ret_values} = None</msg>
<status starttime="20170501 18:38:22.467" endtime="20170501 18:38:22.468" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170501 18:38:22.469" endtime="20170501 18:38:22.469" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Get Requests">
<doc>Get the command list and iterate</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170501 18:38:22.499">Dictionary does not contain key 'host'.</msg>
<status starttime="20170501 18:38:22.499" endtime="20170501 18:38:22.499" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:38:22.499">${has_host} = False</msg>
<status starttime="20170501 18:38:22.497" endtime="20170501 18:38:22.499" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170501 18:38:22.500" endtime="20170501 18:38:22.500" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:22.500" endtime="20170501 18:38:22.500" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:22.502">${port_num} = 22</msg>
<status starttime="20170501 18:38:22.502" endtime="20170501 18:38:22.502" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:22.503">${SSH_PORT} = 22</msg>
<status starttime="20170501 18:38:22.503" endtime="20170501 18:38:22.503" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:22.504">${https_num} = 443</msg>
<status starttime="20170501 18:38:22.504" endtime="20170501 18:38:22.504" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:22.505">${AUTH_URI} = https://9.41.166.169:443</msg>
<status starttime="20170501 18:38:22.504" endtime="20170501 18:38:22.505" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:22.501" endtime="20170501 18:38:22.506" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:22.501" endtime="20170501 18:38:22.506" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170501 18:38:22.507">Dictionary does not contain key 'port'.</msg>
<status starttime="20170501 18:38:22.507" endtime="20170501 18:38:22.507" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:38:22.507">${has_port} = False</msg>
<status starttime="20170501 18:38:22.506" endtime="20170501 18:38:22.507" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170501 18:38:22.509" endtime="20170501 18:38:22.510" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170501 18:38:22.510" endtime="20170501 18:38:22.511" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:22.509" endtime="20170501 18:38:22.511" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:22.508" endtime="20170501 18:38:22.511" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:22.512">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170501 18:38:24.158">Read output: root@witherspoon:~#</msg>
<status starttime="20170501 18:38:22.511" endtime="20170501 18:38:24.158" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:22.497" endtime="20170501 18:38:24.158" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Ffdc Get Request Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:24.159">@{entries} = [ GET REQUESTS ]</msg>
<status starttime="20170501 18:38:24.158" endtime="20170501 18:38:24.159" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = GET REQUESTS" type="foritem">
<kw library="openbmc_ffdc_methods" name="Log FFDC Get Requests">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Get Request">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:24.160">@{cmd_list} = [ ('BMC_record_log', '/org/openbmc/control/led/enumerate') | ('BMC_led', '/org/openbmc/records/events/enumerate') | ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate') | ('BMC_sensor_list', ...</msg>
<status starttime="20170501 18:38:24.160" endtime="20170501 18:38:24.160" status="PASS"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:24.164">${logpath} = /tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_record_log.txt</msg>
<status starttime="20170501 18:38:24.161" endtime="20170501 18:38:24.164" status="PASS"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:24.168">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170501 18:38:24.168" endtime="20170501 18:38:24.169" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:24.170">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170501 18:38:24.169" endtime="20170501 18:38:24.170" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:24.171">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170501 18:38:24.170" endtime="20170501 18:38:24.171" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:24.172">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170501 18:38:24.171" endtime="20170501 18:38:24.172" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:24.380">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170501 18:38:24.173" endtime="20170501 18:38:24.380" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:38:24.380">${status} = PASS</msg>
<msg level="INFO" timestamp="20170501 18:38:24.380">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:38:24.172" endtime="20170501 18:38:24.380" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:24.381">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:38:24.381" endtime="20170501 18:38:24.381" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:24.382">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:38:24.381" endtime="20170501 18:38:24.382" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:24.167" endtime="20170501 18:38:24.382" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:24.166" endtime="20170501 18:38:24.382" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:24.166" endtime="20170501 18:38:24.382" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:24.383">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status starttime="20170501 18:38:24.382" endtime="20170501 18:38:24.383" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170501 18:38:24.383" endtime="20170501 18:38:24.383" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:24.427">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170501 18:38:24.427">${ret} = &lt;Response [404]&gt;</msg>
<status starttime="20170501 18:38:24.384" endtime="20170501 18:38:24.427" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170501 18:38:24.427" endtime="20170501 18:38:24.428" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:38:24.428">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20170501 18:38:24.165" endtime="20170501 18:38:24.428" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:24.429">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170501 18:38:24.429">404 != 200</msg>
<status starttime="20170501 18:38:24.429" endtime="20170501 18:38:24.429" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:38:24.429">${status} = False</msg>
<status starttime="20170501 18:38:24.428" endtime="20170501 18:38:24.430" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw library="BuiltIn" name="Continue For Loop">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg level="INFO" timestamp="20170501 18:38:24.431">Continuing for loop from the next iteration.</msg>
<status starttime="20170501 18:38:24.430" endtime="20170501 18:38:24.431" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:24.430" endtime="20170501 18:38:24.431" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:24.161" endtime="20170501 18:38:24.431" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:24.432">${logpath} = /tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_led.txt</msg>
<status starttime="20170501 18:38:24.431" endtime="20170501 18:38:24.432" status="PASS"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:24.435">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170501 18:38:24.434" endtime="20170501 18:38:24.435" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:24.436">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170501 18:38:24.435" endtime="20170501 18:38:24.436" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:24.436">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170501 18:38:24.436" endtime="20170501 18:38:24.436" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:24.437">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170501 18:38:24.436" endtime="20170501 18:38:24.437" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:24.613">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170501 18:38:24.438" endtime="20170501 18:38:24.614" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:38:24.614">${status} = PASS</msg>
<msg level="INFO" timestamp="20170501 18:38:24.614">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:38:24.437" endtime="20170501 18:38:24.614" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:24.614">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:38:24.614" endtime="20170501 18:38:24.615" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:24.615">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:38:24.615" endtime="20170501 18:38:24.615" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:24.434" endtime="20170501 18:38:24.616" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:24.433" endtime="20170501 18:38:24.616" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:24.433" endtime="20170501 18:38:24.616" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:24.617">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status starttime="20170501 18:38:24.616" endtime="20170501 18:38:24.617" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170501 18:38:24.617" endtime="20170501 18:38:24.618" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:24.701">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170501 18:38:24.701">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:38:24.618" endtime="20170501 18:38:24.701" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170501 18:38:24.701" endtime="20170501 18:38:24.702" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:38:24.702">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:38:24.432" endtime="20170501 18:38:24.702" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:24.703">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:38:24.703" endtime="20170501 18:38:24.703" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:38:24.703">${status} = True</msg>
<status starttime="20170501 18:38:24.702" endtime="20170501 18:38:24.703" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20170501 18:38:24.704" endtime="20170501 18:38:24.704" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:24.705">To JSON using : content={
  "data": {}, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170501 18:38:24.705">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170501 18:38:24.705">${jsondata} = {
    "data": {},
    "message": "200 OK",
    "status": "ok"
}</msg>
<status starttime="20170501 18:38:24.704" endtime="20170501 18:38:24.705" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170501 18:38:24.707">Appended to file '&lt;a href="file:///tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_led.txt"&gt;/tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_led.txt&lt;/a&gt;'.</msg>
<status starttime="20170501 18:38:24.706" endtime="20170501 18:38:24.707" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:24.706" endtime="20170501 18:38:24.707" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:24.431" endtime="20170501 18:38:24.707" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:24.708">${logpath} = /tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_inventory.txt</msg>
<status starttime="20170501 18:38:24.708" endtime="20170501 18:38:24.708" status="PASS"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:24.711">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170501 18:38:24.710" endtime="20170501 18:38:24.711" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:24.712">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170501 18:38:24.711" endtime="20170501 18:38:24.712" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:24.712">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170501 18:38:24.712" endtime="20170501 18:38:24.712" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:24.713">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170501 18:38:24.713" endtime="20170501 18:38:24.713" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:24.888">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170501 18:38:24.714" endtime="20170501 18:38:24.889" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:38:24.889">${status} = PASS</msg>
<msg level="INFO" timestamp="20170501 18:38:24.889">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:38:24.713" endtime="20170501 18:38:24.889" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:24.890">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:38:24.889" endtime="20170501 18:38:24.890" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:24.891">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:38:24.890" endtime="20170501 18:38:24.891" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:24.710" endtime="20170501 18:38:24.891" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:24.709" endtime="20170501 18:38:24.891" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:24.709" endtime="20170501 18:38:24.891" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:24.892">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status starttime="20170501 18:38:24.892" endtime="20170501 18:38:24.892" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170501 18:38:24.893" endtime="20170501 18:38:24.893" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:26.570">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170501 18:38:26.570">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:38:24.893" endtime="20170501 18:38:26.570" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170501 18:38:26.570" endtime="20170501 18:38:26.571" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:38:26.571">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:38:24.708" endtime="20170501 18:38:26.571" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:26.572">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:38:26.572" endtime="20170501 18:38:26.572" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:38:26.572">${status} = True</msg>
<status starttime="20170501 18:38:26.571" endtime="20170501 18:38:26.572" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20170501 18:38:26.573" endtime="20170501 18:38:26.573" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:26.576">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/createme3": {
      "ExampleProperty1": "foo"
    }, 
    "/xyz/openbmc_project/inventory/system": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 0, 
      "Manufacturer": "", 
      "Model": "2", 
      "PartNumber": "0000000000000000", 
      "Present": 1, 
      "PrettyName": "", 
      "SerialNumber": "0000000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard": {
      "BuildDate": "", 
      "Manufacturer": "0000000000000000", 
      "Model": "", 
      "PartNumber": "0000000", 
      "Present": 0, 
      "PrettyName": "SYSTEM PLANAR   ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH051", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "00:00:00:00:00:00", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL982", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933815990", 
      "Version": "10"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core1": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core10": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core11": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core12": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core13": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core14": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core15": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core16": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core17": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core18": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core19": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core2": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core20": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core21": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core22": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core23": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core3": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core4": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core5": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core6": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core7": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core8": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core9": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL982", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933817514", 
      "Version": "10"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core10": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core11": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core12": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core13": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core14": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core15": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core16": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core17": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core18": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core19": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core2": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core20": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core21": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core22": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core23": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core3": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core4": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core5": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core6": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core7": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core8": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core9": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0d83", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e72", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm10": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e9a", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm11": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e66", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm12": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e88", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm13": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 0, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0dad", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm14": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e8f", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm15": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e9d", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm2": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0daf", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm3": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0dc7", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm4": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e95", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm5": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0ec3", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm6": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0db6", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm7": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0ebf", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm8": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0da9", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm9": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e73", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan0": {
      "Present": 1, 
      "PrettyName": "fan0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan1": {
      "Present": 1, 
      "PrettyName": "fan1"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan2": {
      "Present": 1, 
      "PrettyName": "fan2"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan3": {
      "Present": 1, 
      "PrettyName": "fan3"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170501 18:38:26.576">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170501 18:38:26.577">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/createme3": {
            "ExampleProperty1": "foo"
        },
        "/xyz/openbmc_project/inventory/system": {
            "BuildDate": "",
 ...</msg>
<status starttime="20170501 18:38:26.573" endtime="20170501 18:38:26.577" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170501 18:38:26.579">Appended to file '&lt;a href="file:///tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_inventory.txt"&gt;/tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status starttime="20170501 18:38:26.578" endtime="20170501 18:38:26.579" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:26.577" endtime="20170501 18:38:26.579" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:24.707" endtime="20170501 18:38:26.579" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:26.580">${logpath} = /tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_sensor_list.txt</msg>
<status starttime="20170501 18:38:26.579" endtime="20170501 18:38:26.580" status="PASS"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:26.582">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170501 18:38:26.582" endtime="20170501 18:38:26.583" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:26.583">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170501 18:38:26.583" endtime="20170501 18:38:26.583" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:26.584">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170501 18:38:26.584" endtime="20170501 18:38:26.584" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:26.585">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170501 18:38:26.584" endtime="20170501 18:38:26.585" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:26.763">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170501 18:38:26.585" endtime="20170501 18:38:26.763" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:38:26.763">${status} = PASS</msg>
<msg level="INFO" timestamp="20170501 18:38:26.763">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:38:26.585" endtime="20170501 18:38:26.763" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:26.764">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:38:26.763" endtime="20170501 18:38:26.764" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:26.764">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:38:26.764" endtime="20170501 18:38:26.764" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:26.582" endtime="20170501 18:38:26.765" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:26.581" endtime="20170501 18:38:26.765" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:26.581" endtime="20170501 18:38:26.765" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:26.765">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status starttime="20170501 18:38:26.765" endtime="20170501 18:38:26.765" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170501 18:38:26.766" endtime="20170501 18:38:26.766" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:26.974">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170501 18:38:26.974">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:38:26.766" endtime="20170501 18:38:26.975" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170501 18:38:26.975" endtime="20170501 18:38:26.975" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:38:26.975">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:38:26.580" endtime="20170501 18:38:26.975" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:26.976">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:38:26.976" endtime="20170501 18:38:26.977" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:38:26.977">${status} = True</msg>
<status starttime="20170501 18:38:26.976" endtime="20170501 18:38:26.977" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20170501 18:38:26.977" endtime="20170501 18:38:26.977" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:26.978">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 2
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "FW Progress, Baseboard Init"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/PowerSupplyDerating": {
      "error": 0, 
      "units": "", 
      "value": 10
    }, 
    "/org/openbmc/sensors/host/PowerSupplyRedundancy": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/TurboAllowed": {
      "error": 0, 
      "units": "", 
      "value": 0
    }, 
    "/org/openbmc/sensors/host/cpu0/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/cpu1/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/powercap": {
      "error": 0, 
      "units": "", 
      "value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170501 18:38:26.978">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170501 18:38:26.978">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/host/BootCount": {
            "error": 0,
            "units": "",
            "value": 2
        },
        "/org/openbmc/sensors/host/BootProgress": {
...</msg>
<status starttime="20170501 18:38:26.977" endtime="20170501 18:38:26.978" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170501 18:38:26.980">Appended to file '&lt;a href="file:///tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_sensor_list.txt"&gt;/tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status starttime="20170501 18:38:26.979" endtime="20170501 18:38:26.980" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:26.978" endtime="20170501 18:38:26.981" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:26.579" endtime="20170501 18:38:26.981" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:26.981">${logpath} = /tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_elog.txt</msg>
<status starttime="20170501 18:38:26.981" endtime="20170501 18:38:26.981" status="PASS"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:26.984">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170501 18:38:26.984" endtime="20170501 18:38:26.985" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:26.985">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170501 18:38:26.985" endtime="20170501 18:38:26.985" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:26.986">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170501 18:38:26.985" endtime="20170501 18:38:26.986" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:26.987">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170501 18:38:26.986" endtime="20170501 18:38:26.987" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:27.168">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170501 18:38:26.988" endtime="20170501 18:38:27.168" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:38:27.168">${status} = PASS</msg>
<msg level="INFO" timestamp="20170501 18:38:27.168">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:38:26.987" endtime="20170501 18:38:27.168" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:27.169">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:38:27.169" endtime="20170501 18:38:27.169" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:27.170">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:38:27.169" endtime="20170501 18:38:27.170" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:26.983" endtime="20170501 18:38:27.170" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:26.983" endtime="20170501 18:38:27.170" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:26.982" endtime="20170501 18:38:27.170" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:27.171">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status starttime="20170501 18:38:27.171" endtime="20170501 18:38:27.171" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170501 18:38:27.171" endtime="20170501 18:38:27.172" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:27.355">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170501 18:38:27.355">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:38:27.172" endtime="20170501 18:38:27.355" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170501 18:38:27.355" endtime="20170501 18:38:27.356" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:38:27.356">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:38:26.982" endtime="20170501 18:38:27.356" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:27.357">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:38:27.357" endtime="20170501 18:38:27.357" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:38:27.357">${status} = True</msg>
<status starttime="20170501 18:38:27.356" endtime="20170501 18:38:27.357" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20170501 18:38:27.357" endtime="20170501 18:38:27.358" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:27.359">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/1": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 04 53 14 ba 4f 00 00 00 04 53 15 83 f8 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 11 90 00 00 11 55 48 00 18 01 00 17 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 0e 00 48 00 00 00 e0 00 00 0a 00 00 00 00 00 00 20 00 00 00 05 00 01 00 2d 00 04 00 00 00 00 00 00 00 00 42 43 38 41 31 37 30 45 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 03 b6 dc 00 00 00 00 55 44 00 4c 01 02 01 00 ee ee ee ee 54 61 72 67 65 74 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 05 00 01 00 00 00 03 00 00 00 05 00 00 00 14 0f 7a bb 7c 23 01 00 02 00 05 01 0b 5a fc d7 13 01 00 02 00 05 01 00 00 55 44 00 30 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 04 cd e4 00 00 00 00 40 04 ab 68 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00"
      ], 
      "Id": 1, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1492710282318, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/2": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 04 53 14 ba 4f 00 00 00 04 53 15 83 f8 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 11 90 00 00 11 55 48 00 18 01 00 17 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 0e 00 48 00 00 00 e0 00 00 0a 00 00 00 00 00 00 20 00 00 00 05 00 01 00 2d 00 04 00 00 00 00 00 00 00 00 42 43 38 41 31 37 30 45 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 03 b6 dc 00 00 00 00 55 44 00 4c 01 02 01 00 ee ee ee ee 54 61 72 67 65 74 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 05 00 01 00 00 00 03 00 00 00 05 00 00 00 14 0f 7a bb 7c 23 01 00 02 00 05 01 0b 5a fc d7 13 01 00 02 00 05 01 00 00 55 44 00 30 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 04 cd e4 00 00 00 00 40 04 ab 68 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00"
      ], 
      "Id": 2, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1492710285367, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/3": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 04 c2 db f7 0d 00 00 00 04 c2 de 01 89 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 12 90 00 00 12 55 48 00 18 01 00 07 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 05 00 48 00 00 00 e0 00 00 05 00 00 00 00 00 00 20 00 00 00 01 00 00 00 05 00 01 02 00 ff ff 01 90 00 4d 42 43 31 30 30 37 30 35 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 04 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 03 b6 dc 00 00 00 00 55 44 00 50 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 27 a3 b4 00 00 00 00 40 27 ac 88 00 00 00 00 40 27 ad e4 00 00 00 00 40 27 cd 28 00 00 00 00 40 27 cf 10 00 00 00 00 40 0d 40 bc 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 00 fc 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 f4 00 00 00 00 00 00 00 f4 00 00 00 05 00 00 00 00 00 00 00 27 36 c1 09 a9 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 27 36 c4 1b b8 00 00 00 d1 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 27 36 c4 2c 87 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 27 36 c4 5f 0a 00 00 00 d1 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 27 38 00 c5 8d 00 00 00 d1 00 08 43 4f 65 c9 23 ee 00 00 07 6b 00 01 00 00 00 00 00 00 00 00 00 24"
      ], 
      "Id": 3, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1492710291298, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/4": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 09 00 00 00 00 05 76 91 df aa 00 00 00 05 78 20 99 ad 42 00 00 0d 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 13 90 00 00 13 55 48 00 18 01 00 09 00 75 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 09 0f 00 48 00 00 00 e0 00 00 01 00 00 00 00 00 02 20 00 00 00 00 00 00 00 33 e2 1a 00 00 00 00 00 00 00 00 42 43 37 35 30 39 30 46 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 2c 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 02 00 00 00 00 00 00 00 06 26 01 00 02 00 05 01 25 01 0b 00 24 01 00 00 00 55 44 00 0c 01 01 09 00 00 33 e2 1a 55 44 00 14 01 02 09 00 09 64 a0 0c 00 00 00 00 00 00 00 00 55 44 00 14 01 02 09 00 77 14 09 28 00 00 00 00 00 00 00 a0 55 44 00 50 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 1e c5 d4 00 00 00 00 40 1e c6 e0 00 00 00 00 40 1e c7 b4 00 00 00 00 40 42 15 40 00 00 00 00 40 10 f9 84 00 00 00 00 40 0e d3 18 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 00 cc 01 15 31 00 01 28 00 42 46 41 50 49 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 c4 00 00 00 00 00 00 00 c4 00 00 00 03 00 00 00 00 00 00 00 2d 31 50 46 f6 00 00 00 ec 00 1c 43 4f b2 95 8f fa 00 00 00 69 70 75 2e 6d 63 62 69 73 74 3a 6b 30 3a 6e 30 3a 73 30 3a 70 30 31 3a 63 31 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 2d 31 5a 3f 22 00 00 00 ec 00 1c 43 4f 70 49 5a 04 00 00 01 aa 70 75 2e 6d 63 62 69 73 74 3a 6b 30 3a 6e 30 3a 73 30 3a 70 30 31 3a 63 31 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 2d 31 5e f1 86 00 00 00 ec 00 08 43 4f 25 60 10 27 00 00 00 90 00 00 00 00 00 00 00 01 00 00 00 24 55 44 01 84 01 15 31 00 01 28 00 42 46 41 50 49 5f 49 00 00 00 00 00 00 00 00 00 00 00 00 01 7c 00 00 00 00 00 00 01 7c 00 00 00 07 00 00 00 00 00 00 00 2a 28 d2 a3 a1 00 00 00 d1 00 20 43 4f 79 5d 7d 7b 00 00 03 2c 00 00 00 00 00 00 00 31 00 00 00 00 00 00 00 e4 00 00 00 00 00 00 00 1c 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 2a 28 d5 10 bf 00 00 00 d1 00 20 43 4f 79 5d 7d 7b 00 00 03 2c 00 00 00 00 00 00 00 32 00 00 00 00 00 00 00 e4 00 00 00 00 00 00 00 1c 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 2a 28 d7 6d 59 00 00 00 d1 00 20 43 4f 79 5d 7d 7b 00 00 03 2c 00 00 00 00 00 00 00 34 00 00 00 00 00 00 00 e4 00 00 00 00 00 00 00 1c 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 2a 28 d9 c9 94 00 00 00 d1 00 20 43 4f 79 5d 7d 7b 00 00 03 2c 00 00 00 00 00 00 00 35 00 00 00 00 00 00 00 e4 00 00 00 00 00 00 00 1c 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 2d 31 5e ff 42 00 00 00 ec 00 00 43 4f 0b b1 67 60 00 00 0b b3 00 00 00 1c 00 00 00 2d 31 5f 0b 4c 00 00 00 ec 00 08 43 4f f6 cf 06 d1 00 00 00 78 00 00 00 00 00 33 e2 1a 00 00 00 24 00 00 00 2d 31 5f 57 26 00 00 00 ec 00 08 43 4f e3 80 24 18 00 00 03 48 00 00 00 00 00 33 e2 1a 00 00 00 24 55 44 00 30 01 15 31 00 01 28 00 42 53 43 41 4e 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 00 55 44 00 30 01 15 31 00 01 28 00 42 46 41 50 49 5f 44 42 47 00 00 00 00 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 00"
      ], 
      "Id": 4, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1492710295162, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/5": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 05 78 20 02 40 00 00 00 05 93 10 b7 62 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 14 90 00 00 15 55 48 00 18 01 00 05 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 03 00 48 00 00 00 e0 00 00 01 00 00 00 00 00 00 20 00 00 90 00 00 14 00 00 09 0f 00 00 00 01 00 00 0d 09 42 43 38 41 31 37 30 33 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 63 2e 73 6f 00 00 00 00 55 44 00 10 01 03 09 00 90 00 00 14 00 00 09 0f 55 44 00 3c 01 01 01 00 6d 73 73 5f 64 64 72 5f 70 68 79 5f 72 65 73 65 74 00 6c 69 62 69 73 74 65 70 64 69 73 70 2e 73 6f 00 6c 69 62 65 78 74 69 6e 69 74 73 76 63 2e 73 6f 00 00 55 44 00 30 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 16 17 b0 00 00 00 00 40 0e d2 90 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00"
      ], 
      "Id": 5, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1492710296143, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170501 18:38:27.359">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170501 18:38:27.359">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/logging/entry/1": {
            "AdditionalData": [
                "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00...</msg>
<status starttime="20170501 18:38:27.358" endtime="20170501 18:38:27.359" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170501 18:38:27.361">Appended to file '&lt;a href="file:///tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_elog.txt"&gt;/tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/20170501183805460056_BMC_elog.txt&lt;/a&gt;'.</msg>
<status starttime="20170501 18:38:27.360" endtime="20170501 18:38:27.361" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:27.360" endtime="20170501 18:38:27.361" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:26.981" endtime="20170501 18:38:27.361" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:24.160" endtime="20170501 18:38:27.361" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:24.159" endtime="20170501 18:38:27.361" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:24.159" endtime="20170501 18:38:27.361" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:24.159" endtime="20170501 18:38:27.361" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:22.496" endtime="20170501 18:38:27.362" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:22.469" endtime="20170501 18:38:27.362" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:22.465" endtime="20170501 18:38:27.362" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:22.464" endtime="20170501 18:38:27.362" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:07.288" endtime="20170501 18:38:27.362" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:07.285" endtime="20170501 18:38:27.362" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:07.285" endtime="20170501 18:38:27.362" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:07.285" endtime="20170501 18:38:27.362" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Close All Connections">
<doc>Closes all open connections.</doc>
<status starttime="20170501 18:38:27.362" endtime="20170501 18:38:27.493" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:07.284" endtime="20170501 18:38:27.493" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:02.253" endtime="20170501 18:38:27.494" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:02.253" endtime="20170501 18:38:27.494" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<kw library="state_manager" name="Recover Quiesced Host">
<doc>Recover host from quisced state.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is Host Quiesced</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="state_manager" name="Is Host Quiesced">
<doc>Check if host state is quiesced.</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:27.500">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170501 18:38:27.500" endtime="20170501 18:38:27.501" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:27.502">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170501 18:38:27.501" endtime="20170501 18:38:27.502" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:27.503">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170501 18:38:27.502" endtime="20170501 18:38:27.503" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:27.504">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170501 18:38:27.503" endtime="20170501 18:38:27.504" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:27.945">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170501 18:38:27.505" endtime="20170501 18:38:27.945" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:38:27.945">${status} = PASS</msg>
<msg level="INFO" timestamp="20170501 18:38:27.945">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:38:27.504" endtime="20170501 18:38:27.945" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:27.946">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:38:27.946" endtime="20170501 18:38:27.946" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:27.947">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:38:27.947" endtime="20170501 18:38:27.947" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:27.499" endtime="20170501 18:38:27.947" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:27.498" endtime="20170501 18:38:27.947" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:27.498" endtime="20170501 18:38:27.947" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:27.948">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170501 18:38:27.948" endtime="20170501 18:38:27.948" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:27.950">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170501 18:38:27.949" endtime="20170501 18:38:27.950" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:27.951">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170501 18:38:27.951" endtime="20170501 18:38:27.951" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:27.950" endtime="20170501 18:38:27.951" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:27.949" endtime="20170501 18:38:27.951" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:27.948" endtime="20170501 18:38:27.952" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:28.015">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170501 18:38:28.015">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:38:27.952" endtime="20170501 18:38:28.016" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:28.017">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:38:28.017" endtime="20170501 18:38:28.017" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:28.018">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:38:28.018" endtime="20170501 18:38:28.018" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:28.017" endtime="20170501 18:38:28.018" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:28.016" endtime="20170501 18:38:28.019" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:28.016" endtime="20170501 18:38:28.019" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:38:28.019">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:38:27.497" endtime="20170501 18:38:28.019" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:28.019">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:38:28.019" endtime="20170501 18:38:28.020" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:28.020">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170501 18:38:28.020">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170501 18:38:28.020">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170501 18:38:28.020" endtime="20170501 18:38:28.020" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:38:28.021">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170501 18:38:27.496" endtime="20170501 18:38:28.021" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:38:28.021">${host_state} = Quiesced</msg>
<status starttime="20170501 18:38:27.496" endtime="20170501 18:38:28.021" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<status starttime="20170501 18:38:28.022" endtime="20170501 18:38:28.022" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:38:28.022">${status} = True</msg>
<status starttime="20170501 18:38:28.021" endtime="20170501 18:38:28.022" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:27.496" endtime="20170501 18:38:28.022" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:38:28.022">${resp} = True</msg>
<status starttime="20170501 18:38:27.495" endtime="20170501 18:38:28.022" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${resp}' == 'True'</arg>
<arg>Run Keywords</arg>
<arg>Initiate Host PowerOff</arg>
<arg>AND</arg>
<arg>Log</arg>
<arg>HOST is recovered from quiesced state</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Initiate Host PowerOff</arg>
<arg>AND</arg>
<arg>Log</arg>
<arg>HOST is recovered from quiesced state</arg>
</arguments>
<kw library="state_manager" name="Initiate Host PowerOff">
<doc>Initiate host power off.</doc>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:28.024">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status starttime="20170501 18:38:28.024" endtime="20170501 18:38:28.024" status="PASS"></status>
</kw>
<kw library="rest_client" name="Write Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:28.025">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status starttime="20170501 18:38:28.025" endtime="20170501 18:38:28.026" status="PASS"></status>
</kw>
<kw library="rest_client" name="OpenBMC Put Request">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:28.029">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170501 18:38:28.028" endtime="20170501 18:38:28.029" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:28.030">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170501 18:38:28.029" endtime="20170501 18:38:28.030" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:28.030">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170501 18:38:28.030" endtime="20170501 18:38:28.030" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:28.031">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170501 18:38:28.030" endtime="20170501 18:38:28.031" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:28.209">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170501 18:38:28.031" endtime="20170501 18:38:28.209" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:38:28.209">${status} = PASS</msg>
<msg level="INFO" timestamp="20170501 18:38:28.210">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:38:28.031" endtime="20170501 18:38:28.210" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:28.210">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:38:28.210" endtime="20170501 18:38:28.210" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:28.211">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:38:28.211" endtime="20170501 18:38:28.211" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:28.028" endtime="20170501 18:38:28.211" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:28.027" endtime="20170501 18:38:28.211" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:28.026" endtime="20170501 18:38:28.211" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:28.212">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status starttime="20170501 18:38:28.212" endtime="20170501 18:38:28.212" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:28.213">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170501 18:38:28.212" endtime="20170501 18:38:28.213" status="PASS"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20170501 18:38:28.213" endtime="20170501 18:38:28.213" status="PASS"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:28.215">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Conten...</msg>
<status starttime="20170501 18:38:28.214" endtime="20170501 18:38:28.215" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:28.216">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20170501 18:38:28.215" endtime="20170501 18:38:28.216" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:28.215" endtime="20170501 18:38:28.216" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:28.213" endtime="20170501 18:38:28.216" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Put Request">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:28.398">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20170501 18:38:28.398">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:38:28.216" endtime="20170501 18:38:28.398" status="PASS"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:28.399">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:38:28.399" endtime="20170501 18:38:28.400" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:28.401">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:38:28.401" endtime="20170501 18:38:28.401" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:28.400" endtime="20170501 18:38:28.401" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:28.398" endtime="20170501 18:38:28.401" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:38:28.401">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:38:28.026" endtime="20170501 18:38:28.401" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:28.402">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:38:28.402" endtime="20170501 18:38:28.402" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:28.403">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170501 18:38:28.403">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170501 18:38:28.403">${json} = {u'data': None, u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170501 18:38:28.402" endtime="20170501 18:38:28.403" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:28.024" endtime="20170501 18:38:28.403" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status starttime="20170501 18:38:28.403" endtime="20170501 18:38:28.404" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>3 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:28.409">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170501 18:38:28.408" endtime="20170501 18:38:28.409" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:28.410">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170501 18:38:28.410" endtime="20170501 18:38:28.410" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:28.411">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170501 18:38:28.410" endtime="20170501 18:38:28.411" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:28.411">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170501 18:38:28.411" endtime="20170501 18:38:28.411" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:29.404">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170501 18:38:28.412" endtime="20170501 18:38:29.404" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:38:29.404">${status} = PASS</msg>
<msg level="INFO" timestamp="20170501 18:38:29.404">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:38:28.412" endtime="20170501 18:38:29.404" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:29.405">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:38:29.404" endtime="20170501 18:38:29.405" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:29.405">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:38:29.405" endtime="20170501 18:38:29.406" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:28.408" endtime="20170501 18:38:29.406" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:28.407" endtime="20170501 18:38:29.406" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:28.406" endtime="20170501 18:38:29.406" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:29.407">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170501 18:38:29.406" endtime="20170501 18:38:29.407" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:29.409">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170501 18:38:29.408" endtime="20170501 18:38:29.409" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:29.410">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170501 18:38:29.410" endtime="20170501 18:38:29.410" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:29.409" endtime="20170501 18:38:29.411" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:29.407" endtime="20170501 18:38:29.411" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:29.407" endtime="20170501 18:38:29.411" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:30.370">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170501 18:38:30.370">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:38:29.411" endtime="20170501 18:38:30.370" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:30.372">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:38:30.371" endtime="20170501 18:38:30.372" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:30.373">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:38:30.373" endtime="20170501 18:38:30.373" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:30.372" endtime="20170501 18:38:30.373" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:30.371" endtime="20170501 18:38:30.373" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:30.370" endtime="20170501 18:38:30.373" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:38:30.374">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:38:28.405" endtime="20170501 18:38:30.374" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:30.374">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:38:30.374" endtime="20170501 18:38:30.374" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:30.375">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170501 18:38:30.375">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170501 18:38:30.375">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170501 18:38:30.375" endtime="20170501 18:38:30.375" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:38:30.375">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170501 18:38:28.405" endtime="20170501 18:38:30.375" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:38:30.376">${host_state} = Quiesced</msg>
<status starttime="20170501 18:38:28.405" endtime="20170501 18:38:30.376" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170501 18:38:30.376">Off != Quiesced</msg>
<status starttime="20170501 18:38:30.376" endtime="20170501 18:38:30.376" status="FAIL"></status>
</kw>
<status starttime="20170501 18:38:28.404" endtime="20170501 18:38:30.377" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:40.382">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170501 18:38:40.381" endtime="20170501 18:38:40.382" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:40.383">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170501 18:38:40.382" endtime="20170501 18:38:40.383" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:40.383">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170501 18:38:40.383" endtime="20170501 18:38:40.384" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:40.384">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170501 18:38:40.384" endtime="20170501 18:38:40.384" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:41.503">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170501 18:38:40.385" endtime="20170501 18:38:41.503" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:38:41.503">${status} = PASS</msg>
<msg level="INFO" timestamp="20170501 18:38:41.504">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:38:40.384" endtime="20170501 18:38:41.504" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:41.504">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:38:41.504" endtime="20170501 18:38:41.504" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:41.505">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:38:41.505" endtime="20170501 18:38:41.505" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:40.380" endtime="20170501 18:38:41.505" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:40.380" endtime="20170501 18:38:41.505" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:40.379" endtime="20170501 18:38:41.505" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:41.506">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170501 18:38:41.506" endtime="20170501 18:38:41.506" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:41.508">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170501 18:38:41.507" endtime="20170501 18:38:41.508" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:41.510">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170501 18:38:41.509" endtime="20170501 18:38:41.510" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:41.508" endtime="20170501 18:38:41.510" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:41.507" endtime="20170501 18:38:41.510" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:41.506" endtime="20170501 18:38:41.510" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:42.137">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170501 18:38:42.138">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:38:41.510" endtime="20170501 18:38:42.138" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:42.139">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:38:42.139" endtime="20170501 18:38:42.139" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:42.141">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170501 18:38:42.140" endtime="20170501 18:38:42.141" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:42.140" endtime="20170501 18:38:42.141" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:42.138" endtime="20170501 18:38:42.141" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:42.138" endtime="20170501 18:38:42.141" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:38:42.141">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170501 18:38:40.379" endtime="20170501 18:38:42.141" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:42.142">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170501 18:38:42.142" endtime="20170501 18:38:42.142" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:42.143">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170501 18:38:42.143">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170501 18:38:42.143">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170501 18:38:42.142" endtime="20170501 18:38:42.143" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:38:42.143">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170501 18:38:40.378" endtime="20170501 18:38:42.143" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:38:42.143">${host_state} = Off</msg>
<status starttime="20170501 18:38:40.378" endtime="20170501 18:38:42.144" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170501 18:38:42.144" endtime="20170501 18:38:42.144" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:40.377" endtime="20170501 18:38:42.144" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:28.404" endtime="20170501 18:38:42.144" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:28.023" endtime="20170501 18:38:42.144" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>HOST is recovered from quiesced state</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:42.145">HOST is recovered from quiesced state</msg>
<status starttime="20170501 18:38:42.145" endtime="20170501 18:38:42.145" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:28.023" endtime="20170501 18:38:42.145" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:28.023" endtime="20170501 18:38:42.145" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:27.495" endtime="20170501 18:38:42.145" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:27.494" endtime="20170501 18:38:42.145" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:42.154">${FFDC_DIR_PATH_STYLE} = </msg>
<status starttime="20170501 18:38:42.146" endtime="20170501 18:38:42.154" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:42.154">${FFDC_DIR_PATH} = /tmp/root/27703/obmc-robot/logs/20170501183805460056_TestsTestBasicPoweron/20170501183805460056_PowerOnTest/</msg>
<status starttime="20170501 18:38:42.154" endtime="20170501 18:38:42.154" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status starttime="20170501 18:38:42.155" endtime="20170501 18:38:42.155" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status starttime="20170501 18:38:42.155" endtime="20170501 18:38:42.155" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170501 18:38:42.156">Directory '&lt;a href="file:///tmp/root/27703/obmc-robot/logs"&gt;/tmp/root/27703/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status starttime="20170501 18:38:42.156" endtime="20170501 18:38:42.156" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170501 18:38:42.157">File '&lt;a href="file:///tmp/root/27703/obmc-robot/logs/test_history.txt"&gt;/tmp/root/27703/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status starttime="20170501 18:38:42.157" endtime="20170501 18:38:42.157" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:38:42.157">${exist} = True</msg>
<status starttime="20170501 18:38:42.156" endtime="20170501 18:38:42.157" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status starttime="20170501 18:38:42.157" endtime="20170501 18:38:42.158" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rpvars">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status starttime="20170501 18:38:42.158" endtime="20170501 18:38:42.158" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:42.159">${cur_time} = 2017-05-01 18:38:42:159156</msg>
<status starttime="20170501 18:38:42.159" endtime="20170501 18:38:42.159" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:42.160">${cur_time} = 20170501183842159156</msg>
<status starttime="20170501 18:38:42.160" endtime="20170501 18:38:42.160" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:38:42.160">${cur_time} = 20170501183842159156</msg>
<status starttime="20170501 18:38:42.158" endtime="20170501 18:38:42.160" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170501 18:38:42.161">Appended to file '&lt;a href="file:///tmp/root/27703/obmc-robot/logs/test_history.txt"&gt;/tmp/root/27703/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20170501 18:38:42.160" endtime="20170501 18:38:42.161" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:42.145" endtime="20170501 18:38:42.161" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:01.983" endtime="20170501 18:38:42.161" status="PASS"></status>
</kw>
<kw library="utils" name="Stop SOL Console Logging">
<doc>Stop system console logging and return log output.</doc>
<assign>
<var>${sol_log}</var>
</assign>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:42.163">${default_file_path} = /tmp/9.41.166.169_os_console</msg>
<status starttime="20170501 18:38:42.163" endtime="20170501 18:38:42.163" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:42.164">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status starttime="20170501 18:38:42.163" endtime="20170501 18:38:42.164" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:38:42.164">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status starttime="20170501 18:38:42.162" endtime="20170501 18:38:42.164" status="PASS"></status>
</kw>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:42.165">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status starttime="20170501 18:38:42.164" endtime="20170501 18:38:42.165" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170501 18:38:42.165" endtime="20170501 18:38:42.172" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:42.176">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170501 18:38:42.179">${rc} = 0</msg>
<msg level="INFO" timestamp="20170501 18:38:42.180">${output} = /tmp/root/27703/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status starttime="20170501 18:38:42.172" endtime="20170501 18:38:42.180" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170501 18:38:42.182" endtime="20170501 18:38:42.192" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status starttime="20170501 18:38:42.192" endtime="20170501 18:38:42.193" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:42.193">${cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.41.166.169</msg>
<status starttime="20170501 18:38:42.193" endtime="20170501 18:38:42.193" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:38:42.194">${search_string} = ssh_pw 0penBmc -p 2200 root@9.41.166.169</msg>
<status starttime="20170501 18:38:42.164" endtime="20170501 18:38:42.194" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:42.194">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 root@9.41.166.169' | egrep -v grep | cut -c10-14)</msg>
<status starttime="20170501 18:38:42.194" endtime="20170501 18:38:42.194" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170501 18:38:42.195" endtime="20170501 18:38:42.206" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:42.210">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 root@9.41.166.169' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170501 18:38:42.219">${rc} = 0</msg>
<msg level="INFO" timestamp="20170501 18:38:42.219">${os_con_pid} = 172</msg>
<status starttime="20170501 18:38:42.206" endtime="20170501 18:38:42.220" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status starttime="20170501 18:38:42.222" endtime="20170501 18:38:42.237" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:42.238">${cmd_buf} = kill -9 172</msg>
<status starttime="20170501 18:38:42.237" endtime="20170501 18:38:42.238" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170501 18:38:42.239" endtime="20170501 18:38:42.246" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:42.238" endtime="20170501 18:38:42.246" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:42.250">Running command 'kill -9 172 2&gt;&amp;1'.</msg>
<status starttime="20170501 18:38:42.247" endtime="20170501 18:38:42.254" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:38:42.255">${rc} = 0</msg>
<msg level="INFO" timestamp="20170501 18:38:42.256">${output} = </msg>
<status starttime="20170501 18:38:42.246" endtime="20170501 18:38:42.256" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170501 18:38:42.260" endtime="20170501 18:38:42.268" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:42.258" endtime="20170501 18:38:42.268" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>cat ${log_file_path} 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:42.269">${cmd_buf} = cat /tmp/9.41.166.169_os_console 2&gt;&amp;1</msg>
<status starttime="20170501 18:38:42.269" endtime="20170501 18:38:42.269" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170501 18:38:42.269" endtime="20170501 18:38:42.276" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170501 18:38:42.281">Running command 'cat /tmp/9.41.166.169_os_console 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170501 18:38:42.286">${rc} = 0</msg>
<msg level="INFO" timestamp="20170501 18:38:42.286">${output} = spawn ssh -p 2200 root@9.41.166.169
The authenticity of host '[9.41.166.169]:2200 ([9.41.166.169]:2200)' can't be established.
RSA key fingerprint is SHA256:e7Qu5V+LK+aPKCU4tW+3WcuQhuy8UIg90KdZdUk+XK0...</msg>
<status starttime="20170501 18:38:42.277" endtime="20170501 18:38:42.286" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
</arguments>
<status starttime="20170501 18:38:42.288" endtime="20170501 18:38:42.297" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<status starttime="20170501 18:38:42.297" endtime="20170501 18:38:42.298" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170501 18:38:42.298">${sol_log} = spawn ssh -p 2200 root@9.41.166.169
The authenticity of host '[9.41.166.169]:2200 ([9.41.166.169]:2200)' can't be established.
RSA key fingerprint is SHA256:e7Qu5V+LK+aPKCU4tW+3WcuQhuy8UIg90KdZdUk+XK0...</msg>
<status starttime="20170501 18:38:42.162" endtime="20170501 18:38:42.298" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${sol_log}</arg>
</arguments>
<msg level="INFO" timestamp="20170501 18:38:42.299">spawn ssh -p 2200 root@9.41.166.169
The authenticity of host '[9.41.166.169]:2200 ([9.41.166.169]:2200)' can't be established.
RSA key fingerprint is SHA256:e7Qu5V+LK+aPKCU4tW+3WcuQhuy8UIg90KdZdUk+XK0.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added '[9.41.166.169]:2200' (RSA) to the list of known hosts.
root@9.41.166.169's password: 


--== Welcome to Hostboot hostboot-3a3d65e/hbicore.bin ==--

  4.37950|secure|SecureROM invalid - skipping functionality
 12.05276|ISTEP  6. 5
 12.73827|ISTEP  6. 6
 12.73878|ISTEP  6. 7
 13.50599|HWAS|PRESENT&gt; DIMM[03]=FFFF000000000000
 13.50600|HWAS|PRESENT&gt; Proc[05]=C000000000000000
 13.81128|ISTEP  6. 8
 13.86334|SECURE|Security Access Bit&gt; 0x0000000000000000
 13.86335|SECURE|Secure Mode Disable (via Jumper)&gt; 0xC000000000000000
 13.86352|ISTEP  6. 9
 14.49886|ISTEP  6.10
 14.54974|ISTEP  6.11
 14.55079|ISTEP  6.12
 14.80571|ISTEP  7. 2
 16.82575|ISTEP  7. 3
 17.47111|ISTEP  7. 4
 20.28965|ISTEP  7. 5
 20.36860|ISTEP  8. 1
 20.79752|ISTEP  8. 2
 20.85036|ISTEP  8. 3
 20.92834|ISTEP  8. 4
 31.31013|ISTEP  8. 5
 31.33566|ISTEP  8. 6
 31.33861|ISTEP  8. 7
 31.52597|ISTEP  8. 8
 31.57645|ISTEP  8. 9
 31.70445|ISTEP  8.10
 31.70613|ISTEP  8.11
 31.70668|ISTEP  8.12
 32.18329|ISTEP  8.13
 35.88993|ISTEP  8.14
 35.89201|ISTEP  8.15
 35.89431|ISTEP  8.16
 36.15718|ISTEP  8.17
 36.45210|================================================
 36.45211|Error reported by istep (0x1700) PLID 0x90000011
 36.47734|  No valid PCIE IOP configuration found.  All PHBs on this PEC will be disabled.
 36.47734|  ModuleId   0x0a MOD_COMPUTE_PCIE_CONFIG_ATTRS
 36.47735|  ReasonCode 0x170e RC_INVALID_CONFIGURATION
 36.47736|  UserData1  Target processor chip's HUID : 0x00050001002d0004
 36.47737|  UserData2  Target PEC HUID : 0x0000000000000000
 36.50266|------------------------------------------------
 36.50267|  Callout type             : Procedure Callout
 36.50268|  Procedure                : EPUB_PRC_HB_CODE
 36.50268|  Priority                 : SRCI_PRIORITY_HIGH
 36.50269|------------------------------------------------
 36.50270|  Hostboot Build ID: hostboot-3a3d65e/hbicore.bin
 36.50271|================================================
 37.50636|ISTEP  8.18
 37.50789|ISTEP  8.19
 37.52274|ISTEP  8.20
 37.53140|ISTEP  9. 1
 37.65734|ISTEP  9. 2
 38.77207|ISTEP  9. 3
 38.79801|ISTEP  9. 4
 39.13955|ISTEP  9. 5
 39.16587|ISTEP  9. 6
 39.21860|ISTEP  9. 7
 39.30794|ISTEP  9. 8
 39.33881|ISTEP 10. 1
 39.91627|ISTEP 10. 2
 40.01570|================================================
 40.01571|Error reported by i2c (0x0700) PLID 0x90000012
 40.04184|  Timed out waiting for command complete.
 40.04184|  ModuleId   0x05 I2C_WAIT_FOR_CMD_COMP
 40.04185|  ReasonCode 0x0705 I2C_CMD_COMP_TIMEOUT
 40.06822|  UserData1  Status Register Value : 0x0001000000050001
 40.06823|  UserData2  Master Target : 0x0200ffff0190004d
 40.06824|------------------------------------------------
 40.06825|  Callout type             : Hardware Callout
 40.06825|  CPU id                   : 4
 40.06827|  Target                   : Physical:/Sys0/Node0/Proc1
 40.06828|  Deconfig State           : NO_DECONFIG
 40.06828|  GARD Error Type          : GARD_NULL
 40.06829|  Priority                 : SRCI_PRIORITY_HIGH
 40.06830|------------------------------------------------
 40.06831|  Callout type             : Procedure Callout
 40.06831|  Procedure                : EPUB_PRC_HB_CODE
 40.06832|  Priority                 : SRCI_PRIORITY_LOW
 40.06833|------------------------------------------------
 40.06834|  Hostboot Build ID: hostboot-3a3d65e/hbicore.bin
 40.06835|================================================
 42.72062|ISTEP 10. 3
 42.72316|ISTEP 11. 1
 42.75027|ISTEP 12. 1
 42.80234|ISTEP 13. 1
 42.95780|ISTEP 13. 2
 43.06385|ISTEP 13. 3
 43.13817|ISTEP 13. 4
 43.16224|ISTEP 13. 6
 43.37760|ISTEP 13. 7
 43.37901|ISTEP 13. 8
 45.27408|ISTEP 13. 9
 45.90492|================================================
 45.90492|Error reported by hwpf (0x0900) PLID 0x90000013
 45.93053|  HW Procedure generated error. See User Data.
 45.93053|  ModuleId   0x01 MOD_FAPI2_RC_TO_ERRL
 45.93054|  ReasonCode 0x090f RC_HWP_GENERATED_ERROR
 45.93055|  UserData1  RC value from HWP : 0x000000000033e21a
 45.93056|  UserData2  &lt;unused&gt; : 0x0000000000000000
 45.93057|------------------------------------------------
 45.98213|  HwpReturnCode              : RC_MSS_DDR_PHY_RESET_PORT_FIR
 45.98215|  HWP Error description      : The port noted has set an error bit during PHY reset
 45.98216|------------------------------------------------
 46.03327|  HwpReturnCode              : RC_MSS_DDR_PHY_RESET_PORT_FIR
 46.05873|  FFDC                       : CAL_FIR
 46.11024|    00000000 00000000 
 46.11025|------------------------------------------------
 46.21208|  HwpReturnCode              : RC_MSS_DDR_PHY_RESET_PORT_FIR
 46.21209|  FFDC                       : PHY_FIR
 46.21210|    00000000 000000A0 
 46.21211|------------------------------------------------
 46.21211|  Callout type             : Hardware Callout
 46.21212|  CPU id                   : 6
 46.21215|  Target                   : Physical:/Sys0/Node0/Proc1/MCBIST1/MCS0/MCA1
 46.21216|  Deconfig State           : DELAYED_DECONFIG
 46.21216|  GARD Error Type          : GARD_NULL
 46.21217|  Priority                 : SRCI_PRIORITY_HIGH
 46.21218|------------------------------------------------
 46.21220|  Hostboot Build ID: hostboot-3a3d65e/hbicore.bin
 46.21220|================================================
 46.46149|================================================
 46.46150|Error reported by hwpf (0x0900) PLID 0x90000014
 46.46151|  HW Procedure generated error. See User Data.
 46.46152|  ModuleId   0x01 MOD_FAPI2_RC_TO_ERRL
 46.46153|  ReasonCode 0x090f RC_HWP_GENERATED_ERROR
 46.46153|  UserData1  RC value from HWP : 0x000000000059a8ca
 46.46154|  UserData2  &lt;unused&gt; : 0x0000000000000000
 46.46155|------------------------------------------------
 46.48771|  HwpReturnCode              : RC_MSS_DDR_PHY_RESET_PORT_FIRS_REPORTED
 46.48773|  HWP Error description      : One or more ports noted a set error bit during PHY reset
 46.48774|------------------------------------------------
 46.48774|  Callout type             : Hardware Callout
 46.48775|  CPU id                   : 7
 46.48777|  Target                   : Physical:/Sys0/Node0/Proc1/MCBIST1
 46.48778|  Deconfig State           : NO_DECONFIG
 46.48779|  GARD Error Type          : GARD_NULL
 46.48780|  Priority                 : SRCI_PRIORITY_HIGH
 46.48780|------------------------------------------------
 46.48781|  Hostboot Build ID: hostboot-3a3d65e/hbicore.bin
 46.48782|================================================
 46.76206|System shutting down with error status 0x90000014
 46.76210|================================================
 46.76211|Error reported by istep (0x1700) PLID 0x90000014
 46.78793|  IStep failed, see other log(s) with the same PLID for reason.
 46.78794|  ModuleId   0x01 MOD_REPORTING_ERROR
 46.78794|  ReasonCode 0x1703 RC_FAILURE
 46.78795|  UserData1  eid of first error : 0x900000140000090f
 46.78796|  UserData2  Reason code of first error : 0x0000000100000d09
 46.78797|------------------------------------------------
 46.78797|  mss_ddr_phy_reset
 46.78798|------------------------------------------------
 46.78799|  Callout type             : Procedure Callout
 46.78799|  Procedure                : EPUB_PRC_HB_CODE
 46.78800|  Priority                 : SRCI_PRIORITY_LOW
 46.78801|------------------------------------------------
 46.78802|  Hostboot Build ID: hostboot-3a3d65e/hbicore.bin
 46.78803|================================================</msg>
<status starttime="20170501 18:38:42.299" endtime="20170501 18:38:42.299" status="PASS"></status>
</kw>
<status starttime="20170501 18:38:01.982" endtime="20170501 18:38:42.299" status="PASS"></status>
</kw>
<doc>Power off and on.</doc>
<tags>
<tag>chassisboot</tag>
<tag>Power_On_Test</tag>
</tags>
<status starttime="20170501 18:27:38.537" endtime="20170501 18:38:42.300" critical="yes" status="FAIL">Keyword 'Is OS Starting' failed after retrying for 10 minutes. The last error was: FW Progress, Baseboard Init != FW Progress, Starting OS</status>
</test>
<doc>Test power on for HW CI.</doc>
<status starttime="20170501 18:27:38.507" endtime="20170501 18:38:42.301" status="FAIL"></status>
</suite>
<doc>Set metadata for test suite.</doc>
<status starttime="20170501 18:27:31.782" endtime="20170501 18:38:42.304" status="FAIL"></status>
</suite>
<statistics>
<total>
<stat pass="1" fail="1">Critical Tests</stat>
<stat pass="1" fail="1">All Tests</stat>
</total>
<tag>
<stat pass="0" fail="1">chassisboot</stat>
<stat pass="0" fail="1">Power_On_Test</stat>
<stat pass="1" fail="0">Test_SSL_Connection</stat>
</tag>
<suite>
<stat pass="1" id="s1" name="Tests" fail="1">Tests</stat>
<stat pass="1" id="s1-s1" name="Security" fail="0">Tests.Security</stat>
<stat pass="1" id="s1-s1-s1" name="Test Ssl" fail="0">Tests.Security.Test Ssl</stat>
<stat pass="0" id="s1-s2" name="Test Basic Poweron" fail="1">Tests.Test Basic Poweron</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
